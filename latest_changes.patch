commit 4086f6bf13dba0bc415f8349fcc269e60bdabc7d
Author: sih <ladokihosaha@gmail.com>
Date:   Thu Jul 17 02:06:06 2025 +0100

    Stable version.

diff --git a/.gitignore b/.gitignore
index ba67199..8a4ee78 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,6 +9,7 @@
 !.yarn/plugins
 !.yarn/releases
 !.yarn/versions
+out/
 
 # testing
 /coverage
diff --git a/components/organization/business-domains/business-domain-card.tsx b/components/organization/business-domains/business-domain-card.tsx
new file mode 100644
index 0000000..75c2bc3
--- /dev/null
+++ b/components/organization/business-domains/business-domain-card.tsx
@@ -0,0 +1,47 @@
+"use client";
+
+import React from "react";
+import { BusinessDomainDto } from "@/types/organization";
+import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { Button } from "@/components/ui/button";
+import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
+import { MoreHorizontal, Edit3, Trash2, Tag } from "lucide-react";
+
+interface BusinessDomainCardProps {
+  domain: BusinessDomainDto;
+  onEditAction: (domain: BusinessDomainDto) => void;
+  onDeleteAction: (domain: BusinessDomainDto) => void;
+}
+
+export function BusinessDomainCard({ domain, onEditAction, onDeleteAction }: BusinessDomainCardProps) {
+  return (
+    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
+      <CardHeader className="flex-row items-start justify-between gap-4">
+        <div className="flex items-center gap-3">
+          <Avatar className="h-12 w-12 border rounded-md">
+            <AvatarImage src={domain.image} alt={domain.name} />
+            <AvatarFallback className="rounded-md"><Tag className="h-6 w-6 text-muted-foreground" /></AvatarFallback>
+          </Avatar>
+          <div>
+            <CardTitle className="text-base font-semibold line-clamp-1">{domain.name}</CardTitle>
+            <p className="text-xs text-muted-foreground">{domain.type_label}</p>
+          </div>
+        </div>
+        <DropdownMenu>
+          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
+          <DropdownMenuContent align="end">
+            <DropdownMenuItem onClick={() => onEditAction(domain)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
+            <DropdownMenuItem onClick={() => onDeleteAction(domain)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
+          </DropdownMenuContent>
+        </DropdownMenu>
+      </CardHeader>
+      <CardContent className="flex-grow text-sm text-muted-foreground">
+        <p className="line-clamp-2">{domain.description || "No description provided."}</p>
+      </CardContent>
+      <CardFooter>
+        <Button variant="outline" className="w-full" onClick={() => onEditAction(domain)}>View Details</Button>
+      </CardFooter>
+    </Card>
+  );
+}
\ No newline at end of file
diff --git a/components/organization/business-domains/business-domain-form.tsx b/components/organization/business-domains/business-domain-form.tsx
new file mode 100644
index 0000000..d63fd24
--- /dev/null
+++ b/components/organization/business-domains/business-domain-form.tsx
@@ -0,0 +1,71 @@
+"use client";
+
+import React, { useState } from "react";
+import { useForm } from "react-hook-form";
+import { zodResolver } from "@hookform/resolvers/zod";
+import * as z from "zod";
+import { BusinessDomainDto } from "@/types/organization";
+import { FormWrapper } from "@/components/ui/form-wrapper";
+import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
+import { Input } from "@/components/ui/input";
+import { Textarea } from "@/components/ui/textarea";
+
+const formSchema = z.object({
+  name: z.string().min(3, "Domain name is required."),
+  type: z.string().min(2, "Type code is required (e.g., TECH)."),
+  type_label: z.string().min(3, "Type label is required (e.g., Technology)."),
+  description: z.string().optional(),
+  image: z.string().url("Must be a valid URL.").optional().or(z.literal("")),
+});
+
+export type BusinessDomainFormData = z.infer<typeof formSchema>;
+
+interface BusinessDomainFormProps {
+  initialData?: Partial<BusinessDomainDto>;
+  mode: "create" | "edit";
+  onSubmitAction: (data: BusinessDomainFormData) => Promise<boolean>;
+}
+
+export function BusinessDomainForm({ initialData, mode, onSubmitAction }: BusinessDomainFormProps) {
+  const [isLoading, setIsLoading] = useState(false);
+
+  const form = useForm<BusinessDomainFormData>({
+    resolver: zodResolver(formSchema),
+    defaultValues: {
+      name: initialData?.name || "",
+      type: initialData?.type || "",
+      type_label: initialData?.type_label || "",
+      description: initialData?.description || "",
+      image: initialData?.image || "",
+    },
+  });
+
+  const handleSubmit = async (data: BusinessDomainFormData) => {
+    setIsLoading(true);
+    const success = await onSubmitAction(data);
+    if (!success) setIsLoading(false);
+  };
+
+  return (
+    <FormWrapper
+      form={form}
+      onFormSubmit={handleSubmit}
+      isLoading={isLoading}
+      title={mode === 'create' ? "Create Business Domain" : "Edit Business Domain"}
+      description="Manage the categories that organizations can operate within."
+      submitButtonText={mode === 'create' ? "Create Domain" : "Save Changes"}
+    >
+      {() => (
+        <div className="space-y-4">
+          <FormField control={form.control} name="name" render={({ field }) => (<FormItem><FormLabel>Domain Name *</FormLabel><FormControl><Input placeholder="e.g., Technology & Software" {...field} /></FormControl><FormMessage /></FormItem>)} />
+          <div className="grid grid-cols-2 gap-4">
+            <FormField control={form.control} name="type" render={({ field }) => (<FormItem><FormLabel>Type Code *</FormLabel><FormControl><Input placeholder="e.g., TECH" {...field} /></FormControl><FormMessage /></FormItem>)} />
+            <FormField control={form.control} name="type_label" render={({ field }) => (<FormItem><FormLabel>Type Label *</FormLabel><FormControl><Input placeholder="e.g., Technology" {...field} /></FormControl><FormMessage /></FormItem>)} />
+          </div>
+          <FormField control={form.control} name="image" render={({ field }) => (<FormItem><FormLabel>Icon URL</FormLabel><FormControl><Input type="url" placeholder="https://example.com/icon.png" {...field} /></FormControl><FormMessage /></FormItem>)} />
+          <FormField control={form.control} name="description" render={({ field }) => (<FormItem><FormLabel>Description</FormLabel><FormControl><Textarea placeholder="Describe this business domain..." {...field} /></FormControl><FormMessage /></FormItem>)} />
+        </div>
+      )}
+    </FormWrapper>
+  );
+}
\ No newline at end of file
diff --git a/components/organization/business-domains/columns.tsx b/components/organization/business-domains/columns.tsx
new file mode 100644
index 0000000..60c58de
--- /dev/null
+++ b/components/organization/business-domains/columns.tsx
@@ -0,0 +1,78 @@
+"use client";
+
+import { ColumnDef } from "@tanstack/react-table";
+import { BusinessDomainDto } from "@/types/organization";
+import { Checkbox } from "@/components/ui/checkbox";
+import { Button } from "@/components/ui/button";
+import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
+import { MoreHorizontal, Edit3, Trash2, Tag } from "lucide-react";
+import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+
+interface RowActionsProps {
+  domain: BusinessDomainDto;
+  onEditAction: (domain: BusinessDomainDto) => void;
+  onDeleteAction: (domain: BusinessDomainDto) => void;
+}
+
+const RowActions: React.FC<RowActionsProps> = ({ domain, onEditAction, onDeleteAction }) => {
+  return (
+    <DropdownMenu>
+      <DropdownMenuTrigger asChild>
+        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
+          <span className="sr-only">Open menu</span>
+          <MoreHorizontal className="h-4 w-4" />
+        </Button>
+      </DropdownMenuTrigger>
+      <DropdownMenuContent align="end" className="w-[160px]">
+        <DropdownMenuItem onClick={() => onEditAction(domain)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
+        <DropdownMenuItem onClick={() => onDeleteAction(domain)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
+      </DropdownMenuContent>
+    </DropdownMenu>
+  );
+};
+
+export const getBusinessDomainColumns = (
+  actionHandlers: Omit<RowActionsProps, "domain">
+): ColumnDef<BusinessDomainDto>[] => [
+  {
+    id: "select",
+    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false} onCheckedChange={v => table.toggleAllPageRowsSelected(!!v)} aria-label="Select all" />
+,
+    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
+    enableSorting: false,
+    enableHiding: false,
+  },
+  {
+    accessorKey: "name",
+    header: ({ column }) => <DataTableColumnHeader column={column} title="Domain Name" />,
+    cell: ({ row }) => {
+      const domain = row.original;
+      return (
+        <div className="flex items-center gap-3">
+          <Avatar className="h-10 w-10 border rounded-md">
+            <AvatarImage src={domain.image} alt={domain.name} />
+            <AvatarFallback className="rounded-md"><Tag className="h-5 w-5 text-muted-foreground" /></AvatarFallback>
+          </Avatar>
+          <div>
+            <div className="font-medium">{domain.name}</div>
+            <div className="text-xs text-muted-foreground">{domain.type_label}</div>
+          </div>
+        </div>
+      );
+    },
+  },
+  {
+    accessorKey: "type",
+    header: ({ column }) => <DataTableColumnHeader column={column} title="Type Code" />,
+  },
+  {
+    accessorKey: "description",
+    header: ({ column }) => <DataTableColumnHeader column={column} title="Description" />,
+    cell: ({ row }) => <p className="text-sm text-muted-foreground truncate max-w-xs">{row.getValue("description")}</p>,
+  },
+  {
+    id: "actions",
+    cell: ({ row }) => <RowActions domain={row.original} {...actionHandlers} />,
+  },
+];
\ No newline at end of file
diff --git a/notes.txt b/notes.txt
deleted file mode 100644
index e69de29..0000000
diff --git a/project_context.txt b/project_context.txt
index 69247a2..83def27 100644
--- a/project_context.txt
+++ b/project_context.txt
@@ -1,10 +1,43 @@
 Project Context From: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template
-Generated On: Mon Jul 14 09:07:33 AM WAT 2025
+Generated On: Thu Jul 17 02:00:07 AM WAT 2025
 ===============================================
-Ignored Directory Patterns: .* node_modules vendor build dist target __pycache__ .next cache target venv svgs fontawesome scss fonts webfonts images bin storage gradle out public assets
-Ignored File Patterns: *.log *.jar *.pdf *.png *.jpg *.class *.sqlite project_context.txt package-lock.json yarn.lock *.json composer.lock *.ico *.jar pnpm-lock.yaml *.css *._css *.puml *.blade.php
+Ignored Directory Patterns: .* node_modules vendor build dist target __pycache__ .next cache target venv svgs fontawesome scss fonts webfonts images bin storage gradle out assets
+Ignored File Patterns: *.log *.jar *.pdf *.png *.jpg *.class *.sqlite project_context.txt package-lock.json yarn.lock *.json composer.lock *.ico *.jar pnpm-lock.yaml *._css *.puml *.blade.php
 ===============================================
 
+.env
+NEXTAUTH_SECRET=i7Cuf9Io7Y6p0gmI1l6FdUo/WDfrqKCFAq+iWhR2Jo=
+# .env.local
+NEXTAUTH_URL=http://localhost:3000
+NEXT_PUBLIC_URL=http://localhost:3000
+
+# Base URLs for REMOTE Yowyob APIs
+NEXT_PUBLIC_YOWYOB_AUTH_SERVICE_BASE_URL=https://gateway.yowyob.com/auth-service
+NEXT_PUBLIC_YOWYOB_ORGANIZATION_SERVICE_BASE_URL=https://gateway.yowyob.com/organization-service
+
+NEXT_PUBLIC_YOWYOB_RESOURCE_SERVICE_BASE_URL=https://gateway.yowyob.com/resource-service
+NEXT_PUBLIC_YOWYOB_PRODUCT_STATE_SERVICE_BASE_URL=https://gateway.yowyob.com/product-management-service
+NEXT_PUBLIC_YOWYOB_MEDIA_SERVICE_BASE_URL=https://gateway.yowyob.com/media-service
+
+# Client Credentials for Yowyob Auth Service (used by remote auth repository)
+# NEXT_PUBLIC_AUTH_SERVICE_BEARER_TOKEN="eyJkZXYucmV4aWppZS5zaWduaW5nLmtleSI6IjgwOTE3Y2VjMzI4MmIzN2MzMTNjN2YzOSIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2IiwianRpIjoiTVRjMU1UY3lOemN6TlRVMk1qb3lPRGd3TVRkallUUmgiLCJraWQiOiIzODdjOWEyOC0zODBlLTRmZWUtYTVjOC0wYTEwMzE2ZTAwNGYifQ.eyJzdWIiOiJ0ZXN0LWNsaWVudCIsImF1ZCI6InRlc3QtY2xpZW50IiwibmJmIjoxNzUxNzI3NzM1LCJhdXRoX3RpbWUiOjE3NTE3Mjc3MzUsImlzcyI6Imh0dHA6Ly9hdXRoLXNlcnZpY2U6ODA4MC9vcGVuaWQiLCJzY29wZXMiOlsid3JpdGUiLCJyZWFkIiwibWFuYWdlX2FwaSJdLCJleHAiOjE3NTE3Mjg2MzUsImlhdCI6MTc1MTcyNzczNSwianRpIjoiTVRjMU1UY3lOemN6TlRVMk1qb3lPRGd3TVRkallUUmgifQ.t1UiFj5AFn_DU-lKNHGe8GzXLNV58Qk3FQgDkj6aWMbB67CjVAAxYaWFsJlBoFrU5b_9MnfUN7ffLMdLzg2cDIHrJ-9WCA6RA0WSVoGX0Nd6DUgrAPHBdrhxf29lNgFr4HwsL0mqCpBDiDM_OcK92KAu7zkBnCoO9gDWJAuXxCUH7z20YPrKZKsEDRyA6Smv1Isl5fdluvt3rNq-oMv1_Wa2j_nag9qHtbc3QIX3J7-qMH08FPPZi-cEG1CjwXQbXERPI3JfRLfnS568dfEkaUtGHWI5tNYD2BNz4WmaRUyR7420rUvinOTPnO8xtlxwcwkOn7pSN10oiqo8xSti6w"
+
+NEXT_PUBLIC_YOWYOB_AUTH_CLIENT_ID="test-client"
+NEXT_PUBLIC_YOWYOB_AUTH_CLIENT_SECRET="secret"
+
+
+# Data Source Configuration
+# 'local' = fetch JSON from /data/* and operate in memory
+# 'remote' = use actual Yowyob APIs via apiClient.ts
+NEXT_PUBLIC_DATA_SOURCE=remote
+# NEXT_PUBLIC_DATA_SOURCE=remote
+
+NEXT_PUBLIC_API_BASE_URL=https://gateway.yowyob.com
+NEXT_PUBLIC_YOWYOB_APP_PUBLIC_KEY="api_1752399371114_be8f39f0.iExfpQc4nK9ZWcfX4TzXW9sz-_vx1mR_"
+
+
+
+
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/auth/[...nextauth]/route.ts
 
 import NextAuth, { NextAuthOptions } from "next-auth";
@@ -3308,67 +3341,113 @@ export async function PUT(_request: NextRequest, { params }: { params: Promise<{
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/proxy/[...slug]/route.ts
 
 /**
- * @file This file defines a generic server-side proxy API route.
+ * @file This file defines a generic, secure server-side proxy API route.
  * @module API_Proxy
  * @description This route is designed to bypass browser CORS (Cross-Origin Resource Sharing) restrictions
- * by acting as an intermediary between the client-side application and external APIs.
+ * by acting as an intermediary between the client-side application and a specific allowlist of external APIs.
  */
 
 import { NextResponse, NextRequest } from 'next/server';
 
+/**
+ * An allowlist of trusted API hosts that this proxy is permitted to contact.
+ * This is a critical security measure to prevent Server-Side Request Forgery (SSRF),
+ * where an attacker could otherwise use this proxy to make requests to internal
+ * network resources or other arbitrary external servers.
+ */
+const ALLOWED_HOSTS = [
+  process.env.NEXT_PUBLIC_YOWYOB_AUTH_SERVICE_BASE_URL,
+  process.env.NEXT_PUBLIC_YOWYOB_ORGANIZATION_SERVICE_BASE_URL,
+  process.env.NEXT_PUBLIC_YOWYOB_MEDIA_SERVICE_BASE_URL,
+].filter(Boolean); // Filter out any undefined/empty values
+
+/**
+ * A list of "hop-by-hop" headers that should not be forwarded from the remote server's
+ * response back to the client. These headers are specific to the connection between
+ * the proxy and the target server and are managed by the hosting platform (e.g., Vercel).
+ * Forwarding them can cause issues like incorrect content encoding or connection hangs.
+ */
+const HOP_BY_HOP_HEADERS = [
+  'connection',
+  'keep-alive',
+  'proxy-authenticate',
+  'proxy-authorization',
+  'te',
+  'trailers',
+  'transfer-encoding',
+  'upgrade',
+  'content-encoding', // Specifically managed by the environment
+  'content-length',   // Will be recalculated by the final response stream
+];
+
 /**
  * Handles all incoming HTTP requests (GET, POST, PUT, DELETE, etc.) intended for external APIs.
  *
  * ### Motivation
- * Modern web browsers enforce a security measure known as the Same-Origin Policy, which restricts
- * web pages from making requests to a different domain than the one that served the page. For this application
- * to communicate with the remote YOWYOB APIs from the client-side, the YOWYOB servers would need to explicitly
- * permit this via CORS headers. As this external configuration cannot be guaranteed, this proxy provides a robust solution.
- * It functions by receiving a request from the client, forwarding it from the server environment (which is not subject to CORS),
- * and then streaming the external API's response back to the client.
+ * Modern web browsers enforce the Same-Origin Policy, restricting web pages from making requests
+ * to a different domain than the one that served the page. This proxy provides a robust solution by
+ * receiving a request from the client, forwarding it from the server environment (which is not subject
+ * to browser CORS), and then streaming the external API's response back to the client.
+ *
+ * ### Security
+ * The proxy is secured via an allowlist of `ALLOWED_HOSTS`. Any request to an unlisted
+ * `X-Target-URL` will be rejected with a 403 Forbidden status, preventing misuse of the proxy.
  *
  * ### Parameters & Usage
- * It is expected that any client-side request to this proxy includes a specific HTTP header:
- * - `X-Target-URL`: This header **must** contain the full, absolute URL of the intended external API endpoint.
+ * The client-side request to this proxy **must** include the following HTTP header:
+ * - `X-Target-URL`: The full, absolute URL of the intended external API endpoint.
  *
- * The proxy transparently forwards the `Authorization` and `Content-Type` headers from the original
- * request, ensuring authentication and data formats are correctly handled.
+ * The proxy transparently forwards all other relevant headers from the original request.
  *
  * ### Operational Flow
- * 1.  The handler receives a request from the client to `/api/proxy/...`.
- * 2.  It extracts the destination from the `X-Target-URL` header. A 400 error is returned if this header is missing.
- * 3.  It constructs a new `fetch` request, copying the method, body, and essential headers.
- * 4.  The `duplex: 'half'` option is critically supplied to the `fetch` call to support streaming request bodies,
- *     a requirement in modern server runtimes like the one used by Next.js.
- * 5.  Upon receiving a response from the target server, it streams the status, headers, and body back to the original client.
- *     It specifically removes headers like `content-encoding` that are managed by the hosting platform to prevent conflicts.
- * 6.  If the proxy fails to reach the target server, it returns a `502 Bad Gateway` error.
+ * 1.  The handler receives a request from the client (e.g., to `/api/proxy/request`).
+ * 2.  It extracts the destination URL from the `X-Target-URL` header.
+ * 3.  It validates the destination URL against the `ALLOWED_HOSTS` allowlist.
+ * 4.  It constructs a new `fetch` request, intelligently copying the method, body, and all relevant headers.
+ * 5.  The `duplex: 'half'` option is supplied to `fetch` to support streaming request bodies, a requirement
+ *     in modern server runtimes like the one used by Next.js/Vercel.
+ * 6.  Upon receiving a response from the target server, it streams the status, filtered headers, and body back.
+ * 7.  If any part of the process fails, it returns a relevant error (400, 403, or 502).
  *
  * @param {NextRequest} req - The incoming request object from the Next.js framework.
  * @returns {Promise<NextResponse>} A promise that resolves to a `NextResponse` object, either streaming the
- * proxied response or returning a specific error (400 for bad request, 502 for gateway error).
+ * proxied response or returning a specific error.
  */
 async function handler(req: NextRequest): Promise<NextResponse> {
   const targetUrl = req.headers.get('X-Target-URL');
 
+  // 1. Validate that the target URL header exists.
   if (!targetUrl) {
     return NextResponse.json(
-      { message: 'X-Target-URL header is missing.' },
+      { message: 'Request is missing the required "X-Target-URL" header.' },
       { status: 400 }
     );
   }
 
+  // 2. CRITICAL SECURITY CHECK: Validate that the target URL is on the allowlist.
+  if (!ALLOWED_HOSTS.some(host => targetUrl.startsWith(host!))) {
+    console.warn(`[API PROXY] Blocked request to non-allowed host: ${targetUrl}`);
+    return NextResponse.json(
+      { message: `Proxying to the host "${new URL(targetUrl).hostname}" is not permitted.` },
+      { status: 403 } // Forbidden
+    );
+  }
+
   try {
-    const headers = new Headers();
-    headers.set('Content-Type', req.headers.get('Content-Type') || 'application/json');
-    if (req.headers.has('Authorization')) {
-      headers.set('Authorization', req.headers.get('Authorization')!);
-    }
+    // 3. Intelligently forward headers from the original request.
+    // We exclude headers that are specific to the incoming connection, like 'host'.
+    const headersToForward = new Headers();
+    req.headers.forEach((value, key) => {
+      if (!['host', 'x-forwarded-for', 'x-forwarded-proto'].includes(key.toLowerCase())) {
+        headersToForward.set(key, value);
+      }
+    });
 
+    // 4. Make the proxied request to the target API.
     const remoteResponse = await fetch(targetUrl, {
       method: req.method,
-      headers: headers,
-      body: req.method !== 'GET' && req.method !== 'HEAD' ? req.body : null,
+      headers: headersToForward,
+      body: req.body, // The request body is streamed directly.
       redirect: 'follow',
       cache: 'no-store',
       // This option is required for streaming request bodies in modern fetch implementations.
@@ -3376,21 +3455,26 @@ async function handler(req: NextRequest): Promise<NextResponse> {
       duplex: 'half',
     });
 
-    // Reconstruct the response headers, filtering out those that can cause issues.
-    const responseHeaders = new Headers(remoteResponse.headers);
-    responseHeaders.delete('content-encoding');
-    responseHeaders.delete('content-length');
-
-    // Stream the remote response back to the client.
+    // 5. Reconstruct the response headers, filtering out hop-by-hop headers.
+    const responseHeaders = new Headers();
+    remoteResponse.headers.forEach((value, key) => {
+      if (!HOP_BY_HOP_HEADERS.includes(key.toLowerCase())) {
+        responseHeaders.set(key, value);
+      }
+    });
+    
+    // 6. Stream the remote response back to the original client.
     return new NextResponse(remoteResponse.body, {
       status: remoteResponse.status,
       statusText: remoteResponse.statusText,
       headers: responseHeaders,
     });
+
   } catch (error) {
-    console.error(`[API PROXY] Error fetching ${targetUrl}:`, error);
+    // 7. Handle network errors or failures to connect to the target server.
+    console.error(`[API PROXY] Error forwarding request to ${targetUrl}:`, error);
     return NextResponse.json(
-      { message: 'Proxy request failed', error: error.message },
+      { message: 'Proxy request failed to reach the target server.', error: (error as Error).message },
       { status: 502 } // Bad Gateway
     );
   }
@@ -10410,9 +10494,10 @@ export default function UnifiedSettingsPage() {
 
 "use client";
 
-import React, { useState, useMemo } from "react";
+import React, { useState, useMemo, useEffect, useCallback } from "react";
 import { ColumnDef } from "@tanstack/react-table";
 import { AgencyDto, OrganizationDto } from "@/types/organization";
+import { organizationRepository } from "@/lib/data-repo/organization";
 import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
 import { PageHeader } from "@/components/ui/page-header";
 import { getSuperAdminAgencyColumns } from "./columns";
@@ -10420,22 +10505,43 @@ import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filte
 import { FeedbackCard } from "@/components/ui/feedback-card";
 import { Building, Search } from "lucide-react";
 
-interface AgenciesClientProps {
-  allAgencies: AgencyDto[];
-  allOrganizations: OrganizationDto[];
-}
+export function AgenciesClient() {
+  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
+  const [organizations, setOrganizations] = useState<OrganizationDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+
+  const fetchData = useCallback(async () => {
+    setIsLoading(true);
+    setError(null);
+    try {
+      const orgs = await organizationRepository.getAllOrganizations();
+      setOrganizations(orgs);
+      
+      const agencyArrays = await Promise.all(
+        orgs.map((org) =>
+          organizationRepository.getAgencies(org.organization_id!)
+        )
+      );
+      setAgencies(agencyArrays.flat());
+    } catch (err: any) {
+      setError(err.message || "Failed to fetch data.");
+    } finally {
+      setIsLoading(false);
+    }
+  }, []);
+
+  useEffect(() => {
+    fetchData();
+  }, [fetchData]);
 
-export function AgenciesClient({
-  allAgencies,
-  allOrganizations,
-}: AgenciesClientProps) {
   const orgOptions = useMemo(
     () =>
-      allOrganizations.map((org) => ({
+      organizations.map((org) => ({
         label: org.long_name || org.organization_id!,
         value: org.organization_id!,
       })),
-    [allOrganizations]
+    [organizations]
   );
 
   const columns = useMemo<ColumnDef<AgencyDto>[]>(
@@ -10445,11 +10551,11 @@ export function AgenciesClient({
 
   return (
     <ResourceDataTable
-      data={allAgencies}
+      data={agencies}
       columns={columns}
-      isLoading={false}
-      error={null}
-      onRefreshAction={() => window.location.reload()}
+      isLoading={isLoading}
+      error={error}
+      onRefreshAction={fetchData}
       searchPlaceholder="Search by agency name or location..."
       onDeleteItemsAction={() => {}}
       viewModeStorageKey="sa-agencies-view-mode"
@@ -10469,7 +10575,7 @@ export function AgenciesClient({
       )}
       renderGridItemAction={(agency) => (
         <div className="p-4 border rounded-md">{agency.long_name}</div>
-      )} // Placeholder card
+      )}
       emptyState={
         <FeedbackCard
           icon={Building}
@@ -10575,7 +10681,6 @@ export const getSuperAdminAgencyColumns = (): ColumnDef<AgencyDto>[] => [
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/agencies/page.tsx
 
 import { Metadata } from "next";
-import { organizationRepository } from "@/lib/data-repo/organization";
 import { AgenciesClient } from "./agencies-client";
 
 export const metadata: Metadata = {
@@ -10583,27 +10688,8 @@ export const metadata: Metadata = {
   description: "View and filter all agencies across all organizations.",
 };
 
-export default async function SuperAdminAgenciesPage() {
-  const [agencies, organizations] = await Promise.all([
-    // A new repository method would be ideal here, but we can simulate by fetching all orgs then all their agencies
-    // For simplicity, we'll assume a flat list can be fetched or constructed.
-    // This mock will be a placeholder for a real `getAllAgencies` endpoint.
-    organizationRepository
-      .getAllOrganizations()
-      .then((orgs) =>
-        Promise.all(
-          orgs.map((org) =>
-            organizationRepository.getAgencies(org.organization_id!)
-          )
-        )
-      )
-      .then((agencyArrays) => agencyArrays.flat()),
-    organizationRepository.getAllOrganizations(),
-  ]);
-
-  return (
-    <AgenciesClient allAgencies={agencies} allOrganizations={organizations} />
-  );
+export default function SuperAdminAgenciesPage() {
+  return <AgenciesClient />;
 }
 // END OF FILE: app/(dashboard)/super-admin/agencies/page.tsx
 
@@ -10656,115 +10742,169 @@ export default function SuperAdminBonusPage() {
   );
 }// END OF FILE: app/(dashboard)/super-admin/bonus/page.tsx
 
-//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-actors/business-actor-card.tsx
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/bo.sh
 
-"use client";
+#!/bin/bash
 
-import { BusinessActorDto } from "@/types/organization";
-import {
-  Card,
-  CardContent,
-  CardDescription,
-  CardFooter,
-  CardHeader,
-  CardTitle,
-} from "@/components/ui/card";
-import { Badge } from "@/components/ui/badge";
-import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
-import { Button } from "@/components/ui/button";
-import {
-  MoreHorizontal,
-  Edit3,
-  Trash2,
-  CheckCircle,
-  XCircle,
-} from "lucide-react";
-import {
-  DropdownMenu,
-  DropdownMenuContent,
-  DropdownMenuItem,
-  DropdownMenuTrigger,
-} from "@/components/ui/dropdown-menu";
+# ==============================================================================
+# Refactoring Script: Move Data Fetching from Server Pages to Client Components
+# Objective: Make page.tsx files responsible for metadata and rendering the
+#            client component shell. The client components will now handle
+#            all data fetching, loading, and error states.
+# Generated On: Mon Jul 14 06:12:53 PM WAT 2025
+# ==============================================================================
 
-interface BusinessActorCardProps {
-  actor: BusinessActorDto;
-  onEditAction: (actor: BusinessActorDto) => void;
-  onDeleteAction: (actor: BusinessActorDto) => void;
+echo "Starting the refactoring process..."
+
+# 1. Refactor: agencies
+# ------------------------------------------------------------------------------
+echo "Refactoring 'agencies'..."
+
+# Update agencies/page.tsx to be a simple shell
+cat <<'EOF' > agencies/page.tsx
+import { Metadata } from "next";
+import { AgenciesClient } from "./agencies-client";
+
+export const metadata: Metadata = {
+  title: "Global Agency Overview",
+  description: "View and filter all agencies across all organizations.",
+};
+
+export default function SuperAdminAgenciesPage() {
+  return <AgenciesClient />;
 }
+EOF
+
+# Update agencies/agencies-client.tsx to fetch its own data
+cat <<'EOF' > agencies/agencies-client.tsx
+"use client";
+
+import React, { useState, useMemo, useEffect, useCallback } from "react";
+import { ColumnDef } from "@tanstack/react-table";
+import { AgencyDto, OrganizationDto } from "@/types/organization";
+import { organizationRepository } from "@/lib/data-repo/organization";
+import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
+import { PageHeader } from "@/components/ui/page-header";
+import { getSuperAdminAgencyColumns } from "./columns";
+import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
+import { FeedbackCard } from "@/components/ui/feedback-card";
+import { Building, Search } from "lucide-react";
+
+export function AgenciesClient() {
+  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
+  const [organizations, setOrganizations] = useState<OrganizationDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+
+  const fetchData = useCallback(async () => {
+    setIsLoading(true);
+    setError(null);
+    try {
+      const orgs = await organizationRepository.getAllOrganizations();
+      setOrganizations(orgs);
+      
+      const agencyArrays = await Promise.all(
+        orgs.map((org) =>
+          organizationRepository.getAgencies(org.organization_id!)
+        )
+      );
+      setAgencies(agencyArrays.flat());
+    } catch (err: any) {
+      setError(err.message || "Failed to fetch data.");
+    } finally {
+      setIsLoading(false);
+    }
+  }, []);
+
+  useEffect(() => {
+    fetchData();
+  }, [fetchData]);
+
+  const orgOptions = useMemo(
+    () =>
+      organizations.map((org) => ({
+        label: org.long_name || org.organization_id!,
+        value: org.organization_id!,
+      })),
+    [organizations]
+  );
+
+  const columns = useMemo<ColumnDef<AgencyDto>[]>(
+    () => getSuperAdminAgencyColumns(),
+    []
+  );
 
-export function BusinessActorCard({
-  actor,
-  onEditAction,
-  onDeleteAction,
-}: BusinessActorCardProps) {
-  const name = `${actor.first_name || ""} ${actor.last_name || ""}`.trim();
   return (
-    <Card className="flex flex-col h-full">
-      <CardHeader>
-        <div className="flex justify-between items-start">
-          <div className="flex items-center gap-3">
-            <Avatar className="h-12 w-12">
-              <AvatarImage src={actor.avatar_picture} />
-              <AvatarFallback>{name.charAt(0)}</AvatarFallback>
-            </Avatar>
-            <div>
-              <CardTitle className="text-base line-clamp-1">{name}</CardTitle>
-              <CardDescription className="text-xs line-clamp-1">
-                {actor.profession || "No profession listed"}
-              </CardDescription>
-            </div>
-          </div>
-          <DropdownMenu>
-            <DropdownMenuTrigger asChild>
-              <Button variant="ghost" size="icon" className="h-8 w-8">
-                <MoreHorizontal className="h-4 w-4" />
-              </Button>
-            </DropdownMenuTrigger>
-            <DropdownMenuContent align="end">
-              <DropdownMenuItem onClick={() => onEditAction(actor)}>
-                <Edit3 className="mr-2 h-4 w-4" /> Edit
-              </DropdownMenuItem>
-              <DropdownMenuItem
-                onClick={() => onDeleteAction(actor)}
-                className="text-destructive focus:text-destructive"
-              >
-                <Trash2 className="mr-2 h-4 w-4" /> Delete
-              </DropdownMenuItem>
-            </DropdownMenuContent>
-          </DropdownMenu>
-        </div>
-      </CardHeader>
-      <CardContent className="flex-grow">
-        <Badge variant="secondary">{actor.type || "UNKNOWN"}</Badge>
-      </CardContent>
-      <CardFooter className="flex justify-between items-center text-xs text-muted-foreground">
-        <div className="flex items-center gap-1">
-          {actor.is_active ? (
-            <CheckCircle className="h-4 w-4 text-green-500" />
-          ) : (
-            <XCircle className="h-4 w-4" />
-          )}{" "}
-          {actor.is_active ? "Active" : "Inactive"}
-        </div>
-        <div className="flex items-center gap-1">
-          {actor.is_verified ? (
-            <CheckCircle className="h-4 w-4 text-sky-500" />
-          ) : (
-            <XCircle className="h-4 w-4" />
-          )}{" "}
-          {actor.is_verified ? "Verified" : "Not Verified"}
-        </div>
-      </CardFooter>
-    </Card>
+    <ResourceDataTable
+      data={agencies}
+      columns={columns}
+      isLoading={isLoading}
+      error={error}
+      onRefreshAction={fetchData}
+      searchPlaceholder="Search by agency name or location..."
+      onDeleteItemsAction={() => {}}
+      viewModeStorageKey="sa-agencies-view-mode"
+      exportFileName="all_agencies.csv"
+      pageHeader={
+        <PageHeader
+          title="Global Agency Overview"
+          description="View and filter all agencies across the platform."
+        />
+      }
+      filterControls={(table) => (
+        <DataTableFacetedFilter
+          column={table.getColumn("organization_id")}
+          title="Organization"
+          options={orgOptions}
+        />
+      )}
+      renderGridItemAction={(agency) => (
+        <div className="p-4 border rounded-md">{agency.long_name}</div>
+      )}
+      emptyState={
+        <FeedbackCard
+          icon={Building}
+          title="No Agencies Found"
+          description="There are no agencies created on the platform yet."
+        />
+      }
+      filteredEmptyState={
+        <FeedbackCard
+          icon={Search}
+          title="No Agencies Found"
+          description="Your filter criteria did not match any agencies."
+        />
+      }
+    />
   );
 }
-// END OF FILE: app/(dashboard)/super-admin/business-actors/business-actor-card.tsx
+EOF
 
-//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-actors/business-actors-client.tsx
+# 2. Refactor: business-actors
+# ------------------------------------------------------------------------------
+echo "Refactoring 'business-actors'..."
+
+# Update business-actors/page.tsx
+cat <<'EOF' > business-actors/page.tsx
+import { Metadata } from "next";
+import { BusinessActorsClient } from "./business-actors-client";
+
+export const metadata: Metadata = {
+  title: "Business Actors Management",
+  description:
+    "Create, view, and manage all Business Actor profiles on the platform.",
+};
 
+export default function SuperAdminBusinessActorsPage() {
+  return <BusinessActorsClient />;
+}
+EOF
+
+# Update business-actors/business-actors-client.tsx
+cat <<'EOF' > business-actors/business-actors-client.tsx
 "use client";
 
-import React, { useState, useMemo, useCallback } from "react";
+import React, { useState, useMemo, useCallback, useEffect } from "react";
 import { ColumnDef } from "@tanstack/react-table";
 import { toast } from "sonner";
 import { BusinessActorDto } from "@/types/organization";
@@ -10795,24 +10935,1518 @@ const verifiedOptions = [
   { value: "false", label: "Not Verified" },
 ];
 
-interface BusinessActorsClientProps {
-  initialActors: BusinessActorDto[];
+export function BusinessActorsClient() {
+  const [actors, setActors] = useState<BusinessActorDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+  const [isFormOpen, setIsFormOpen] = useState(false);
+  const [editingActor, setEditingActor] = useState<
+    BusinessActorDto | undefined
+  >();
+
+  const refreshData = useCallback(async () => {
+    setIsLoading(true);
+    setError(null);
+    try {
+      const updatedActors = await organizationRepository.getAllBusinessActors();
+      setActors(updatedActors);
+    } catch (err: any) {
+      setError(err.message || "Failed to fetch business actors.");
+      toast.error(err.message || "Failed to fetch business actors.");
+    } finally {
+      setIsLoading(false);
+    }
+  }, []);
+
+  useEffect(() => {
+    refreshData();
+  }, [refreshData]);
+
+  const handleOpenDialog = (actor?: BusinessActorDto) => {
+    setEditingActor(actor);
+    setIsFormOpen(true);
+  };
+
+  const handleFormSuccess = () => {
+    refreshData();
+    setIsFormOpen(false);
+    setEditingActor(undefined);
+  };
+
+  const handleDelete = (actorsToDelete: BusinessActorDto[]) => {
+    toast.error(
+      `Deletion of ${actorsToDelete.length} actor(s) is not implemented.`
+    );
+  };
+
+  const columns = useMemo<ColumnDef<BusinessActorDto>[]>(
+    () =>
+      getBusinessActorColumns({
+        onEditAction: handleOpenDialog,
+        onDeleteAction: (actor) => handleDelete([actor]),
+      }),
+    []
+  );
+
+  return (
+    <>
+      <ResourceDataTable
+        data={actors}
+        columns={columns}
+        isLoading={isLoading}
+        error={error}
+        onRefreshAction={refreshData}
+        searchPlaceholder="Search by name, email..."
+        onDeleteItemsAction={handleDelete}
+        viewModeStorageKey="sa-ba-view-mode"
+        exportFileName="business_actors.csv"
+        pageHeader={
+          <PageHeader
+            title="Business Actors"
+            description="Manage all business actor profiles on the platform."
+            action={
+              <Button onClick={() => handleOpenDialog()}>
+                <UserPlus className="mr-2 h-4 w-4" /> Create Profile
+              </Button>
+            }
+          />
+        }
+        filterControls={(table) => (
+          <>
+            <DataTableFacetedFilter
+              column={table.getColumn("is_active")}
+              title="Status"
+              options={statusOptions}
+            />
+            <DataTableFacetedFilter
+              column={table.getColumn("is_verified")}
+              title="Verification"
+              options={verifiedOptions}
+            />
+          </>
+        )}
+        renderGridItemAction={(actor) => (
+          <BusinessActorCard
+            actor={actor}
+            onEditAction={handleOpenDialog}
+            onDeleteAction={() => handleDelete([actor])}
+          />
+        )}
+        emptyState={
+          <FeedbackCard
+            icon={UserPlus}
+            title="No Business Actors"
+            description="There are no business actor profiles created yet. Create one to get started."
+            actionButton={
+              <Button onClick={() => handleOpenDialog()}>
+                <PlusCircle className="mr-2 h-4 w-4" /> Create Profile
+              </Button>
+            }
+          />
+        }
+        filteredEmptyState={
+          <FeedbackCard
+            icon={SearchIcon}
+            title="No Actors Found"
+            description="Your search or filter criteria did not match any business actors."
+          />
+        }
+      />
+
+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
+        <DialogContent className="sm:max-w-4xl">
+          <DialogHeader>
+            <DialogTitle>
+              {editingActor
+                ? "Edit Business Actor Profile"
+                : "Create New Business Actor Profile"}
+            </DialogTitle>
+            <DialogDescription>
+              {editingActor
+                ? `Editing profile for ${editingActor.first_name}`
+                : "Create a new, independent business profile."}
+            </DialogDescription>
+          </DialogHeader>
+          <div className="py-4 max-h-[80vh] overflow-y-auto pr-2">
+            <BusinessActorForm
+              mode={editingActor ? "edit" : "create"}
+              initialData={editingActor}
+              onSuccessAction={handleFormSuccess}
+              onCancelAction={() => setIsFormOpen(false)}
+            />
+          </div>
+        </DialogContent>
+      </Dialog>
+    </>
+  );
+}
+EOF
+
+# 3. Refactor: certifications
+# ------------------------------------------------------------------------------
+echo "Refactoring 'certifications'..."
+
+# Update certifications/page.tsx
+cat <<'EOF' > certifications/page.tsx
+import { Metadata } from "next";
+import { CertificationsClient } from "./certifications-client";
+
+export const metadata: Metadata = {
+  title: "Global Certification Overview",
+  description: "View and filter all certifications across all organizations.",
+};
+
+export default function SuperAdminCertificationsPage() {
+  return <CertificationsClient />;
+}
+EOF
+
+# Update certifications/certifications-client.tsx
+cat <<'EOF' > certifications/certifications-client.tsx
+"use client";
+
+import React, { useMemo, useState, useEffect, useCallback } from "react";
+import { ColumnDef } from "@tanstack/react-table";
+import { CertificationDto, OrganizationDto } from "@/types/organization";
+import { organizationRepository } from "@/lib/data-repo/organization";
+import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
+import { PageHeader } from "@/components/ui/page-header";
+import { getSuperAdminCertificationColumns } from "./columns";
+import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
+import { FeedbackCard } from "@/components/ui/feedback-card";
+import { Award, Search } from "lucide-react";
+
+export function CertificationsClient() {
+  const [certifications, setCertifications] = useState<CertificationDto[]>([]);
+  const [organizations, setOrganizations] = useState<OrganizationDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+
+  const fetchData = useCallback(async () => {
+    setIsLoading(true);
+    setError(null);
+    try {
+      const orgs = await organizationRepository.getAllOrganizations();
+      setOrganizations(orgs);
+      
+      const certArrays = await Promise.all(
+        orgs.map((org) =>
+          organizationRepository.getCertifications(org.organization_id!)
+        )
+      );
+      setCertifications(certArrays.flat());
+    } catch (err: any) {
+      setError(err.message || "Failed to fetch certifications.");
+    } finally {
+      setIsLoading(false);
+    }
+  }, []);
+
+  useEffect(() => {
+    fetchData();
+  }, [fetchData]);
+
+  const orgOptions = useMemo(
+    () =>
+      organizations.map((org) => ({
+        label: org.long_name || org.organization_id!,
+        value: org.organization_id!,
+      })),
+    [organizations]
+  );
+
+  const columns = useMemo<ColumnDef<CertificationDto>[]>(
+    () => getSuperAdminCertificationColumns(),
+    []
+  );
+
+  return (
+    <ResourceDataTable
+      data={certifications}
+      columns={columns}
+      isLoading={isLoading}
+      error={error}
+      onRefreshAction={fetchData}
+      searchPlaceholder="Search by certification name or type..."
+      onDeleteItemsAction={() => {}}
+      viewModeStorageKey="sa-certs-view-mode"
+      exportFileName="all_certifications.csv"
+      pageHeader={
+        <PageHeader
+          title="Global Certification Overview"
+          description="View and filter all certifications across the platform."
+        />
+      }
+      filterControls={(table) => (
+        <DataTableFacetedFilter
+          column={table.getColumn("organization_id")}
+          title="Organization"
+          options={orgOptions}
+        />
+      )}
+      renderGridItemAction={(cert) => (
+        <div className="p-4 border rounded-md">{cert.name}</div>
+      )}
+      emptyState={
+        <FeedbackCard
+          icon={Award}
+          title="No Certifications Found"
+          description="No organizations have added certifications yet."
+        />
+      }
+      filteredEmptyState={
+        <FeedbackCard
+          icon={Search}
+          title="No Certifications Found"
+          description="Your filter criteria did not match any certifications."
+        />
+      }
+    />
+  );
+}
+EOF
+
+# 4. Refactor: customers
+# ------------------------------------------------------------------------------
+echo "Refactoring 'customers'..."
+
+# Update customers/page.tsx
+cat <<'EOF' > customers/page.tsx
+import { Metadata } from "next";
+import { CustomersClient } from "./customers-client";
+
+export const metadata: Metadata = {
+  title: "Global Customer Overview",
+  description: "View and filter all customers across all organizations.",
+};
+
+export default function SuperAdminCustomersPage() {
+  return <CustomersClient />;
+}
+EOF
+
+# Update customers/customers-client.tsx
+cat <<'EOF' > customers/customers-client.tsx
+"use client";
+
+import React, { useMemo, useState, useEffect, useCallback } from "react";
+import { ColumnDef } from "@tanstack/react-table";
+import { CustomerDto, OrganizationDto } from "@/types/organization";
+import { organizationRepository } from "@/lib/data-repo/organization";
+import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
+import { PageHeader } from "@/components/ui/page-header";
+import { getSuperAdminCustomerColumns } from "./columns";
+import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
+import { FeedbackCard } from "@/components/ui/feedback-card";
+import { Users, Search } from "lucide-react";
+
+export function CustomersClient() {
+  const [customers, setCustomers] = useState<CustomerDto[]>([]);
+  const [organizations, setOrganizations] = useState<OrganizationDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+
+  const fetchData = useCallback(async () => {
+    setIsLoading(true);
+    setError(null);
+    try {
+      const orgs = await organizationRepository.getAllOrganizations();
+      setOrganizations(orgs);
+      
+      const customerArrays = await Promise.all(
+        orgs.map((org) =>
+          organizationRepository.getOrgCustomers(org.organization_id!)
+        )
+      );
+      setCustomers(customerArrays.flat());
+    } catch (err: any) {
+      setError(err.message || "Failed to fetch customer data.");
+    } finally {
+      setIsLoading(false);
+    }
+  }, []);
+  
+  useEffect(() => {
+    fetchData();
+  }, [fetchData]);
+
+  const orgOptions = useMemo(
+    () =>
+      organizations.map((org) => ({
+        label: org.long_name || org.organization_id!,
+        value: org.organization_id!,
+      })),
+    [organizations]
+  );
+
+  const columns = useMemo<ColumnDef<CustomerDto>[]>(
+    () => getSuperAdminCustomerColumns(),
+    []
+  );
+
+  return (
+    <ResourceDataTable
+      data={customers}
+      columns={columns}
+      isLoading={isLoading}
+      error={error}
+      onRefreshAction={fetchData}
+      searchPlaceholder="Search by customer name..."
+      onDeleteItemsAction={() => {}}
+      viewModeStorageKey="sa-customers-view-mode"
+      exportFileName="all_customers.csv"
+      pageHeader={
+        <PageHeader
+          title="Global Customer Overview"
+          description="View and filter all customers across the platform."
+        />
+      }
+      filterControls={(table) => (
+        <DataTableFacetedFilter
+          column={table.getColumn("organization_id")}
+          title="Organization"
+          options={orgOptions}
+        />
+      )}
+      renderGridItemAction={(customer) => (
+        <div className="p-4 border rounded-md">{customer.first_name}</div>
+      )}
+      emptyState={
+        <FeedbackCard
+          icon={Users}
+          title="No Customers Found"
+          description="There are no customers registered on the platform yet."
+        />
+      }
+      filteredEmptyState={
+        <FeedbackCard
+          icon={Search}
+          title="No Customers Found"
+          description="Your filter criteria did not match any customers."
+        />
+      }
+    />
+  );
+}
+EOF
+
+# 5. Refactor: dashboard
+# ------------------------------------------------------------------------------
+echo "Refactoring 'dashboard'..."
+
+# Update dashboard/page.tsx
+cat <<'EOF' > dashboard/page.tsx
+import { Metadata } from "next";
+import { SuperAdminDashboardClient } from "./dashboard-client";
+
+export const metadata: Metadata = {
+  title: "Super Admin Dashboard",
+  description: "Platform-wide overview of users, organizations, and activity.",
+};
+
+export default function SuperAdminDashboardPage() {
+  return <SuperAdminDashboardClient />;
+}
+EOF
+
+# Update dashboard/dashboard-client.tsx
+cat <<'EOF' > dashboard/dashboard-client.tsx
+"use client";
+
+import React, { useState, useEffect, useCallback } from "react";
+import {
+  Card,
+  CardContent,
+  CardHeader,
+  CardTitle,
+  CardDescription,
+} from "@/components/ui/card";
+import { PageHeader } from "@/components/ui/page-header";
+import { Loader2 } from "lucide-react";
+import { authRepository } from "@/lib/data-repo/auth";
+import { organizationRepository } from "@/lib/data-repo/organization";
+import {
+  Bar,
+  BarChart,
+  ResponsiveContainer,
+  XAxis,
+  YAxis,
+  Tooltip,
+  Legend,
+  Pie,
+  PieChart,
+  Cell,
+} from "recharts";
+import { Users, Building, Briefcase, FileText, UserPlus } from "lucide-react";
+import { OrganizationDto } from "@/types/organization";
+import { UserDto } from "@/types/auth";
+import { format } from "date-fns";
+
+export interface DashboardData {
+  stats: {
+    totalUsers: number;
+    totalOrgs: number;
+    totalBAs: number;
+  };
+  charts: {
+    orgStatusCounts: Record<string, number>;
+    baTypeCounts: Record<string, number>;
+  };
+  recentActivity: {
+    users: UserDto[];
+    organizations: OrganizationDto[];
+  };
+}
+
+const COLORS = [
+  "#0088FE",
+  "#00C49F",
+  "#FFBB28",
+  "#FF8042",
+  "#8884d8",
+  "#82ca9d",
+];
+
+export function SuperAdminDashboardClient() {
+  const [data, setData] = useState<DashboardData | null>(null);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+
+  const fetchDashboardData = useCallback(async () => {
+    setIsLoading(true);
+    setError(null);
+    try {
+      const [users, organizations, businessActors] = await Promise.all([
+        authRepository.getAllUsers(),
+        organizationRepository.getAllOrganizations(),
+        organizationRepository.getAllBusinessActors(),
+      ]);
+
+      const orgStatusCounts = organizations.reduce((acc, org) => {
+        const status = org.status || "UNKNOWN";
+        acc[status] = (acc[status] || 0) + 1;
+        return acc;
+      }, {} as Record<string, number>);
+
+      const baTypeCounts = businessActors.reduce((acc, ba) => {
+        const type = ba.type || "UNKNOWN";
+        acc[type] = (acc[type] || 0) + 1;
+        return acc;
+      }, {} as Record<string, number>);
+
+      setData({
+        stats: {
+          totalUsers: users.length,
+          totalOrgs: organizations.length,
+          totalBAs: businessActors.length,
+        },
+        charts: { orgStatusCounts, baTypeCounts },
+        recentActivity: {
+          users: users.slice(0, 5),
+          organizations: organizations.slice(0, 5),
+        },
+      });
+    } catch (err: any) {
+      setError(err.message || "Failed to fetch dashboard data.");
+    } finally {
+      setIsLoading(false);
+    }
+  }, []);
+  
+  useEffect(() => {
+    fetchDashboardData();
+  }, [fetchDashboardData]);
+
+  if (isLoading) {
+    return (
+      <div className="flex items-center justify-center h-[80vh]">
+        <Loader2 className="h-12 w-12 animate-spin text-primary" />
+      </div>
+    );
+  }
+
+  if (error || !data) {
+    return (
+      <div className="flex items-center justify-center h-full">
+        <p className="text-destructive">Error: {error || "Could not load platform statistics."}</p>
+      </div>
+    );
+  }
+
+  const { stats, charts, recentActivity } = data;
+  const orgStatusData = Object.entries(charts.orgStatusCounts).map(
+    ([name, value]) => ({ name, value })
+  );
+  const baTypeData = Object.entries(charts.baTypeCounts).map(
+    ([name, value]) => ({ name, value })
+  );
+
+  return (
+    <div className="space-y-6">
+      <PageHeader
+        title="Platform Dashboard"
+        description="A high-level overview of all activity across the YowYob platform."
+      />
+
+      {/* Stat Cards */}
+      <div className="grid gap-4 md:grid-cols-3">
+        <Card>
+          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
+            <CardTitle className="text-sm font-medium">Total Users</CardTitle>
+            <Users className="h-4 w-4 text-muted-foreground" />
+          </CardHeader>
+          <CardContent>
+            <div className="text-2xl font-bold">{stats.totalUsers}</div>
+            <p className="text-xs text-muted-foreground">
+              All registered user accounts.
+            </p>
+          </CardContent>
+        </Card>
+        <Card>
+          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
+            <CardTitle className="text-sm font-medium">
+              Total Organizations
+            </CardTitle>
+            <Building className="h-4 w-4 text-muted-foreground" />
+          </CardHeader>
+          <CardContent>
+            <div className="text-2xl font-bold">{stats.totalOrgs}</div>
+            <p className="text-xs text-muted-foreground">Across all users.</p>
+          </CardContent>
+        </Card>
+        <Card>
+          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
+            <CardTitle className="text-sm font-medium">
+              Total Business Actors
+            </CardTitle>
+            <Briefcase className="h-4 w-4 text-muted-foreground" />
+          </CardHeader>
+          <CardContent>
+            <div className="text-2xl font-bold">{stats.totalBAs}</div>
+            <p className="text-xs text-muted-foreground">
+              Users with business profiles.
+            </p>
+          </CardContent>
+        </Card>
+      </div>
+
+      {/* Charts */}
+      <div className="grid gap-4 md:grid-cols-2">
+        <Card>
+          <CardHeader>
+            <CardTitle>Organizations by Status</CardTitle>
+          </CardHeader>
+          <CardContent>
+            <ResponsiveContainer width="100%" height={300}>
+              <PieChart>
+                <Pie
+                  data={orgStatusData}
+                  dataKey="value"
+                  nameKey="name"
+                  cx="50%"
+                  cy="50%"
+                  outerRadius={100}
+                  label
+                >
+                  {orgStatusData.map((entry, index) => (
+                    <Cell
+                      key={`cell-${index}`}
+                      fill={COLORS[index % COLORS.length]}
+                    />
+                  ))}
+                </Pie>
+                <Tooltip />
+                <Legend />
+              </PieChart>
+            </ResponsiveContainer>
+          </CardContent>
+        </Card>
+        <Card>
+          <CardHeader>
+            <CardTitle>Business Actors by Type</CardTitle>
+          </CardHeader>
+          <CardContent>
+            <ResponsiveContainer width="100%" height={300}>
+              <BarChart data={baTypeData}>
+                <XAxis
+                  dataKey="name"
+                  stroke="#888888"
+                  fontSize={12}
+                  tickLine={false}
+                  axisLine={false}
+                />
+                <YAxis
+                  stroke="#888888"
+                  fontSize={12}
+                  tickLine={false}
+                  axisLine={false}
+                />
+                <Tooltip />
+                <Bar dataKey="value" fill="#8884d8" radius={[4, 4, 0, 0]} />
+              </BarChart>
+            </ResponsiveContainer>
+          </CardContent>
+        </Card>
+      </div>
+
+      {/* Recent Activity Feeds */}
+      <div className="grid gap-4 md:grid-cols-2">
+        <Card>
+          <CardHeader>
+            <CardTitle>Recently Created Organizations</CardTitle>
+            <CardDescription>
+              The 5 most recently created organizations.
+            </CardDescription>
+          </CardHeader>
+          <CardContent>
+            <div className="space-y-4">
+              {recentActivity.organizations.map((org) => (
+                <div key={org.organization_id} className="flex items-center">
+                  <FileText className="h-5 w-5 text-muted-foreground" />
+                  <div className="ml-4 space-y-1">
+                    <p className="text-sm font-medium leading-none">
+                      {org.long_name}
+                    </p>
+                    <p className="text-sm text-muted-foreground">{org.email}</p>
+                  </div>
+                  <div className="ml-auto text-xs text-muted-foreground">
+                    {format(new Date(org.created_at!), "PP")}
+                  </div>
+                </div>
+              ))}
+            </div>
+          </CardContent>
+        </Card>
+        <Card>
+          <CardHeader>
+            <CardTitle>Recently Joined Users</CardTitle>
+            <CardDescription>
+              The 5 most recently registered users.
+            </CardDescription>
+          </CardHeader>
+          <CardContent>
+            <div className="space-y-4">
+              {recentActivity.users.map((user) => (
+                <div key={user.id} className="flex items-center">
+                  <UserPlus className="h-5 w-5 text-muted-foreground" />
+                  <div className="ml-4 space-y-1">
+                    <p className="text-sm font-medium leading-none">
+                      {user.first_name} {user.last_name}
+                    </p>
+                    <p className="text-sm text-muted-foreground">
+                      @{user.username}
+                    </p>
+                  </div>
+                  <div className="ml-auto text-xs text-muted-foreground">
+                    {format(new Date(user.created_at!), "PP")}
+                  </div>
+                </div>
+              ))}
+            </div>
+          </CardContent>
+        </Card>
+      </div>
+    </div>
+  );
+}
+EOF
+
+# 6. Refactor: organizations
+# ------------------------------------------------------------------------------
+echo "Refactoring 'organizations'..."
+
+# Update organizations/page.tsx
+cat <<'EOF' > organizations/page.tsx
+import { Metadata } from "next";
+import { OrganizationsClient } from "./organizations-client";
+
+export const metadata: Metadata = {
+  title: "Organization Management",
+  description:
+    "Approve, monitor, and manage all organizations on the platform.",
+};
+
+export default function SuperAdminOrganizationsPage() {
+  return <OrganizationsClient />;
+}
+EOF
+
+# Update organizations/organizations-client.tsx
+cat <<'EOF' > organizations/organizations-client.tsx
+"use client";
+
+import React, { useState, useMemo, useCallback, useEffect } from "react";
+import { ColumnDef } from "@tanstack/react-table";
+import { toast } from "sonner";
+import {
+  OrganizationDto,
+  OrganizationStatus,
+  OrganizationStatusValues,
+} from "@/types/organization";
+import { organizationRepository } from "@/lib/data-repo/organization";
+import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
+import { PageHeader } from "@/components/ui/page-header";
+import { Button } from "@/components/ui/button";
+import { Building, Search as SearchIcon } from "lucide-react";
+import { getSuperAdminOrganizationColumns } from "./columns";
+import { AdminOrganizationCard } from "./organization-card";
+import {
+  AlertDialog,
+  AlertDialogAction,
+  AlertDialogCancel,
+  AlertDialogContent,
+  AlertDialogDescription,
+  AlertDialogFooter,
+  AlertDialogHeader,
+  AlertDialogTitle,
+} from "@/components/ui/alert-dialog";
+import { FeedbackCard } from "@/components/ui/feedback-card";
+import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
+
+const statusOptions = OrganizationStatusValues.map((s) => ({
+  value: s,
+  label: s.replace(/_/g, " "),
+}));
+
+export function OrganizationsClient() {
+  const [organizations, setOrganizations] =
+    useState<OrganizationDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+  const [dialogState, setDialogState] = useState<{
+    open: boolean;
+    items: OrganizationDto[];
+    newStatus?: OrganizationStatus;
+    type?: "status" | "delete";
+  }>({ open: false, items: [] });
+
+  const refreshData = useCallback(async () => {
+    setIsLoading(true);
+    setError(null);
+    try {
+      const data = await organizationRepository.getAllOrganizations();
+      setOrganizations(data);
+    } catch (err: any) {
+      const errorMessage = err.message || "Failed to refresh organization data.";
+      setError(errorMessage);
+      toast.error(errorMessage);
+    } finally {
+      setIsLoading(false);
+    }
+  }, []);
+
+  useEffect(() => {
+    refreshData();
+  }, [refreshData]);
+
+  const handleStatusChangeConfirmation = (
+    org: OrganizationDto,
+    newStatus: OrganizationStatus
+  ) => {
+    setDialogState({ open: true, items: [org], newStatus, type: "status" });
+  };
+
+  const handleDeleteConfirmation = (orgs: OrganizationDto[]) => {
+    if (orgs.length === 0) return;
+    setDialogState({ open: true, items: orgs, type: "delete" });
+  };
+
+  const executeAction = async () => {
+    const { items, newStatus, type } = dialogState;
+    if (items.length === 0) return;
+
+    const actionPromise: Promise<void> =
+      type === "status" && newStatus
+        ? organizationRepository
+            .updateOrganizationStatus(items[0].organization_id!, {
+              status: newStatus,
+            })
+            .then(() => {})
+        : Promise.all(
+            items.map((org) =>
+              organizationRepository.deleteOrganization(org.organization_id!)
+            )
+          ).then(() => {});
+
+    toast.promise(actionPromise, {
+      loading: `Processing action...`,
+      success: () => {
+        refreshData();
+        setDialogState({ open: false, items: [] });
+        return `Action completed successfully.`;
+      },
+      error: (err) => `An error occurred: ${err.message}`,
+    });
+  };
+
+  const columns = useMemo<ColumnDef<OrganizationDto>[]>(
+    () =>
+      getSuperAdminOrganizationColumns({
+        onStatusChangeAction: handleStatusChangeConfirmation,
+        onDeleteAction: (org) => handleDeleteConfirmation([org]),
+      }),
+    []
+  );
+
+  return (
+    <>
+      <ResourceDataTable
+        data={organizations}
+        columns={columns}
+        isLoading={isLoading}
+        error={error}
+        onRefreshAction={refreshData}
+        searchPlaceholder="Search by name, email..."
+        onDeleteItemsAction={handleDeleteConfirmation}
+        viewModeStorageKey="sa-orgs-view-mode"
+        exportFileName="organizations_export.csv"
+        pageHeader={
+          <PageHeader
+            title="Organization Management"
+            description="Monitor, approve, and manage all organizations on the platform."
+          />
+        }
+        filterControls={(table) => (
+          <DataTableFacetedFilter
+            column={table.getColumn("status")}
+            title="Status"
+            options={statusOptions}
+          />
+        )}
+        renderGridItemAction={(org) => (
+          <AdminOrganizationCard
+            organization={org}
+            onStatusChangeAction={handleStatusChangeConfirmation}
+            onDeleteAction={() => handleDeleteConfirmation([org])}
+          />
+        )}
+        emptyState={
+          <FeedbackCard
+            icon={Building}
+            title="No Organizations Found"
+            description="There are currently no organizations registered on the platform."
+          />
+        }
+        filteredEmptyState={
+          <FeedbackCard
+            icon={SearchIcon}
+            title="No Organizations Found"
+            description="Your search or filter criteria did not match any organizations."
+          />
+        }
+      />
+
+      <AlertDialog
+        open={dialogState.open}
+        onOpenChange={(open) => setDialogState((prev) => ({ ...prev, open }))}
+      >
+        <AlertDialogContent>
+          <AlertDialogHeader>
+            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
+            <AlertDialogDescription>
+              {dialogState.type === "delete"
+                ? `This will permanently delete ${dialogState.items.length} organization(s). This action cannot be undone.`
+                : `This will change the status of "${dialogState.items[0]?.long_name}" to ${dialogState.newStatus}.`}
+            </AlertDialogDescription>
+          </AlertDialogHeader>
+          <AlertDialogFooter>
+            <AlertDialogCancel>Cancel</AlertDialogCancel>
+            <AlertDialogAction onClick={executeAction}>
+              Continue
+            </AlertDialogAction>
+          </AlertDialogFooter>
+        </AlertDialogContent>
+      </AlertDialog>
+    </>
+  );
+}
+EOF
+
+# 7. Refactor: roles
+# ------------------------------------------------------------------------------
+echo "Refactoring 'roles'..."
+
+# Update roles/page.tsx
+cat <<'EOF' > roles/page.tsx
+import { Metadata } from "next";
+import { RoleAssignmentClient } from "./roles-client";
+
+export const metadata: Metadata = {
+  title: "Roles & Permissions",
+  description: "Configure Role-Based Access Control (RBAC) for the platform.",
+};
+
+export default function SuperAdminRolesPage() {
+  return <RoleAssignmentClient />;
+}
+EOF
+
+# Update roles/roles-client.tsx
+cat <<'EOF' > roles/roles-client.tsx
+"use client";
+
+import React, { useState, useEffect, useCallback } from "react";
+import { toast } from "sonner";
+import { RoleDto, PermissionDto } from "@/types/auth";
+import { authRepository } from "@/lib/data-repo/auth";
+import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
+import { ScrollArea } from "@/components/ui/scroll-area";
+import { Checkbox } from "@/components/ui/checkbox";
+import { Label } from "@/components/ui/label";
+import { Button } from "@/components/ui/button";
+import { PageHeader } from "@/components/ui/page-header";
+import { Loader2, Save } from "lucide-react";
+import { cn } from "@/lib/utils";
+
+export function RoleAssignmentClient() {
+  const [roles, setRoles] = useState<RoleDto[]>([]);
+  const [allPermissions, setAllPermissions] = useState<PermissionDto[]>([]);
+  const [selectedRole, setSelectedRole] = useState<RoleDto | null>(null);
+  const [rolePermissions, setRolePermissions] = useState<Set<string>>(new Set());
+  const [isLoadingData, setIsLoadingData] = useState(true);
+  const [isSaving, setIsSaving] = useState(false);
+
+  const fetchData = useCallback(async () => {
+    setIsLoadingData(true);
+    try {
+      const [fetchedRoles, fetchedPermissions] = await Promise.all([
+        authRepository.getRoles(),
+        authRepository.getAllPermissions(),
+      ]);
+      setRoles(fetchedRoles);
+      setAllPermissions(fetchedPermissions);
+      if (fetchedRoles.length > 0) {
+        setSelectedRole(fetchedRoles[0]);
+      }
+    } catch (error: any) {
+      toast.error(`Failed to load roles and permissions: ${error.message}`);
+    } finally {
+      setIsLoadingData(false);
+    }
+  }, []);
+
+  useEffect(() => {
+    fetchData();
+  }, [fetchData]);
+
+  useEffect(() => {
+    // This logic should be updated when an endpoint to fetch permissions per role is available.
+    if (selectedRole?.id) {
+      const mockPerms = new Set<string>(selectedRole.permissions?.map(p => p.id!) || []);
+      setRolePermissions(mockPerms);
+    }
+  }, [selectedRole]);
+
+  const handlePermissionToggle = (permissionId: string, checked: boolean) => {
+    setRolePermissions(prev => {
+      const newSet = new Set(prev);
+      if (checked) {
+        newSet.add(permissionId);
+      } else {
+        newSet.delete(permissionId);
+      }
+      return newSet;
+    });
+  };
+
+  const handleSaveChanges = async () => {
+    if (!selectedRole?.id) return;
+    setIsSaving(true);
+    try {
+      await authRepository.assignPermissionsToRole(selectedRole.id, Array.from(rolePermissions));
+      toast.success(`Permissions for role "${selectedRole.name}" updated.`);
+    } catch (error: any) {
+      toast.error(`Failed to save permissions: ${error.message}`);
+    } finally {
+      setIsSaving(false);
+    }
+  };
+  
+  if (isLoadingData) {
+    return <div className="flex justify-center items-center h-full"><Loader2 className="h-8 w-8 animate-spin" /></div>
+  }
+
+  return (
+    <div className="space-y-6">
+      <PageHeader
+        title="Role & Permission Management"
+        description="Assign permissions to roles to control user access across the platform."
+        action={<Button onClick={handleSaveChanges} disabled={isSaving}>{isSaving && <Loader2 className="mr-2 h-4 w-4 animate-spin" />} Save Changes</Button>}
+      />
+      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
+        <Card className="md:col-span-1">
+          <CardHeader><CardTitle>Roles</CardTitle></CardHeader>
+          <CardContent>
+            <ScrollArea className="h-[60vh]">
+              <div className="space-y-1 pr-4">
+                {roles.map(role => (
+                  <Button
+                    key={role.id}
+                    variant="ghost"
+                    className={cn("w-full justify-start", selectedRole?.id === role.id && "bg-accent text-accent-foreground")}
+                    onClick={() => setSelectedRole(role)}
+                  >
+                    {role.name}
+                  </Button>
+                ))}
+              </div>
+            </ScrollArea>
+          </CardContent>
+        </Card>
+        <Card className="md:col-span-2">
+          <CardHeader>
+            <CardTitle>Permissions for: {selectedRole?.name || '...'}</CardTitle>
+          </CardHeader>
+          <CardContent>
+            <ScrollArea className="h-[60vh]">
+              <div className="space-y-4 pr-4">
+                {allPermissions.map(permission => (
+                  <div key={permission.id} className="flex items-center space-x-3 rounded-md border p-3">
+                    <Checkbox
+                      id={`perm-${permission.id}`}
+                      checked={rolePermissions.has(permission.id!)}
+                      onCheckedChange={(checked) => handlePermissionToggle(permission.id!, !!checked)}
+                    />
+                    <Label htmlFor={`perm-${permission.id}`} className="font-medium leading-none cursor-pointer">
+                      {permission.name}
+                      <p className="text-xs text-muted-foreground font-normal">{permission.description}</p>
+                    </Label>
+                  </div>
+                ))}
+              </div>
+            </ScrollArea>
+          </CardContent>
+        </Card>
+      </div>
+    </div>
+  );
+}
+EOF
+
+# 8. Refactor: suppliers
+# ------------------------------------------------------------------------------
+echo "Refactoring 'suppliers'..."
+
+# Update suppliers/page.tsx
+cat <<'EOF' > suppliers/page.tsx
+import { Metadata } from "next";
+import { SuppliersClient } from "./suppliers-client";
+
+export const metadata: Metadata = {
+  title: "Global Supplier Overview",
+  description: "View and filter all suppliers across all organizations.",
+};
+
+export default function SuperAdminSuppliersPage() {
+  return <SuppliersClient />;
+}
+EOF
+
+# Update suppliers/suppliers-client.tsx
+cat <<'EOF' > suppliers/suppliers-client.tsx
+"use client";
+
+import React, { useMemo, useState, useEffect, useCallback } from "react";
+import { ColumnDef } from "@tanstack/react-table";
+import { ProviderDto, OrganizationDto } from "@/types/organization";
+import { organizationRepository } from "@/lib/data-repo/organization";
+import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
+import { PageHeader } from "@/components/ui/page-header";
+import { getSuperAdminSupplierColumns } from "./columns";
+import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
+import { FeedbackCard } from "@/components/ui/feedback-card";
+import { Truck, Search } from "lucide-react";
+
+export function SuppliersClient() {
+  const [suppliers, setSuppliers] = useState<ProviderDto[]>([]);
+  const [organizations, setOrganizations] = useState<OrganizationDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+
+  const fetchData = useCallback(async () => {
+    setIsLoading(true);
+    setError(null);
+    try {
+      const orgs = await organizationRepository.getAllOrganizations();
+      setOrganizations(orgs);
+      
+      const supplierArrays = await Promise.all(
+        orgs.map(org => organizationRepository.getOrgSuppliers(org.organization_id!))
+      );
+      setSuppliers(supplierArrays.flat());
+    } catch (err: any) {
+      setError(err.message || "Failed to fetch supplier data.");
+    } finally {
+      setIsLoading(false);
+    }
+  }, []);
+
+  useEffect(() => {
+    fetchData();
+  }, [fetchData]);
+
+  const orgOptions = useMemo(
+    () =>
+      organizations.map((org) => ({
+        label: org.long_name || org.organization_id!,
+        value: org.organization_id!,
+      })),
+    [organizations]
+  );
+
+  const columns = useMemo<ColumnDef<ProviderDto>[]>(
+    () => getSuperAdminSupplierColumns(),
+    []
+  );
+
+  return (
+    <ResourceDataTable
+      data={suppliers}
+      columns={columns}
+      isLoading={isLoading}
+      error={error}
+      onRefreshAction={fetchData}
+      searchPlaceholder="Search by supplier name..."
+      onDeleteItemsAction={() => {}}
+      viewModeStorageKey="sa-suppliers-view-mode"
+      exportFileName="all_suppliers.csv"
+      pageHeader={
+        <PageHeader
+          title="Global Supplier Overview"
+          description="View and filter all suppliers across the platform."
+        />
+      }
+      filterControls={(table) => (
+        <DataTableFacetedFilter
+          column={table.getColumn("organization_id")}
+          title="Organization"
+          options={orgOptions}
+        />
+      )}
+      renderGridItemAction={(supplier) => (
+        <div className="p-4 border rounded-md">{supplier.first_name}</div>
+      )}
+      emptyState={
+        <FeedbackCard
+          icon={Truck}
+          title="No Suppliers Found"
+          description="There are no suppliers registered on the platform yet."
+        />
+      }
+      filteredEmptyState={
+        <FeedbackCard
+          icon={Search}
+          title="No Suppliers Found"
+          description="Your filter criteria did not match any suppliers."
+        />
+      }
+    />
+  );
+}
+EOF
+
+# 9. Refactor: users
+# ------------------------------------------------------------------------------
+echo "Refactoring 'users'..."
+
+# Update users/page.tsx
+cat <<'EOF' > users/page.tsx
+import { Metadata } from "next";
+import { UsersClient } from "./users-client";
+
+export const metadata: Metadata = {
+  title: "User Management",
+  description: "View, manage, and moderate all user accounts on the platform.",
+};
+
+export default function SuperAdminUsersPage() {
+  return <UsersClient />;
+}
+EOF
+
+# Update users/users-client.tsx
+cat <<'EOF' > users/users-client.tsx
+"use client";
+
+import React, { useState, useMemo, useCallback, useEffect } from "react";
+import { ColumnDef } from "@tanstack/react-table";
+import { toast } from "sonner";
+import { UserDto } from "@/types/auth";
+import { authRepository } from "@/lib/data-repo/auth";
+import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
+import { PageHeader } from "@/components/ui/page-header";
+import { Users, Search as SearchIcon } from "lucide-react";
+import { getUserColumns } from "./columns";
+import { UserCard } from "./user-card";
+import { FeedbackCard } from "@/components/ui/feedback-card";
+import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
+
+const statusOptions = [
+  { value: "true", label: "Enabled" },
+  { value: "false", label: "Disabled" },
+];
+
+export function UsersClient() {
+  const [users, setUsers] = useState<UserDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+
+  const refreshData = useCallback(async () => {
+    setIsLoading(true);
+    setError(null);
+    try {
+      const data = await authRepository.getAllUsers();
+      setUsers(data);
+    } catch (err: any) {
+      const errorMessage = err.message || "Failed to refresh user data.";
+      setError(errorMessage);
+      toast.error(errorMessage);
+    } finally {
+      setIsLoading(false);
+    }
+  }, []);
+  
+  useEffect(() => {
+    refreshData();
+  }, [refreshData]);
+
+  const handleStatusToggle = (user: UserDto) => {
+    toast.info(`Toggling status for ${user.username}... (Not Implemented)`);
+  };
+
+  const handleVerify = (user: UserDto, type: "email" | "phone") => {
+    toast.info(`Verifying ${type} for ${user.username}... (Not Implemented)`);
+  };
+
+  const columns = useMemo<ColumnDef<UserDto>[]>(
+    () =>
+      getUserColumns({
+        onStatusToggleAction: handleStatusToggle,
+        onVerifyAction: handleVerify,
+      }),
+    []
+  );
+
+  return (
+    <ResourceDataTable
+      data={users}
+      columns={columns}
+      isLoading={isLoading}
+      error={error}
+      onRefreshAction={refreshData}
+      searchPlaceholder="Search by name, username, email..."
+      onDeleteItemsAction={(items) =>
+        toast.error(`Deletion of ${items.length} users is not implemented.`)
+      }
+      viewModeStorageKey="sa-users-view-mode"
+      exportFileName="users_export.csv"
+      pageHeader={
+        <PageHeader
+          title="User Management"
+          description="View, manage, and moderate all user accounts."
+        />
+      }
+      filterControls={(table) => (
+        <DataTableFacetedFilter
+          column={table.getColumn("is_enabled")}
+          title="Status"
+          options={statusOptions}
+        />
+      )}
+      renderGridItemAction={(user) => (
+        <UserCard
+          user={user}
+          onStatusToggleAction={handleStatusToggle}
+          onVerifyAction={handleVerify}
+        />
+      )}
+      emptyState={
+        <FeedbackCard
+          icon={Users}
+          title="No Users Found"
+          description="There are no users registered on the platform yet."
+        />
+      }
+      filteredEmptyState={
+        <FeedbackCard
+          icon={SearchIcon}
+          title="No Users Found"
+          description="Your search or filter criteria did not match any users."
+        />
+      }
+    />
+  );
+}
+EOF
+
+echo "Refactoring complete. All targeted files have been updated."// END OF FILE: app/(dashboard)/super-admin/bo.sh
+
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-actors/business-actor-card.tsx
+
+"use client";
+
+import { BusinessActorDto } from "@/types/organization";
+import {
+  Card,
+  CardContent,
+  CardDescription,
+  CardFooter,
+  CardHeader,
+  CardTitle,
+} from "@/components/ui/card";
+import { Badge } from "@/components/ui/badge";
+import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
+import { Button } from "@/components/ui/button";
+import {
+  MoreHorizontal,
+  Edit3,
+  Trash2,
+  CheckCircle,
+  XCircle,
+} from "lucide-react";
+import {
+  DropdownMenu,
+  DropdownMenuContent,
+  DropdownMenuItem,
+  DropdownMenuTrigger,
+} from "@/components/ui/dropdown-menu";
+
+interface BusinessActorCardProps {
+  actor: BusinessActorDto;
+  onEditAction: (actor: BusinessActorDto) => void;
+  onDeleteAction: (actor: BusinessActorDto) => void;
+}
+
+export function BusinessActorCard({
+  actor,
+  onEditAction,
+  onDeleteAction,
+}: BusinessActorCardProps) {
+  const name = `${actor.first_name || ""} ${actor.last_name || ""}`.trim();
+  return (
+    <Card className="flex flex-col h-full">
+      <CardHeader>
+        <div className="flex justify-between items-start">
+          <div className="flex items-center gap-3">
+            <Avatar className="h-12 w-12">
+              <AvatarImage src={actor.avatar_picture} />
+              <AvatarFallback>{name.charAt(0)}</AvatarFallback>
+            </Avatar>
+            <div>
+              <CardTitle className="text-base line-clamp-1">{name}</CardTitle>
+              <CardDescription className="text-xs line-clamp-1">
+                {actor.profession || "No profession listed"}
+              </CardDescription>
+            </div>
+          </div>
+          <DropdownMenu>
+            <DropdownMenuTrigger asChild>
+              <Button variant="ghost" size="icon" className="h-8 w-8">
+                <MoreHorizontal className="h-4 w-4" />
+              </Button>
+            </DropdownMenuTrigger>
+            <DropdownMenuContent align="end">
+              <DropdownMenuItem onClick={() => onEditAction(actor)}>
+                <Edit3 className="mr-2 h-4 w-4" /> Edit
+              </DropdownMenuItem>
+              <DropdownMenuItem
+                onClick={() => onDeleteAction(actor)}
+                className="text-destructive focus:text-destructive"
+              >
+                <Trash2 className="mr-2 h-4 w-4" /> Delete
+              </DropdownMenuItem>
+            </DropdownMenuContent>
+          </DropdownMenu>
+        </div>
+      </CardHeader>
+      <CardContent className="flex-grow">
+        <Badge variant="secondary">{actor.type || "UNKNOWN"}</Badge>
+      </CardContent>
+      <CardFooter className="flex justify-between items-center text-xs text-muted-foreground">
+        <div className="flex items-center gap-1">
+          {actor.is_active ? (
+            <CheckCircle className="h-4 w-4 text-green-500" />
+          ) : (
+            <XCircle className="h-4 w-4" />
+          )}{" "}
+          {actor.is_active ? "Active" : "Inactive"}
+        </div>
+        <div className="flex items-center gap-1">
+          {actor.is_verified ? (
+            <CheckCircle className="h-4 w-4 text-sky-500" />
+          ) : (
+            <XCircle className="h-4 w-4" />
+          )}{" "}
+          {actor.is_verified ? "Verified" : "Not Verified"}
+        </div>
+      </CardFooter>
+    </Card>
+  );
 }
+// END OF FILE: app/(dashboard)/super-admin/business-actors/business-actor-card.tsx
+
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-actors/business-actors-client.tsx
+
+"use client";
 
-export function BusinessActorsClient({
-  initialActors,
-}: BusinessActorsClientProps) {
-  const [actors, setActors] = useState<BusinessActorDto[]>(initialActors);
+import React, { useState, useMemo, useCallback, useEffect } from "react";
+import { ColumnDef } from "@tanstack/react-table";
+import { toast } from "sonner";
+import { BusinessActorDto } from "@/types/organization";
+import { organizationRepository } from "@/lib/data-repo/organization";
+import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
+import { PageHeader } from "@/components/ui/page-header";
+import { Button } from "@/components/ui/button";
+import { PlusCircle, UserPlus, Search as SearchIcon } from "lucide-react";
+import { getBusinessActorColumns } from "./columns";
+import { BusinessActorCard } from "./business-actor-card";
+import {
+  Dialog,
+  DialogContent,
+  DialogHeader,
+  DialogTitle,
+  DialogDescription,
+} from "@/components/ui/dialog";
+import { BusinessActorForm } from "@/components/business-actor/business-actor-form";
+import { FeedbackCard } from "@/components/ui/feedback-card";
+import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
+
+const statusOptions = [
+  { value: "true", label: "Active" },
+  { value: "false", label: "Inactive" },
+];
+const verifiedOptions = [
+  { value: "true", label: "Verified" },
+  { value: "false", label: "Not Verified" },
+];
+
+export function BusinessActorsClient() {
+  const [actors, setActors] = useState<BusinessActorDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
   const [isFormOpen, setIsFormOpen] = useState(false);
   const [editingActor, setEditingActor] = useState<
     BusinessActorDto | undefined
   >();
 
   const refreshData = useCallback(async () => {
-    const updatedActors = await organizationRepository.getAllBusinessActors();
-    setActors(updatedActors);
+    setIsLoading(true);
+    setError(null);
+    try {
+      const updatedActors = await organizationRepository.getAllBusinessActors();
+      setActors(updatedActors);
+    } catch (err: any) {
+      setError(err.message || "Failed to fetch business actors.");
+      toast.error(err.message || "Failed to fetch business actors.");
+    } finally {
+      setIsLoading(false);
+    }
   }, []);
 
+  useEffect(() => {
+    refreshData();
+  }, [refreshData]);
+
   const handleOpenDialog = (actor?: BusinessActorDto) => {
     setEditingActor(actor);
     setIsFormOpen(true);
@@ -10844,8 +12478,8 @@ export function BusinessActorsClient({
       <ResourceDataTable
         data={actors}
         columns={columns}
-        isLoading={false}
-        error={null}
+        isLoading={isLoading}
+        error={error}
         onRefreshAction={refreshData}
         searchPlaceholder="Search by name, email..."
         onDeleteItemsAction={handleDelete}
@@ -10993,7 +12627,6 @@ export const getBusinessActorColumns = (actions: Omit<BusinessActorRowActionsPro
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-actors/page.tsx
 
 import { Metadata } from "next";
-import { organizationRepository } from "@/lib/data-repo/organization";
 import { BusinessActorsClient } from "./business-actors-client";
 
 export const metadata: Metadata = {
@@ -11002,10 +12635,8 @@ export const metadata: Metadata = {
     "Create, view, and manage all Business Actor profiles on the platform.",
 };
 
-export default async function SuperAdminBusinessActorsPage() {
-  // Fetch only the business actors. No user list is needed.
-  const actors = await organizationRepository.getAllBusinessActors();
-  return <BusinessActorsClient initialActors={actors} />;
+export default function SuperAdminBusinessActorsPage() {
+  return <BusinessActorsClient />;
 }
 // END OF FILE: app/(dashboard)/super-admin/business-actors/page.tsx
 
@@ -11255,9 +12886,10 @@ export default async function BusinessDomainsPage() {
 
 "use client";
 
-import React, { useMemo } from "react";
+import React, { useMemo, useState, useEffect, useCallback } from "react";
 import { ColumnDef } from "@tanstack/react-table";
 import { CertificationDto, OrganizationDto } from "@/types/organization";
+import { organizationRepository } from "@/lib/data-repo/organization";
 import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
 import { PageHeader } from "@/components/ui/page-header";
 import { getSuperAdminCertificationColumns } from "./columns";
@@ -11265,22 +12897,43 @@ import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filte
 import { FeedbackCard } from "@/components/ui/feedback-card";
 import { Award, Search } from "lucide-react";
 
-interface CertificationsClientProps {
-  allCertifications: CertificationDto[];
-  allOrganizations: OrganizationDto[];
-}
+export function CertificationsClient() {
+  const [certifications, setCertifications] = useState<CertificationDto[]>([]);
+  const [organizations, setOrganizations] = useState<OrganizationDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+
+  const fetchData = useCallback(async () => {
+    setIsLoading(true);
+    setError(null);
+    try {
+      const orgs = await organizationRepository.getAllOrganizations();
+      setOrganizations(orgs);
+      
+      const certArrays = await Promise.all(
+        orgs.map((org) =>
+          organizationRepository.getCertifications(org.organization_id!)
+        )
+      );
+      setCertifications(certArrays.flat());
+    } catch (err: any) {
+      setError(err.message || "Failed to fetch certifications.");
+    } finally {
+      setIsLoading(false);
+    }
+  }, []);
+
+  useEffect(() => {
+    fetchData();
+  }, [fetchData]);
 
-export function CertificationsClient({
-  allCertifications,
-  allOrganizations,
-}: CertificationsClientProps) {
   const orgOptions = useMemo(
     () =>
-      allOrganizations.map((org) => ({
+      organizations.map((org) => ({
         label: org.long_name || org.organization_id!,
         value: org.organization_id!,
       })),
-    [allOrganizations]
+    [organizations]
   );
 
   const columns = useMemo<ColumnDef<CertificationDto>[]>(
@@ -11290,11 +12943,11 @@ export function CertificationsClient({
 
   return (
     <ResourceDataTable
-      data={allCertifications}
+      data={certifications}
       columns={columns}
-      isLoading={false}
-      error={null}
-      onRefreshAction={() => window.location.reload()}
+      isLoading={isLoading}
+      error={error}
+      onRefreshAction={fetchData}
       searchPlaceholder="Search by certification name or type..."
       onDeleteItemsAction={() => {}}
       viewModeStorageKey="sa-certs-view-mode"
@@ -11391,7 +13044,6 @@ export const getSuperAdminCertificationColumns =
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/certifications/page.tsx
 
 import { Metadata } from "next";
-import { organizationRepository } from "@/lib/data-repo/organization";
 import { CertificationsClient } from "./certifications-client";
 
 export const metadata: Metadata = {
@@ -11399,27 +13051,8 @@ export const metadata: Metadata = {
   description: "View and filter all certifications across all organizations.",
 };
 
-export default async function SuperAdminCertificationsPage() {
-  const [certifications, organizations] = await Promise.all([
-    organizationRepository
-      .getAllOrganizations()
-      .then((orgs) =>
-        Promise.all(
-          orgs.map((org) =>
-            organizationRepository.getCertifications(org.organization_id!)
-          )
-        )
-      )
-      .then((arrays) => arrays.flat()),
-    organizationRepository.getAllOrganizations(),
-  ]);
-
-  return (
-    <CertificationsClient
-      allCertifications={certifications}
-      allOrganizations={organizations}
-    />
-  );
+export default function SuperAdminCertificationsPage() {
+  return <CertificationsClient />;
 }
 // END OF FILE: app/(dashboard)/super-admin/certifications/page.tsx
 
@@ -11524,9 +13157,10 @@ export const getSuperAdminCustomerColumns = (): ColumnDef<CustomerDto>[] => [
 
 "use client";
 
-import React, { useMemo } from "react";
+import React, { useMemo, useState, useEffect, useCallback } from "react";
 import { ColumnDef } from "@tanstack/react-table";
 import { CustomerDto, OrganizationDto } from "@/types/organization";
+import { organizationRepository } from "@/lib/data-repo/organization";
 import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
 import { PageHeader } from "@/components/ui/page-header";
 import { getSuperAdminCustomerColumns } from "./columns";
@@ -11534,22 +13168,43 @@ import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filte
 import { FeedbackCard } from "@/components/ui/feedback-card";
 import { Users, Search } from "lucide-react";
 
-interface CustomersClientProps {
-  allCustomers: CustomerDto[];
-  allOrganizations: OrganizationDto[];
-}
+export function CustomersClient() {
+  const [customers, setCustomers] = useState<CustomerDto[]>([]);
+  const [organizations, setOrganizations] = useState<OrganizationDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+
+  const fetchData = useCallback(async () => {
+    setIsLoading(true);
+    setError(null);
+    try {
+      const orgs = await organizationRepository.getAllOrganizations();
+      setOrganizations(orgs);
+      
+      const customerArrays = await Promise.all(
+        orgs.map((org) =>
+          organizationRepository.getOrgCustomers(org.organization_id!)
+        )
+      );
+      setCustomers(customerArrays.flat());
+    } catch (err: any) {
+      setError(err.message || "Failed to fetch customer data.");
+    } finally {
+      setIsLoading(false);
+    }
+  }, []);
+  
+  useEffect(() => {
+    fetchData();
+  }, [fetchData]);
 
-export function CustomersClient({
-  allCustomers,
-  allOrganizations,
-}: CustomersClientProps) {
   const orgOptions = useMemo(
     () =>
-      allOrganizations.map((org) => ({
+      organizations.map((org) => ({
         label: org.long_name || org.organization_id!,
         value: org.organization_id!,
       })),
-    [allOrganizations]
+    [organizations]
   );
 
   const columns = useMemo<ColumnDef<CustomerDto>[]>(
@@ -11559,11 +13214,11 @@ export function CustomersClient({
 
   return (
     <ResourceDataTable
-      data={allCustomers}
+      data={customers}
       columns={columns}
-      isLoading={false}
-      error={null}
-      onRefreshAction={() => window.location.reload()}
+      isLoading={isLoading}
+      error={error}
+      onRefreshAction={fetchData}
       searchPlaceholder="Search by customer name..."
       onDeleteItemsAction={() => {}}
       viewModeStorageKey="sa-customers-view-mode"
@@ -11606,7 +13261,6 @@ export function CustomersClient({
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/customers/page.tsx
 
 import { Metadata } from "next";
-import { organizationRepository } from "@/lib/data-repo/organization";
 import { CustomersClient } from "./customers-client";
 
 export const metadata: Metadata = {
@@ -11614,27 +13268,8 @@ export const metadata: Metadata = {
   description: "View and filter all customers across all organizations.",
 };
 
-export default async function SuperAdminCustomersPage() {
-  const [customers, organizations] = await Promise.all([
-    organizationRepository
-      .getAllOrganizations()
-      .then((orgs) =>
-        Promise.all(
-          orgs.map((org) =>
-            organizationRepository.getOrgCustomers(org.organization_id!)
-          )
-        )
-      )
-      .then((arrays) => arrays.flat()),
-    organizationRepository.getAllOrganizations(),
-  ]);
-
-  return (
-    <CustomersClient
-      allCustomers={customers}
-      allOrganizations={organizations}
-    />
-  );
+export default function SuperAdminCustomersPage() {
+  return <CustomersClient />;
 }
 // END OF FILE: app/(dashboard)/super-admin/customers/page.tsx
 
@@ -11642,7 +13277,7 @@ export default async function SuperAdminCustomersPage() {
 
 "use client";
 
-import React from "react";
+import React, { useState, useEffect, useCallback } from "react";
 import {
   Card,
   CardContent,
@@ -11651,6 +13286,9 @@ import {
   CardDescription,
 } from "@/components/ui/card";
 import { PageHeader } from "@/components/ui/page-header";
+import { Loader2 } from "lucide-react";
+import { authRepository } from "@/lib/data-repo/auth";
+import { organizationRepository } from "@/lib/data-repo/organization";
 import {
   Bar,
   BarChart,
@@ -11664,7 +13302,7 @@ import {
   Cell,
 } from "recharts";
 import { Users, Building, Briefcase, FileText, UserPlus } from "lucide-react";
-import { OrganizationDto, BusinessActorDto } from "@/types/organization";
+import { OrganizationDto } from "@/types/organization";
 import { UserDto } from "@/types/auth";
 import { format } from "date-fns";
 
@@ -11684,10 +13322,6 @@ export interface DashboardData {
   };
 }
 
-interface SuperAdminDashboardClientProps {
-  initialData: DashboardData;
-}
-
 const COLORS = [
   "#0088FE",
   "#00C49F",
@@ -11697,11 +13331,73 @@ const COLORS = [
   "#82ca9d",
 ];
 
-export function SuperAdminDashboardClient({
-  initialData,
-}: SuperAdminDashboardClientProps) {
-  const { stats, charts, recentActivity } = initialData;
+export function SuperAdminDashboardClient() {
+  const [data, setData] = useState<DashboardData | null>(null);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+
+  const fetchDashboardData = useCallback(async () => {
+    setIsLoading(true);
+    setError(null);
+    try {
+      const [users, organizations, businessActors] = await Promise.all([
+        authRepository.getAllUsers(),
+        organizationRepository.getAllOrganizations(),
+        organizationRepository.getAllBusinessActors(),
+      ]);
 
+      const orgStatusCounts = organizations.reduce((acc, org) => {
+        const status = org.status || "UNKNOWN";
+        acc[status] = (acc[status] || 0) + 1;
+        return acc;
+      }, {} as Record<string, number>);
+
+      const baTypeCounts = businessActors.reduce((acc, ba) => {
+        const type = ba.type || "UNKNOWN";
+        acc[type] = (acc[type] || 0) + 1;
+        return acc;
+      }, {} as Record<string, number>);
+
+      setData({
+        stats: {
+          totalUsers: users.length,
+          totalOrgs: organizations.length,
+          totalBAs: businessActors.length,
+        },
+        charts: { orgStatusCounts, baTypeCounts },
+        recentActivity: {
+          users: users.slice(0, 5),
+          organizations: organizations.slice(0, 5),
+        },
+      });
+    } catch (err: any) {
+      setError(err.message || "Failed to fetch dashboard data.");
+    } finally {
+      setIsLoading(false);
+    }
+  }, []);
+  
+  useEffect(() => {
+    fetchDashboardData();
+  }, [fetchDashboardData]);
+
+  if (isLoading) {
+    return (
+      <div className="flex items-center justify-center h-[80vh]">
+        <Loader2 className="h-12 w-12 animate-spin text-primary" />
+      </div>
+    );
+  }
+
+  if (error || !data) {
+    return (
+      <div className="flex items-center justify-center h-full">
+        <p className="text-destructive">Error: {error || "Could not load platform statistics."}</p>
+      </div>
+    );
+  }
+
+  const { stats, charts, recentActivity } = data;
   const orgStatusData = Object.entries(charts.orgStatusCounts).map(
     ([name, value]) => ({ name, value })
   );
@@ -11862,7 +13558,7 @@ export function SuperAdminDashboardClient({
                       {user.first_name} {user.last_name}
                     </p>
                     <p className="text-sm text-muted-foreground">
-                      {user.username}
+                      @{user.username}
                     </p>
                   </div>
                   <div className="ml-auto text-xs text-muted-foreground">
@@ -11882,62 +13578,15 @@ export function SuperAdminDashboardClient({
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/dashboard/page.tsx
 
 import { Metadata } from "next";
-import { authRepository } from "@/lib/data-repo/auth";
-import { organizationRepository } from "@/lib/data-repo/organization";
-import { DashboardData, SuperAdminDashboardClient } from "./dashboard-client";
+import { SuperAdminDashboardClient } from "./dashboard-client";
 
 export const metadata: Metadata = {
   title: "Super Admin Dashboard",
   description: "Platform-wide overview of users, organizations, and activity.",
 };
 
-// Change return type to: DashboardData | null
-async function getDashboardStats(): Promise<DashboardData | null> {
-  try {
-    const [users, organizations, businessActors] = await Promise.all([
-      authRepository.getAllUsers(),
-      organizationRepository.getAllOrganizations(),
-      organizationRepository.getAllBusinessActors(),
-    ]);
-
-    const totalUsers = users.length;
-    const totalOrgs = organizations.length;
-    const totalBAs = businessActors.length;
-
-    const orgStatusCounts = organizations.reduce((acc, org) => {
-      const status = org.status || "UNKNOWN";
-      acc[status] = (acc[status] || 0) + 1;
-      return acc;
-    }, {} as Record<string, number>);
-
-    const baTypeCounts = businessActors.reduce((acc, ba) => {
-      const type = ba.type || "UNKNOWN";
-      acc[type] = (acc[type] || 0) + 1;
-      return acc;
-    }, {} as Record<string, number>);
-
-    return {
-      stats: { totalUsers, totalOrgs, totalBAs },
-      charts: { orgStatusCounts, baTypeCounts },
-      recentActivity: {
-        users: users.slice(0, 5),
-        organizations: organizations.slice(0, 5),
-      },
-    };
-  } catch (error) {
-    console.error("Failed to fetch dashboard stats:", error);
-    return null;
-  }
-}
-
-export default async function SuperAdminDashboardPage() {
-  const dashboardData = await getDashboardStats();
-
-  if (!dashboardData) {
-    return <div>Error: Could not load platform statistics.</div>;
-  }
-
-  return <SuperAdminDashboardClient initialData={dashboardData} />;
+export default function SuperAdminDashboardPage() {
+  return <SuperAdminDashboardClient />;
 }
 // END OF FILE: app/(dashboard)/super-admin/dashboard/page.tsx
 
@@ -12184,7 +13833,7 @@ export function AdminOrganizationCard({ organization, onStatusChangeAction, onDe
 
 "use client";
 
-import React, { useState, useMemo, useCallback } from "react";
+import React, { useState, useMemo, useCallback, useEffect } from "react";
 import { ColumnDef } from "@tanstack/react-table";
 import { toast } from "sonner";
 import {
@@ -12217,16 +13866,11 @@ const statusOptions = OrganizationStatusValues.map((s) => ({
   label: s.replace(/_/g, " "),
 }));
 
-interface OrganizationsClientProps {
-  initialOrganizations: OrganizationDto[];
-}
-
-export function OrganizationsClient({
-  initialOrganizations,
-}: OrganizationsClientProps) {
+export function OrganizationsClient() {
   const [organizations, setOrganizations] =
-    useState<OrganizationDto[]>(initialOrganizations);
-  const [isLoading, setIsLoading] = useState(false);
+    useState<OrganizationDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
   const [dialogState, setDialogState] = useState<{
     open: boolean;
     items: OrganizationDto[];
@@ -12236,16 +13880,23 @@ export function OrganizationsClient({
 
   const refreshData = useCallback(async () => {
     setIsLoading(true);
+    setError(null);
     try {
       const data = await organizationRepository.getAllOrganizations();
       setOrganizations(data);
-    } catch (error) {
-      toast.error("Failed to refresh organization data.");
+    } catch (err: any) {
+      const errorMessage = err.message || "Failed to refresh organization data.";
+      setError(errorMessage);
+      toast.error(errorMessage);
     } finally {
       setIsLoading(false);
     }
   }, []);
 
+  useEffect(() => {
+    refreshData();
+  }, [refreshData]);
+
   const handleStatusChangeConfirmation = (
     org: OrganizationDto,
     newStatus: OrganizationStatus
@@ -12301,7 +13952,7 @@ export function OrganizationsClient({
         data={organizations}
         columns={columns}
         isLoading={isLoading}
-        error={null}
+        error={error}
         onRefreshAction={refreshData}
         searchPlaceholder="Search by name, email..."
         onDeleteItemsAction={handleDeleteConfirmation}
@@ -12372,7 +14023,6 @@ export function OrganizationsClient({
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/organizations/page.tsx
 
 import { Metadata } from "next";
-import { organizationRepository } from "@/lib/data-repo/organization";
 import { OrganizationsClient } from "./organizations-client";
 
 export const metadata: Metadata = {
@@ -12381,9 +14031,8 @@ export const metadata: Metadata = {
     "Approve, monitor, and manage all organizations on the platform.",
 };
 
-export default async function SuperAdminOrganizationsPage() {
-  const organizations = await organizationRepository.getAllOrganizations();
-  return <OrganizationsClient initialOrganizations={organizations} />;
+export default function SuperAdminOrganizationsPage() {
+  return <OrganizationsClient />;
 }
 // END OF FILE: app/(dashboard)/super-admin/organizations/page.tsx
 
@@ -12461,7 +14110,6 @@ export default function SuperAdminProfilePage() {
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/roles/page.tsx
 
 import { Metadata } from "next";
-import { authRepository } from "@/lib/data-repo/auth";
 import { RoleAssignmentClient } from "./roles-client";
 
 export const metadata: Metadata = {
@@ -12469,15 +14117,8 @@ export const metadata: Metadata = {
   description: "Configure Role-Based Access Control (RBAC) for the platform.",
 };
 
-export default async function SuperAdminRolesPage() {
-  const [roles, permissions] = await Promise.all([
-    authRepository.getRoles(),
-    authRepository.getAllPermissions(),
-  ]);
-
-  return (
-    <RoleAssignmentClient initialRoles={roles} allPermissions={permissions} />
-  );
+export default function SuperAdminRolesPage() {
+  return <RoleAssignmentClient />;
 }
 // END OF FILE: app/(dashboard)/super-admin/roles/page.tsx
 
@@ -12485,7 +14126,7 @@ export default async function SuperAdminRolesPage() {
 
 "use client";
 
-import React, { useState, useEffect, useMemo } from "react";
+import React, { useState, useEffect, useCallback } from "react";
 import { toast } from "sonner";
 import { RoleDto, PermissionDto } from "@/types/auth";
 import { authRepository } from "@/lib/data-repo/auth";
@@ -12495,41 +14136,47 @@ import { Checkbox } from "@/components/ui/checkbox";
 import { Label } from "@/components/ui/label";
 import { Button } from "@/components/ui/button";
 import { PageHeader } from "@/components/ui/page-header";
-import { Separator } from "@/components/ui/separator";
 import { Loader2, Save } from "lucide-react";
 import { cn } from "@/lib/utils";
 
-interface RoleAssignmentClientProps {
-  initialRoles: RoleDto[];
-  allPermissions: PermissionDto[];
-}
-
-export function RoleAssignmentClient({ initialRoles, allPermissions }: RoleAssignmentClientProps) {
-  const [roles, setRoles] = useState<RoleDto[]>(initialRoles);
+export function RoleAssignmentClient() {
+  const [roles, setRoles] = useState<RoleDto[]>([]);
+  const [allPermissions, setAllPermissions] = useState<PermissionDto[]>([]);
   const [selectedRole, setSelectedRole] = useState<RoleDto | null>(null);
   const [rolePermissions, setRolePermissions] = useState<Set<string>>(new Set());
-  const [isLoading, setIsLoading] = useState(false);
+  const [isLoadingData, setIsLoadingData] = useState(true);
+  const [isSaving, setIsSaving] = useState(false);
 
-  useEffect(() => {
-    if (roles.length > 0 && !selectedRole) {
-      setSelectedRole(roles[0]);
+  const fetchData = useCallback(async () => {
+    setIsLoadingData(true);
+    try {
+      const [fetchedRoles, fetchedPermissions] = await Promise.all([
+        authRepository.getRoles(),
+        authRepository.getAllPermissions(),
+      ]);
+      setRoles(fetchedRoles);
+      setAllPermissions(fetchedPermissions);
+      if (fetchedRoles.length > 0) {
+        setSelectedRole(fetchedRoles[0]);
+      }
+    } catch (error: any) {
+      toast.error(`Failed to load roles and permissions: ${error.message}`);
+    } finally {
+      setIsLoadingData(false);
     }
-  }, [roles, selectedRole]);
+  }, []);
 
   useEffect(() => {
-    if (selectedRole?.id) {
-      setIsLoading(true);
-      // In a real app, you'd fetch permissions for the selected role.
-      // Here, we'll just simulate it.
-      // For mock, we can assume some roles have some permissions.
-      const mockPerms = new Set<string>();
-      if (selectedRole.name === 'ADMIN_ROLE') {
-        allPermissions.slice(0, 5).forEach(p => mockPerms.add(p.id!));
-      }
-      setRolePermissions(mockPerms);
-      setIsLoading(false);
-    }
-  }, [selectedRole, allPermissions]);
+    fetchData();
+  }, [fetchData]);
+
+  useEffect(() => {
+    // // This logic should be updated when an endpoint to fetch permissions per role is available.
+    // if (selectedRole?.id) {
+    //   const mockPerms = new Set<string>(selectedRole.permissions?.map(p => p.id!) || []);
+    //   setRolePermissions(mockPerms);
+    // }
+  }, [selectedRole]);
 
   const handlePermissionToggle = (permissionId: string, checked: boolean) => {
     setRolePermissions(prev => {
@@ -12545,25 +14192,27 @@ export function RoleAssignmentClient({ initialRoles, allPermissions }: RoleAssig
 
   const handleSaveChanges = async () => {
     if (!selectedRole?.id) return;
-    setIsLoading(true);
+    setIsSaving(true);
     try {
-      // This logic would need to be more sophisticated in a real app,
-      // calculating which permissions to add and which to remove.
       await authRepository.assignPermissionsToRole(selectedRole.id, Array.from(rolePermissions));
       toast.success(`Permissions for role "${selectedRole.name}" updated.`);
     } catch (error: any) {
       toast.error(`Failed to save permissions: ${error.message}`);
     } finally {
-      setIsLoading(false);
+      setIsSaving(false);
     }
   };
+  
+  if (isLoadingData) {
+    return <div className="flex justify-center items-center h-full"><Loader2 className="h-8 w-8 animate-spin" /></div>
+  }
 
   return (
     <div className="space-y-6">
       <PageHeader
         title="Role & Permission Management"
         description="Assign permissions to roles to control user access across the platform."
-        action={<Button onClick={handleSaveChanges} disabled={isLoading}>{isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />} Save Changes</Button>}
+        action={<Button onClick={handleSaveChanges} disabled={isSaving}>{isSaving && <Loader2 className="mr-2 h-4 w-4 animate-spin" />} Save Changes</Button>}
       />
       <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
         <Card className="md:col-span-1">
@@ -12590,33 +14239,30 @@ export function RoleAssignmentClient({ initialRoles, allPermissions }: RoleAssig
             <CardTitle>Permissions for: {selectedRole?.name || '...'}</CardTitle>
           </CardHeader>
           <CardContent>
-            {isLoading ? (
-              <div className="flex justify-center items-center h-[60vh]"><Loader2 className="h-8 w-8 animate-spin" /></div>
-            ) : (
-              <ScrollArea className="h-[60vh]">
-                <div className="space-y-4 pr-4">
-                  {allPermissions.map(permission => (
-                    <div key={permission.id} className="flex items-center space-x-3 rounded-md border p-3">
-                      <Checkbox
-                        id={`perm-${permission.id}`}
-                        checked={rolePermissions.has(permission.id!)}
-                        onCheckedChange={(checked) => handlePermissionToggle(permission.id!, !!checked)}
-                      />
-                      <Label htmlFor={`perm-${permission.id}`} className="font-medium leading-none cursor-pointer">
-                        {permission.name}
-                        <p className="text-xs text-muted-foreground font-normal">{permission.description}</p>
-                      </Label>
-                    </div>
-                  ))}
-                </div>
-              </ScrollArea>
-            )}
+            <ScrollArea className="h-[60vh]">
+              <div className="space-y-4 pr-4">
+                {allPermissions.map(permission => (
+                  <div key={permission.id} className="flex items-center space-x-3 rounded-md border p-3">
+                    <Checkbox
+                      id={`perm-${permission.id}`}
+                      checked={rolePermissions.has(permission.id!)}
+                      onCheckedChange={(checked) => handlePermissionToggle(permission.id!, !!checked)}
+                    />
+                    <Label htmlFor={`perm-${permission.id}`} className="font-medium leading-none cursor-pointer">
+                      {permission.name}
+                      <p className="text-xs text-muted-foreground font-normal">{permission.description}</p>
+                    </Label>
+                  </div>
+                ))}
+              </div>
+            </ScrollArea>
           </CardContent>
         </Card>
       </div>
     </div>
   );
-}// END OF FILE: app/(dashboard)/super-admin/roles/roles-client.tsx
+}
+// END OF FILE: app/(dashboard)/super-admin/roles/roles-client.tsx
 
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/suppliers/columns.tsx
 
@@ -12673,7 +14319,6 @@ export const getSuperAdminSupplierColumns = (): ColumnDef<ProviderDto>[] => [
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/suppliers/page.tsx
 
 import { Metadata } from "next";
-import { organizationRepository } from "@/lib/data-repo/organization";
 import { SuppliersClient } from "./suppliers-client";
 
 export const metadata: Metadata = {
@@ -12681,24 +14326,19 @@ export const metadata: Metadata = {
   description: "View and filter all suppliers across all organizations.",
 };
 
-export default async function SuperAdminSuppliersPage() {
-  const [suppliers, organizations] = await Promise.all([
-    organizationRepository.getAllOrganizations().then(orgs => 
-      Promise.all(orgs.map(org => organizationRepository.getOrgSuppliers(org.organization_id!)))
-    ).then(arrays => arrays.flat()),
-    organizationRepository.getAllOrganizations(),
-  ]);
-
-  return <SuppliersClient allSuppliers={suppliers} allOrganizations={organizations} />;
-}// END OF FILE: app/(dashboard)/super-admin/suppliers/page.tsx
+export default function SuperAdminSuppliersPage() {
+  return <SuppliersClient />;
+}
+// END OF FILE: app/(dashboard)/super-admin/suppliers/page.tsx
 
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/suppliers/suppliers-client.tsx
 
 "use client";
 
-import React, { useMemo } from "react";
+import React, { useMemo, useState, useEffect, useCallback } from "react";
 import { ColumnDef } from "@tanstack/react-table";
 import { ProviderDto, OrganizationDto } from "@/types/organization";
+import { organizationRepository } from "@/lib/data-repo/organization";
 import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
 import { PageHeader } from "@/components/ui/page-header";
 import { getSuperAdminSupplierColumns } from "./columns";
@@ -12706,22 +14346,41 @@ import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filte
 import { FeedbackCard } from "@/components/ui/feedback-card";
 import { Truck, Search } from "lucide-react";
 
-interface SuppliersClientProps {
-  allSuppliers: ProviderDto[];
-  allOrganizations: OrganizationDto[];
-}
+export function SuppliersClient() {
+  const [suppliers, setSuppliers] = useState<ProviderDto[]>([]);
+  const [organizations, setOrganizations] = useState<OrganizationDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+
+  const fetchData = useCallback(async () => {
+    setIsLoading(true);
+    setError(null);
+    try {
+      const orgs = await organizationRepository.getAllOrganizations();
+      setOrganizations(orgs);
+      
+      const supplierArrays = await Promise.all(
+        orgs.map(org => organizationRepository.getOrgSuppliers(org.organization_id!))
+      );
+      setSuppliers(supplierArrays.flat());
+    } catch (err: any) {
+      setError(err.message || "Failed to fetch supplier data.");
+    } finally {
+      setIsLoading(false);
+    }
+  }, []);
+
+  useEffect(() => {
+    fetchData();
+  }, [fetchData]);
 
-export function SuppliersClient({
-  allSuppliers,
-  allOrganizations,
-}: SuppliersClientProps) {
   const orgOptions = useMemo(
     () =>
-      allOrganizations.map((org) => ({
+      organizations.map((org) => ({
         label: org.long_name || org.organization_id!,
         value: org.organization_id!,
       })),
-    [allOrganizations]
+    [organizations]
   );
 
   const columns = useMemo<ColumnDef<ProviderDto>[]>(
@@ -12731,11 +14390,11 @@ export function SuppliersClient({
 
   return (
     <ResourceDataTable
-      data={allSuppliers}
+      data={suppliers}
       columns={columns}
-      isLoading={false}
-      error={null}
-      onRefreshAction={() => window.location.reload()}
+      isLoading={isLoading}
+      error={error}
+      onRefreshAction={fetchData}
       searchPlaceholder="Search by supplier name..."
       onDeleteItemsAction={() => {}}
       viewModeStorageKey="sa-suppliers-view-mode"
@@ -12935,7 +14594,6 @@ export const getUserColumns = (
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/users/page.tsx
 
 import { Metadata } from "next";
-import { authRepository } from "@/lib/data-repo/auth";
 import { UsersClient } from "./users-client";
 
 export const metadata: Metadata = {
@@ -12943,9 +14601,8 @@ export const metadata: Metadata = {
   description: "View, manage, and moderate all user accounts on the platform.",
 };
 
-export default async function SuperAdminUsersPage() {
-  const users = await authRepository.getAllUsers();
-  return <UsersClient initialUsers={users} />;
+export default function SuperAdminUsersPage() {
+  return <UsersClient />;
 }
 // END OF FILE: app/(dashboard)/super-admin/users/page.tsx
 
@@ -13058,14 +14715,13 @@ export function UserCard({
 
 "use client";
 
-import React, { useState, useMemo, useCallback } from "react";
+import React, { useState, useMemo, useCallback, useEffect } from "react";
 import { ColumnDef } from "@tanstack/react-table";
 import { toast } from "sonner";
 import { UserDto } from "@/types/auth";
 import { authRepository } from "@/lib/data-repo/auth";
 import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
 import { PageHeader } from "@/components/ui/page-header";
-import { Button } from "@/components/ui/button";
 import { Users, Search as SearchIcon } from "lucide-react";
 import { getUserColumns } from "./columns";
 import { UserCard } from "./user-card";
@@ -13077,34 +14733,36 @@ const statusOptions = [
   { value: "false", label: "Disabled" },
 ];
 
-interface UsersClientProps {
-  initialUsers: UserDto[];
-}
-
-export function UsersClient({ initialUsers }: UsersClientProps) {
-  const [users, setUsers] = useState<UserDto[]>(initialUsers);
-  const [isLoading, setIsLoading] = useState(false);
+export function UsersClient() {
+  const [users, setUsers] = useState<UserDto[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
 
   const refreshData = useCallback(async () => {
     setIsLoading(true);
+    setError(null);
     try {
       const data = await authRepository.getAllUsers();
       setUsers(data);
-    } catch (error) {
-      toast.error("Failed to refresh user data.");
+    } catch (err: any) {
+      const errorMessage = err.message || "Failed to refresh user data.";
+      setError(errorMessage);
+      toast.error(errorMessage);
     } finally {
       setIsLoading(false);
     }
   }, []);
+  
+  useEffect(() => {
+    refreshData();
+  }, [refreshData]);
 
   const handleStatusToggle = (user: UserDto) => {
-    toast.info(`Toggling status for ${user.username}... (Not Implemented in backend)`);
-    // In a real app: call an API to update user status, then refreshData()
+    toast.info(`Toggling status for ${user.username}... (Not Implemented)`);
   };
 
   const handleVerify = (user: UserDto, type: "email" | "phone") => {
-    toast.info(`Verifying ${type} for ${user.username}... (Not Implemented in backend)`);
-    // In a real app: call an API to verify, then refreshData()
+    toast.info(`Verifying ${type} for ${user.username}... (Not Implemented)`);
   };
 
   const columns = useMemo<ColumnDef<UserDto>[]>(
@@ -13121,11 +14779,11 @@ export function UsersClient({ initialUsers }: UsersClientProps) {
       data={users}
       columns={columns}
       isLoading={isLoading}
-      error={null}
+      error={error}
       onRefreshAction={refreshData}
       searchPlaceholder="Search by name, username, email..."
       onDeleteItemsAction={(items) =>
-        toast.error(`Deletion of ${items.length} users is not implemented in backend.`)
+        toast.error(`Deletion of ${items.length} users is not implemented.`)
       }
       viewModeStorageKey="sa-users-view-mode"
       exportFileName="users_export.csv"
@@ -13190,6 +14848,259 @@ export default function SuperAdminWebhooksPage() {
   );
 }// END OF FILE: app/(dashboard)/super-admin/webhooks/page.tsx
 
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/globals.css
+
+@import "tailwindcss";
+
+/* Define the custom variant for dark mode (unchanged) */
+@custom-variant dark (&:is(.dark *));
+
+/* Keep existing fade-in-up animation */
+@layer utilities {
+  @keyframes fade-in-up {
+    from {
+      opacity: 0;
+      transform: translateY(10px);
+    }
+
+    to {
+      opacity: 1;
+      transform: translateY(0);
+    }
+  }
+
+  .animate-fade-in-up {
+    animation: fade-in-up 0.5s ease-out forwards;
+  }
+}
+
+/* @theme inline - Retained for build tool compatibility */
+@theme inline {
+  --color-background: var(--background);
+  --color-foreground: var(--foreground);
+  --font-sans: var(--font-geist-sans);
+  --font-mono: var(--font-geist-mono);
+  --color-sidebar-ring: var(--sidebar-ring);
+  --color-sidebar-border: var(--sidebar-border);
+  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
+  --color-sidebar-accent: var(--sidebar-accent);
+  --color-sidebar-foreground: var(--sidebar-foreground);
+  --color-sidebar: var(--sidebar);
+  --color-chart-5: var(--chart-5);
+  --color-chart-4: var(--chart-4);
+  --color-chart-3: var(--chart-3);
+  --color-chart-2: var(--chart-2);
+  --color-chart-1: var(--chart-1);
+  --color-ring: var(--ring);
+  --color-input: var(--input);
+  --color-border: var(--border);
+  --color-destructive: var(--destructive);
+  --color-accent-foreground: var(--accent-foreground);
+  --color-accent: var(--accent);
+  --color-muted-foreground: var(--muted-foreground);
+  --color-muted: var(--muted);
+  --color-secondary-foreground: var(--secondary-foreground);
+  --color-secondary: var(--secondary);
+  --color-primary-foreground: var(--primary-foreground);
+  --color-primary: var(--primary);
+  --color-popover-foreground: var(--popover-foreground);
+  --color-popover: var(--popover);
+  --color-card-foreground: var(--card-foreground);
+  --color-card: var(--card);
+  --radius-sm: calc(var(--radius) - 4px);
+  --radius-md: calc(var(--radius) - 2px);
+  --radius-lg: var(--radius);
+  --radius-xl: calc(var(--radius) + 4px);
+}
+
+/* --- Light Theme --- */
+:root {
+  --radius: 0.75rem;
+
+  /* Base: Soft, off-white background with strong text contrast */
+  --background: oklch(98.5% 0.005 240);
+  /* Almost white, slightly cool */
+  --foreground: oklch(25% 0.03 255);
+  /* Dark, saturated slate blue for text */
+
+  /* Cards & Popovers: Clean white, stands out from the background */
+  --card: oklch(100% 0 0);
+  --card-foreground: var(--foreground);
+  --popover: var(--card);
+  --popover-foreground: var(--card-foreground);
+
+  /* Primary: A vibrant, modern blue for main actions */
+  --primary: oklch(58% 0.18 260);
+  /* A confident, slightly purplish blue */
+  --primary-foreground: oklch(99% 0.01 260);
+  /* Bright white for high contrast on blue */
+
+  /* Secondary: For secondary buttons and less important interactive elements */
+  --secondary: oklch(94% 0.015 250);
+  /* Light, cool gray */
+  --secondary-foreground: oklch(35% 0.03 255);
+  /* Dark slate for text on secondary bg */
+
+  /* Muted: For subtle backgrounds and text */
+  --muted: oklch(96% 0.01 245);
+  /* Very light gray, almost blends with background */
+  --muted-foreground: oklch(55% 0.025 250);
+  /* Mid-tone slate for placeholder text */
+
+  /* Accent: For hover states on lists and other subtle interactions */
+  --accent: oklch(95% 0.015 250);
+  /* Same as secondary for consistency */
+  --accent-foreground: var(--secondary-foreground);
+
+  /* Destructive: A clear, accessible red */
+  --destructive: oklch(65% 0.22 25);
+  /* Strong, clear red */
+  --destructive-foreground: oklch(99% 0.01 25);
+
+  /* Borders & Inputs: Clear distinction for form fields */
+  --border: oklch(90% 0.02 250);
+  /* A visible but not overpowering border */
+  --input: oklch(97% 0.01 240);
+  /* Slightly darker than card to show it's a field */
+  --ring: oklch(60% 0.2 260 / 70%);
+  /* A vivid focus ring using the primary color */
+
+  /* Charts: A vibrant, data-friendly palette */
+  --chart-1: oklch(70% 0.18 155);
+  /* Teal */
+  --chart-2: oklch(65% 0.22 285);
+  /* Magenta */
+  --chart-3: oklch(75% 0.18 55);
+  /* Amber */
+  --chart-4: oklch(60% 0.18 225);
+  /* Sky Blue */
+  --chart-5: oklch(80% 0.15 105);
+  /* Lime */
+
+  /* Sidebar: Slightly different from main background for clear separation */
+  --sidebar: oklch(97% 0.01 245);
+  --sidebar-foreground: var(--foreground);
+  --sidebar-border: var(--border);
+  --sidebar-accent: oklch(58% 0.18 260 / 15%);
+  /* Primary color with low opacity */
+  --sidebar-accent-foreground: var(--primary);
+  --sidebar-ring: var(--ring);
+}
+
+/* --- Dark Theme --- */
+.dark {
+  --radius: 0.75rem;
+
+  /* Base: Deep, dark slate background */
+  --background: oklch(15% 0.02 255);
+  /* Very dark, slightly saturated blue-slate */
+  --foreground: oklch(95% 0.01 240);
+  /* Bright, slightly cool text */
+
+  /* Cards & Popovers: A distinct, lighter layer */
+  --card: oklch(20% 0.025 255);
+  /* A step up from the background */
+  --card-foreground: var(--foreground);
+  --popover: var(--card);
+  --popover-foreground: var(--card-foreground);
+
+  /* Primary: A brighter, more energetic blue for dark mode */
+  --primary: oklch(70% 0.2 260);
+  --primary-foreground: oklch(15% 0.03 260);
+  /* Dark blue for text on bright blue bg */
+
+  /* Secondary: For secondary buttons and interactive elements */
+  --secondary: oklch(30% 0.03 255);
+  --secondary-foreground: oklch(97% 0.01 250);
+
+  /* Muted: For subtle backgrounds and text */
+  --muted: oklch(25% 0.028 250);
+  --muted-foreground: oklch(65% 0.03 250);
+
+  /* Accent: For hover states */
+  --accent: oklch(28% 0.03 255);
+  --accent-foreground: var(--secondary-foreground);
+
+  /* Destructive: A vivid red that stands out on dark backgrounds */
+  --destructive: oklch(65% 0.24 25);
+  --destructive-foreground: oklch(99% 0.01 25);
+
+  /* Borders & Inputs: Clear but not harsh */
+  --border: oklch(35% 0.03 250 / 80%);
+  /* Slightly transparent to blend */
+  --input: oklch(22% 0.028 250);
+  /* A distinct input field color */
+  --ring: oklch(75% 0.2 260 / 70%);
+  /* Bright focus ring */
+
+  /* Charts: Bright and vibrant for dark backgrounds */
+  --chart-1: oklch(75% 0.18 155);
+  --chart-2: oklch(70% 0.22 285);
+  --chart-3: oklch(80% 0.18 55);
+  --chart-4: oklch(65% 0.18 225);
+  --chart-5: oklch(85% 0.15 105);
+
+  /* Sidebar: Matches the main background for a unified feel */
+  --sidebar: var(--background);
+  --sidebar-foreground: var(--foreground);
+  --sidebar-border: var(--border);
+  --sidebar-accent: oklch(70% 0.2 260 / 15%);
+  --sidebar-accent-foreground: var(--primary);
+  --sidebar-ring: var(--ring);
+}
+
+/* --- Base Styles --- */
+@layer base {
+  * {
+    @apply border-border;
+  }
+
+  body {
+    @apply bg-background text-foreground antialiased;
+    @apply transition-colors duration-200 ease-in-out;
+  }
+
+  /* Enhanced input styles for better readability and distinction */
+  input,
+  textarea,
+  select {
+    @apply bg-input text-foreground border-border;
+    @apply focus:ring-2 focus:ring-ring focus:outline-none focus:border-primary/50;
+    @apply placeholder:text-muted-foreground;
+    @apply rounded-md px-3 py-2;
+  }
+
+  .bg-grid-pattern {
+    background-image: linear-gradient(to right, hsl(var(--border) / 0.1) 1px, transparent 1px),
+      linear-gradient(to bottom, hsl(var(--border) / 0.1) 1px, transparent 1px);
+    background-size: 20px 20px;
+  }
+}
+
+@layer utilities {
+  @keyframes shine {
+    from {
+      transform: translateX(-100%) skewX(-20deg);
+    }
+
+    to {
+      transform: translateX(250%) skewX(-20deg);
+    }
+  }
+}
+
+.scrollbar-hide::-webkit-scrollbar {
+  display: none;
+}
+
+/* Hide scrollbar for IE, Edge and Firefox */
+.scrollbar-hide {
+  -ms-overflow-style: none;
+  /* IE and Edge */
+  scrollbar-width: none;
+  /* Firefox */
+}// END OF FILE: app/globals.css
+
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/layout.tsx
 
 import "./globals.css";
@@ -16043,9 +17954,9 @@ export function DevRoleSwitcher({ className }: DevRoleSwitcherProps) {
   };
 
   // This component will only render in the development environment
-  if (process.env.NODE_ENV !== 'development') {
-    return null;
-  }
+  // if (process.env.NODE_ENV !== 'development') {
+  //   return null;
+  // }
 
   return (
     <div className={cn("flex items-center gap-2", className)}>
@@ -18023,6 +19934,211 @@ export const getAgencyColumns = (
 ];
 // END OF FILE: components/organization/agencies/columns.tsx
 
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/business-domains/business-domain-card.tsx
+
+"use client";
+
+import React from "react";
+import { BusinessDomainDto } from "@/types/organization";
+import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { Button } from "@/components/ui/button";
+import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
+import { MoreHorizontal, Edit3, Trash2, Tag } from "lucide-react";
+
+interface BusinessDomainCardProps {
+  domain: BusinessDomainDto;
+  onEditAction: (domain: BusinessDomainDto) => void;
+  onDeleteAction: (domain: BusinessDomainDto) => void;
+}
+
+export function BusinessDomainCard({ domain, onEditAction, onDeleteAction }: BusinessDomainCardProps) {
+  return (
+    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
+      <CardHeader className="flex-row items-start justify-between gap-4">
+        <div className="flex items-center gap-3">
+          <Avatar className="h-12 w-12 border rounded-md">
+            <AvatarImage src={domain.image} alt={domain.name} />
+            <AvatarFallback className="rounded-md"><Tag className="h-6 w-6 text-muted-foreground" /></AvatarFallback>
+          </Avatar>
+          <div>
+            <CardTitle className="text-base font-semibold line-clamp-1">{domain.name}</CardTitle>
+            <p className="text-xs text-muted-foreground">{domain.type_label}</p>
+          </div>
+        </div>
+        <DropdownMenu>
+          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
+          <DropdownMenuContent align="end">
+            <DropdownMenuItem onClick={() => onEditAction(domain)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
+            <DropdownMenuItem onClick={() => onDeleteAction(domain)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
+          </DropdownMenuContent>
+        </DropdownMenu>
+      </CardHeader>
+      <CardContent className="flex-grow text-sm text-muted-foreground">
+        <p className="line-clamp-2">{domain.description || "No description provided."}</p>
+      </CardContent>
+      <CardFooter>
+        <Button variant="outline" className="w-full" onClick={() => onEditAction(domain)}>View Details</Button>
+      </CardFooter>
+    </Card>
+  );
+}// END OF FILE: components/organization/business-domains/business-domain-card.tsx
+
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/business-domains/business-domain-form.tsx
+
+"use client";
+
+import React, { useState } from "react";
+import { useForm } from "react-hook-form";
+import { zodResolver } from "@hookform/resolvers/zod";
+import * as z from "zod";
+import { BusinessDomainDto } from "@/types/organization";
+import { FormWrapper } from "@/components/ui/form-wrapper";
+import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
+import { Input } from "@/components/ui/input";
+import { Textarea } from "@/components/ui/textarea";
+
+const formSchema = z.object({
+  name: z.string().min(3, "Domain name is required."),
+  type: z.string().min(2, "Type code is required (e.g., TECH)."),
+  type_label: z.string().min(3, "Type label is required (e.g., Technology)."),
+  description: z.string().optional(),
+  image: z.string().url("Must be a valid URL.").optional().or(z.literal("")),
+});
+
+export type BusinessDomainFormData = z.infer<typeof formSchema>;
+
+interface BusinessDomainFormProps {
+  initialData?: Partial<BusinessDomainDto>;
+  mode: "create" | "edit";
+  onSubmitAction: (data: BusinessDomainFormData) => Promise<boolean>;
+}
+
+export function BusinessDomainForm({ initialData, mode, onSubmitAction }: BusinessDomainFormProps) {
+  const [isLoading, setIsLoading] = useState(false);
+
+  const form = useForm<BusinessDomainFormData>({
+    resolver: zodResolver(formSchema),
+    defaultValues: {
+      name: initialData?.name || "",
+      type: initialData?.type || "",
+      type_label: initialData?.type_label || "",
+      description: initialData?.description || "",
+      image: initialData?.image || "",
+    },
+  });
+
+  const handleSubmit = async (data: BusinessDomainFormData) => {
+    setIsLoading(true);
+    const success = await onSubmitAction(data);
+    if (!success) setIsLoading(false);
+  };
+
+  return (
+    <FormWrapper
+      form={form}
+      onFormSubmit={handleSubmit}
+      isLoading={isLoading}
+      title={mode === 'create' ? "Create Business Domain" : "Edit Business Domain"}
+      description="Manage the categories that organizations can operate within."
+      submitButtonText={mode === 'create' ? "Create Domain" : "Save Changes"}
+    >
+      {() => (
+        <div className="space-y-4">
+          <FormField control={form.control} name="name" render={({ field }) => (<FormItem><FormLabel>Domain Name *</FormLabel><FormControl><Input placeholder="e.g., Technology & Software" {...field} /></FormControl><FormMessage /></FormItem>)} />
+          <div className="grid grid-cols-2 gap-4">
+            <FormField control={form.control} name="type" render={({ field }) => (<FormItem><FormLabel>Type Code *</FormLabel><FormControl><Input placeholder="e.g., TECH" {...field} /></FormControl><FormMessage /></FormItem>)} />
+            <FormField control={form.control} name="type_label" render={({ field }) => (<FormItem><FormLabel>Type Label *</FormLabel><FormControl><Input placeholder="e.g., Technology" {...field} /></FormControl><FormMessage /></FormItem>)} />
+          </div>
+          <FormField control={form.control} name="image" render={({ field }) => (<FormItem><FormLabel>Icon URL</FormLabel><FormControl><Input type="url" placeholder="https://example.com/icon.png" {...field} /></FormControl><FormMessage /></FormItem>)} />
+          <FormField control={form.control} name="description" render={({ field }) => (<FormItem><FormLabel>Description</FormLabel><FormControl><Textarea placeholder="Describe this business domain..." {...field} /></FormControl><FormMessage /></FormItem>)} />
+        </div>
+      )}
+    </FormWrapper>
+  );
+}// END OF FILE: components/organization/business-domains/business-domain-form.tsx
+
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/business-domains/columns.tsx
+
+"use client";
+
+import { ColumnDef } from "@tanstack/react-table";
+import { BusinessDomainDto } from "@/types/organization";
+import { Checkbox } from "@/components/ui/checkbox";
+import { Button } from "@/components/ui/button";
+import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
+import { MoreHorizontal, Edit3, Trash2, Tag } from "lucide-react";
+import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+
+interface RowActionsProps {
+  domain: BusinessDomainDto;
+  onEditAction: (domain: BusinessDomainDto) => void;
+  onDeleteAction: (domain: BusinessDomainDto) => void;
+}
+
+const RowActions: React.FC<RowActionsProps> = ({ domain, onEditAction, onDeleteAction }) => {
+  return (
+    <DropdownMenu>
+      <DropdownMenuTrigger asChild>
+        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
+          <span className="sr-only">Open menu</span>
+          <MoreHorizontal className="h-4 w-4" />
+        </Button>
+      </DropdownMenuTrigger>
+      <DropdownMenuContent align="end" className="w-[160px]">
+        <DropdownMenuItem onClick={() => onEditAction(domain)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
+        <DropdownMenuItem onClick={() => onDeleteAction(domain)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
+      </DropdownMenuContent>
+    </DropdownMenu>
+  );
+};
+
+export const getBusinessDomainColumns = (
+  actionHandlers: Omit<RowActionsProps, "domain">
+): ColumnDef<BusinessDomainDto>[] => [
+  {
+    id: "select",
+    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false} onCheckedChange={v => table.toggleAllPageRowsSelected(!!v)} aria-label="Select all" />
+,
+    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
+    enableSorting: false,
+    enableHiding: false,
+  },
+  {
+    accessorKey: "name",
+    header: ({ column }) => <DataTableColumnHeader column={column} title="Domain Name" />,
+    cell: ({ row }) => {
+      const domain = row.original;
+      return (
+        <div className="flex items-center gap-3">
+          <Avatar className="h-10 w-10 border rounded-md">
+            <AvatarImage src={domain.image} alt={domain.name} />
+            <AvatarFallback className="rounded-md"><Tag className="h-5 w-5 text-muted-foreground" /></AvatarFallback>
+          </Avatar>
+          <div>
+            <div className="font-medium">{domain.name}</div>
+            <div className="text-xs text-muted-foreground">{domain.type_label}</div>
+          </div>
+        </div>
+      );
+    },
+  },
+  {
+    accessorKey: "type",
+    header: ({ column }) => <DataTableColumnHeader column={column} title="Type Code" />,
+  },
+  {
+    accessorKey: "description",
+    header: ({ column }) => <DataTableColumnHeader column={column} title="Description" />,
+    cell: ({ row }) => <p className="text-sm text-muted-foreground truncate max-w-xs">{row.getValue("description")}</p>,
+  },
+  {
+    id: "actions",
+    cell: ({ row }) => <RowActions domain={row.original} {...actionHandlers} />,
+  },
+];// END OF FILE: components/organization/business-domains/columns.tsx
+
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/certifications/certification-card.tsx
 
 "use client";
@@ -21027,7 +23143,7 @@ export function OrganizationForm({
         short_name: initialData?.short_name || "",
         email: initialData?.email || "",
         description: initialData?.description || "",
-        business_domains: initialData?.business_domains || [],
+        business_domains: initialData?.business_domains || ['60dc16a0-5fd3-11f0-89d8-0f177e297cbd'],
         legal_form: initialData?.legal_form || "",
         business_registration_number:
           initialData?.business_registration_number || "",
@@ -23942,6 +26058,11 @@ import {
   Power,
   Shield,
   Info,
+  Building2,
+  ClipboardList,
+  HeartHandshake,
+  Target,
+  Wrench,
 } from "lucide-react";
 import { cn } from "@/lib/utils";
 import { Button } from "@/components/ui/button";
@@ -23965,45 +26086,89 @@ const userNavigation = [
   { name: "Favorites", href: "/favorites", icon: FolderHeart },
 ];
 
-const baOrgNavigation = [
+// New "BA Global" navigation section with all specified routes
+const baGlobalNavigation = [
   {
-    name: "Org. Dashboard",
-    href: "/business-actor/dashboard",
-    icon: LayoutGrid,
-    isOrgSpecific: true,
+    name: "Organizations Hub",
+    href: "/business-actor/organizations",
+    icon: Building,
   },
   {
-    name: "Org. Profile",
+    name: "Profile",
     href: "/business-actor/org/profile",
     icon: Landmark,
-    isOrgSpecific: true,
   },
   {
     name: "Agencies",
     href: "/business-actor/org/agencies",
     icon: Users2,
-    isOrgSpecific: true,
   },
   {
-    name: "Employees",
-    href: "/business-actor/org/employees",
-    icon: Users,
-    isOrgSpecific: true,
+    name: "Business Domains",
+    href: "/business-actor/org/business-domains",
+    icon: Briefcase,
   },
   {
     name: "Certifications",
     href: "/business-actor/org/certifications",
     icon: Award,
-    isOrgSpecific: true,
+  },
+  {
+    name: "Customers",
+    href: "/business-actor/org/customers",
+    icon: HeartHandshake,
+  },
+  {
+    name: "Employees",
+    href: "/business-actor/org/employees",
+    icon: Users,
+  },
+  {
+    name: "Images",
+    href: "/business-actor/org/images",
+    icon: Image,
   },
   {
     name: "Practical Info",
     href: "/business-actor/org/practical-info",
     icon: Info,
-    isOrgSpecific: true,
+  },
+  {
+    name: "Products",
+    href: "/business-actor/org/products",
+    icon: Package,
+  },
+  {
+    name: "Proposed Activities",
+    href: "/business-actor/org/proposed-activities",
+    icon: ClipboardList,
+  },
+  {
+    name: "Prospects",
+    href: "/business-actor/org/prospects",
+    icon: Target,
+  },
+  {
+    name: "Sales People",
+    href: "/business-actor/org/sales-people",
+    icon: UserCog,
+  },
+  {
+    name: "Services",
+    href: "/business-actor/org/services",
+    icon: Wrench,
+  },
+  {
+    name: "Suppliers",
+    href: "/business-actor/org/suppliers",
+    icon: Truck,
+  },
+  {
+    name: "Third Parties",
+    href: "/business-actor/org/third-parties",
+    icon: Building2,
   },
 ];
-
 const agencyNavigation = [
   {
     name: "Agency Dashboard",
@@ -24027,16 +26192,6 @@ const agencyNavigation = [
   },
 ];
 
-const baGlobalNavigation = [
-  {
-    name: "Organizations Hub",
-    href: "/business-actor/organizations",
-    icon: Building,
-  },
-  { name: "My BA Profile", href: "/business-actor/profile", icon: UserCog },
-  { name: "API & Webhooks", href: "/business-actor/webhooks", icon: Webhook },
-];
-
 const superAdminNavigation = [
   { name: "Dashboard", href: "/super-admin/dashboard", icon: LayoutGrid },
   { name: "User Management", href: "/super-admin/users", icon: Users },
@@ -24105,12 +26260,11 @@ export function Sidebar() {
   const isAgencyContext = pathname.startsWith("/business-actor/agency");
 
   let mainNav: any[] = userNavigation;
-  let globalNav: any[] = [];
   let sidebarTitle = "My Account";
   let homeLink = "/dashboard";
   let ContextSwitcher = null;
 
-  if (isSuperAdmin && pathname.startsWith("/super-admin/") ) {
+  if (isSuperAdmin && pathname.startsWith("/super-admin/")) {
     mainNav = superAdminNavigation;
     sidebarTitle = "Platform Admin";
     homeLink = "/super-admin/dashboard";
@@ -24121,8 +26275,8 @@ export function Sidebar() {
       homeLink = "/business-actor/agency/dashboard";
       ContextSwitcher = () => <AgencySwitcher isCollapsed={isCollapsed} />;
     } else {
-      mainNav = baOrgNavigation;
-      globalNav = baGlobalNavigation;
+      mainNav = baGlobalNavigation;
+
       sidebarTitle = "BA Workspace";
       homeLink = "/business-actor/organizations";
       ContextSwitcher = () => (
@@ -24304,14 +26458,6 @@ export function Sidebar() {
               isCollapsed ? "px-2" : "px-4"
             )}
           >
-            {globalNav.length > 0 && (
-              <>
-                {globalNav.map((item) => (
-                  <NavItem key={item.name} item={item} />
-                ))}
-                <Separator className="my-3" />
-              </>
-            )}
             {mainNav.map((item) => (
               <NavItem key={item.name} item={item} />
             ))}
@@ -29317,8 +31463,16 @@ export function useMousePosition() {
 
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/apiClient.ts
 
+/**
+ * @file This file centralizes all API client logic for interacting with Yowyob microservices.
+ * It includes a robust request handler (`yowyobApiRequest`) that manages different
+ * authentication strategies as specified by the Yowyob API documentation.
+ */
+
 import { getSession } from "next-auth/react";
+import { systemTokenManager } from "@/lib/auth/system-token-manager";
 
+// Type imports from across the application
 import {
   AuthRequest, CreateUserRequest, LoginResponse, UserDto, UserInfo,
   RoleDto, CreateRoleRequest, UpdateRoleRequest,
@@ -29326,11 +31480,7 @@ import {
   RolePermissionDto, RbacResource, ApiResponseBoolean
 } from "@/types/auth";
 import {
-  CreateOrganizationRequest, UpdateOrganizationRequest, UpdateOrganizationStatusRequest,
-  AddressDto, ContactDto, CreateAddressRequest, UpdateAddressRequest, ContactableType, AddressableType, CreateContactRequest, UpdateContactRequest, BusinessDomainDto, GetBusinessDomainRequest,
-  AffectEmployeeRequest,
-  AgencyDto,
-  ApplicationDto,
+  CreateOrganizationRequest, UpdateOrganizationRequest, UpdateOrganizationStatusRequest, AddressDto, ContactDto, CreateAddressRequest, UpdateAddressRequest, ContactableType, AddressableType, CreateContactRequest, UpdateContactRequest, BusinessDomainDto, GetBusinessDomainRequest, AffectEmployeeRequest, AgencyDto, ApplicationDto,
   ApplicationKeyDto,
   BusinessActorDto,
   BusinessActorType,
@@ -29379,370 +31529,409 @@ import {
   OrganizationDto
 } from "@/types/organization";
 import { MediaDto, MediaType, ServiceType, UploadMediaResponse, UploadRequest } from "@/types/media";
-import crypto from "crypto";
-import { systemTokenManager } from "@/lib/auth/system-token-manager";
 
-interface ApiErrorResponse {
-  timestamp?: string; status?: number; error?: string; message?: string; path?: string; errors?: Record<string, string>;
-}
+// --- API Configuration Constants ---
 
 const YOWYOB_AUTH_API_BASE_URL = process.env.NEXT_PUBLIC_YOWYOB_AUTH_SERVICE_BASE_URL;
 const YOWYOB_ORGANIZATION_API_BASE_URL = process.env.NEXT_PUBLIC_YOWYOB_ORGANIZATION_SERVICE_BASE_URL;
 const YOWYOB_MEDIA_API_BASE_URL = process.env.NEXT_PUBLIC_YOWYOB_MEDIA_SERVICE_BASE_URL;
-const PROXY_PATH = "/api/proxy"; // All requests go through here
-const NEXT_PUBLIC_YOWYOB_APP_PUBLIC_KEY = process.env.NEXT_PUBLIC_YOWYOB_APP_PUBLIC_KEY;
 
-interface YowyobRequestOptions extends RequestInit {
-  isFormData?: boolean;
-  useClientBasicAuth?: boolean;
+/** The Public Key for the calling application, required specifically for the Organization service. */
+const YOWYOB_ORGANIZATION_PUBLIC_KEY = process.env.NEXT_PUBLIC_YOWYOB_APP_PUBLIC_KEY;
+
+/** The local proxy endpoint that forwards requests to the target microservices. */
+const PROXY_PATH = "/api/proxy";
+
+// --- Type Definitions ---
+
+interface ApiErrorResponse {
+  timestamp?: string; status?: number; error?: string; message?: string; path?: string; errors?: Record<string, string>;
 }
 
-type AuthType = 'user' | 'system' | 'none';
+/** Defines the authentication strategy for an API request. */
+type AuthType =
+  | 'user'      // Authenticates with the logged-in user's JWT Bearer token.
+  | 'system'    // Authenticates with a short-lived system-level OAuth2 token. Used for pre-login actions.
+  | 'none';     // No authentication headers are sent.
 
 interface YowyobRequestOptions extends RequestInit {
+  /** Flag to indicate if the request body is FormData. */
   isFormData?: boolean;
+  /** The authentication strategy to use. Defaults to 'user'. */
   authType?: AuthType;
 }
 
+// =========================================================================
+//  CORE API REQUEST HANDLER
+// =========================================================================
+/**
+ * A generic and robust function to handle all API requests to Yowyob microservices.
+ * It manages authentication, proxying, and error handling in a centralized way.
+ *
+ * @template T The expected type of the successful response data.
+ * @param {string | undefined} serviceBaseUrl The base URL of the target microservice.
+ * @param {string} endpoint The specific API endpoint to call.
+ * @param {YowyobRequestOptions} options Configuration for the fetch request, including auth type.
+ * @returns {Promise<T>} A promise that resolves with the response data.
+ */
 async function yowyobApiRequest<T = any>(
   serviceBaseUrl: string | undefined,
   endpoint: string,
   options: YowyobRequestOptions = {}
 ): Promise<T> {
-  const { authType = 'system', body, ...fetchOptions } = options;
+  // Default to 'user' authentication as most frontend actions are performed by a logged-in user.
+  const { authType = 'user', body, ...fetchOptions } = options;
 
   if (!serviceBaseUrl) {
     throw new Error(`Service URL is not configured for endpoint: ${endpoint}`);
   }
+
   const targetUrl = `${serviceBaseUrl}${endpoint}`;
   const headers = new Headers(fetchOptions.headers);
 
-  // Layer 1: Determine the correct Bearer token (User vs. System)
+  // --- Authentication Layer 1: Set Authorization Header ---
+  // Sets the appropriate Bearer token based on the specified authType.
   if (authType === 'user') {
     const session = await getSession();
     if (!session?.user?.accessToken) {
-      throw new Error("User is not authenticated for this request.");
+      throw new Error("User authentication required, but the user is not logged in.");
     }
     headers.set('Authorization', `Bearer ${session.user.accessToken}`);
   } else if (authType === 'system') {
+    // Used for pre-login/pre-auth actions like registration and login.
     const systemToken = await systemTokenManager.getSystemToken();
     headers.set('Authorization', `Bearer ${systemToken}`);
   }
+  // For authType: 'none', no Authorization header is added.
 
-  // Layer 2: Add the Application Public Key for the Organization service
+  // --- Authentication Layer 2: Set Service-Specific Headers ---
+  // As per documentation, only the Organization service requires an additional Public-Key.
   if (serviceBaseUrl === YOWYOB_ORGANIZATION_API_BASE_URL) {
-    if (!NEXT_PUBLIC_YOWYOB_APP_PUBLIC_KEY) {
-      console.warn(`YOWYOB_APP_PUBLIC_KEY is not set. Requests to ${serviceBaseUrl} may fail.`);
+    if (!YOWYOB_ORGANIZATION_PUBLIC_KEY) {
+      console.warn(`YOWYOB_ORGANIZATION_PUBLIC_KEY is not set. Requests to the organization service will fail.`);
     } else {
-      headers.set('Public-Key', NEXT_PUBLIC_YOWYOB_APP_PUBLIC_KEY);
+      headers.set('Public-Key', YOWYOB_ORGANIZATION_PUBLIC_KEY);
     }
   }
 
-  // Set Content-Type for non-FormData requests
+  // Automatically set Content-Type for JSON bodies.
   if (body && !(body instanceof FormData)) {
     headers.set('Content-Type', 'application/json');
   }
 
+  // --- Proxy Configuration ---
+  // All requests are routed through a local Next.js API route to hide backend URLs and handle CORS.
+  const proxyUrl = `${process.env.NEXT_PUBLIC_URL}${PROXY_PATH}/request`;
+  const dynamicHeaders = Object.fromEntries(headers.entries());
+
+  const finalHeaders = {
+    'X-Target-URL': targetUrl, // The proxy uses this header to know where to forward the request.
+    'Accept': '*/*',
+    ...dynamicHeaders
+  };
+
   const config: RequestInit = {
     ...fetchOptions,
-    headers,
     body: body,
-    cache: 'no-store'
+    headers: finalHeaders,
+    cache: 'no-store',
   };
 
-  const proxyUrl = `${process.env.NEXT_PUBLIC_URL}${PROXY_PATH}/request`;
-  headers.set('X-Target-URL', targetUrl);
-
   try {
     const response = await fetch(proxyUrl, config);
 
-    // Check if the response is not successful (status >= 400)
+    // --- Robust Error Handling ---
     if (!response.ok) {
       let errorData: ApiErrorResponse = { message: `Request failed with status ${response.status}` };
+      const contentType = response.headers.get("content-type");
 
-      // Try parsing the response body as JSON
-      try {
-        errorData = await response.json();
-      } catch (e) {
-        // If parsing fails, we don't need to do anything additional.
+      // Safely parse error response, checking content type first.
+      if (contentType && contentType.includes("application/json")) {
+        try {
+          errorData = await response.json();
+        } catch (jsonError) {
+          errorData.message = `API returned status ${response.status}, but the error response body was not valid JSON.`;
+        }
+      } else {
+        const textError = await response.text();
+        errorData.message = textError || `Request failed with status ${response.status}`;
       }
 
-      // Prepare the error message, checking if there are field-specific errors
       const errorMessage = errorData.message || (errorData.errors ? Object.values(errorData.errors).join(', ') : 'An unknown API error occurred.');
+      console.error(`API Error: ${errorMessage}`, { targetUrl, status: response.status, responseData: errorData });
 
-      // Log the error with detailed information
-      console.error(`API Error: ${errorMessage}`, { targetUrl: proxyUrl, status: response.status, responseData: errorData });
-
-      // Create and throw an error with additional information
       const error = new Error(errorMessage) as Error & { status?: number; data?: any };
       error.status = response.status;
       error.data = errorData;
       throw error;
     }
 
-    // If status is 204 (No Content) or the response body is empty, return null
-    if (response.status === 204 || response.headers.get("content-length") === "0") return null;
+    // Handle successful but empty responses (e.g., HTTP 204 No Content).
+    if (response.status === 204 || response.headers.get("content-length") === "0") {
+      return null as T;
+    }
 
-    // Parse the response body as JSON
     const data = await response.json();
 
-    // If the response has a "status" of "FAILED", handle the specific error case
+    // Handle cases where the API returns a 200 OK but with a failed status in the body.
     if (data.status === "FAILED") {
       let errorMessage = data.message || "An unknown API error occurred.";
-
       if (data.errors && typeof data.errors === "object") {
-        const errorDetails = Object.entries(data.errors)
-          .map(([field, message]) => `${field}: ${message}`)
-          .join(", ");
+        const errorDetails = Object.entries(data.errors).map(([field, message]) => `${field}: ${message}`).join(", ");
         errorMessage += ` - ${errorDetails}`;
       }
-
-      // Create and throw the error with specific details
       const error = new Error(errorMessage) as Error & { status?: number; data?: any };
-      error.status = 400; // Assuming 400 for bad request errors
+      error.status = 400; // Treat as a client error.
       error.data = data;
       throw error;
     }
-
-    // If there is no error and the body is successfully parsed, return the data
     return data as T;
-
   } catch (error) {
-    // Handle unexpected errors or network issues
     if (!(error instanceof Error && 'status' in error)) {
       console.error("A network or unexpected error occurred:", error);
     }
-    // Rethrow the error to be handled further up the call stack
     throw error;
   }
-
 }
 
+// =========================================================================
+//  AUTH SERVICE API CLIENT
+// =========================================================================
+export const yowyobAuthApi = {
+  /** Registers a new user. Requires system-level auth as no user is logged in yet. */
+  register: (data: CreateUserRequest) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, "/api/register", { method: "POST", body: JSON.stringify(data), authType: 'system' }),
+
+  /** Logs in a user. Requires system-level auth to get a user-specific JWT. */
+  login: (data: AuthRequest) => yowyobApiRequest<LoginResponse>(YOWYOB_AUTH_API_BASE_URL, "/api/login", { method: "POST", body: JSON.stringify(data), authType: 'system' }),
+
+  /** Fetches information about the currently authenticated user. */
+  getCurrentUser: () => yowyobApiRequest<UserInfo>(YOWYOB_AUTH_API_BASE_URL, "/api/user", { method: "GET", authType: 'user' }),
+
+  /** The following are actions performed by an authenticated (likely admin) user. */
+  getAllUsers: () => yowyobApiRequest<UserDto[]>(YOWYOB_AUTH_API_BASE_URL, "/api/users", { method: "GET", authType: 'user' }),
+  getUserByUsername: (username: string) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, `/api/user/username/${username}`, { method: "GET", authType: 'user' }),
+  getUserByPhoneNumber: (phoneNumber: string) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, `/api/user/phone-number/${phoneNumber}`, { method: "GET", authType: 'user' }),
+  getUserByEmail: (email: string) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, `/api/user/email/${email}`, { method: "GET", authType: 'user' }),
+  getRoles: () => yowyobApiRequest<RoleDto[]>(YOWYOB_AUTH_API_BASE_URL, "/api/roles", { method: "GET", authType: 'user' }),
+  createRole: (data: CreateRoleRequest) => yowyobApiRequest<RoleDto>(YOWYOB_AUTH_API_BASE_URL, "/api/roles", { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  updateRole: (roleId: string, data: UpdateRoleRequest) => yowyobApiRequest<RoleDto>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteRole: (roleId: string) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}`, { method: "DELETE", authType: 'user' }),
+  getAllPermissions: () => yowyobApiRequest<PermissionDto[]>(YOWYOB_AUTH_API_BASE_URL, "/api/permissions", { method: "GET", authType: 'user' }),
+  getPermissionById: (permissionId: string) => yowyobApiRequest<PermissionDto>(YOWYOB_AUTH_API_BASE_URL, `/api/permissions/${permissionId}`, { method: "GET", authType: 'user' }),
+  createPermission: (data: CreatePermissionRequest) => yowyobApiRequest<PermissionDto>(YOWYOB_AUTH_API_BASE_URL, "/api/permissions", { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  updatePermission: (permissionId: string, data: UpdatePermissionRequest) => yowyobApiRequest<PermissionDto>(YOWYOB_AUTH_API_BASE_URL, `/api/permissions/${permissionId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deletePermission: (permissionId: string) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/permissions/${permissionId}`, { method: "DELETE", authType: 'user' }),
+  assignPermissionsToRole: (roleId: string, permissionIds: string[]) => yowyobApiRequest<RolePermissionDto[]>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions`, { method: "POST", body: JSON.stringify(permissionIds), authType: 'user' }),
+  removePermissionsFromRole: (roleId: string, permissionIds: string[]) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions`, { method: "DELETE", body: JSON.stringify(permissionIds), authType: 'user' }),
+  assignPermissionToRole: (roleId: string, permissionId: string) => yowyobApiRequest<RolePermissionDto>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions/${permissionId}`, { method: "POST", authType: 'user' }),
+  removePermissionFromRole: (roleId: string, permissionId: string) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions/${permissionId}`, { method: "DELETE", authType: 'user' }),
+  createRbacResource: (data: RbacResource) => yowyobApiRequest<ApiResponseBoolean>(YOWYOB_AUTH_API_BASE_URL, "/api/resources/save", { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getRolesHierarchy: () => yowyobApiRequest<string>(YOWYOB_AUTH_API_BASE_URL, "/api/roles/hierarchy", { method: "GET", authType: 'user' }),
+};
 
-// NEW: Media Service API object
+// =========================================================================
+//  MEDIA SERVICE API CLIENT
+// =========================================================================
+/**
+ * Media service operations are performed on behalf of a user, requiring user authentication.
+ */
 export const yowyobMediaApi = {
-  uploadFile: (
-    service: ServiceType,
-    type: MediaType,
-    path: string,
-    resourceId: string | null,
-    file: File,
-    uploadRequest?: UploadRequest
-  ) => {
+  uploadFile: (service: ServiceType, type: MediaType, path: string, resourceId: string | null, file: File, uploadRequest?: UploadRequest) => {
     const formData = new FormData();
     formData.append("file", file);
     if (uploadRequest) {
       formData.append("request", new Blob([JSON.stringify(uploadRequest)], { type: "application/json" }));
     }
-
-    const endpoint = resourceId
-      ? `/media/${service}/${type}/${path}/${resourceId}`
-      : `/media/${service}/${type}/${path}`;
-
-    return yowyobApiRequest<UploadMediaResponse>(YOWYOB_MEDIA_API_BASE_URL, endpoint, {
-      method: "POST",
-      body: formData,
-      isFormData: true, // This is the key change for multipart requests
-    });
+    const endpoint = resourceId ? `/media/${service}/${type}/${path}/${resourceId}` : `/media/${service}/${type}/${path}`;
+    // Uses FormData for multipart file upload and authenticates as the user.
+    return yowyobApiRequest<UploadMediaResponse>(YOWYOB_MEDIA_API_BASE_URL, endpoint, { method: "POST", body: formData, isFormData: true, authType: 'user' });
   },
-
-  updateFile: (
-    service: ServiceType,
-    type: MediaType,
-    path: string,
-    filename: string,
-    file: File,
-    uploadRequest?: UploadRequest
-  ) => {
+  updateFile: (service: ServiceType, type: MediaType, path: string, filename: string, file: File, uploadRequest?: UploadRequest) => {
     const formData = new FormData();
     formData.append("file", file);
     if (uploadRequest) {
       formData.append("request", new Blob([JSON.stringify(uploadRequest)], { type: "application/json" }));
     }
     const endpoint = `/media/${service}/${type}/${path}/${filename}`;
-    return yowyobApiRequest<UploadMediaResponse>(YOWYOB_MEDIA_API_BASE_URL, endpoint, {
-      method: "PUT",
-      body: formData,
-      isFormData: true,
-    });
+    return yowyobApiRequest<UploadMediaResponse>(YOWYOB_MEDIA_API_BASE_URL, endpoint, { method: "PUT", body: formData, isFormData: true, authType: 'user' });
   },
-
-  deleteFile: (
-    service: ServiceType,
-    type: MediaType,
-    path: string,
-    filename: string
-  ) => {
+  deleteFile: (service: ServiceType, type: MediaType, path: string, filename: string) => {
     const endpoint = `/media/${service}/${type}/${path}/${filename}`;
-    return yowyobApiRequest<boolean>(YOWYOB_MEDIA_API_BASE_URL, endpoint, {
-      method: "DELETE",
-    });
+    return yowyobApiRequest<boolean>(YOWYOB_MEDIA_API_BASE_URL, endpoint, { method: "DELETE", authType: 'user' });
   },
-
-  getMediaForResource: (
-    service: ServiceType,
-    type: MediaType,
-    path: string,
-    resourceId: string
-  ) => {
+  getMediaForResource: (service: ServiceType, type: MediaType, path: string, resourceId: string) => {
     const endpoint = `/media/infos/${service}/${type}/${path}/${resourceId}`;
-    return yowyobApiRequest<MediaDto[]>(YOWYOB_MEDIA_API_BASE_URL, endpoint, { method: "GET" });
+    return yowyobApiRequest<MediaDto[]>(YOWYOB_MEDIA_API_BASE_URL, endpoint, { method: "GET", authType: 'user' });
   },
 };
 
-
-export const yowyobAuthApi = {
-  register: (data: CreateUserRequest) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, "/api/register", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" }, useClientBasicAuth: true, authType: 'system' }),
-  getAllUsers: () => yowyobApiRequest<UserDto[]>(YOWYOB_AUTH_API_BASE_URL, "/api/users", { method: "GET" }),
-  getUserByUsername: (username: string) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, `/api/user/username/${username}`, { method: "GET" }),
-  getUserByPhoneNumber: (phoneNumber: string) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, `/api/user/phone-number/${phoneNumber}`, { method: "GET" }),
-  getUserByEmail: (email: string) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, `/api/user/email/${email}`, { method: "GET" }),
-  login: (data: AuthRequest) => yowyobApiRequest<LoginResponse>(YOWYOB_AUTH_API_BASE_URL, "/api/login", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" }, useClientBasicAuth: false, authType: 'system' }),
-  getCurrentUser: () => yowyobApiRequest<UserInfo>(YOWYOB_AUTH_API_BASE_URL, "/api/user", { method: "GET" }),
-  getRoles: () => yowyobApiRequest<RoleDto[]>(YOWYOB_AUTH_API_BASE_URL, "/api/roles", { method: "GET" }),
-  createRole: (data: CreateRoleRequest) => yowyobApiRequest<RoleDto>(YOWYOB_AUTH_API_BASE_URL, "/api/roles", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  updateRole: (roleId: string, data: UpdateRoleRequest) => yowyobApiRequest<RoleDto>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteRole: (roleId: string) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}`, { method: "DELETE" }),
-  getAllPermissions: () => yowyobApiRequest<PermissionDto[]>(YOWYOB_AUTH_API_BASE_URL, "/api/permissions", { method: "GET" }),
-  getPermissionById: (permissionId: string) => yowyobApiRequest<PermissionDto>(YOWYOB_AUTH_API_BASE_URL, `/api/permissions/${permissionId}`, { method: "GET" }),
-  createPermission: (data: CreatePermissionRequest) => yowyobApiRequest<PermissionDto>(YOWYOB_AUTH_API_BASE_URL, "/api/permissions", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  updatePermission: (permissionId: string, data: UpdatePermissionRequest) => yowyobApiRequest<PermissionDto>(YOWYOB_AUTH_API_BASE_URL, `/api/permissions/${permissionId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deletePermission: (permissionId: string) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/permissions/${permissionId}`, { method: "DELETE" }),
-  assignPermissionsToRole: (roleId: string, permissionIds: string[]) => yowyobApiRequest<RolePermissionDto[]>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions`, { method: "POST", body: JSON.stringify(permissionIds), headers: { "Content-Type": "application/json" } }),
-  removePermissionsFromRole: (roleId: string, permissionIds: string[]) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions`, { method: "DELETE", body: JSON.stringify(permissionIds), headers: { "Content-Type": "application/json" } }),
-  assignPermissionToRole: (roleId: string, permissionId: string) => yowyobApiRequest<RolePermissionDto>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions/${permissionId}`, { method: "POST" }),
-  removePermissionFromRole: (roleId: string, permissionId: string) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions/${permissionId}`, { method: "DELETE" }),
-  createRbacResource: (data: RbacResource) => yowyobApiRequest<ApiResponseBoolean>(YOWYOB_AUTH_API_BASE_URL, "/api/resources/save", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getRolesHierarchy: () => yowyobApiRequest<string>(YOWYOB_AUTH_API_BASE_URL, "/api/roles/hierarchy", { method: "GET" }),
-};
-
+// =========================================================================
+//  ORGANIZATION SERVICE API CLIENT
+// =========================================================================
+/**
+ * All calls to the Organization Service require dual authentication:
+ * 1. The user's JWT Bearer token (`authType: 'user'`).
+ * 2. The application's `Public-Key` header.
+ * The `yowyobApiRequest` function handles adding both of these automatically for this service.
+ */
 export const yowyobOrganizationApi = {
-  getMyOrganizations: () => yowyobApiRequest<OrganizationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/organizations/user"),
-  getAllOrganizations: () => yowyobApiRequest<OrganizationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/organizations"),
-  getOrganizationsByDomain: (domainId: string) => yowyobApiRequest<OrganizationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/domains/${domainId}`),
-  getOrganizationById: (orgId: string) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}`),
-  createOrganization: (data: CreateOrganizationRequest) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, "/organizations", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  updateOrganization: (orgId: string, data: UpdateOrganizationRequest) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteOrganization: (orgId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}`, { method: "DELETE" }),
-  updateOrganizationStatus: (orgId: string, data: UpdateOrganizationStatusRequest) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/status`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  addBusinessDomainToOrg: (orgId: string, businessDomainId: string) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/domains/${businessDomainId}`, { method: "PUT" }),
-  removeBusinessDomainFromOrg: (orgId: string, businessDomainId: string) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/domains/${businessDomainId}`, { method: "DELETE" }),
-  getContacts: (contactableType: ContactableType, contactableId: string) => yowyobApiRequest<ContactDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts`),
-  getContactById: (contactableType: ContactableType, contactableId: string, contactId: string) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}`),
-  createContact: (contactableType: ContactableType, contactableId: string, data: CreateContactRequest) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  updateContact: (contactableType: ContactableType, contactableId: string, contactId: string, data: UpdateContactRequest) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteContactById: (contactableType: ContactableType, contactableId: string, contactId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}`, { method: "DELETE" }),
-  markContactAsFavorite: (contactableType: ContactableType, contactableId: string, contactId: string) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}/favorite`, { method: "GET" }),
-  getAddresses: (addressableType: AddressableType, addressableId: string) => yowyobApiRequest<AddressDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses`),
-  getAddressById: (addressableType: AddressableType, addressableId: string, addressId: string) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}`),
-  createAddress: (addressableType: AddressableType, addressableId: string, data: CreateAddressRequest) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  updateAddress: (addressableType: AddressableType, addressableId: string, addressId: string, data: UpdateAddressRequest) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteAddressById: (addressableType: AddressableType, addressableId: string, addressId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}`, { method: "DELETE" }),
-  markAddressAsFavorite: (addressableType: AddressableType, addressableId: string, addressId: string) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}/favorite`, { method: "GET" }),
-  getPracticalInformation: (orgId: string, params?: { organizationId: string }) => yowyobApiRequest<PracticalInformationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos${params ? '?' + new URLSearchParams(params).toString() : ''}`),
-  createPracticalInformation: (orgId: string, data: CreatePracticalInformationRequest) => yowyobApiRequest<PracticalInformationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getPracticalInformationById: (orgId: string, infoId: string) => yowyobApiRequest<PracticalInformationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos/${infoId}`),
-  updatePracticalInformation: (orgId: string, infoId: string, data: UpdatePracticalInformationRequest) => yowyobApiRequest<PracticalInformationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos/${infoId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deletePracticalInformation: (orgId: string, infoId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos/${infoId}`, { method: "DELETE" }),
-  getCertifications: (orgId: string) => yowyobApiRequest<CertificationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications`),
-  createCertification: (orgId: string, data: CreateCertificationRequest) => yowyobApiRequest<CertificationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getCertificationById: (orgId: string, certId: string) => yowyobApiRequest<CertificationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications/${certId}`),
-  updateCertification: (orgId: string, certId: string, data: UpdateCertificationRequest) => yowyobApiRequest<CertificationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications/${certId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteCertification: (orgId: string, certId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications/${certId}`, { method: "DELETE" }),
+  // --- Organization Endpoints ---
+  getMyOrganizations: () => yowyobApiRequest<OrganizationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/organizations/user", { method: "GET", authType: 'user' }),
+  getAllOrganizations: () => yowyobApiRequest<OrganizationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/organizations", { method: "GET", authType: 'user' }),
+  getOrganizationsByDomain: (domainId: string) => yowyobApiRequest<OrganizationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/domains/${domainId}`, { method: "GET", authType: 'user' }),
+  getOrganizationById: (orgId: string) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}`, { method: "GET", authType: 'user' }),
+  createOrganization: (data: CreateOrganizationRequest) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, "/organizations", { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  updateOrganization: (orgId: string, data: UpdateOrganizationRequest) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteOrganization: (orgId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}`, { method: "DELETE", authType: 'user' }),
+  updateOrganizationStatus: (orgId: string, data: UpdateOrganizationStatusRequest) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/status`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  addBusinessDomainToOrg: (orgId: string, businessDomainId: string) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/domains/${businessDomainId}`, { method: "PUT", authType: 'user' }),
+  removeBusinessDomainFromOrg: (orgId: string, businessDomainId: string) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/domains/${businessDomainId}`, { method: "DELETE", authType: 'user' }),
+
+  // --- Contact & Address Endpoints ---
+  getContacts: (contactableType: ContactableType, contactableId: string) => yowyobApiRequest<ContactDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts`, { method: "GET", authType: 'user' }),
+  getContactById: (contactableType: ContactableType, contactableId: string, contactId: string) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}`, { method: "GET", authType: 'user' }),
+  createContact: (contactableType: ContactableType, contactableId: string, data: CreateContactRequest) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  updateContact: (contactableType: ContactableType, contactableId: string, contactId: string, data: UpdateContactRequest) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteContactById: (contactableType: ContactableType, contactableId: string, contactId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}`, { method: "DELETE", authType: 'user' }),
+  markContactAsFavorite: (contactableType: ContactableType, contactableId: string, contactId: string) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}/favorite`, { method: "PUT", authType: 'user' }),
+  getAddresses: (addressableType: AddressableType, addressableId: string) => yowyobApiRequest<AddressDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses`, { method: "GET", authType: 'user' }),
+  getAddressById: (addressableType: AddressableType, addressableId: string, addressId: string) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}`, { method: "GET", authType: 'user' }),
+  createAddress: (addressableType: AddressableType, addressableId: string, data: CreateAddressRequest) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  updateAddress: (addressableType: AddressableType, addressableId: string, addressId: string, data: UpdateAddressRequest) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteAddressById: (addressableType: AddressableType, addressableId: string, addressId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}`, { method: "DELETE", authType: 'user' }),
+  markAddressAsFavorite: (addressableType: AddressableType, addressableId: string, addressId: string) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}/favorite`, { method: "PUT", authType: 'user' }),
+
+  // --- Practical Information Endpoints ---
+  getPracticalInformation: (orgId: string, params?: { organizationId: string }) => yowyobApiRequest<PracticalInformationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos${params ? '?' + new URLSearchParams(params).toString() : ''}`, { method: "GET", authType: 'user' }),
+  createPracticalInformation: (orgId: string, data: CreatePracticalInformationRequest) => yowyobApiRequest<PracticalInformationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getPracticalInformationById: (orgId: string, infoId: string) => yowyobApiRequest<PracticalInformationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos/${infoId}`, { method: "GET", authType: 'user' }),
+  updatePracticalInformation: (orgId: string, infoId: string, data: UpdatePracticalInformationRequest) => yowyobApiRequest<PracticalInformationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos/${infoId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deletePracticalInformation: (orgId: string, infoId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos/${infoId}`, { method: "DELETE", authType: 'user' }),
+
+  // --- Certification Endpoints ---
+  getCertifications: (orgId: string) => yowyobApiRequest<CertificationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications`, { method: "GET", authType: 'user' }),
+  createCertification: (orgId: string, data: CreateCertificationRequest) => yowyobApiRequest<CertificationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getCertificationById: (orgId: string, certId: string) => yowyobApiRequest<CertificationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications/${certId}`, { method: "GET", authType: 'user' }),
+  updateCertification: (orgId: string, certId: string, data: UpdateCertificationRequest) => yowyobApiRequest<CertificationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications/${certId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteCertification: (orgId: string, certId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications/${certId}`, { method: "DELETE", authType: 'user' }),
+
+  // --- Business Domain Endpoints ---
   getAllBusinessDomains: (params?: GetBusinessDomainRequest) => {
     const queryParams = params ? `?${new URLSearchParams(Object.entries(params).filter(([, v]) => v != null) as [string, string][]).toString()}` : "";
-    return yowyobApiRequest<BusinessDomainDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains${queryParams}`);
+    return yowyobApiRequest<BusinessDomainDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains${queryParams}`, { method: "GET", authType: 'user' });
   },
-  getBusinessDomainById: (domainId: string) => yowyobApiRequest<BusinessDomainDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains/${domainId}`),
-  createBusinessDomain: (data: CreateBusinessDomainRequest) => yowyobApiRequest<BusinessDomainDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  updateBusinessDomain: (domainId: string, data: UpdateBusinessDomainRequest) => yowyobApiRequest<BusinessDomainDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains/${domainId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteBusinessDomain: (domainId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains/${domainId}`, { method: "DELETE" }),
+  getBusinessDomainById: (domainId: string) => yowyobApiRequest<BusinessDomainDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains/${domainId}`, { method: "GET", authType: 'user' }),
+  createBusinessDomain: (data: CreateBusinessDomainRequest) => yowyobApiRequest<BusinessDomainDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  updateBusinessDomain: (domainId: string, data: UpdateBusinessDomainRequest) => yowyobApiRequest<BusinessDomainDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains/${domainId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteBusinessDomain: (domainId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains/${domainId}`, { method: "DELETE", authType: 'user' }),
+
+  // --- Agency Endpoints ---
   getAgencies: (orgId: string, active?: boolean) => {
     let endpoint = `/organizations/${orgId}/agencies`;
     if (active !== undefined) endpoint += `?active=${active}`;
-    return yowyobApiRequest<AgencyDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, endpoint);
+    return yowyobApiRequest<AgencyDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, endpoint, { method: "GET", authType: 'user' });
   },
-  createAgency: (orgId: string, data: CreateAgencyRequest) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getAgencyById: (orgId: string, agencyId: string) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}`),
-  updateAgency: (orgId: string, agencyId: string, data: UpdateAgencyRequest) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteAgency: (orgId: string, agencyId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}`, { method: "DELETE" }),
-  updateAgencyStatus: (orgId: string, agencyId: string, data: UpdateAgencyStatusRequest) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/status`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getOrgEmployees: (orgId: string) => yowyobApiRequest<EmployeeDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees`),
-  createOrgEmployee: (orgId: string, data: CreateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getOrgEmployeeById: (orgId: string, employeeId: string) => yowyobApiRequest<EmployeeDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees/${employeeId}`),
-  updateOrgEmployee: (orgId: string, employeeId: string, data: UpdateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees/${employeeId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteOrgEmployee: (orgId: string, employeeId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees/${employeeId}`, { method: "DELETE" }),
-  getAgencyEmployees: (orgId: string, agencyId: string) => yowyobApiRequest<EmployeeDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees`),
-  createAgencyEmployee: (orgId: string, agencyId: string, data: CreateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getAgencyEmployeeById: (orgId: string, agencyId: string, employeeId: string) => yowyobApiRequest<EmployeeDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/${employeeId}`),
-  updateAgencyEmployee: (orgId: string, agencyId: string, employeeId: string, data: UpdateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/${employeeId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteAgencyEmployee: (orgId: string, agencyId: string, employeeId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/${employeeId}`, { method: "DELETE" }),
-  affectEmployeeToAgency: (orgId: string, agencyId: string, data: AffectEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/add`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getOrgSalesPersons: (orgId: string) => yowyobApiRequest<SalesPersonDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people`),
-  createOrgSalesPerson: (orgId: string, data: CreateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getOrgSalesPersonById: (orgId: string, salesPersonId: string) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people/${salesPersonId}`),
-  updateOrgSalesPerson: (orgId: string, salesPersonId: string, data: UpdateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people/${salesPersonId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteOrgSalesPerson: (orgId: string, salesPersonId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people/${salesPersonId}`, { method: "DELETE" }),
-  getAgencySalesPersons: (orgId: string, agencyId: string) => yowyobApiRequest<SalesPersonDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people`),
-  createAgencySalesPerson: (orgId: string, agencyId: string, data: CreateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getAgencySalesPersonById: (orgId: string, agencyId: string, salesPersonId: string) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`),
-  updateAgencySalesPerson: (orgId: string, agencyId: string, salesPersonId: string, data: UpdateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteAgencySalesPerson: (orgId: string, agencyId: string, salesPersonId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`, { method: "DELETE" }),
-  getOrgCustomers: (orgId: string) => yowyobApiRequest<CustomerDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers`),
-  createOrgCustomer: (orgId: string, data: CreateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getOrgCustomerById: (orgId: string, customerId: string) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers/${customerId}`),
-  updateOrgCustomer: (orgId: string, customerId: string, data: UpdateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers/${customerId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteOrgCustomer: (orgId: string, customerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers/${customerId}`, { method: "DELETE" }),
-  getAgencyCustomers: (orgId: string, agencyId: string) => yowyobApiRequest<CustomerDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers`),
-  createAgencyCustomer: (orgId: string, agencyId: string, data: CreateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getAgencyCustomerById: (orgId: string, agencyId: string, customerId: string) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/${customerId}`),
-  updateAgencyCustomer: (orgId: string, agencyId: string, customerId: string, data: UpdateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/${customerId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteAgencyCustomer: (orgId: string, agencyId: string, customerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/${customerId}`, { method: "DELETE" }),
-  affectCustomerToAgency: (orgId: string, agencyId: string, data: AffectCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/add`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getOrgSuppliers: (orgId: string) => yowyobApiRequest<ProviderDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers`),
-  createOrgSupplier: (orgId: string, data: CreateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getOrgSupplierById: (orgId: string, providerId: string) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers/${providerId}`),
-  updateOrgSupplier: (orgId: string, providerId: string, data: UpdateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers/${providerId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteOrgSupplier: (orgId: string, providerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers/${providerId}`, { method: "DELETE" }),
-  getAgencySuppliers: (orgId: string, agencyId: string) => yowyobApiRequest<ProviderDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers`),
-  createAgencySupplier: (orgId: string, agencyId: string, data: CreateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getAgencySupplierById: (orgId: string, agencyId: string, providerId: string) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/${providerId}`),
-  updateAgencySupplier: (orgId: string, agencyId: string, providerId: string, data: UpdateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/${providerId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteAgencySupplier: (orgId: string, agencyId: string, providerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/${providerId}`, { method: "DELETE" }),
-  affectSupplierToAgency: (orgId: string, agencyId: string, data: AffectProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/add`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getOrgProspects: (orgId: string) => yowyobApiRequest<ProspectDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects`),
-  createOrgProspect: (orgId: string, data: CreateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getOrgProspectById: (orgId: string, prospectId: string) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects/${prospectId}`),
-  updateOrgProspect: (orgId: string, prospectId: string, data: UpdateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects/${prospectId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteOrgProspect: (orgId: string, prospectId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects/${prospectId}`, { method: "DELETE" }),
-  getAgencyProspects: (orgId: string, agencyId: string) => yowyobApiRequest<ProspectDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects`),
-  createAgencyProspect: (orgId: string, agencyId: string, data: CreateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getAgencyProspectById: (orgId: string, agencyId: string, prospectId: string) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects/${prospectId}`),
-  updateAgencyProspect: (orgId: string, agencyId: string, prospectId: string, data: UpdateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects/${prospectId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteAgencyProspect: (orgId: string, agencyId: string, prospectId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects/${prospectId}`, { method: "DELETE" }),
-  getAllBusinessActors: () => yowyobApiRequest<BusinessActorDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/business-actors"),
-  createBusinessActor: (data: CreateBusinessActorRequest) => yowyobApiRequest<BusinessActorDto>(YOWYOB_ORGANIZATION_API_BASE_URL, "/business-actors", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getBusinessActorById: (baId: string) => yowyobApiRequest<BusinessActorDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/${baId}`),
-  updateBusinessActor: (baId: string, data: UpdateBusinessActorRequest) => yowyobApiRequest<BusinessActorDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/${baId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteBusinessActor: (baId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/${baId}`, { method: "DELETE" }),
-  getBusinessActorsByType: (type: BusinessActorType) => yowyobApiRequest<BusinessActorDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/types/${type}`),
-  uploadOrganizationImages: (orgId: string, formData: FormData) => yowyobApiRequest<ImageDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/images/${orgId}/add`, { method: "PUT", body: formData, isFormData: true }),
-  getOrganizationImageInfo: (imageId: string) => yowyobApiRequest<ImageDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/images/${imageId}`),
-  getThirdParties: (orgId: string, params: GetThirdPartyRequest) => yowyobApiRequest<ThirdPartyDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties?${new URLSearchParams(params as Record<string, string>).toString()}`),
-  createThirdParty: (orgId: string, type: ThirdPartyType, data: CreateThirdPartyRequest) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${type}`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getThirdPartyById: (orgId: string, thirdPartyId: string) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}`),
-  updateThirdParty: (orgId: string, thirdPartyId: string, data: UpdateThirdPartyRequest) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteThirdParty: (orgId: string, thirdPartyId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}`, { method: "DELETE" }),
-  updateThirdPartyStatus: (orgId: string, thirdPartyId: string, data: UpdateThirdPartyStatusRequest) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}/status`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getProposedActivities: (orgId: string, params: { organizationId: string }) => yowyobApiRequest<ProposedActivityDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities?${new URLSearchParams(params).toString()}`),
-  createProposedActivity: (orgId: string, data: CreateProposedActivityRequest) => yowyobApiRequest<ProposedActivityDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getProposedActivityById: (orgId: string, activityId: string) => yowyobApiRequest<ProposedActivityDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities/${activityId}`),
-  updateProposedActivity: (orgId: string, activityId: string, data: UpdateProposedActivityRequest) => yowyobApiRequest<ProposedActivityDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities/${activityId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  deleteProposedActivity: (orgId: string, activityId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities/${activityId}`, { method: "DELETE" }),
-  getAllApplications: () => yowyobApiRequest<ApplicationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/applications"),
-  createApplication: (data: CreateApplicationRequest) => yowyobApiRequest<ApplicationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, "/applications", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
-  getApplicationKeys: (applicationId: string) => yowyobApiRequest<ApplicationKeyDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/applications/${applicationId}/keys`),
-  createApiKey: (applicationId: string) => yowyobApiRequest<ApplicationKeyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/applications/${applicationId}/keys/create`, { method: "POST" }),
+  createAgency: (orgId: string, data: CreateAgencyRequest) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getAgencyById: (orgId: string, agencyId: string) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}`, { method: "GET", authType: 'user' }),
+  updateAgency: (orgId: string, agencyId: string, data: UpdateAgencyRequest) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteAgency: (orgId: string, agencyId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}`, { method: "DELETE", authType: 'user' }),
+  updateAgencyStatus: (orgId: string, agencyId: string, data: UpdateAgencyStatusRequest) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/status`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+
+  // --- Employee Endpoints ---
+  getOrgEmployees: (orgId: string) => yowyobApiRequest<EmployeeDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees`, { method: "GET", authType: 'user' }),
+  createOrgEmployee: (orgId: string, data: CreateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getOrgEmployeeById: (orgId: string, employeeId: string) => yowyobApiRequest<EmployeeDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees/${employeeId}`, { method: "GET", authType: 'user' }),
+  updateOrgEmployee: (orgId: string, employeeId: string, data: UpdateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees/${employeeId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteOrgEmployee: (orgId: string, employeeId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees/${employeeId}`, { method: "DELETE", authType: 'user' }),
+  getAgencyEmployees: (orgId: string, agencyId: string) => yowyobApiRequest<EmployeeDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees`, { method: "GET", authType: 'user' }),
+  createAgencyEmployee: (orgId: string, agencyId: string, data: CreateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getAgencyEmployeeById: (orgId: string, agencyId: string, employeeId: string) => yowyobApiRequest<EmployeeDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/${employeeId}`, { method: "GET", authType: 'user' }),
+  updateAgencyEmployee: (orgId: string, agencyId: string, employeeId: string, data: UpdateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/${employeeId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteAgencyEmployee: (orgId: string, agencyId: string, employeeId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/${employeeId}`, { method: "DELETE", authType: 'user' }),
+  affectEmployeeToAgency: (orgId: string, agencyId: string, data: AffectEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/add`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+
+  // --- SalesPerson Endpoints ---
+  getOrgSalesPersons: (orgId: string) => yowyobApiRequest<SalesPersonDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people`, { method: "GET", authType: 'user' }),
+  createOrgSalesPerson: (orgId: string, data: CreateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getOrgSalesPersonById: (orgId: string, salesPersonId: string) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people/${salesPersonId}`, { method: "GET", authType: 'user' }),
+  updateOrgSalesPerson: (orgId: string, salesPersonId: string, data: UpdateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people/${salesPersonId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteOrgSalesPerson: (orgId: string, salesPersonId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people/${salesPersonId}`, { method: "DELETE", authType: 'user' }),
+  getAgencySalesPersons: (orgId: string, agencyId: string) => yowyobApiRequest<SalesPersonDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people`, { method: "GET", authType: 'user' }),
+  createAgencySalesPerson: (orgId: string, agencyId: string, data: CreateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getAgencySalesPersonById: (orgId: string, agencyId: string, salesPersonId: string) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`, { method: "GET", authType: 'user' }),
+  updateAgencySalesPerson: (orgId: string, agencyId: string, salesPersonId: string, data: UpdateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteAgencySalesPerson: (orgId: string, agencyId: string, salesPersonId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`, { method: "DELETE", authType: 'user' }),
+
+  // --- Customer Endpoints ---
+  getOrgCustomers: (orgId: string) => yowyobApiRequest<CustomerDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers`, { method: "GET", authType: 'user' }),
+  createOrgCustomer: (orgId: string, data: CreateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getOrgCustomerById: (orgId: string, customerId: string) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers/${customerId}`, { method: "GET", authType: 'user' }),
+  updateOrgCustomer: (orgId: string, customerId: string, data: UpdateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers/${customerId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteOrgCustomer: (orgId: string, customerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers/${customerId}`, { method: "DELETE", authType: 'user' }),
+  getAgencyCustomers: (orgId: string, agencyId: string) => yowyobApiRequest<CustomerDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers`, { method: "GET", authType: 'user' }),
+  createAgencyCustomer: (orgId: string, agencyId: string, data: CreateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getAgencyCustomerById: (orgId: string, agencyId: string, customerId: string) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/${customerId}`, { method: "GET", authType: 'user' }),
+  updateAgencyCustomer: (orgId: string, agencyId: string, customerId: string, data: UpdateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/${customerId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteAgencyCustomer: (orgId: string, agencyId: string, customerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/${customerId}`, { method: "DELETE", authType: 'user' }),
+  affectCustomerToAgency: (orgId: string, agencyId: string, data: AffectCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/add`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+
+  // --- Supplier (Provider) Endpoints ---
+  getOrgSuppliers: (orgId: string) => yowyobApiRequest<ProviderDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers`, { method: "GET", authType: 'user' }),
+  createOrgSupplier: (orgId: string, data: CreateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getOrgSupplierById: (orgId: string, providerId: string) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers/${providerId}`, { method: "GET", authType: 'user' }),
+  updateOrgSupplier: (orgId: string, providerId: string, data: UpdateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers/${providerId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteOrgSupplier: (orgId: string, providerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers/${providerId}`, { method: "DELETE", authType: 'user' }),
+  getAgencySuppliers: (orgId: string, agencyId: string) => yowyobApiRequest<ProviderDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers`, { method: "GET", authType: 'user' }),
+  createAgencySupplier: (orgId: string, agencyId: string, data: CreateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getAgencySupplierById: (orgId: string, agencyId: string, providerId: string) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/${providerId}`, { method: "GET", authType: 'user' }),
+  updateAgencySupplier: (orgId: string, agencyId: string, providerId: string, data: UpdateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/${providerId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteAgencySupplier: (orgId: string, agencyId: string, providerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/${providerId}`, { method: "DELETE", authType: 'user' }),
+  affectSupplierToAgency: (orgId: string, agencyId: string, data: AffectProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/add`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+
+  // --- Prospect Endpoints ---
+  getOrgProspects: (orgId: string) => yowyobApiRequest<ProspectDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects`, { method: "GET", authType: 'user' }),
+  createOrgProspect: (orgId: string, data: CreateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getOrgProspectById: (orgId: string, prospectId: string) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects/${prospectId}`, { method: "GET", authType: 'user' }),
+  updateOrgProspect: (orgId: string, prospectId: string, data: UpdateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects/${prospectId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteOrgProspect: (orgId: string, prospectId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects/${prospectId}`, { method: "DELETE", authType: 'user' }),
+  getAgencyProspects: (orgId: string, agencyId: string) => yowyobApiRequest<ProspectDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects`, { method: "GET", authType: 'user' }),
+  createAgencyProspect: (orgId: string, agencyId: string, data: CreateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getAgencyProspectById: (orgId: string, agencyId: string, prospectId: string) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects/${prospectId}`, { method: "GET", authType: 'user' }),
+  updateAgencyProspect: (orgId: string, agencyId: string, prospectId: string, data: UpdateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects/${prospectId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteAgencyProspect: (orgId: string, agencyId: string, prospectId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects/${prospectId}`, { method: "DELETE", authType: 'user' }),
+
+  // --- Business Actor Endpoints ---
+  getAllBusinessActors: () => yowyobApiRequest<BusinessActorDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/business-actors", { method: "GET", authType: 'user' }),
+  createBusinessActor: (data: CreateBusinessActorRequest) => yowyobApiRequest<BusinessActorDto>(YOWYOB_ORGANIZATION_API_BASE_URL, "/business-actors", { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getBusinessActorById: (baId: string) => yowyobApiRequest<BusinessActorDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/${baId}`, { method: "GET", authType: 'user' }),
+  updateBusinessActor: (baId: string, data: UpdateBusinessActorRequest) => yowyobApiRequest<BusinessActorDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/${baId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteBusinessActor: (baId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/${baId}`, { method: "DELETE", authType: 'user' }),
+  getBusinessActorsByType: (type: BusinessActorType) => yowyobApiRequest<BusinessActorDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/types/${type}`, { method: "GET", authType: 'user' }),
+
+  // --- Image Endpoints ---
+  uploadOrganizationImages: (orgId: string, formData: FormData) => yowyobApiRequest<ImageDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/images/${orgId}/add`, { method: "PUT", body: formData, isFormData: true, authType: 'user' }),
+  getOrganizationImageInfo: (imageId: string) => yowyobApiRequest<ImageDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/images/${imageId}`, { method: "GET", authType: 'user' }),
+
+  // --- Third Party Endpoints ---
+  getThirdParties: (orgId: string, params: GetThirdPartyRequest) => yowyobApiRequest<ThirdPartyDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties?${new URLSearchParams(params as Record<string, string>).toString()}`, { method: "GET", authType: 'user' }),
+  createThirdParty: (orgId: string, type: ThirdPartyType, data: CreateThirdPartyRequest) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${type}`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getThirdPartyById: (orgId: string, thirdPartyId: string) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}`, { method: "GET", authType: 'user' }),
+  updateThirdParty: (orgId: string, thirdPartyId: string, data: UpdateThirdPartyRequest) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteThirdParty: (orgId: string, thirdPartyId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}`, { method: "DELETE", authType: 'user' }),
+  updateThirdPartyStatus: (orgId: string, thirdPartyId: string, data: UpdateThirdPartyStatusRequest) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}/status`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+
+  // --- Proposed Activity Endpoints ---
+  getProposedActivities: (orgId: string, params: { organizationId: string }) => yowyobApiRequest<ProposedActivityDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities?${new URLSearchParams(params).toString()}`, { method: "GET", authType: 'user' }),
+  createProposedActivity: (orgId: string, data: CreateProposedActivityRequest) => yowyobApiRequest<ProposedActivityDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities`, { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getProposedActivityById: (orgId: string, activityId: string) => yowyobApiRequest<ProposedActivityDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities/${activityId}`, { method: "GET", authType: 'user' }),
+  updateProposedActivity: (orgId: string, activityId: string, data: UpdateProposedActivityRequest) => yowyobApiRequest<ProposedActivityDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities/${activityId}`, { method: "PUT", body: JSON.stringify(data), authType: 'user' }),
+  deleteProposedActivity: (orgId: string, activityId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities/${activityId}`, { method: "DELETE", authType: 'user' }),
+
+  // --- Application Endpoints ---
+  getAllApplications: () => yowyobApiRequest<ApplicationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/applications", { method: "GET", authType: 'user' }),
+  createApplication: (data: CreateApplicationRequest) => yowyobApiRequest<ApplicationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, "/applications", { method: "POST", body: JSON.stringify(data), authType: 'user' }),
+  getApplicationKeys: (applicationId: string) => yowyobApiRequest<ApplicationKeyDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/applications/${applicationId}/keys`, { method: "GET", authType: 'user' }),
+  createApiKey: (applicationId: string) => yowyobApiRequest<ApplicationKeyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/applications/${applicationId}/keys/create`, { method: "POST", authType: 'user' }),
 };// END OF FILE: lib/apiClient.ts
 
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/auth/system-token-manager.ts
@@ -29795,7 +31984,7 @@ class SystemTokenManager {
 
     if (!response.ok) {
       const errorBody = await response.text();
-      console.error("SystemTokenManager: Failed to fetch system token via proxy.", { status: response.status, body: errorBody });
+      // console.error("SystemTokenManager: Failed to fetch system token via proxy.", { status: response.status, body: errorBody });
       throw new Error(`Could not authenticate system client. Status: ${response.status}`);
     }
 
@@ -29807,7 +31996,7 @@ class SystemTokenManager {
     };
 
     this.token = newToken;
-    console.log("SystemTokenManager: New system token fetched successfully.");
+    // console.log("SystemTokenManager: New system token fetched successfully.");
     return newToken;
   }
 
@@ -32645,208 +34834,45 @@ const config = {
 export default config;
 // END OF FILE: postcss.config.mjs
 
-//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/script.sh
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/file.svg
 
-#!/bin/bash
-# Description: Refactors the main sidebar to be context-aware based on the URL path, not just the user's role.
+[Non-text file (e.g., binary, data, compressed) - Contents omitted]
+// END OF FILE: public/file.svg
 
-echo "🧠 Refining the Sidebar to be context-aware..."
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/globe.svg
 
-# --- 1. Update the Main Sidebar with Path-Based Logic ---
-code "components/sidebar.tsx"
-cat > "components/sidebar.tsx" << 'EOF'
-"use client";
+[Non-text file (e.g., binary, data, compressed) - Contents omitted]
+// END OF FILE: public/globe.svg
 
-import React, { useState, useMemo, useEffect } from "react";
-import Link from "next/link";
-import Image from "next/image";
-import { usePathname, useRouter } from "next/navigation";
-import { useSession, signOut } from "next-auth/react";
-import {
-  Award, Briefcase, Building, FileText, FolderHeart, HandCoins, HelpCircle,
-  LayoutGrid, Lightbulb, LogOut, Landmark, Menu, MessagesSquare, Package, Server,
-  Settings, Share2, SidebarClose, Truck, UserCheck, Users, Users2, UsersRound,
-  Webhook, ArrowLeft, UserCog, Power, Shield, Info, Handshake, UserPlus, User
-} from "lucide-react";
-import { cn } from "@/lib/utils";
-import { Button } from "@/components/ui/button";
-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
-import { OrganizationSwitcher } from "@/components/organization/organization-switcher";
-import { useActiveOrganization } from "@/contexts/active-organization-context";
-import { Separator } from "./ui/separator";
-import { AgencySwitcher } from "./organization/agencies/agency-switcher";
-import { toast } from "sonner";
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/logo.svg
 
-// --- Navigation Definitions ---
-const baOrgNavigation = [
-  { name: "Organizations Hub", href: "/business-actor/organizations", icon: Building },
-  { name: "Org. Dashboard", href: "/business-actor/dashboard", icon: LayoutGrid, isOrgSpecific: true },
-  { name: "Org. Profile", href: "/business-actor/org/profile", icon: Landmark, isOrgSpecific: true },
-  { name: "Agencies", href: "/business-actor/org/agencies", icon: Users2, isOrgSpecific: true },
-  { name: "Employees", href: "/business-actor/org/employees", icon: Users, isOrgSpecific: true },
-  { name: "Customers", href: "/business-actor/org/customers", icon: UsersRound, isOrgSpecific: true },
-  { name: "Suppliers", href: "/business-actor/org/suppliers", icon: Truck, isOrgSpecific: true },
-  { name: "Sales People", href: "/business-actor/org/sales-people", icon: UserCheck, isOrgSpecific: true },
-  { name: "Prospects", href: "/business-actor/org/prospects", icon: UserPlus, isOrgSpecific: true },
-  { name: "Third Parties", href: "/business-actor/org/third-parties", icon: Handshake, isOrgSpecific: true },
-  { name: "Certifications", href: "/business-actor/org/certifications", icon: Award, isOrgSpecific: true },
-];
-const agencyNavigation = [
-  { name: "Agency Dashboard", href: "/business-actor/agency/dashboard", icon: LayoutGrid },
-  { name: "Agency Profile", href: "/business-actor/agency/profile", icon: Landmark },
-  { name: "Agency Employees", href: "/business-actor/agency/employees", icon: Users },
-];
-const baGlobalNavigation = [
-  { name: "My BA Profile", href: "/business-actor/profile", icon: UserCog },
-  { name: "API & Webhooks", href: "/business-actor/webhooks", icon: Webhook },
-];
-const userNavigation = [
-  { name: "Dashboard", href: "/dashboard", icon: LayoutGrid },
-  { name: "My Bonus", href: "/bonus", icon: HandCoins },
-  { name: "Favorites", href: "/favorites", icon: FolderHeart },
-];
-const superAdminNavigation = [
-  { name: "Dashboard", href: "/super-admin/dashboard", icon: LayoutGrid },
-  { name: "Organizations", href: "/super-admin/organizations", icon: Building },
-  { name: "Users", href: "/super-admin/users", icon: Users },
-  { name: "Roles & Permissions", href: "/super-admin/roles", icon: Shield },
-  { name: "Business Domains", href: "/super-admin/business-domains", icon: Server },
-];
-const bottomNavigation = [
-  { name: "Help & Support", href: "/help", icon: HelpCircle },
-  { name: "Settings", href: "/settings", icon: Settings },
-];
+[Non-text file (e.g., binary, data, compressed) - Contents omitted]
+// END OF FILE: public/logo.svg
 
-export function Sidebar() {
-  const pathname = usePathname();
-  const router = useRouter();
-  const { data: session } = useSession();
-  const [isCollapsed, setIsCollapsed] = useState(false);
-  const [isMobileOpen, setIsMobileOpen] = useState(false);
-  const { activeOrganizationId, activeAgencyDetails, clearActiveAgency, clearActiveOrganization } = useActiveOrganization();
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/logo.svg.old
 
-  const { isBusinessActor, isSuperAdmin } = useMemo(() => ({
-    isBusinessActor: !!session?.user.businessActorId,
-    isSuperAdmin: session?.user.roles?.includes('SUPER_ADMIN_ROLE'),
-  }), [session]);
+[Non-text file (e.g., binary, data, compressed) - Contents omitted]
+// END OF FILE: public/logo.svg.old
 
-  // --- [THE FIX] Path-driven sidebar logic ---
-  let mainNav: any[], globalNav: any[], sidebarTitle: string, homeLink: string;
-  let ContextSwitcher = null;
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/next.svg
 
-  const isAgencyContext = isBusinessActor && pathname.startsWith('/business-actor/agency');
-  const isOrgContext = isBusinessActor && pathname.startsWith('/business-actor/') && !isAgencyContext;
-  const isAdminContext = isSuperAdmin && pathname.startsWith('/super-admin');
-  
-  if (isAgencyContext) {
-      mainNav = agencyNavigation;
-      sidebarTitle = activeAgencyDetails?.short_name || "Agency";
-      homeLink = "/business-actor/agency/dashboard";
-      ContextSwitcher = () => <AgencySwitcher isCollapsed={isCollapsed} />;
-      globalNav = [];
-  } else if (isOrgContext) {
-      mainNav = baOrgNavigation;
-      globalNav = baGlobalNavigation;
-      sidebarTitle = "BA Workspace";
-      homeLink = "/business-actor/organizations";
-      ContextSwitcher = () => <OrganizationSwitcher isCollapsed={isCollapsed} />;
-  } else if (isAdminContext) {
-      mainNav = superAdminNavigation;
-      sidebarTitle = "Platform Admin";
-      homeLink = "/super-admin/dashboard";
-      globalNav = [];
-  } else {
-      // Default view for ALL users, regardless of role, when not in a specific workspace.
-      mainNav = userNavigation;
-      sidebarTitle = "My Account";
-      homeLink = "/dashboard";
-      globalNav = [];
-  }
-  // --- End of path-driven logic ---
+[Non-text file (e.g., binary, data, compressed) - Contents omitted]
+// END OF FILE: public/next.svg
 
-  const NavItem = ({ item }: { item: { name: string; href: string; icon: React.ElementType; isOrgSpecific?: boolean; } }) => {
-    const isDisabled = item.isOrgSpecific && !activeOrganizationId;
-    const isActive = !isDisabled && pathname.startsWith(item.href);
-    return (
-      <Tooltip delayDuration={0}>
-        <TooltipTrigger asChild>
-          <Link href={isDisabled ? "#" : item.href} className={cn("flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors h-9", isActive && "bg-sidebar-accent text-sidebar-accent-foreground", !isDisabled && !isActive && "text-sidebar-foreground hover:bg-sidebar-accent/80", isDisabled && "cursor-not-allowed text-muted-foreground/50", isCollapsed && "justify-center px-2")} onClick={() => isMobileOpen && !isDisabled && setIsMobileOpen(false)}>
-            <item.icon className={cn("h-[18px] w-[18px] shrink-0", !isCollapsed && "mr-3")} />
-            {!isCollapsed && <span className="truncate">{item.name}</span>}
-          </Link>
-        </TooltipTrigger>
-        {isCollapsed && <TooltipContent side="right">{item.name}</TooltipContent>}
-      </Tooltip>
-    );
-  };
-  
-  const ExitButton = () => {
-    if (isAgencyContext) {
-      return (
-        <Tooltip delayDuration={0}>
-          <TooltipTrigger asChild>
-            <Button onClick={() => { clearActiveAgency(); router.push("/business-actor/dashboard"); }} variant="ghost" className="w-full justify-start h-9 px-3 text-destructive hover:text-destructive hover:bg-destructive/10">
-              <ArrowLeft className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")} />
-              {!isCollapsed && "Exit Agency"}
-            </Button>
-          </TooltipTrigger>
-          {isCollapsed && <TooltipContent side="right">Exit Agency</TooltipContent>}
-        </Tooltip>
-      );
-    }
-    if (isBusinessActor && pathname.startsWith('/business-actor')) {
-      return (
-        <Tooltip delayDuration={0}>
-          <TooltipTrigger asChild>
-            <Button onClick={() => { clearActiveOrganization(); router.push('/dashboard'); toast.info("Exited Business Workspace."); }} variant="ghost" className="flex items-center w-full justify-start h-9 px-3 text-sidebar-foreground hover:bg-amber-500/10 hover:text-amber-600">
-              <Power className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")} />
-              {!isCollapsed && "Exit Workspace"}
-            </Button>
-          </TooltipTrigger>
-          {isCollapsed && <TooltipContent side="right">Exit Workspace</TooltipContent>}
-        </Tooltip>
-      );
-    }
-    return null;
-  };
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/placeholder.svg
 
-  return (
-    <TooltipProvider>
-      <Button variant="outline" size="icon" className="lg:hidden fixed top-4 left-4 z-[60]" onClick={() => setIsMobileOpen(v => !v)}><Menu className="h-5 w-5" /></Button>
-      <div className={cn("fixed inset-y-0 left-0 z-50 flex h-full flex-col border-r bg-sidebar text-sidebar-foreground transition-all duration-300 ease-in-out lg:sticky lg:top-0 lg:h-screen", isCollapsed ? "w-[72px]" : "w-64", isMobileOpen ? "translate-x-0 shadow-xl" : "-translate-x-full lg:translate-x-0")}>
-        <div className={cn("flex h-16 shrink-0 items-center border-b px-4", isCollapsed && "justify-center px-2")}>
-          <Link href={homeLink} className="flex items-center gap-2 font-semibold"><Image src="/logo.svg" alt="Logo" width={32} height={32} priority className="shrink-0" />{!isCollapsed && <span className="text-lg truncate">{sidebarTitle}</span>}</Link>
-          <Button variant="ghost" size="icon" className={cn("h-8 w-8 ml-auto hidden lg:flex")} onClick={() => setIsCollapsed(!isCollapsed)}><SidebarClose className={cn("h-4 w-4 transition-transform", isCollapsed && "rotate-180")} /></Button>
-          {isMobileOpen && <Button variant="ghost" size="icon" className="h-8 w-8 ml-auto lg:hidden" onClick={() => setIsMobileOpen(false)}><SidebarClose className="h-4 w-4" /></Button>}
-        </div>
-        {ContextSwitcher && <ContextSwitcher />}
-        <div className="flex flex-1 flex-col overflow-y-auto overflow-x-hidden">
-          <nav className={cn("flex-1 space-y-1 py-4", isCollapsed ? "px-2" : "px-4")}>
-            {mainNav.map((item) => <NavItem key={item.name} item={item} />)}
-            {globalNav.length > 0 && (<><Separator className="my-3" />{globalNav.map((item) => <NavItem key={item.name} item={item} />)}</>)}
-          </nav>
-          <div className={cn("mt-auto border-t", isCollapsed ? "px-2" : "px-4")}>
-            <div className="space-y-1 py-4">
-              <ExitButton />
-              {bottomNavigation.map((item) => <NavItem key={item.name} item={item} />)}
-              <Tooltip delayDuration={0}>
-                <TooltipTrigger asChild>
-                  <Button onClick={() => signOut({ callbackUrl: "/login" })} variant="ghost" className="flex items-center w-full justify-start h-9 px-3 text-sidebar-foreground hover:bg-destructive/10 hover:text-destructive"><LogOut className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")} />{!isCollapsed && "Logout"}</Button>
-                </TooltipTrigger>
-                {isCollapsed && <TooltipContent side="right">Logout</TooltipContent>}
-              </Tooltip>
-            </div>
-          </div>
-        </div>
-      </div>
-      {isMobileOpen && <div className="fixed inset-0 z-40 bg-black/50 lg:hidden" onClick={() => setIsMobileOpen(false)} />}
-    </TooltipProvider>
-  );
-}
-EOF
+[Non-text file (e.g., binary, data, compressed) - Contents omitted]
+// END OF FILE: public/placeholder.svg
+
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/vercel.svg
+
+[Non-text file (e.g., binary, data, compressed) - Contents omitted]
+// END OF FILE: public/vercel.svg
+
+//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/window.svg
 
-echo "✅ Sidebar logic has been successfully updated to be path-aware."
-echo "✅ Users will now see the correct navigation based on their current workspace context."// END OF FILE: script.sh
+[Non-text file (e.g., binary, data, compressed) - Contents omitted]
+// END OF FILE: public/window.svg
 
 //---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/tailwind.config.js
 
diff --git a/script.sh b/script.sh
deleted file mode 100755
index 7d31881..0000000
--- a/script.sh
+++ /dev/null
@@ -1,200 +0,0 @@
-#!/bin/bash
-# Description: Refactors the main sidebar to be context-aware based on the URL path, not just the user's role.
-
-echo "🧠 Refining the Sidebar to be context-aware..."
-
-# --- 1. Update the Main Sidebar with Path-Based Logic ---
-code "components/sidebar.tsx"
-cat > "components/sidebar.tsx" << 'EOF'
-"use client";
-
-import React, { useState, useMemo, useEffect } from "react";
-import Link from "next/link";
-import Image from "next/image";
-import { usePathname, useRouter } from "next/navigation";
-import { useSession, signOut } from "next-auth/react";
-import {
-  Award, Briefcase, Building, FileText, FolderHeart, HandCoins, HelpCircle,
-  LayoutGrid, Lightbulb, LogOut, Landmark, Menu, MessagesSquare, Package, Server,
-  Settings, Share2, SidebarClose, Truck, UserCheck, Users, Users2, UsersRound,
-  Webhook, ArrowLeft, UserCog, Power, Shield, Info, Handshake, UserPlus, User
-} from "lucide-react";
-import { cn } from "@/lib/utils";
-import { Button } from "@/components/ui/button";
-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
-import { OrganizationSwitcher } from "@/components/organization/organization-switcher";
-import { useActiveOrganization } from "@/contexts/active-organization-context";
-import { Separator } from "./ui/separator";
-import { AgencySwitcher } from "./organization/agencies/agency-switcher";
-import { toast } from "sonner";
-
-// --- Navigation Definitions ---
-const baOrgNavigation = [
-  { name: "Organizations Hub", href: "/business-actor/organizations", icon: Building },
-  { name: "Org. Dashboard", href: "/business-actor/dashboard", icon: LayoutGrid, isOrgSpecific: true },
-  { name: "Org. Profile", href: "/business-actor/org/profile", icon: Landmark, isOrgSpecific: true },
-  { name: "Agencies", href: "/business-actor/org/agencies", icon: Users2, isOrgSpecific: true },
-  { name: "Employees", href: "/business-actor/org/employees", icon: Users, isOrgSpecific: true },
-  { name: "Customers", href: "/business-actor/org/customers", icon: UsersRound, isOrgSpecific: true },
-  { name: "Suppliers", href: "/business-actor/org/suppliers", icon: Truck, isOrgSpecific: true },
-  { name: "Sales People", href: "/business-actor/org/sales-people", icon: UserCheck, isOrgSpecific: true },
-  { name: "Prospects", href: "/business-actor/org/prospects", icon: UserPlus, isOrgSpecific: true },
-  { name: "Third Parties", href: "/business-actor/org/third-parties", icon: Handshake, isOrgSpecific: true },
-  { name: "Certifications", href: "/business-actor/org/certifications", icon: Award, isOrgSpecific: true },
-];
-const agencyNavigation = [
-  { name: "Agency Dashboard", href: "/business-actor/agency/dashboard", icon: LayoutGrid },
-  { name: "Agency Profile", href: "/business-actor/agency/profile", icon: Landmark },
-  { name: "Agency Employees", href: "/business-actor/agency/employees", icon: Users },
-];
-const baGlobalNavigation = [
-  { name: "My BA Profile", href: "/business-actor/profile", icon: UserCog },
-  { name: "API & Webhooks", href: "/business-actor/webhooks", icon: Webhook },
-];
-const userNavigation = [
-  { name: "Dashboard", href: "/dashboard", icon: LayoutGrid },
-  { name: "My Bonus", href: "/bonus", icon: HandCoins },
-  { name: "Favorites", href: "/favorites", icon: FolderHeart },
-];
-const superAdminNavigation = [
-  { name: "Dashboard", href: "/super-admin/dashboard", icon: LayoutGrid },
-  { name: "Organizations", href: "/super-admin/organizations", icon: Building },
-  { name: "Users", href: "/super-admin/users", icon: Users },
-  { name: "Roles & Permissions", href: "/super-admin/roles", icon: Shield },
-  { name: "Business Domains", href: "/super-admin/business-domains", icon: Server },
-];
-const bottomNavigation = [
-  { name: "Help & Support", href: "/help", icon: HelpCircle },
-  { name: "Settings", href: "/settings", icon: Settings },
-];
-
-export function Sidebar() {
-  const pathname = usePathname();
-  const router = useRouter();
-  const { data: session } = useSession();
-  const [isCollapsed, setIsCollapsed] = useState(false);
-  const [isMobileOpen, setIsMobileOpen] = useState(false);
-  const { activeOrganizationId, activeAgencyDetails, clearActiveAgency, clearActiveOrganization } = useActiveOrganization();
-
-  const { isBusinessActor, isSuperAdmin } = useMemo(() => ({
-    isBusinessActor: !!session?.user.businessActorId,
-    isSuperAdmin: session?.user.roles?.includes('SUPER_ADMIN_ROLE'),
-  }), [session]);
-
-  // --- [THE FIX] Path-driven sidebar logic ---
-  let mainNav: any[], globalNav: any[], sidebarTitle: string, homeLink: string;
-  let ContextSwitcher = null;
-
-  const isAgencyContext = isBusinessActor && pathname.startsWith('/business-actor/agency');
-  const isOrgContext = isBusinessActor && pathname.startsWith('/business-actor/') && !isAgencyContext;
-  const isAdminContext = isSuperAdmin && pathname.startsWith('/super-admin');
-  
-  if (isAgencyContext) {
-      mainNav = agencyNavigation;
-      sidebarTitle = activeAgencyDetails?.short_name || "Agency";
-      homeLink = "/business-actor/agency/dashboard";
-      ContextSwitcher = () => <AgencySwitcher isCollapsed={isCollapsed} />;
-      globalNav = [];
-  } else if (isOrgContext) {
-      mainNav = baOrgNavigation;
-      globalNav = baGlobalNavigation;
-      sidebarTitle = "BA Workspace";
-      homeLink = "/business-actor/organizations";
-      ContextSwitcher = () => <OrganizationSwitcher isCollapsed={isCollapsed} />;
-  } else if (isAdminContext) {
-      mainNav = superAdminNavigation;
-      sidebarTitle = "Platform Admin";
-      homeLink = "/super-admin/dashboard";
-      globalNav = [];
-  } else {
-      // Default view for ALL users, regardless of role, when not in a specific workspace.
-      mainNav = userNavigation;
-      sidebarTitle = "My Account";
-      homeLink = "/dashboard";
-      globalNav = [];
-  }
-  // --- End of path-driven logic ---
-
-  const NavItem = ({ item }: { item: { name: string; href: string; icon: React.ElementType; isOrgSpecific?: boolean; } }) => {
-    const isDisabled = item.isOrgSpecific && !activeOrganizationId;
-    const isActive = !isDisabled && pathname.startsWith(item.href);
-    return (
-      <Tooltip delayDuration={0}>
-        <TooltipTrigger asChild>
-          <Link href={isDisabled ? "#" : item.href} className={cn("flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors h-9", isActive && "bg-sidebar-accent text-sidebar-accent-foreground", !isDisabled && !isActive && "text-sidebar-foreground hover:bg-sidebar-accent/80", isDisabled && "cursor-not-allowed text-muted-foreground/50", isCollapsed && "justify-center px-2")} onClick={() => isMobileOpen && !isDisabled && setIsMobileOpen(false)}>
-            <item.icon className={cn("h-[18px] w-[18px] shrink-0", !isCollapsed && "mr-3")} />
-            {!isCollapsed && <span className="truncate">{item.name}</span>}
-          </Link>
-        </TooltipTrigger>
-        {isCollapsed && <TooltipContent side="right">{item.name}</TooltipContent>}
-      </Tooltip>
-    );
-  };
-  
-  const ExitButton = () => {
-    if (isAgencyContext) {
-      return (
-        <Tooltip delayDuration={0}>
-          <TooltipTrigger asChild>
-            <Button onClick={() => { clearActiveAgency(); router.push("/business-actor/dashboard"); }} variant="ghost" className="w-full justify-start h-9 px-3 text-destructive hover:text-destructive hover:bg-destructive/10">
-              <ArrowLeft className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")} />
-              {!isCollapsed && "Exit Agency"}
-            </Button>
-          </TooltipTrigger>
-          {isCollapsed && <TooltipContent side="right">Exit Agency</TooltipContent>}
-        </Tooltip>
-      );
-    }
-    if (isBusinessActor && pathname.startsWith('/business-actor')) {
-      return (
-        <Tooltip delayDuration={0}>
-          <TooltipTrigger asChild>
-            <Button onClick={() => { clearActiveOrganization(); router.push('/dashboard'); toast.info("Exited Business Workspace."); }} variant="ghost" className="flex items-center w-full justify-start h-9 px-3 text-sidebar-foreground hover:bg-amber-500/10 hover:text-amber-600">
-              <Power className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")} />
-              {!isCollapsed && "Exit Workspace"}
-            </Button>
-          </TooltipTrigger>
-          {isCollapsed && <TooltipContent side="right">Exit Workspace</TooltipContent>}
-        </Tooltip>
-      );
-    }
-    return null;
-  };
-
-  return (
-    <TooltipProvider>
-      <Button variant="outline" size="icon" className="lg:hidden fixed top-4 left-4 z-[60]" onClick={() => setIsMobileOpen(v => !v)}><Menu className="h-5 w-5" /></Button>
-      <div className={cn("fixed inset-y-0 left-0 z-50 flex h-full flex-col border-r bg-sidebar text-sidebar-foreground transition-all duration-300 ease-in-out lg:sticky lg:top-0 lg:h-screen", isCollapsed ? "w-[72px]" : "w-64", isMobileOpen ? "translate-x-0 shadow-xl" : "-translate-x-full lg:translate-x-0")}>
-        <div className={cn("flex h-16 shrink-0 items-center border-b px-4", isCollapsed && "justify-center px-2")}>
-          <Link href={homeLink} className="flex items-center gap-2 font-semibold"><Image src="/logo.svg" alt="Logo" width={32} height={32} priority className="shrink-0" />{!isCollapsed && <span className="text-lg truncate">{sidebarTitle}</span>}</Link>
-          <Button variant="ghost" size="icon" className={cn("h-8 w-8 ml-auto hidden lg:flex")} onClick={() => setIsCollapsed(!isCollapsed)}><SidebarClose className={cn("h-4 w-4 transition-transform", isCollapsed && "rotate-180")} /></Button>
-          {isMobileOpen && <Button variant="ghost" size="icon" className="h-8 w-8 ml-auto lg:hidden" onClick={() => setIsMobileOpen(false)}><SidebarClose className="h-4 w-4" /></Button>}
-        </div>
-        {ContextSwitcher && <ContextSwitcher />}
-        <div className="flex flex-1 flex-col overflow-y-auto overflow-x-hidden">
-          <nav className={cn("flex-1 space-y-1 py-4", isCollapsed ? "px-2" : "px-4")}>
-            {mainNav.map((item) => <NavItem key={item.name} item={item} />)}
-            {globalNav.length > 0 && (<><Separator className="my-3" />{globalNav.map((item) => <NavItem key={item.name} item={item} />)}</>)}
-          </nav>
-          <div className={cn("mt-auto border-t", isCollapsed ? "px-2" : "px-4")}>
-            <div className="space-y-1 py-4">
-              <ExitButton />
-              {bottomNavigation.map((item) => <NavItem key={item.name} item={item} />)}
-              <Tooltip delayDuration={0}>
-                <TooltipTrigger asChild>
-                  <Button onClick={() => signOut({ callbackUrl: "/login" })} variant="ghost" className="flex items-center w-full justify-start h-9 px-3 text-sidebar-foreground hover:bg-destructive/10 hover:text-destructive"><LogOut className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")} />{!isCollapsed && "Logout"}</Button>
-                </TooltipTrigger>
-                {isCollapsed && <TooltipContent side="right">Logout</TooltipContent>}
-              </Tooltip>
-            </div>
-          </div>
-        </div>
-      </div>
-      {isMobileOpen && <div className="fixed inset-0 z-40 bg-black/50 lg:hidden" onClick={() => setIsMobileOpen(false)} />}
-    </TooltipProvider>
-  );
-}
-EOF
-
-echo "✅ Sidebar logic has been successfully updated to be path-aware."
-echo "✅ Users will now see the correct navigation based on their current workspace context."
\ No newline at end of file
