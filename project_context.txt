Project Context From: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template
Generated On: Mon Jul 14 09:07:33 AM WAT 2025
===============================================
Ignored Directory Patterns: .* node_modules vendor build dist target __pycache__ .next cache target venv svgs fontawesome scss fonts webfonts images bin storage gradle out public assets
Ignored File Patterns: *.log *.jar *.pdf *.png *.jpg *.class *.sqlite project_context.txt package-lock.json yarn.lock *.json composer.lock *.ico *.jar pnpm-lock.yaml *.css *._css *.puml *.blade.php
===============================================

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/auth/[...nextauth]/route.ts

import NextAuth, { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { authRepository } from "@/lib/data-repo/auth";
import { AuthRequest } from "@/types/auth";
import { User } from "next-auth";
import { organizationRepository } from "@/lib/data-repo/organization";

export const authOptions: NextAuthOptions = {
  session: {
    strategy: "jwt",
  },
  providers: [
    CredentialsProvider({
      id: "credentials",
      name: "Credentials",
      credentials: {
        username: { label: "Username", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials): Promise<User | null> {
        if (!credentials?.username || !credentials?.password) {
          throw new Error("Username and password are required.");
        }
        try {
          const loginRequest: AuthRequest = {
            username: credentials.username,
            password: credentials.password,
          };
          // Step 1: Authenticate the user and get their token and basic info.
          const loginResponse = await authRepository.login(loginRequest);

          if (loginResponse && loginResponse.user && loginResponse.access_token) {
            const userId = loginResponse.user.id;
            if (!userId) {
              throw new Error("User ID is missing from login response.");
            }

            // [THE FIX] Step 2: Check if the user owns any organizations.
            // This is now the single source of truth for their "Business Actor" status.
            let businessActorId: string | null = null;
            try {
              // We need to temporarily use the new token to make this check.
              const userOrgs = await organizationRepository.getMyOrganizations();
              if (userOrgs && userOrgs.length > 0) {
                // If they have organizations, their businessActorId is their userId.
                businessActorId = userId;
              }
            } catch (error: any) {
              // Log the error but don't block login. The user will be treated as a standard user.
              console.error("Could not check for user organizations during login:", error.message);
            }

            return {
              id: userId,
              name: `${loginResponse.user.first_name} ${loginResponse.user.last_name}`,
              email: loginResponse.user.email,
              username: loginResponse.user.username,
              first_name: loginResponse.user.first_name,
              last_name: loginResponse.user.last_name,
              phone_number: loginResponse.user.phone_number,
              email_verified: loginResponse.user.email_verified,
              phone_number_verified: loginResponse.user.phone_number_verified,
              accessToken: loginResponse.access_token.token,
              roles: loginResponse.roles,
              permissions: loginResponse.permissions,
              // The businessActorId is now correctly set based on organization ownership.
              businessActorId: businessActorId,
            };
          }
          return null;
        } catch (error: any) {
          throw new Error(error.message || "An unexpected error occurred during login.");
        }
      },
    }),
  ],
  callbacks: {
    async jwt({ token, user, trigger, session }) {
      if (user) {
        token.id = user.id;
        token.username = user.username;
        token.accessToken = user.accessToken;
        token.roles = user.roles;
        token.permissions = user.permissions;
        token.first_name = user.first_name;
        token.last_name = user.last_name;
        token.phone_number = user.phone_number;
        token.email_verified = user.email_verified;
        token.phone_number_verified = user.phone_number_verified;
        token.businessActorId = user.businessActorId;
      }
      // This handles the session update from the client
      if (trigger === "update" && session) {
        if (session.activeOrganizationId !== undefined) {
          token.activeOrganizationId = session.activeOrganizationId;
        }
        if (session.businessActorId !== undefined) {
          token.businessActorId = session.businessActorId;
        }
      }
      return token;
    },
    async session({ session, token }) {
      if (token) {
        session.user.id = token.id as string;
        session.user.username = token.username as string;
        session.user.accessToken = token.accessToken as string;
        session.user.roles = token.roles as string[];
        session.user.permissions = token.permissions as string[];
        session.user.first_name = token.first_name as string;
        session.user.last_name = token.last_name as string;
        session.user.phone_number = token.phone_number as string;
        session.user.email_verified = token.email_verified as boolean;
        session.user.phone_number_verified = token.phone_number_verified as boolean;
        session.user.businessActorId = token.businessActorId as string | null;

      }
      return session;
    },
  },
  pages: {
    signIn: "/login",
    error: "/login",
  },
};

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };// END OF FILE: app/api/auth/[...nextauth]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/applications/[applicationId]/keys/create/route.ts

// app/api/mock/applications/[applicationId]/keys/create/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ApplicationKeyDto } from '@/types/organization';

export async function POST(_request: NextRequest, { params }: { params: Promise<{ applicationId: string }> }) {
  try {
    const { applicationId } = await params;
    // Check if application exists
    const app = dbManager.getItemById('applicationsData', applicationId);
    if (!app) return NextResponse.json({ message: "Application not found" }, { status: 404 });

    const newKey: Omit<ApplicationKeyDto, 'created_at' | 'updated_at' | 'public_key' | 'secret_key'> & { public_key?: string, secret_key?: string } = {
      application_id: applicationId,
      // Generate mock keys
      public_key: `mock_pub_key_${Date.now()}`,
      secret_key: `mock_sec_key_${Date.now()}_${Math.random().toString(36).substring(2)}`,
    };
    const createdKey = dbManager.addItem('applicationKeysData', newKey);
    return NextResponse.json(createdKey, { status: 200 }); // Spec says 200 OK
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}// END OF FILE: app/api/mock/applications/[applicationId]/keys/create/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/applications/[applicationId]/keys/route.ts

// app/api/mock/applications/[applicationId]/keys/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ApplicationKeyDto } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ applicationId: string }> }) {
  try {
    const { applicationId } = await params;
    const allKeys = dbManager.getCollection('applicationKeysData');
    const appKeys = allKeys.filter(key => key.application_id === applicationId);
    return NextResponse.json(appKeys);
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}// END OF FILE: app/api/mock/applications/[applicationId]/keys/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/applications/route.ts

// app/api/mock/applications/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ApplicationDto, CreateApplicationRequest } from '@/types/organization';

export async function GET(_request: NextRequest) {
  try {
    const apps = dbManager.getCollection('applicationsData');
    return NextResponse.json(apps);
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}

export async function POST(_request: NextRequest) {
  try {
    const body = await _request.json() as CreateApplicationRequest;
    if (!body.name) return NextResponse.json({ message: "App name required" }, { status: 400 });
    const newApp = dbManager.addItem('applicationsData', body);
    return NextResponse.json(newApp, { status: 200 }); // Spec says 200 OK
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}// END OF FILE: app/api/mock/applications/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/login/route.ts

import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AuthRequest, LoginResponse, UserInfo } from '@/types/auth';
import bcrypt from 'bcryptjs';

export async function POST(_request: Request) {
  try {
    const body = await _request.json() as AuthRequest;

    if (!body.username || !body.password) {
      return NextResponse.json({ message: "Username and password are required." }, { status: 400 });
    }

    const users = dbManager.getCollection('authUsers');
    const user = users.find(u => u.username === body.username || u.email === body.username);

    if (!user || !user.password_hash || !user.is_enabled) {
      return NextResponse.json({ message: "Invalid username or password, or account disabled." }, { status: 401 });
    }

    const passwordIsValid = await bcrypt.compare(body.password, user.password_hash);

    if (!passwordIsValid) {
      return NextResponse.json({ message: "Invalid username or password." }, { status: 401 });
    }

    const businessActor = dbManager.getItemById('businessActors', user.id!);

    const userInfo: UserInfo = {
      id: user.id,
      username: user.username,
      first_name: user.first_name,
      last_name: user.last_name,
      email: user.email,
      email_verified: user.email_verified,
      phone_number: user.phone_number,
      phone_number_verified: user.phone_number_verified,
    };

    const loginResponse: LoginResponse & { businessActorId?: string | null } = {
      access_token: { token: `local-mock-jwt-for-${user.username}-${Date.now()}`, type: "Bearer", expire_in: 3600000 },
      user: userInfo,
      roles: user.username === "admin" || user.username === "superadmin" ? ["SUPER_ADMIN_ROLE", "BUSINESS_ACTOR_ROLE"] : ["BUSINESS_ACTOR_ROLE", "GENERAL_USER_ROLE"],
      permissions: user.username === "admin" || user.username === "superadmin" ? ["*:*:*"] : ["org:read", "org:create"],
      businessActorId: businessActor ? businessActor.business_actor_id : null,
    };

    return NextResponse.json(loginResponse, { status: 200 });

  } catch (error) {
    console.error("[MOCK API /auth/login ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to login user." }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/auth/login/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/permissions/[permission_id]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdatePermissionRequest } from '@/types/auth';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ permission_id: string }> }) {
  try {
    const permissionId = (await params).permission_id;
    const permission = dbManager.getItemById('authPermissions', permissionId);
    if (!permission) {
      return NextResponse.json({ message: `Permission with ID ${permissionId} not found.` }, { status: 404 });
    }
    return NextResponse.json(permission, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get permission." }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: Promise<{ permission_id: string }> }) {
  try {
    const permissionId = (await params).permission_id;
    const body = await _request.json() as UpdatePermissionRequest;
    const updatedPermission = dbManager.updateItem('authPermissions', permissionId, body);
    if (!updatedPermission) {
      return NextResponse.json({ message: `Permission with ID ${permissionId} not found.` }, { status: 404 });
    }
    return NextResponse.json(updatedPermission, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to update permission." }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: Promise<{ permission_id: string }> }) {
  try {
    const permissionId = (await params).permission_id;
    const deleted = dbManager.deleteItem('authPermissions', permissionId);
    // Also remove associated role-permissions
    const rolePermissions = dbManager.getCollection('authRolePermissions');
    const updatedRolePermissions = rolePermissions.filter(rp => rp.permission_id !== permissionId);
    dbManager.saveCollection('authRolePermissions', updatedRolePermissions);
    if (!deleted) {
      return NextResponse.json({ message: `Permission with ID ${permissionId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Permission deleted successfully." }, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to delete permission." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/permissions/[permission_id]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/permissions/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreatePermissionRequest } from '@/types/auth';

export async function GET(_request: NextRequest) {
  try {
    const permissions = dbManager.getCollection('authPermissions');
    return NextResponse.json(permissions, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get permissions." }, { status: 500 });
  }
}

export async function POST(_request: NextRequest) {
  try {
    const body = await _request.json() as CreatePermissionRequest;
    if (!body.name || !body.resource_id || !body.operation_id) {
      return NextResponse.json({ message: "Name, resource ID, and operation ID are required." }, { status: 400 });
    }
    const newPerm = dbManager.addItem('authPermissions', body);
    return NextResponse.json(newPerm, { status: 200 }); // Spec says 200 for create
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to create permission." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/permissions/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/register/route.ts

// app/api/mock/auth/register/route.ts
import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreateUserRequest, UserDto } from '@/types/auth';
import bcrypt from 'bcryptjs';

const SALT_ROUNDS = 10;

export async function POST(_request: Request) {
  try {
    const body = await _request.json() as CreateUserRequest;

    if (!body.username || !body.password || !body.first_name) {
      return NextResponse.json({ message: "Username, password, and first name are required." }, { status: 400 });
    }
    if (body.password.length < 6) {
      return NextResponse.json({ message: "Password must be at least 6 characters." }, { status: 400 });
    }

    const users = dbManager.getCollection('authUsers');

    if (users.find(u => u.username === body.username)) {
      return NextResponse.json({ message: "Username already exists." }, { status: 409 });
    }
    if (body.email && users.find(u => u.email === body.email)) {
      return NextResponse.json({ message: "Email already exists." }, { status: 409 });
    }

    const hashedPassword = await bcrypt.hash(body.password, SALT_ROUNDS);

    const newUserPartial: Omit<UserDto, 'id' | 'created_at' | 'updated_at'> = {
      username: body.username,
      email: body.email,
      password_hash: hashedPassword,
      first_name: body.first_name,
      last_name: body.last_name,
      phone_number: body.phone_number,
      is_enabled: true, // New users are enabled by default in mock
      email_verified: false, // Email starts as unverified
      phone_number_verified: false,
    };

    const createdUser = dbManager.addItem('authUsers', newUserPartial);

    const { password_hash, ...userDtoFields } = createdUser;

    return NextResponse.json(userDtoFields, { status: 201 });

  } catch (error) {
    console.error("[MOCK API /auth/register ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to register user." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/register/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/resources/save/route.ts

// app/api/mock/auth/resources/save/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { RbacResource, ApiResponseBoolean } from '@/types/auth';

export async function POST(_request: NextRequest) {
  try {
    const body = await _request.json() as RbacResource;
    // For mock, we just acknowledge it. In a real system, this would define
    // resources that permissions can then be applied to.
    if (!body.name || !body.value || !body.service) {
      return NextResponse.json({ status: "FAILED", message: "Name, value, and service are required for RBAC resource." } as ApiResponseBoolean, { status: 400 });
    }
    dbManager.addItem('authRbacResources', body); // Store it
    const response: ApiResponseBoolean = { status: "SUCCESS", message: "RBAC Resource saved successfully.", data: true, ok: true };
    return NextResponse.json(response, { status: 200 });
  } catch (error)  {
    const response: ApiResponseBoolean = { status: "FAILED", message: error.message || "Failed to save RBAC resource.", data: false, ok: false };
    return NextResponse.json(response, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/resources/save/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/roles/hierarchy/route.ts

// app/api/mock/auth/roles/hierarchy/route.ts
import { NextResponse, NextRequest } from 'next/server';
// In a real scenario, this would involve complex logic based on role relationships.
// For mock, we return a simple string or a predefined structure.

export async function GET(_request: NextRequest) {
  try {
    // Example: A simple string representation or a JSON string of a hierarchical object
    const hierarchyString = "ADMIN_ROLE > (MANAGER_ROLE > (STAFF_ROLE, USER_ROLE)); GUEST_ROLE";
    // Or: const hierarchyJson = JSON.stringify({ name: "SUPER_ADMIN", children: [...] });
    return NextResponse.json(hierarchyString, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get roles hierarchy." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/roles/hierarchy/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/roles/[role_id]/permissions/[permission_id]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { RolePermissionDto } from '@/types/auth';

export async function POST(_request: NextRequest, { params }: { params: Promise<{ role_id: string; permission_id: string }> }) {
  try {
    const { role_id, permission_id } = await params;
    if (!role_id || !permission_id) {
      return NextResponse.json({ message: "Role ID and Permission ID are required." }, { status: 400 });
    }
    const rolePermissions = dbManager.getCollection('authRolePermissions');
    if (rolePermissions.find(rp => rp.role_id === role_id && rp.permission_id === permission_id)) {
      return NextResponse.json({ message: "Permission already assigned to this role." }, { status: 409 });
    }
    const newRp: RolePermissionDto = { role_id, permission_id };
    rolePermissions.push(newRp);
    dbManager.saveCollection('authRolePermissions', rolePermissions);
    return NextResponse.json(newRp, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to assign permission." }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: Promise<{ role_id: string; permission_id: string }> }) {
  try {
    const { role_id, permission_id } = await params;
    if (!role_id || !permission_id) {
      return NextResponse.json({ message: "Role ID and Permission ID are required." }, { status: 400 });
    }
    let rolePermissions = dbManager.getCollection('authRolePermissions');
    const initialCount = rolePermissions.length;
    rolePermissions = rolePermissions.filter(rp => !(rp.role_id === role_id && rp.permission_id === permission_id));

    if (rolePermissions.length < initialCount) {
      dbManager.saveCollection('authRolePermissions', rolePermissions);
      return NextResponse.json({ message: "Permission removed successfully." }, { status: 200 });
    }
    return NextResponse.json({ message: "Permission not found for this role or already removed." }, { status: 404 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to remove permission." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/roles/[role_id]/permissions/[permission_id]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/roles/[role_id]/permissions/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { RolePermissionDto } from '@/types/auth';

export async function POST(_request: NextRequest, { params }: { params: Promise<{ role_id: string }> }) {
  try {
    const roleId = (await params).role_id;
    const permissionIds = await _request.json() as string[];
    if (!roleId || !Array.isArray(permissionIds)) {
      return NextResponse.json({ message: "Role ID and an array of permission IDs are required." }, { status: 400 });
    }

    const rolePermissions = dbManager.getCollection('authRolePermissions');
    const added: RolePermissionDto[] = [];
    permissionIds.forEach(permissionId => {
      if (!rolePermissions.find(rp => rp.role_id === roleId && rp.permission_id === permissionId)) {
        const newRp: RolePermissionDto = { role_id: roleId, permission_id: permissionId };
        // dbManager.addItem would create new objects, direct push for this structure
        rolePermissions.push(newRp);
        added.push(newRp);
      }
    });
    dbManager.saveCollection('authRolePermissions', rolePermissions);
    return NextResponse.json(added, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to assign permissions." }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: Promise<{ role_id: string }> }) {
  try {
    const roleId = (await params).role_id;
    const permissionIdsToRemove = await _request.json() as string[];
    if (!roleId || !Array.isArray(permissionIdsToRemove)) {
      return NextResponse.json({ message: "Role ID and an array of permission IDs are required." }, { status: 400 });
    }

    let rolePermissions = dbManager.getCollection('authRolePermissions');
    const initialCount = rolePermissions.length;
    rolePermissions = rolePermissions.filter(rp => !(rp.role_id === roleId && permissionIdsToRemove.includes(rp.permission_id!)));
    dbManager.saveCollection('authRolePermissions', rolePermissions);

    if (rolePermissions.length < initialCount) {
      return NextResponse.json({ message: "Permissions removed successfully." }, { status: 200 });
    }
    return NextResponse.json({ message: "No matching permissions found to remove or already removed." }, { status: 200 }); // Or 404 if none were found
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to remove permissions." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/roles/[role_id]/permissions/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/roles/[role_id]/route.ts

// app/api/mock/auth/roles/[role_id]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { RoleDto, RolePermissionDto, UpdateRoleRequest } from '@/types/auth';

export async function PUT(_request: NextRequest, { params }: { params: Promise<{ role_id: string }> }) {
  try {
    const roleId = (await params).role_id;
    const body = await _request.json() as UpdateRoleRequest;

    const updatedRole = dbManager.updateItem('authRoles', roleId, body);
    if (!updatedRole) {
      return NextResponse.json({ message: `Role with ID ${roleId} not found.` }, { status: 404 });
    }
    return NextResponse.json(updatedRole, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to update role." }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: Promise<{ role_id: string }> }) {
  try {
    const roleId = (await params).role_id;
    const deleted = dbManager.deleteItem('authRoles', roleId);
    // Also remove associated role-permissions
    const rolePermissions = dbManager.getCollection('authRolePermissions');
    const updatedRolePermissions = rolePermissions.filter(rp => rp.role_id !== roleId);
    dbManager.saveCollection('authRolePermissions', updatedRolePermissions);

    if (!deleted) {
      return NextResponse.json({ message: `Role with ID ${roleId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Role deleted successfully." }, { status: 200 }); // Spec says 200 OK
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to delete role." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/roles/[role_id]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/roles/route.ts

// app/api/mock/auth/roles/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { RoleDto, CreateRoleRequest } from '@/types/auth';

export async function GET(_request: NextRequest) {
  try {
    const roles = dbManager.getCollection('authRoles'); // Assuming 'authRoles' collection in dbManager
    return NextResponse.json(roles, { status: 200 });
  } catch (error)  {
    console.error("[MOCK API /auth/roles GET ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to get roles." }, { status: 500 });
  }
}

export async function POST(_request: NextRequest) {
  try {
    const body = await _request.json() as CreateRoleRequest;
    if (!body.name) {
      return NextResponse.json({ message: "Role name is required." }, { status: 400 });
    }

    const roles = dbManager.getCollection('authRoles');
    if (roles.find(r => r.name === body.name)) {
      return NextResponse.json({ message: "Role with this name already exists." }, { status: 409 });
    }

    const newRolePartial: Omit<RoleDto, 'id' | 'created_at' | 'updated_at'> = {
      name: body.name,
      description: body.description,
    };
    // dbManager.addItem should handle id, created_at, updated_at
    const createdRole = dbManager.addItem('authRoles', newRolePartial);

    return NextResponse.json(createdRole, { status: 201 });

  } catch (error)  {
    console.error("[MOCK API /auth/roles POST ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to create role." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/roles/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/user/route.ts

// app/api/mock/auth/user/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UserDto, UserInfo } from '@/types/auth';
import { getToken } from 'next-auth/jwt';

export async function GET(_request: NextRequest) {
  try {
    const nextAuthToken = await getToken({ req: _request, secret: process.env.NEXTAUTH_SECRET });

    if (nextAuthToken && (nextAuthToken.email || nextAuthToken.name || nextAuthToken.sub)) {
      const users = dbManager.getCollection('authUsers');
      let user: UserDto | undefined | null;

      // Prefer matching by 'id' (which is 'sub' in NextAuth token)
      if (nextAuthToken.sub) user = dbManager.getItemById('authUsers', nextAuthToken.sub as string); // getItemById will use 'id'
      if (!user && nextAuthToken.email) user = users.find(u => u.email === nextAuthToken.email);
      if (!user && nextAuthToken.name) user = users.find(u => u.username === nextAuthToken.name);

      if (user && user.is_enabled) {
        const userInfo: UserInfo = {
          id: user.id, // Use 'id' from UserDto
          username: user.username,
          first_name: user.first_name,
          last_name: user.last_name,
          email: user.email,
          email_verified: user.email_verified,
          phone_number: user.phone_number,
          phone_number_verified: user.phone_number_verified,
        };
        return NextResponse.json(userInfo, { status: 200 });
      }
    }

    return NextResponse.json({ message: "Unauthorized: No active user session found in mock." }, { status: 401 });

  } catch (error)  {
    console.error("[MOCK API /auth/user ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to get current user." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/user/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/users/email/[email]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UserDto } from '@/types/auth';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ email: string }> }) {
  try {
    const email = (await params).email; // Next.js decodes URL automatically
    const users = dbManager.getCollection('authUsers');
    const user = users.find(u => u.email === email);
    if (!user) {
      return NextResponse.json({ message: `User with email ${email} not found.` }, { status: 404 });
    }
    const { password_hash, ...userWithoutPassword } = user;
    return NextResponse.json(userWithoutPassword, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get user by email." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/users/email/[email]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/users/phone/[phone_number]/route.ts

// app/api/mock/auth/users/phone/[phone_number]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UserDto } from '@/types/auth';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ phone_number: string }> }) {
  try {
    const phoneNumber = (await params).phone_number;
    const users = dbManager.getCollection('authUsers');
    const user = users.find(u => u.phone_number === phoneNumber);
    if (!user) {
      return NextResponse.json({ message: `User with phone number ${phoneNumber} not found.` }, { status: 404 });
    }
    const { password_hash, ...userWithoutPassword } = user;
    return NextResponse.json(userWithoutPassword, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get user by phone number." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/users/phone/[phone_number]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/users/route.ts

// app/api/mock/auth/users/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UserDto } from '@/types/auth';

export async function GET(_request: NextRequest) {
  try {
    const allUsers = dbManager.getCollection('authUsers');
    // Corrected mapping to exclude password hash
    const users = allUsers.map(user => {
      const { password_hash, ...userWithoutPassword } = user; // Exclude password hash
      return userWithoutPassword;
    });
    return NextResponse.json(users, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get users." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/users/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/users/username/[username]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UserDto } from '@/types/auth';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ username: string }> }) {
  try {
    const username = (await params).username;
    const users = dbManager.getCollection('authUsers');
    const user = users.find(u => u.username === username);
    if (!user) {
      return NextResponse.json({ message: `User with username ${username} not found.` }, { status: 404 });
    }
    const { password_hash, ...userWithoutPassword } = user;
    return NextResponse.json(userWithoutPassword, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get user by username." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/users/username/[username]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/business-actors/[baId]/route.ts

// app/api/mock/business-actors/[baId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { BusinessActorDto, UpdateBusinessActorRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ baId: string }> }) {
  try {
    const actor = dbManager.getItemById('businessActors', (await params).baId);
    if (!actor) return NextResponse.json({ message: `Business Actor ${(await params).baId} not found.` }, { status: 404 });
    return NextResponse.json(actor);
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}
export async function PUT(_request: NextRequest, { params }: { params: Promise<{ baId: string }> }) {
  try {
    const body = await _request.json() as UpdateBusinessActorRequest;
    const updated = dbManager.updateItem('businessActors', (await params).baId, body);
    if (!updated) return NextResponse.json({ message: `Business Actor ${(await params).baId} not found.` }, { status: 404 });
    return NextResponse.json(updated, { status: 202 });
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}
export async function DELETE(_request: NextRequest, { params }: { params: Promise<{ baId: string }> }) {
  try {
    const deleted = dbManager.deleteItem('businessActors', (await params).baId);
    if (!deleted) return NextResponse.json({ message: `Business Actor ${(await params).baId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Deleted" }, { status: 202 });
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}// END OF FILE: app/api/mock/business-actors/[baId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/business-actors/route.ts

// app/api/mock/business-actors/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { BusinessActorDto, CreateBusinessActorRequest } from '@/types/organization';
import { getUserIdFromMockToken } from '@/lib/data-repo/local-store/mock-auth-utils';

export async function GET(_request: NextRequest) {
  try {
    const actors = dbManager.getCollection('businessActors');
    return NextResponse.json(actors);
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}

export async function POST(request: NextRequest) { // [CHANGE] Use the request object
  try {
    // [THE FIX] Get the user ID from the token sent by the client
    const userId = await getUserIdFromMockToken(request);
    if (!userId) {
      return NextResponse.json({ message: "Unauthorized: No valid user token provided." }, { status: 401 });
    }

    const body = await request.json() as CreateBusinessActorRequest;
    if (!body.first_name) {
      return NextResponse.json({ message: "First name is required for Business Actor." }, { status: 400 });
    }

    // The backend assigns the ID, so we simulate that here.
    const newActorData = {
      ...body,
      business_actor_id: userId, // The BA's ID is the User's ID
      user_id: userId, // Also add user_id for any internal linking if needed
    };

    const newActor = dbManager.addItem('businessActors', newActorData);
    return NextResponse.json(newActor, { status: 201 });
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}// END OF FILE: app/api/mock/business-actors/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/business-actors/type/[type]/route.ts

// app/api/mock/business-actors/type/[type]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { BusinessActorDto, BusinessActorType } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ type: string }> }) {
  try {
    const type = (await params).type as BusinessActorType;
    const allActors = dbManager.getCollection('businessActors');
    const filtered = allActors.filter(actor => actor.type === type);
    return NextResponse.json(filtered);
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}// END OF FILE: app/api/mock/business-actors/type/[type]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/business-domains/[domainId]/route.ts

// app/api/mock/business-domains/[domainId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { BusinessDomainDto, UpdateBusinessDomainRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ domainId: string }> }) {
  try {
    const { domainId } = await params;
    const domain = dbManager.getItemById('businessDomains', domainId);
    if (!domain) {
      return NextResponse.json({ message: `Business domain with ID ${domainId} not found.` }, { status: 404 });
    }
    return NextResponse.json(domain);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get business domain", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: Promise<{ domainId: string }> }) {
  try {
    const { domainId } = await params;
    const body = await _request.json() as UpdateBusinessDomainRequest;
    const updatedDomain = dbManager.updateItem('businessDomains', domainId, body);
    if (!updatedDomain) {
      return NextResponse.json({ message: `Business domain with ID ${domainId} not found.` }, { status: 404 });
    }
    return NextResponse.json(updatedDomain, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update business domain", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: Promise<{ domainId: string }> }) {
  try {
    const { domainId } = await params;
    // Check if any organization uses this domain before deleting (optional for mock)
    const deleted = dbManager.deleteItem('businessDomains', domainId);
    if (!deleted) {
      return NextResponse.json({ message: `Business domain with ID ${domainId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Business domain deleted." }, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete business domain", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/business-domains/[domainId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/business-domains/route.ts


import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { BusinessDomainDto, CreateBusinessDomainRequest } from '@/types/organization';

export async function POST(_request: NextRequest) {
  try {
    const body = await _request.json() as CreateBusinessDomainRequest;
    if (!body.name || !body.type || !body.type_label) {
      return NextResponse.json({ message: "Name, type, and type_label are required." }, { status: 400 });
    }
    // In a real app, check for duplicate names, etc.
    const newDomain = dbManager.addItem('businessDomains', body);
    return NextResponse.json(newDomain, { status: 201 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to create business domain", error: error.message }, { status: 500 });
  }
}

import { GetBusinessDomainRequest } from '@/types/organization';

export async function GET(_request: NextRequest) {
  try {
    const { searchParams } = new URL(_request.url);
    const params: GetBusinessDomainRequest = {
      organization_id: searchParams.get('organization_id') || undefined,
      parent_domain_id: searchParams.get('parent_domain_id') || undefined,
      name: searchParams.get('name') || undefined,
      page: searchParams.get('page') ? parseInt(searchParams.get('page')!, 10) : undefined,
      size: searchParams.get('size') ? parseInt(searchParams.get('size')!, 10) : undefined,
    };

    let domains = dbManager.getCollection('businessDomains');

    // Apply filters if provided (simple mock filtering)
    if (params.organization_id) domains = domains.filter(d => d.organization_id === params.organization_id);
    if (params.parent_domain_id) domains = domains.filter(d => d.parent_domain_id === params.parent_domain_id);
    if (params.name) domains = domains.filter(d => d.name?.toLowerCase().includes(params.name!.toLowerCase()));

    // Mock pagination (basic)
    if (params.page && params.size) {
      const start = (params.page - 1) * params.size;
      const end = start + params.size;
      domains = domains.slice(start, end);
    }
    return NextResponse.json(domains);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get business domains", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/business-domains/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/[entityType]/[entityId]/addresses/[addressId]/favorite/route.ts

// app/api/mock/[entityType]/[entityId]/addresses/[addressId]/favorite/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AddressableType } from '@/types/organization';

interface RouteParams {
  params: Promise<{
    entityType: AddressableType;
    entityId: string;
    addressId: string;
  }>;
}

export async function PUT(request: NextRequest, { params }: RouteParams) {
  try {
    const { entityId, entityType, addressId } = await params;
    const allAddresses = dbManager.getCollection('addresses');
    const targetAddress = allAddresses.find(addr => addr.address_id === addressId);
    if (!targetAddress || targetAddress.addressable_id !== entityId) {
      return NextResponse.json({ message: `Address with ID ${addressId} not found for this entity.` }, { status: 404 });
    }
    allAddresses.forEach(addr => {
      if (addr.addressable_id === entityId && addr.addressable_type === entityType) {
        addr.is_default = false;
      }
    });
    targetAddress.is_default = true;
    dbManager.saveCollection('addresses', allAddresses);
    const updatedAddress = dbManager.getItemById('addresses', addressId);
    return NextResponse.json(updatedAddress, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to set default address", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/[entityType]/[entityId]/addresses/[addressId]/favorite/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/[entityType]/[entityId]/addresses/[addressId]/route.ts

// app/api/mock/[entityType]/[entityId]/addresses/[addressId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateAddressRequest, AddressableType } from '@/types/organization';

interface RouteParams {
  params: Promise<{
    entityType: AddressableType;
    entityId: string;
    addressId: string;
  }>;
}

export async function GET(_request: NextRequest, { params }: RouteParams) { /* ... GET logic ... */ 
  try {
    const { addressId } = await params;
    const address = dbManager.getItemById('addresses', addressId);
    if (!address || address.addressable_id !== (await params).entityId) {
      return NextResponse.json({ message: `Address with ID ${addressId} not found for this entity.` }, { status: 404 });
    }
    return NextResponse.json(address);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get address", error: error.message }, { status: 500 });
  }
}
export async function PUT(_request: NextRequest, { params }: RouteParams) { /* ... PUT logic ... */
  try {
    const { addressId } = await params;
    const body = await _request.json() as UpdateAddressRequest;
    const updatedAddress = dbManager.updateItem('addresses', addressId, body);
    if (!updatedAddress) {
      return NextResponse.json({ message: `Address with ID ${addressId} not found.` }, { status: 404 });
    }
    return NextResponse.json(updatedAddress, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update address", error: error.message }, { status: 500 });
  }
}
export async function DELETE(_request: NextRequest, { params }: RouteParams) { /* ... DELETE logic ... */
  try {
    const { addressId } = await params;
    const deleted = dbManager.deleteItem('addresses', addressId);
    if (!deleted) {
      return NextResponse.json({ message: `Address with ID ${addressId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Address deleted successfully." }, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete address", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/[entityType]/[entityId]/addresses/[addressId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/[entityType]/[entityId]/addresses/route.ts

// app/api/mock/[entityType]/[entityId]/addresses/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreateAddressRequest, AddressableType, AddressDto } from '@/types/organization';

interface RouteParams {
  params: Promise<{
    entityType: AddressableType;
    entityId: string;
  }>;
}

export async function GET(_request: NextRequest, { params }: RouteParams) {
  try {
    const { entityType, entityId } = await params;
    const allAddresses = dbManager.getCollection('addresses');
    const filteredAddresses = allAddresses.filter(
      addr => addr.addressable_type === entityType && addr.addressable_id === entityId
    );
    return NextResponse.json(filteredAddresses);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get addresses", error: error.message }, { status: 500 });
  }
}

export async function POST(_request: NextRequest, { params }: RouteParams) {
  try {
    const { entityType, entityId } = await params;
    const body = await _request.json() as CreateAddressRequest;
    if (!body.address_line_1 || !body.city || !body.state || !body.zip_code || !body.country_id) {
      return NextResponse.json({ message: "Address line 1, city, state, country and zip code are required." }, { status: 400 });
    }
    const newAddressData: Omit<AddressDto, 'address_id' | 'created_at' | 'updated_at'> = {
      ...body,
      addressable_id: entityId,
      addressable_type: entityType,
      // is_default: body.default || false,
    };
    const createdAddress = dbManager.addItem('addresses', newAddressData);
    return NextResponse.json(createdAddress, { status: 201 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to create address", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/[entityType]/[entityId]/addresses/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/[entityType]/[entityId]/contacts/[contactId]/favorite/route.ts

// app/api/mock/[entityType]/[entityId]/contacts/[contactId]/favorite/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ContactableType } from '@/types/organization';

interface RouteParams {
  params:Promise<{
    entityType: ContactableType;
    entityId: string;
    contactId: string;
  }>;
}

export async function PUT(_request: NextRequest, { params }: RouteParams) {
  try {
    const { contactId } = await params;
    const contact = dbManager.getItemById('contacts', contactId);
    if (!contact) {
      return NextResponse.json({ message: `Contact with ID ${contactId} not found.` }, { status: 404 });
    }
    const updatedContact = dbManager.updateItem('contacts', contactId, { is_favorite: !contact.is_favorite });
    return NextResponse.json(updatedContact, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to toggle favorite contact", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/[entityType]/[entityId]/contacts/[contactId]/favorite/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/[entityType]/[entityId]/contacts/[contactId]/route.ts

// app/api/mock/[entityType]/[entityId]/contacts/[contactId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateContactRequest, ContactableType } from '@/types/organization';

interface RouteParams {
  params: Promise<{
    entityType: ContactableType;
    entityId: string;
    contactId: string;
  }>;
}

export async function GET(_request: NextRequest, { params }: RouteParams) { /* ... GET logic ... */
  try {
    const { contactId } = await params;
    const contact = dbManager.getItemById('contacts', contactId);
    if (!contact || contact.contactable_id !== (await params).entityId) {
      return NextResponse.json({ message: `Contact with ID ${contactId} not found for this entity.` }, { status: 404 });
    }
    return NextResponse.json(contact);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get contact", error: error.message }, { status: 500 });
  }
}
export async function PUT(_request: NextRequest, { params }: RouteParams) { /* ... PUT logic ... */
  try {
    const { contactId } = await params;
    const body = await _request.json() as UpdateContactRequest;
    const updatedContact = dbManager.updateItem('contacts', contactId, body);
    if (!updatedContact) {
      return NextResponse.json({ message: `Contact with ID ${contactId} not found.` }, { status: 404 });
    }
    return NextResponse.json(updatedContact, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update contact", error: error.message }, { status: 500 });
  }
}
export async function DELETE(_request: NextRequest, { params }: RouteParams) { /* ... DELETE logic ... */
  try {
    const { contactId } = await params;
    const deleted = dbManager.deleteItem('contacts', contactId);
    if (!deleted) {
      return NextResponse.json({ message: `Contact with ID ${contactId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Contact deleted successfully." }, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete contact", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/[entityType]/[entityId]/contacts/[contactId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/[entityType]/[entityId]/contacts/route.ts

// app/api/mock/[entityType]/[entityId]/contacts/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreateContactRequest, ContactableType, ContactDto } from '@/types/organization';

interface RouteParams {
  params: Promise<{
    entityType: ContactableType; // Generic name
    entityId: string;
  }>;
}

export async function GET(_request: NextRequest, { params }: RouteParams) {
  try {
    const { entityType, entityId } = await params;
    const allContacts = dbManager.getCollection('contacts');
    const filteredContacts = allContacts.filter(
      c => c.contactable_type === entityType && c.contactable_id === entityId
    );
    return NextResponse.json(filteredContacts);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get contacts", error: error.message }, { status: 500 });
  }
}

export async function POST(_request: NextRequest, { params }: RouteParams) {
  try {
    const { entityType, entityId } = await params;
    const body = await _request.json() as CreateContactRequest;
    if (!body.first_name || !body.last_name) {
      return NextResponse.json({ message: "First name and last name are required." }, { status: 400 });
    }
    const newContactData: Omit<ContactDto, 'contact_id' | 'created_at' | 'updated_at'> = {
      ...body,
      contactable_id: entityId,
      contactable_type: entityType,
      is_favorite: false,
    };
    const createdContact = dbManager.addItem('contacts', newContactData);
    return NextResponse.json(createdContact, { status: 201 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to create contact", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/[entityType]/[entityId]/contacts/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/geo/reverse/route.ts

import { NextResponse, NextRequest } from 'next/server';

const NOMINATIM_BASE_URL = "https://nominatim.openstreetmap.org";

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const lat = searchParams.get('lat');
  const lon = searchParams.get('lon');

  if (!lat || !lon) {
    return NextResponse.json({ message: "Latitude and Longitude are required." }, { status: 400 });
  }

  const nominatimUrl = `${NOMINATIM_BASE_URL}/reverse?format=json&lat=${lat}&lon=${lon}`;

  try {
    const response = await fetch(nominatimUrl, {
      headers: {
        // Nominatim requires a specific User-Agent header for their public API
        'User-Agent': 'YowyobDashboard/1.0 (contact@yowyob.com)',
      },
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Nominatim API Error:", errorText);
      return NextResponse.json({ message: "Failed to fetch address from map service." }, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);

  } catch (error) {
    console.error("Proxy to Nominatim failed:", error);
    return NextResponse.json({ message: "Internal server error proxying to map service." }, { status: 502 });
  }
}// END OF FILE: app/api/mock/geo/reverse/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/geo/search/route.ts

import { NextResponse, NextRequest } from 'next/server';

const NOMINATIM_BASE_URL = "https://nominatim.openstreetmap.org";

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const query = searchParams.get('q');

  if (!query || query.length < 3) {
    return NextResponse.json({ message: "A search query of at least 3 characters is required." }, { status: 400 });
  }

  const nominatimUrl = `${NOMINATIM_BASE_URL}/search?q=${encodeURIComponent(query)}&format=json&addressdetails=1&limit=5`;

  try {
    const response = await fetch(nominatimUrl, {
      headers: {
        'User-Agent': 'YowyobDashboard/1.0 (contact@yowyob.com)',
      },
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Nominatim API Error:", errorText);
      return NextResponse.json({ message: "Failed to search for address." }, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);

  } catch (error) {
    console.error("Proxy to Nominatim failed:", error);
    return NextResponse.json({ message: "Internal server error proxying to map service." }, { status: 502 });
  }
}// END OF FILE: app/api/mock/geo/search/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/media/infos/[service]/[type]/[path]/[resource_id]/route.ts

// For GET (get metadata list for a resource)
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ServiceType, MediaType } from '@/types/media';

interface RouteParams {
    params: Promise<{ service: ServiceType; type: MediaType; path: string; resource_id: string; }>
}

export async function GET(_req: NextRequest, { params }: RouteParams) {
    try {
        const allMedia = dbManager.getCollection('media');
        const resourceMedia = allMedia.filter(async m =>
            m.resource_id === (await params).resource_id &&
            m.service === (await params).service &&
            m.type === (await params).type
        );
        return NextResponse.json(resourceMedia);
    } catch (error) {
        return NextResponse.json({ message: "Failed to get media info", error: error.message }, { status: 500 });
    }
}// END OF FILE: app/api/mock/media/infos/[service]/[type]/[path]/[resource_id]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/media/[service]/[type]/[path]/[resource_id]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { MediaDto, UploadMediaResponse, ServiceType, MediaType } from '@/types/media';

interface RouteParams {
    params: Promise<{ 
        service: ServiceType; 
        type: MediaType; 
        path: string; 
        resource_id: string; // This segment can be a resource_id for GET/POST or a filename for DELETE
    }>
}

// GET /media/infos/{service}/{type}/{path}/{resource_id}
export async function GET(req: NextRequest, { params }: RouteParams) {
    const { resource_id, service, type, path } = await params;
    try {
        const allMedia = dbManager.getCollection('media');
        const resourceMedia = allMedia.filter(m => 
            m.resource_id === resource_id &&
            m.service === service &&
            m.type === type &&
            m.location?.startsWith(path)
        );
        return NextResponse.json(resourceMedia);
    } catch (error) {
        return NextResponse.json({ message: "Failed to get media info", error: error.message }, { status: 500 });
    }
}

// POST /media/{service}/{type}/{path}/{resource_id}
export async function POST(req: NextRequest, { params }: RouteParams) {
    const { resource_id, service, type, path } = await params;
    try {
        const body = await req.json(); 

        const newMedia: Omit<MediaDto, 'id' | 'created_at' | 'updated_at'> = {
            name: body.fileName,
            real_name: `mock_${Date.now()}_${body.fileName}`,
            size: body.fileSize,
            mime: body.fileType,
            extension: body.fileName.split('.').pop() || '',
            is_primary: body.isPrimary || false,
            description: body.description,
            location: `${path}/mock_${Date.now()}_${body.fileName}`,
            resource_id,
            service,
            type,
        };
        const createdMedia = dbManager.addItem('media', newMedia);
        
        const response: UploadMediaResponse = {
            id: createdMedia.id,
            resourceId: createdMedia.resource_id,
            url: `https://picsum.photos/seed/${createdMedia.id}/400/300`, 
            uri: `/media/${createdMedia.service}/${createdMedia.type}${createdMedia.location}`,
        };

        return NextResponse.json(response, { status: 200 });
    } catch (error) {
        return NextResponse.json({ message: "Failed to upload media", error: error.message }, { status: 500 });
    }
}

// DELETE /media/{service}/{type}/{path}/{filename}
// The {filename} from the API spec is mapped to the {resource_id} parameter here.
export async function DELETE(req: NextRequest, { params }: RouteParams) {
    const { service, type, path, resource_id: filename } = await params; // Treat param as filename
    try {
        const allMedia = dbManager.getCollection('media');
        const locationToDelete = `${path}/${filename}`;
        
        const initialLength = allMedia.length;
        const filteredMedia = allMedia.filter(m => m.location !== locationToDelete);

        if (filteredMedia.length < initialLength) {
            dbManager.saveCollection('media', filteredMedia);
            return NextResponse.json(true, { status: 200 });
        } else {
            return NextResponse.json({ message: "File not found for deletion" }, { status: 404 });
        }
    } catch (error) {
        return NextResponse.json({ message: "Failed to delete media", error: error.message }, { status: 500 });
    }
}// END OF FILE: app/api/mock/media/[service]/[type]/[path]/[resource_id]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/all/route.ts

// app/api/mock/organization/all/route.ts
import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';

export async function GET(_request: Request) {
  try {
    const orgs = dbManager.getCollection('organizationsDetails');
    return NextResponse.json(orgs);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get all organizations", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/all/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/domain/[domainId]/route.ts

// app/api/mock/organization/domain/[domainId]/route.ts
import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';

export async function GET(_request: Request, { params }: { params: Promise<{ domainId: string }> }) {
  try {
    const { domainId } = await params;
    const allOrgs = dbManager.getCollection('organizationsDetails');
    const orgsInDomain = allOrgs.filter(org => org.business_domains?.includes(domainId));
    return NextResponse.json(orgsInDomain);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get organizations by domain", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/domain/[domainId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/add/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AffectCustomerRequest } from '@/types/organization';

export async function POST(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await request.json() as AffectCustomerRequest;

    if (!body.customer_id) {
      return NextResponse.json({ message: "customer_id is required." }, { status: 400 });
    }

    // Find the existing customer record
    const customer = dbManager.getItemById('orgCustomers', body.customer_id);

    if (!customer || customer.organization_id !== orgId) {
      return NextResponse.json({ message: `Customer with ID ${body.customer_id} not found in this organization.` }, { status: 404 });
    }

    // "Affect" the customer by assigning the agency_id
    const updatedCustomer = dbManager.updateItem('orgCustomers', body.customer_id, { agency_id: agencyId });

    if (!updatedCustomer) {
      return NextResponse.json({ message: `Could not affect customer ${body.customer_id} to agency ${agencyId}.` }, { status: 500 });
    }

    return NextResponse.json(updatedCustomer, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to affect customer to agency", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/add/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/[customerId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateCustomerRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, customerId: string }> }) {
  try {
    const { orgId, agencyId, customerId } = await params;
    const customer = dbManager.getItemById('orgCustomers', customerId);
    if (!customer || customer.organization_id !== orgId || customer.agency_id !== agencyId) {
      return NextResponse.json({ message: `Customer ${customerId} not found for agency ${agencyId} in org ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(customer);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get agency customer", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, customerId: string }> }) {
  try {
    const { orgId, agencyId, customerId } = await params;
    const body = await request.json() as UpdateCustomerRequest;
    const existing = dbManager.getItemById('orgCustomers', customerId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Customer ${customerId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const updatedCustomer = dbManager.updateItem('orgCustomers', customerId, body);
    return NextResponse.json(updatedCustomer, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update agency customer", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, customerId: string }> }) {
  try {
    const { orgId, agencyId, customerId } = await params;
    const existing = dbManager.getItemById('orgCustomers', customerId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Customer ${customerId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('orgCustomers', customerId);
    if (!deleted) return NextResponse.json({ message: `Customer ${customerId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Agency customer deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete agency customer", error: error.message }, { status: 500 }); }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/[customerId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CustomerDto, CreateCustomerRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const allCustomers = dbManager.getCollection('orgCustomers');
    const agencyCustomers = allCustomers.filter(c => c.organization_id === orgId && c.agency_id === agencyId);
    return NextResponse.json(agencyCustomers);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get agency customers", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await request.json() as CreateCustomerRequest;

    if (!body.first_name || !body.last_name) {
      return NextResponse.json({ message: "First and last name are required." }, { status: 400 });
    }

    const newCustomerData: Omit<CustomerDto, 'customer_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      agency_id: agencyId, // Assign the agency ID
      partner_type: "CUSTOMER",
    };
    const createdCustomer = dbManager.addItem('orgCustomers', newCustomerData);
    return NextResponse.json(createdCustomer, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create agency customer", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/add/route.ts

// app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/add/route.ts
// This is for the affectEmployeeToAgency endpoint
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { EmployeeResponse, AffectEmployeeRequest, EmployeeDto } from '@/types/organization';

export async function POST(_request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await _request.json() as AffectEmployeeRequest;

    if (!body.employee_id) {
      return NextResponse.json({ message: "employee_id is required." }, { status: 400 });
    }

    // This mock assumes the employee_id refers to an existing global user/BA or an employee from the main org.
    // We are "affecting" or linking them to this agency.
    // or create a new employment record linking user to agency.

  const employee = dbManager.getItemById('employees', body.employee_id);
    if (!employee) {
      // If not found as an employee, maybe it a BusinessActor to be made an employee
      // For simplicity, wel assume it should exist or we create a new one.
      
      return NextResponse.json({ message: `Employee/User with ID ${body.employee_id} not found to affect to agency.` }, { status: 404 });
    }

    // Update the employee agency_id (if they were org-level) or just confirm the link
    const updatedEmployee = dbManager.updateItem('employees', body.employee_id, { agency_id: agencyId, organization_id: orgId });

    if (!updatedEmployee) {
      return NextResponse.json({ message: `Could not affect employee ${body.employee_id} to agency ${agencyId}.` }, { status: 500 });
    }

    const response: EmployeeResponse = {
      employee_id: updatedEmployee.employee_id,
      first_name: updatedEmployee.first_name,
      last_name: updatedEmployee.last_name,
      organization_id: updatedEmployee.organization_id,
      agency_id: updatedEmployee.agency_id,
      employee_role: updatedEmployee.employee_role,
      department: updatedEmployee.department,
    };
    return NextResponse.json(response, { status: 201 }); // 201 Created or 200 OK
  } catch (error)  {
    return NextResponse.json({ message: "Failed to affect employee to agency", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/add/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/[employeeId]/route.ts

// app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/[employeeId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { EmployeeDto, UpdateEmployeeRequest, EmployeeResponse } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, employeeId: string }> }) {
  try {
    const { orgId, agencyId, employeeId } = await params;
    const employee = dbManager.getItemById('employees', employeeId);
    if (!employee || employee.organization_id !== orgId || employee.agency_id !== agencyId) {
      return NextResponse.json({ message: `Employee ID ${employeeId} not found for agency ${agencyId} in org ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(employee);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get agency employee", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, employeeId: string }> }) {
  try {
    const { orgId, agencyId, employeeId } = await params;
    const body = await _request.json() as UpdateEmployeeRequest;
    const existing = dbManager.getItemById('employees', employeeId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Employee ID ${employeeId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const updatedEmployeeFull = dbManager.updateItem('employees', employeeId, body);
    if (!updatedEmployeeFull) {
      return NextResponse.json({ message: `Employee ID ${employeeId} update failed.` }, { status: 500 });
    }
    const response: EmployeeResponse = {
      employee_id: updatedEmployeeFull.employee_id,
      first_name: updatedEmployeeFull.first_name,
      last_name: updatedEmployeeFull.last_name,
      organization_id: updatedEmployeeFull.organization_id,
      agency_id: updatedEmployeeFull.agency_id,
      employee_role: updatedEmployeeFull.employee_role,
      department: updatedEmployeeFull.department,
    };
    return NextResponse.json(response, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update agency employee", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, employeeId: string }> }) {
  try {
    const { orgId, agencyId, employeeId } = await params;
    const existing = dbManager.getItemById('employees', employeeId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Employee ID ${employeeId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('employees', employeeId);
    if (!deleted) {
      return NextResponse.json({ message: `Employee ID ${employeeId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Agency employee deleted." }, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete agency employee", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/[employeeId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/route.ts


import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { EmployeeResponse, CreateEmployeeRequest, EmployeeDto } from '@/types/organization';

export async function POST(_request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await _request.json() as CreateEmployeeRequest;

    if (!body.first_name || !body.last_name || !body.employee_role) {
      return NextResponse.json({ message: "First name, last name, and role are required." }, { status: 400 });
    }

    const newEmployeeData: Omit<EmployeeDto, 'employee_id' | 'created_at' | 'updated_at' | 'user_id' | 'partner_type' | 'partner_details' | 'is_manager'> = {
      ...body,
      organization_id: orgId,
      agency_id: agencyId, // Key difference: assign agencyId
    };
    const createdEmployeeFull = dbManager.addItem('employees', newEmployeeData);

    const response: EmployeeResponse = {
      employee_id: createdEmployeeFull.employee_id,
      first_name: createdEmployeeFull.first_name,
      last_name: createdEmployeeFull.last_name,
      organization_id: createdEmployeeFull.organization_id,
      agency_id: createdEmployeeFull.agency_id,
      employee_role: createdEmployeeFull.employee_role,
      department: createdEmployeeFull.department,
      created_at: createdEmployeeFull.created_at,
      updated_at: createdEmployeeFull.updated_at,
    };
    return NextResponse.json(response, { status: 201 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to create agency employee", error: error.message }, { status: 500 });
  }
}


export async function GET(_request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const allEmployees = dbManager.getCollection('employees');
    const agencyEmployees = allEmployees.filter(emp => emp.organization_id === orgId && emp.agency_id === agencyId);
    return NextResponse.json(agencyEmployees);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get agency employees", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/prospects/[prospectId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateProspectRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, prospectId: string }> }) {
  try {
    const { orgId, agencyId, prospectId } = await params;
    const prospect = dbManager.getItemById('prospects', prospectId);
    if (!prospect || prospect.organization_id !== orgId || prospect.agency_id !== agencyId) {
      return NextResponse.json({ message: `Prospect ${prospectId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    return NextResponse.json(prospect);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get agency prospect", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, prospectId: string }> }) {
  try {
    const { orgId, agencyId, prospectId } = await params;
    const body = await request.json() as UpdateProspectRequest;
    const existing = dbManager.getItemById('prospects', prospectId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Prospect ${prospectId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const updatedProspect = dbManager.updateItem('prospects', prospectId, body);
    return NextResponse.json(updatedProspect, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update agency prospect", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, prospectId: string }> }) {
  try {
    const { orgId, agencyId, prospectId } = await params;
    const existing = dbManager.getItemById('prospects', prospectId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Prospect ${prospectId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('prospects', prospectId);
    if (!deleted) return NextResponse.json({ message: `Prospect ${prospectId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Agency prospect deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete agency prospect", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/prospects/[prospectId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/prospects/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ProspectDto, CreateProspectRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const allProspects = dbManager.getCollection('prospects');
    const agencyProspects = allProspects.filter(p => p.organization_id === orgId && p.agency_id === agencyId);
    return NextResponse.json(agencyProspects);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get agency prospects", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await request.json() as CreateProspectRequest;

    if (!body.first_name && !body.last_name) {
      return NextResponse.json({ message: "First and last name are required." }, { status: 400 });
    }

    const newProspectData: Omit<ProspectDto, 'prospect_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      agency_id: agencyId,
      partner_type: "PROSPECT",
    };
    const createdProspect = dbManager.addItem('prospects', newProspectData);
    return NextResponse.json(createdProspect, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create agency prospect", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/prospects/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/route.ts

// app/api/mock/organization/[orgId]/agencies/[agencyId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateAgencyRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const agency = dbManager.getItemById('agencies', agencyId);
    if (!agency || agency.organization_id !== orgId) {
      return NextResponse.json({ message: `Agency with ID ${agencyId} not found for organization ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(agency);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get agency", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await _request.json() as UpdateAgencyRequest;
    const existingAgency = dbManager.getItemById('agencies', agencyId);
    if (!existingAgency || existingAgency.organization_id !== orgId) {
      return NextResponse.json({ message: `Agency with ID ${agencyId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const updatedAgency = dbManager.updateItem('agencies', agencyId, body);
    return NextResponse.json(updatedAgency, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update agency", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const existingAgency = dbManager.getItemById('agencies', agencyId);
    if (!existingAgency || existingAgency.organization_id !== orgId) {
      return NextResponse.json({ message: `Agency with ID ${agencyId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('agencies', agencyId);
    if (!deleted) { // Should not happen if check above passed
      return NextResponse.json({ message: `Agency with ID ${agencyId} not found.` }, { status: 404 });
    }
    // TODO: Handle cascading deletes or disassociation of employees, customers etc. linked to this agency
    return NextResponse.json(null, { status: 204 }); // Spec: 204 No Content
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete agency", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/sales-people/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { SalesPersonDto, CreateSalesPersonRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const allSalesPersons = dbManager.getCollection('salesPersons');
    const agencySalesPersons = allSalesPersons.filter(sp => sp.organization_id === orgId && sp.agency_id === agencyId);
    return NextResponse.json(agencySalesPersons);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get agency sales people", error: error.message }, { status: 500 }); }
}

export async function POST(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await request.json() as CreateSalesPersonRequest;

    if (!body.name) {
      return NextResponse.json({ message: "Sales person name is required." }, { status: 400 });
    }

    const newSpData: Omit<SalesPersonDto, 'sales_person_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      agency_id: agencyId,
      partner_type: "SALE"
    };
    const createdSp = dbManager.addItem('salesPersons', newSpData);
    return NextResponse.json(createdSp, { status: 201 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to create agency sales person", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/sales-people/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/sales-people/[salesPersonId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateSalesPersonRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, salesPersonId: string }> }) {
  try {
    const { orgId, agencyId, salesPersonId } = await params;
    const sp = dbManager.getItemById('salesPersons', salesPersonId);
    if (!sp || sp.organization_id !== orgId || sp.agency_id !== agencyId) {
      return NextResponse.json({ message: `SalesPerson ${salesPersonId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    return NextResponse.json(sp);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get agency sales person", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, salesPersonId: string }> }) {
  try {
    const { orgId, agencyId, salesPersonId } = await params;
    const body = await request.json() as UpdateSalesPersonRequest;
    const existing = dbManager.getItemById('salesPersons', salesPersonId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `SalesPerson ${salesPersonId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const updatedSp = dbManager.updateItem('salesPersons', salesPersonId, body);
    return NextResponse.json(updatedSp, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update agency sales person", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, salesPersonId: string }> }) {
  try {
    const { orgId, agencyId, salesPersonId } = await params;
    const existing = dbManager.getItemById('salesPersons', salesPersonId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `SalesPerson ${salesPersonId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('salesPersons', salesPersonId);
    if (!deleted) return NextResponse.json({ message: `SalesPerson ${salesPersonId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Agency sales person deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete agency sales person", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/sales-people/[salesPersonId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/status/route.ts

// app/api/mock/organization/[orgId]/agencies/[agencyId]/status/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AgencyDto, UpdateAgencyStatusRequest } from '@/types/organization';

export async function PUT(_request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await _request.json() as UpdateAgencyStatusRequest;

    if (typeof body.active !== 'boolean') {
        return NextResponse.json({ message: "Field 'active' (boolean) is required." }, { status: 400 });
    }
    const existingAgency = dbManager.getItemById('agencies', agencyId);
    if (!existingAgency || existingAgency.organization_id !== orgId) {
      return NextResponse.json({ message: `Agency with ID ${agencyId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const updatedAgency = dbManager.updateItem('agencies', agencyId, { is_active: body.active });
    return NextResponse.json(updatedAgency, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update agency status", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/status/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/add/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AffectProviderRequest } from '@/types/organization';

export async function POST(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await request.json() as AffectProviderRequest;

    if (!body.provider_id) {
      return NextResponse.json({ message: "provider_id is required." }, { status: 400 });
    }

    const provider = dbManager.getItemById('providers', body.provider_id);

    if (!provider || provider.organization_id !== orgId) {
      return NextResponse.json({ message: `Supplier with ID ${body.provider_id} not found in this organization.` }, { status: 404 });
    }

    const updatedProvider = dbManager.updateItem('providers', body.provider_id, { agency_id: agencyId });

    if (!updatedProvider) {
      return NextResponse.json({ message: `Could not affect supplier ${body.provider_id} to agency ${agencyId}.` }, { status: 500 });
    }

    return NextResponse.json(updatedProvider, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to affect supplier to agency", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/add/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/[providerId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateProviderRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, providerId: string }> }) {
  try {
    const { orgId, agencyId, providerId } = await params;
    const provider = dbManager.getItemById('providers', providerId);
    if (!provider || provider.organization_id !== orgId || provider.agency_id !== agencyId) {
      return NextResponse.json({ message: `Supplier ${providerId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    return NextResponse.json(provider);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get agency supplier", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, providerId: string }> }) {
  try {
    const { orgId, agencyId, providerId } = await params;
    const body = await request.json() as UpdateProviderRequest;
    const existing = dbManager.getItemById('providers', providerId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Supplier ${providerId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const updatedProvider = dbManager.updateItem('providers', providerId, body);
    return NextResponse.json(updatedProvider, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update agency supplier", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string, providerId: string }> }) {
  try {
    const { orgId, agencyId, providerId } = await params;
    const existing = dbManager.getItemById('providers', providerId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Supplier ${providerId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('providers', providerId);
    if (!deleted) return NextResponse.json({ message: `Supplier ${providerId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Agency supplier deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete agency supplier", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/[providerId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ProviderDto, CreateProviderRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const allProviders = dbManager.getCollection('providers');
    const agencyProviders = allProviders.filter(p => p.organization_id === orgId && p.agency_id === agencyId);
    return NextResponse.json(agencyProviders);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get agency suppliers", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: Promise<{ orgId: string, agencyId: string }> }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await request.json() as CreateProviderRequest;

    if (!body.first_name && !body.last_name) {
      return NextResponse.json({ message: "First and last name are required." }, { status: 400 });
    }

    const newProviderData: Omit<ProviderDto, 'provider_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      agency_id: agencyId,
      partner_type: "SUPPLIER",
      is_active: true,
    };
    const createdProvider = dbManager.addItem('providers', newProviderData);
    return NextResponse.json(createdProvider, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create agency supplier", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/route.ts

// app/api/mock/organization/[orgId]/agencies/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AgencyDto, CreateAgencyRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const { searchParams } = new URL(_request.url);
    const activeFilter = searchParams.get('active'); // boolean as string or null

    const allAgencies = dbManager.getCollection('agencies');
    let filteredAgencies = allAgencies.filter(agency => agency.organization_id === orgId);

    if (activeFilter !== null) {
      const isActive = activeFilter === 'true';
      filteredAgencies = filteredAgencies.filter(agency => agency.is_active === isActive);
    }
    return NextResponse.json(filteredAgencies);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get agencies", error: error.message }, { status: 500 });
  }
}

export async function POST(_request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const body = await _request.json() as CreateAgencyRequest;

    if (!body.short_name || !body.long_name || !body.location || !body.business_domains || body.business_domains.length === 0) {
      return NextResponse.json({ message: "Short name, long name, location, and at least one business domain are required." }, { status: 400 });
    }

    const newAgencyData: Omit<AgencyDto, 'agency_id' | 'created_at' | 'updated_at' | 'is_active' | 'owner_id'> = {
      ...body,
      organization_id: orgId,
      is_headquarter: false, // Default, can be changed via update if needed
    };
    const createdAgency = dbManager.addItem('agencies', { ...newAgencyData, is_active: true }); // Default new agencies to active
    return NextResponse.json(createdAgency, { status: 201 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to create agency", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/certifications/[certId]/route.ts

// app/api/mock/organization/[orgId]/certifications/[certId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CertificationDto, UpdateCertificationRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ orgId: string, certId: string }> }) {
  try {
    const { certId } = await params;
    const cert = dbManager.getItemById('certifications', certId);
    if (!cert || cert.organization_id !== (await params).orgId) {
      return NextResponse.json({ message: `Certification with ID ${certId} not found for this organization.` }, { status: 404 });
    }
    return NextResponse.json(cert);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get certification", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: Promise<{ orgId: string, certId: string }> }) {
  try {
    const { orgId, certId } = await params;
    const body = await _request.json() as UpdateCertificationRequest;
     const existingCert = dbManager.getItemById('certifications', certId);
    if (!existingCert || existingCert.organization_id !== orgId) {
         return NextResponse.json({ message: `Certification with ID ${certId} not found for this organization.` }, { status: 404 });
    }
    const updatedCert = dbManager.updateItem('certifications', certId, body);
    return NextResponse.json(updatedCert, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update certification", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: Promise<{ orgId: string, certId: string }> }) {
  try {
    const { orgId, certId } = await params;
    const existingCert = dbManager.getItemById('certifications', certId);
    if (!existingCert || existingCert.organization_id !== orgId) {
         return NextResponse.json({ message: `Certification with ID ${certId} not found for this organization.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('certifications', certId);
    if (!deleted) {
      return NextResponse.json({ message: `Certification with ID ${certId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Certification deleted." }, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete certification", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/certifications/[certId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/certifications/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';

import { CertificationDto, CreateCertificationRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const allCerts = dbManager.getCollection('certifications');
    const filteredCerts = allCerts.filter(cert => cert.organization_id === orgId);
    return NextResponse.json(filteredCerts);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get certifications", error: error.message }, { status: 500 });
  }
}


export async function POST(_request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const body = await _request.json() as CreateCertificationRequest;

    if (!body.name || !body.type) {
      return NextResponse.json({ message: "Name and Type are required for certification." }, { status: 400 });
    }
    const newCertData: Omit<CertificationDto, 'certification_id' | 'created_at' | 'updated_at'> = {
      ...body,
      organization_id: orgId,
    };
    const createdCert = dbManager.addItem('certifications', newCertData);
    return NextResponse.json(createdCert, { status: 201 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to create certification", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/certifications/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/customers/[customerId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateCustomerRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, customerId: string }> }) {
  try {
    const { orgId, customerId } = await params;
    const customer = dbManager.getItemById('orgCustomers', customerId);
    if (!customer || customer.organization_id !== orgId) {
      return NextResponse.json({ message: `Customer ${customerId} not found for organization ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(customer);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get organization customer", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: Promise<{ orgId: string, customerId: string }> }) {
  try {
    const { orgId, customerId } = await params;
    const body = await request.json() as UpdateCustomerRequest;
    const existing = dbManager.getItemById('orgCustomers', customerId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Customer ${customerId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const updatedCustomer = dbManager.updateItem('orgCustomers', customerId, body);
    return NextResponse.json(updatedCustomer, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update organization customer", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: Promise<{ orgId: string, customerId: string }> }) {
  try {
    const { orgId, customerId } = await params;
    const existing = dbManager.getItemById('orgCustomers', customerId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Customer ${customerId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('orgCustomers', customerId);
    if (!deleted) return NextResponse.json({ message: `Customer ${customerId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Organization customer deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete organization customer", error: error.message }, { status: 500 }); }
}// END OF FILE: app/api/mock/organization/[orgId]/customers/[customerId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/customers/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CustomerDto, CreateCustomerRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const allCustomers = dbManager.getCollection('orgCustomers');
    // Org-level customers are those linked to the org but NOT to a specific agency
    const orgCustomers = allCustomers.filter(c => c.organization_id === orgId && !c.agency_id);
    return NextResponse.json(orgCustomers);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get organization customers", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const body = await request.json() as CreateCustomerRequest;
    
    if (!body.first_name || !body.last_name) {
      return NextResponse.json({ message: "First and last name are required." }, { status: 400 });
    }

    const newCustomerData: Omit<CustomerDto, 'customer_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      partner_type: "CUSTOMER",
    };
    const createdCustomer = dbManager.addItem('orgCustomers', newCustomerData);
    return NextResponse.json(createdCustomer, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create organization customer", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/customers/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/details/route.ts

// app/api/mock/organization/[orgId]/details/route.ts
import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { OrganizationDto } from '@/types/organization';

export async function GET(_request: Request, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    // For details, we use the 'organizationsDetails' collection
    const org = dbManager.getItemById('organizationsDetails', orgId);
    if (!org) {
      return NextResponse.json({ message: `Organization with ID ${orgId} not found.` }, { status: 404 });
    }
    return NextResponse.json(org);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get organization details", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/details/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/domains/[businessDomainId]/add/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { OrganizationDto } from '@/types/organization';

export async function PUT(_request: NextRequest, { params }: { params: Promise<{ orgId: string, businessDomainId: string }> }) {
  try {
    const { orgId, businessDomainId } = await params;
    const org = dbManager.getItemById('organizationsDetails', orgId);

    if (!org) {
      return NextResponse.json({ message: `Organization with ID ${orgId} not found.` }, { status: 404 });
    }
    // Ensure business_domains array exists
    if (!org.business_domains) {
      org.business_domains = [];
    }
    if (!org.business_domains.includes(businessDomainId)) {
      org.business_domains.push(businessDomainId);
      dbManager.updateItem('organizationsDetails', orgId, { business_domains: org.business_domains });
    }
    return NextResponse.json(org, { status: 202 }); // 202 Accepted as per spec
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to add business domain." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/domains/[businessDomainId]/add/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/domains/[businessDomainId]/remove/route.ts

// app/api/mock/organization/[orgId]/domains/[businessDomainId]/remove/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';

export async function DELETE(_request: NextRequest, { params }: { params: Promise<{ orgId: string, businessDomainId: string }> }) {
  try {
    const { orgId, businessDomainId } = await params;
    const org = dbManager.getItemById('organizationsDetails', orgId);

    if (!org || !org.business_domains) {
      return NextResponse.json({ message: `Organization with ID ${orgId} or its domains not found.` }, { status: 404 });
    }
    const initialLength = org.business_domains.length;
    org.business_domains = org.business_domains.filter(id => id !== businessDomainId);

    if (org.business_domains.length < initialLength) {
      dbManager.updateItem('organizationsDetails', orgId, { business_domains: org.business_domains });
    }
    return NextResponse.json(org, { status: 202 }); // 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to remove business domain." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/domains/[businessDomainId]/remove/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/employees/[employeeId]/route.ts

// app/api/mock/organization/[orgId]/employees/[employeeId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { EmployeeDto, UpdateEmployeeRequest, EmployeeResponse } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ orgId: string, employeeId: string }> }) {
  try {
    const { orgId, employeeId } = await params;
    const employee = dbManager.getItemById('employees', employeeId);
    if (!employee || employee.organization_id !== orgId) { // Also check orgId match
      return NextResponse.json({ message: `Employee with ID ${employeeId} not found for organization ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(employee);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get employee", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: Promise<{ orgId: string, employeeId: string }> }) {
  try {
    const { orgId, employeeId } = await params;
    const body = await _request.json() as UpdateEmployeeRequest;
    const existingEmployee = dbManager.getItemById('employees', employeeId);
    if (!existingEmployee || existingEmployee.organization_id !== orgId) {
      return NextResponse.json({ message: `Employee with ID ${employeeId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const updatedEmployeeFull = dbManager.updateItem('employees', employeeId, body);
     if (!updatedEmployeeFull) { // Should not happen if existingEmployee was found
      return NextResponse.json({ message: `Employee with ID ${employeeId} update failed.` }, { status: 500 });
    }
    const response: EmployeeResponse = {
        employee_id: updatedEmployeeFull.employee_id,
        first_name: updatedEmployeeFull.first_name,
        last_name: updatedEmployeeFull.last_name,
        organization_id: updatedEmployeeFull.organization_id,
        agency_id: updatedEmployeeFull.agency_id,
        employee_role: updatedEmployeeFull.employee_role,
        department: updatedEmployeeFull.department,
        created_at: updatedEmployeeFull.created_at,
        updated_at: updatedEmployeeFull.updated_at,
    };
    return NextResponse.json(response, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update employee", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: Promise<{ orgId: string, employeeId: string }> }) {
  try {
    const { orgId, employeeId } = await params;
    const existingEmployee = dbManager.getItemById('employees', employeeId);
    if (!existingEmployee || existingEmployee.organization_id !== orgId) {
      return NextResponse.json({ message: `Employee with ID ${employeeId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('employees', employeeId);
    if (!deleted) {
      return NextResponse.json({ message: `Employee with ID ${employeeId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Employee deleted successfully." }, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete employee", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/employees/[employeeId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/employees/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreateEmployeeRequest, EmployeeDto, EmployeeResponse } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const allEmployees = dbManager.getCollection('employees');
    // Filter for employees directly under the organization (agency_id is null or matches orgId if that the convention)
    const orgEmployees = allEmployees.filter(emp => emp.organization_id === orgId);
    return NextResponse.json(orgEmployees);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get organization employees", error: error.message }, { status: 500 });
  }
}

export async function POST(_request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const body = await _request.json() as CreateEmployeeRequest;

    // Add validation for required fields in CreateEmployeeRequest
    if (!body.first_name || !body.last_name || !body.employee_role) {
      return NextResponse.json({ message: "First name, last name, and role are required for an employee." }, { status: 400 });
    }

    const newEmployeeData: Omit<EmployeeDto, 'employee_id' | 'created_at' | 'updated_at' | 'user_id' | 'partner_type' | 'partner_details' | 'is_manager'> = {
      ...body,
      organization_id: orgId,
      // agency_id will be null/undefined for org-level employees
    };
    const createdEmployeeFull = dbManager.addItem('employees', newEmployeeData);

    // Construct EmployeeResponse based on spec
    const response: EmployeeResponse = {
      employee_id: createdEmployeeFull.employee_id,
      first_name: createdEmployeeFull.first_name,
      last_name: createdEmployeeFull.last_name,
      organization_id: createdEmployeeFull.organization_id,
      agency_id: createdEmployeeFull.agency_id,
      employee_role: createdEmployeeFull.employee_role,
      department: createdEmployeeFull.department,
      created_at: createdEmployeeFull.created_at,
      updated_at: createdEmployeeFull.updated_at,
    };
    return NextResponse.json(response, { status: 201 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to create organization employee", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/employees/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/practical-infos/[infoId]/route.ts

// app/api/mock/organization/[orgId]/practical-infos/[infoId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdatePracticalInformationRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ orgId: string, infoId: string }> }) {
  try {
    const { orgId, infoId } = await params;
    const info = dbManager.getItemById('practicalInformation', infoId);
    if (!info || info.organization_id !== orgId) {
      return NextResponse.json({ message: "Practical information not found for this organization." }, { status: 404 });
    }
    return NextResponse.json(info);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get practical information item", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: Promise<{ orgId: string, infoId: string }> }) {
  try {
    const { orgId, infoId } = await params;
    const body = await _request.json() as UpdatePracticalInformationRequest;
    const existing = dbManager.getItemById('practicalInformation', infoId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: "Practical information not found for update." }, { status: 404 });
    }
    const updatedInfo = dbManager.updateItem('practicalInformation', infoId, body);
    return NextResponse.json(updatedInfo, { status: 200 }); // Or 202
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update practical information", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: Promise<{ orgId: string, infoId: string }> }) {
  try {
    const { orgId, infoId } = await params;
    const existing = dbManager.getItemById('practicalInformation', infoId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: "Practical information not found for deletion." }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('practicalInformation', infoId);
    if (!deleted) {
      return NextResponse.json({ message: "Practical information not found during deletion attempt." }, { status: 404 });
    }
    return NextResponse.json({ message: "Practical information deleted." }, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete practical information", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/practical-infos/[infoId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/practical-infos/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreatePracticalInformationRequest, PracticalInformationDto } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const allInfos = dbManager.getCollection('practicalInformation');
    const orgInfos = allInfos.filter(info => info.organization_id === orgId);
    return NextResponse.json(orgInfos);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get practical information list", error: error.message }, { status: 500 });
  }
}

export async function POST(_request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const body = await _request.json() as CreatePracticalInformationRequest;

    if (!body.type || !body.value) {
      return NextResponse.json({ message: "Type and Value are required." }, { status: 400 });
    }
    const newData: Omit<PracticalInformationDto, 'information_id' | 'created_at' | 'updated_at'> = {
      ...body,
      organization_id: orgId,
    };
    const createdInfo = dbManager.addItem('practicalInformation', newData);
    return NextResponse.json(createdInfo, { status: 201 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to create practical information", error: error.message }, { status: 500 });
  }
}

// END OF FILE: app/api/mock/organization/[orgId]/practical-infos/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/proposed-activities/[activityId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateProposedActivityRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, activityId: string }> }) {
  try {
    const { orgId, activityId } = await params;
    const activity = dbManager.getItemById('proposedActivities', activityId);
    if (!activity || activity.organization_id !== orgId) {
      return NextResponse.json({ message: `Activity ${activityId} not found for org ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(activity);
  } catch (e:any) { return NextResponse.json({ message: e.message || "Error"}, {status: 500})}
}

export async function PUT(request: NextRequest, { params }: { params: Promise<{ orgId: string, activityId: string }> }) {
  try {
    const { orgId, activityId } = await params;
    const body = await request.json() as UpdateProposedActivityRequest;
    const existing = dbManager.getItemById('proposedActivities', activityId);
     if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Activity ${activityId} not found for org ${orgId}.` }, { status: 404 });
    }
    const updated = dbManager.updateItem('proposedActivities', activityId, body);
    return NextResponse.json(updated, { status: 202 });
  } catch (e:any) { return NextResponse.json({ message: e.message || "Error"}, {status: 500})}
}

export async function DELETE(request: NextRequest, { params }: { params: Promise<{ orgId: string, activityId: string }> }) {
 try {
    const { orgId, activityId } = await params;
    const existing = dbManager.getItemById('proposedActivities', activityId);
     if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Activity ${activityId} not found for org ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('proposedActivities', activityId);
    if(!deleted) return NextResponse.json({ message: "Not found"}, {status: 404});
    return NextResponse.json({ message: "Activity deleted." }, { status: 202 });
  } catch (e:any) { return NextResponse.json({ message: e.message || "Error"}, {status: 500})}
}
// END OF FILE: app/api/mock/organization/[orgId]/proposed-activities/[activityId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/proposed-activities/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreateProposedActivityRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const allActivities = dbManager.getCollection('proposedActivities');
    const orgActivities = allActivities.filter(act => act.organization_id === orgId);
    return NextResponse.json(orgActivities);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get proposed activities", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const body = await request.json() as CreateProposedActivityRequest;
    if (!body.name || !body.type) {
        return NextResponse.json({ message: "Name and type are required." }, { status: 400 });
    }
    const newActivityData = {
        ...body,
        organization_id: orgId,
    };
    const createdActivity = dbManager.addItem('proposedActivities', newActivityData);
    return NextResponse.json(createdActivity, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create proposed activity", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/proposed-activities/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/prospects/[prospectId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateProspectRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, prospectId: string }> }) {
  try {
    const { orgId, prospectId } = await params;
    const prospect = dbManager.getItemById('prospects', prospectId);
    if (!prospect || prospect.organization_id !== orgId) {
      return NextResponse.json({ message: `Prospect ${prospectId} not found for organization ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(prospect);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get organization prospect", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: Promise<{ orgId: string, prospectId: string }> }) {
  try {
    const { orgId, prospectId } = await params;
    const body = await request.json() as UpdateProspectRequest;
    const existing = dbManager.getItemById('prospects', prospectId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Prospect ${prospectId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const updatedProspect = dbManager.updateItem('prospects', prospectId, body);
    return NextResponse.json(updatedProspect, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update organization prospect", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: Promise<{ orgId: string, prospectId: string }> }) {
  try {
    const { orgId, prospectId } = await params;
    const existing = dbManager.getItemById('prospects', prospectId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Prospect ${prospectId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('prospects', prospectId);
    if (!deleted) return NextResponse.json({ message: `Prospect ${prospectId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Organization prospect deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete organization prospect", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/prospects/[prospectId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/prospects/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ProspectDto, CreateProspectRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const allProspects = dbManager.getCollection('prospects');
    const orgProspects = allProspects.filter(p => p.organization_id === orgId && !p.agency_id);
    return NextResponse.json(orgProspects);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get organization prospects", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const body = await request.json() as CreateProspectRequest;

    if (!body.first_name && !body.last_name) {
      return NextResponse.json({ message: "First and last name are required for a prospect." }, { status: 400 });
    }

    const newProspectData: Omit<ProspectDto, 'prospect_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      partner_type: "PROSPECT",
    };
    const createdProspect = dbManager.addItem('prospects', newProspectData);
    return NextResponse.json(createdProspect, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create organization prospect", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/prospects/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/route.ts

import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateOrganizationRequest } from '@/types/organization';

export async function PUT(_request: Request, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const body = await _request.json() as UpdateOrganizationRequest;
    const updatedOrg = dbManager.updateItem('organizationsDetails', orgId, body);
    if (!updatedOrg) return NextResponse.json({ message: `Organization ${orgId} not found.` }, { status: 404 });
    return NextResponse.json(updatedOrg, { status: 202 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to update organization", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: Request, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const deleted = dbManager.deleteItem('organizationsDetails', orgId);
    if (!deleted) return NextResponse.json({ message: `Organization ${orgId} not found.` }, { status: 404 });

    // Cascade delete related entities
    const allAgencies = dbManager.getCollection('agencies');
    const remainingAgencies = allAgencies.filter(a => a.organization_id !== orgId);
    dbManager.saveCollection('agencies', remainingAgencies);
    
    const allEmployees = dbManager.getCollection('employees');
    const remainingEmployees = allEmployees.filter(e => e.organization_id !== orgId);
    dbManager.saveCollection('employees', remainingEmployees);

    return NextResponse.json({ message: "Organization deleted successfully." }, { status: 202 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to delete organization", error: error.message }, { status: 500 });
  }
}

export async function GET(_request: Request, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const org = dbManager.getItemById('organizationsDetails', orgId);
    if (!org) return NextResponse.json({ message: `Organization ${orgId} not found.` }, { status: 404 });
    return NextResponse.json(org);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get organization details", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/sales-people/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { SalesPersonDto, CreateSalesPersonRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const allSalesPersons = dbManager.getCollection('salesPersons');
    const orgSalesPersons = allSalesPersons.filter(sp => sp.organization_id === orgId && !sp.agency_id);
    return NextResponse.json(orgSalesPersons);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get organization sales people", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const body = await request.json() as CreateSalesPersonRequest;

    if (!body.name) {
      return NextResponse.json({ message: "Sales person name is required." }, { status: 400 });
    }

    const newSpData: Omit<SalesPersonDto, 'sales_person_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      partner_type: "SALE",
    };
    const createdSp = dbManager.addItem('salesPersons', newSpData);
    return NextResponse.json(createdSp, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create organization sales person", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/sales-people/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/sales-people/[salesPersonId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateSalesPersonRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, salesPersonId: string }> }) {
  try {
    const { orgId, salesPersonId } = await params;
    const sp = dbManager.getItemById('salesPersons', salesPersonId);
    if (!sp || sp.organization_id !== orgId) {
      return NextResponse.json({ message: `SalesPerson ID ${salesPersonId} not found for org ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(sp);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get sales person", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: Promise<{ orgId: string, salesPersonId: string }> }) {
  try {
    const { orgId, salesPersonId } = await params;
    const body = await request.json() as UpdateSalesPersonRequest;
    const existing = dbManager.getItemById('salesPersons', salesPersonId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `SalesPerson ID ${salesPersonId} not found for org ${orgId}.` }, { status: 404 });
    }
    const updatedSp = dbManager.updateItem('salesPersons', salesPersonId, body);
    return NextResponse.json(updatedSp, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update sales person", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: Promise<{ orgId: string, salesPersonId: string }> }) {
  try {
    const { orgId, salesPersonId } = await params;
    const existing = dbManager.getItemById('salesPersons', salesPersonId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `SalesPerson ID ${salesPersonId} not found for org ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('salesPersons', salesPersonId);
    if (!deleted) return NextResponse.json({ message: "Not found" }, { status: 404 });
    return NextResponse.json({ message: "Sales person deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete sales person", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/sales-people/[salesPersonId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/status/route.ts

// app/api/mock/organization/[orgId]/status/route.ts
import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateOrganizationStatusRequest,OrganizationDto } from '@/types/organization';

export async function PUT(_request: Request, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const body = await _request.json() as UpdateOrganizationStatusRequest;

    const updatedOrg = dbManager.updateItem('organizationsDetails', orgId, { status: body.status, is_active: body.status === "ACTIVE" });
    if (!updatedOrg) {
      return NextResponse.json({ message: `Organization with ID ${orgId} not found.` }, { status: 404 });
    }
    dbManager.updateItem('organizationsDetails', orgId, { status: body.status });

    return NextResponse.json(updatedOrg, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update organization status", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/status/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/suppliers/[providerId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateProviderRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, providerId: string }> }) {
  try {
    const { orgId, providerId } = await params;
    const provider = dbManager.getItemById('providers', providerId);
    if (!provider || provider.organization_id !== orgId) {
      return NextResponse.json({ message: `Supplier ${providerId} not found for organization ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(provider);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get organization supplier", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: Promise<{ orgId: string, providerId: string }> }) {
  try {
    const { orgId, providerId } = await params;
    const body = await request.json() as UpdateProviderRequest;
    const existing = dbManager.getItemById('providers', providerId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Supplier ${providerId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const updatedProvider = dbManager.updateItem('providers', providerId, body);
    return NextResponse.json(updatedProvider, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update organization supplier", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: Promise<{ orgId: string, providerId: string }> }) {
  try {
    const { orgId, providerId } = await params;
    const existing = dbManager.getItemById('providers', providerId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Supplier ${providerId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('providers', providerId);
    if (!deleted) return NextResponse.json({ message: `Supplier ${providerId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Organization supplier deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete organization supplier", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/suppliers/[providerId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/suppliers/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ProviderDto, CreateProviderRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const allProviders = dbManager.getCollection('providers');
    // Org-level suppliers are those linked to the org but NOT to a specific agency
    const orgProviders = allProviders.filter(p => p.organization_id === orgId && !p.agency_id);
    return NextResponse.json(orgProviders);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get organization suppliers", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const body = await request.json() as CreateProviderRequest;
    
    if (!body.first_name && !body.last_name) {
      return NextResponse.json({ message: "First and last name are required for a supplier." }, { status: 400 });
    }

    const newProviderData: Omit<ProviderDto, 'provider_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      partner_type: "SUPPLIER",
      is_active: true,
    };
    const createdProvider = dbManager.addItem('providers', newProviderData);
    return NextResponse.json(createdProvider, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create organization supplier", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/suppliers/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/third-parties/create/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ThirdPartyDto, CreateThirdPartyRequest, ThirdPartyType } from '@/types/organization';

// This route now handles the creation for ANY third-party type.
// The real API uses /.../{type}, but this is the standard workaround for the mock server.
export async function POST(request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    // The request body MUST now include the 'type'
    const body = await request.json() as (CreateThirdPartyRequest & { type: ThirdPartyType });

    if (!body.name || !body.type) {
        return NextResponse.json({ message: "Third party name and type are required." }, { status: 400 });
    }
    const newThirdPartyData: Omit<ThirdPartyDto, 'id' | 'created_at' | 'updated_at'> = {
        ...body,
        organization_id: orgId,
        type: body.type, // Get type from the body
        
    };
    const createdThirdParty = dbManager.addItem('thirdParties', newThirdPartyData);
    return NextResponse.json(createdThirdParty, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create third party", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/third-parties/create/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/third-parties/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { GetThirdPartyRequest, ThirdPartyType } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string }> }) {
  try {
    const { orgId } = await params;
    const { searchParams } = new URL(request.url);
    const queryParams: GetThirdPartyRequest = {
        status: searchParams.get('status') === 'true' ? true : searchParams.get('status') === 'false' ? false : undefined,
        type: searchParams.get('type') as ThirdPartyType || undefined,
        page: searchParams.get('page') ? parseInt(searchParams.get('page')!, 10) : undefined,
        size: searchParams.get('size') ? parseInt(searchParams.get('size')!, 10) : undefined,
    };

    let thirdParties = dbManager.getCollection('thirdParties').filter(tp => tp.organization_id === orgId);

    if (queryParams.status !== undefined) {
        thirdParties = thirdParties.filter(tp => (tp as any).is_active === queryParams.status);
    }
    if (queryParams.type) {
        thirdParties = thirdParties.filter(tp => tp.type === queryParams.type);
    }
    
    if (queryParams.page && queryParams.size) {
        const start = (queryParams.page - 1) * queryParams.size;
        const end = start + queryParams.size;
        thirdParties = thirdParties.slice(start, end);
    }
    return NextResponse.json(thirdParties);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get third parties", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/third-parties/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/third-parties/[thirdPartyId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateThirdPartyRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: Promise<{ orgId: string, thirdPartyId: string }> }) {
  try {
    const { orgId, thirdPartyId } = await params;
    const tp = dbManager.getItemById('thirdParties', thirdPartyId);
    if (!tp || tp.organization_id !== orgId) {
      return NextResponse.json({ message: `Third party ${thirdPartyId} not found for org ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(tp);
  } catch (e: any) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }) }
}

export async function PUT(request: NextRequest, { params }: { params: Promise<{ orgId: string, thirdPartyId: string }> }) {
  try {
    const { orgId, thirdPartyId } = await params;
    const body = await request.json() as UpdateThirdPartyRequest;
    const existing = dbManager.getItemById('thirdParties', thirdPartyId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Third party ${thirdPartyId} not found for org ${orgId}.` }, { status: 404 });
    }
    const updated = dbManager.updateItem('thirdParties', thirdPartyId, body);
    return NextResponse.json(updated, { status: 202 });
  } catch (e: any) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }) }
}

export async function DELETE(request: NextRequest, { params }: { params: Promise<{ orgId: string, thirdPartyId: string }> }) {
  try {
    const { orgId, thirdPartyId } = await params;
    const existing = dbManager.getItemById('thirdParties', thirdPartyId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Third party ${thirdPartyId} not found for org ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('thirdParties', thirdPartyId);
    if (!deleted) return NextResponse.json({ message: "Not found" }, { status: 404 });
    return NextResponse.json(null, { status: 204 });
  } catch (e: any) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }) }
}
// END OF FILE: app/api/mock/organization/[orgId]/third-parties/[thirdPartyId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/third-parties/[thirdPartyId]/status/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateThirdPartyStatusRequest } from '@/types/organization';

export async function PUT(request: NextRequest, { params }: { params: Promise<{ orgId: string, thirdPartyId: string }> }) {
  try {
    const { orgId, thirdPartyId } = await params;
    const body = await request.json() as UpdateThirdPartyStatusRequest;
    if (typeof body.active !== 'boolean') {
      return NextResponse.json({ message: "Field 'active' (boolean) is required." }, { status: 400 });
    }
    const existing = dbManager.getItemById('thirdParties', thirdPartyId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Third party ${thirdPartyId} not found for org ${orgId}.` }, { status: 404 });
    }
    const updated = dbManager.updateItem('thirdParties', thirdPartyId, {});
    return NextResponse.json(updated, { status: 202 });
  } catch (e: any) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }) }
}
// END OF FILE: app/api/mock/organization/[orgId]/third-parties/[thirdPartyId]/status/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/route.ts

import { NextResponse, NextRequest } from 'next/server'; // [ADD] NextRequest
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreateOrganizationRequest, OrganizationDto, } from '@/types/organization';
import { getUserIdFromMockToken } from '@/lib/data-repo/local-store/mock-auth-utils'; // [ADD]

export async function POST(request: NextRequest) { // [CHANGE] Use the request object
  try {
    // [THE FIX] Get the business actor ID (which is the user ID) from the token
    const businessActorId = await getUserIdFromMockToken(request);
    if (!businessActorId) {
      return NextResponse.json({ message: "Unauthorized: No valid user token provided." }, { status: 401 });
    }

    const body = await request.json() as CreateOrganizationRequest;
    if (!body.long_name || !body.short_name || !body.email || !body.description || !body.legal_form || !body.business_domains) {
      return NextResponse.json({ message: "Missing required fields for organization." }, { status: 400 });
    }

    const newOrgData: Omit<OrganizationDto, 'organization_id' | 'created_at' | 'updated_at' | 'status' | 'is_active'> = {
      // ... all fields from body
      long_name: body.long_name,
      short_name: body.short_name,
      email: body.email,
      description: body.description,
      business_domains: body.business_domains,
      logo_url: body.logo_url,
      legal_form: body.legal_form,
      website_url: body.web_site_url,
      social_network: body.social_network,
      business_registration_number: body.business_registration_number,
      tax_number: body.tax_number,
      capital_share: body.capital_share,
      registration_date: body.registration_date,
      ceo_name: body.ceo_name,
      year_founded: body.year_founded,
      keywords: body.keywords,
      // number_of_employees: body.number_of_employees,
      is_individual_business: body.legal_form === "11",
      // [THE FIX] Assign the ID from the token
      business_actor_id: businessActorId,
    };

    const newOrg = dbManager.addItem('organizationsDetails', { ...newOrgData, status: 'PENDING_APPROVAL', is_active: false });
    return NextResponse.json(newOrg, { status: 201 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to create organization", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/user-orgs/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { getUserIdFromMockToken } from '@/lib/data-repo/local-store/mock-auth-utils';

export async function GET(request: NextRequest) {
  try {
    // Get the user ID from the Authorization token, simulating the backend
    const businessActorId = await getUserIdFromMockToken(request);

    if (!businessActorId) {
      // If no token is provided, we can't know which orgs to return.
      // In a real API, this would be a 401 Unauthorized.
      return NextResponse.json({ message: "Unauthorized: No user token found." }, { status: 401 });
    }

    const allOrgs = dbManager.getCollection('organizationsDetails');

    // Filter the organizations to only include those owned by the user
    const userOrgs = allOrgs.filter(org => org.business_actor_id === businessActorId);

    return NextResponse.json(userOrgs);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get user organizations", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/user-orgs/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/user-preferences/[userId]/route.ts

// app/api/mock/user-preferences/[userId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UserPreferencesDto, UpdateUserPreferencesRequest, UserDisplayPreferences, UserNotificationPreferences, UserPrivacyPreferences } from '@/types/user-preferences';

const defaultDisplayPrefsForMock: UserDisplayPreferences = {
  language: 'en', currency: 'USD', dateFormat: 'mm-dd-yyyy',
  fontSize: 16, theme: 'system', layout: 'default', timezone: 'utc-8',
  profilePhotoUrl: "", // Default if not set
};
const defaultNotificationPrefsForMock: UserNotificationPreferences = {
  email: true, push: true, sms: false, accountActivity: true,
  newFeatures: true, marketing: false, frequency: 'daily',
  quietHoursStart: '22:00', quietHoursEnd: '07:00',
};
const defaultPrivacyPrefsForMock: UserPrivacyPreferences = {
  analyticsSharing: true, personalizedAds: false,
  visibility: 'private', dataRetention: '1-year',
};

function getOrCreateUserPreferences(userId: string): UserPreferencesDto {
  let prefs = dbManager.getItemById('userPreferences', userId);
  if (!prefs) {
    // const defaultPreferences: UserPreferencesDto = {
    //   user_id: userId,
    //   display: { ...defaultDisplayPrefsForMock },
    //   notifications: { ...defaultNotificationPrefsForMock },
    //   privacy: { ...defaultPrivacyPrefsForMock },
    //   updated_at: new Date().toISOString(),
    // };
    // The addItem in dbManager now uses 'user_id' as the 'id' for this collection if provided.
    // Let ensure we are consistent. If addItem generates its own 'id', we need to query by user_id.
    // For simplicity, let assume userPreferences items are stored with 'user_id' as their main lookup key.
    // This means getItemById and updateItem in dbManager might need adjustment for this collection.
    // OR, we store a separate 'id' and also 'user_id'. Let stick to 'user_id' as the primary key here for this collection.

    // Modified to ensure 'user_id' is the key for this collection.
    const collection = dbManager.getCollection('userPreferences');
    const existing = collection.find(p => p.user_id === userId);
    if (existing) {
      prefs = existing;
    } else {
      const newPrefsData = {
        user_id: userId, // This is the key
        display: { ...defaultDisplayPrefsForMock },
        notifications: { ...defaultNotificationPrefsForMock },
        privacy: { ...defaultPrivacyPrefsForMock },
        updated_at: new Date().toISOString(),
      };
      collection.push(newPrefsData);
      dbManager.saveCollection('userPreferences', collection);
      prefs = newPrefsData;
    }
  }
  return prefs!;
}

export async function GET(_request: NextRequest, { params }: { params: Promise<{ userId: string }> }) {
  try {
    const { userId } = await params;
    if (!userId) return NextResponse.json({ message: "User ID is required." }, { status: 400 });
    const preferences = getOrCreateUserPreferences(userId);
    return NextResponse.json(preferences, { status: 200 });
  } catch (error)  {
    console.error("[MOCK API /user-preferences GET ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to get user preferences." }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: Promise<{ userId: string }> }) {
  try {
    const userId = (await params).userId;
    if (!userId) return NextResponse.json({ message: "User ID is required." }, { status: 400 });
    const body = await _request.json() as UpdateUserPreferencesRequest;

    const collection = dbManager.getCollection('userPreferences');
    let itemIndex = collection.findIndex(p => p.user_id === userId);
    let currentPrefs: UserPreferencesDto;

    if (itemIndex > -1) {
      currentPrefs = collection[itemIndex];
    } else {
      // Create if not exists, as PUT can mean create or update
      currentPrefs = {
        user_id: userId,
        display: { ...defaultDisplayPrefsForMock },
        notifications: { ...defaultNotificationPrefsForMock },
        privacy: { ...defaultPrivacyPrefsForMock },
      };
      collection.push(currentPrefs);
      itemIndex = collection.length - 1; // It now the last item
    }

    const updatedData: UserPreferencesDto = {
      ...currentPrefs,
      user_id: userId,
      display: { ...currentPrefs.display, ...(body.display || {}) },
      notifications: { ...currentPrefs.notifications, ...(body.notifications || {}) },
      privacy: { ...currentPrefs.privacy, ...(body.privacy || {}) },
      updated_at: new Date().toISOString(),
    };
    collection[itemIndex] = updatedData;
    dbManager.saveCollection('userPreferences', collection);

    return NextResponse.json(updatedData, { status: 200 });
  } catch (error)  {
    console.error("[MOCK API /user-preferences PUT ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to update user preferences." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/user-preferences/[userId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/proxy/[...slug]/route.ts

/**
 * @file This file defines a generic server-side proxy API route.
 * @module API_Proxy
 * @description This route is designed to bypass browser CORS (Cross-Origin Resource Sharing) restrictions
 * by acting as an intermediary between the client-side application and external APIs.
 */

import { NextResponse, NextRequest } from 'next/server';

/**
 * Handles all incoming HTTP requests (GET, POST, PUT, DELETE, etc.) intended for external APIs.
 *
 * ### Motivation
 * Modern web browsers enforce a security measure known as the Same-Origin Policy, which restricts
 * web pages from making requests to a different domain than the one that served the page. For this application
 * to communicate with the remote YOWYOB APIs from the client-side, the YOWYOB servers would need to explicitly
 * permit this via CORS headers. As this external configuration cannot be guaranteed, this proxy provides a robust solution.
 * It functions by receiving a request from the client, forwarding it from the server environment (which is not subject to CORS),
 * and then streaming the external API's response back to the client.
 *
 * ### Parameters & Usage
 * It is expected that any client-side request to this proxy includes a specific HTTP header:
 * - `X-Target-URL`: This header **must** contain the full, absolute URL of the intended external API endpoint.
 *
 * The proxy transparently forwards the `Authorization` and `Content-Type` headers from the original
 * request, ensuring authentication and data formats are correctly handled.
 *
 * ### Operational Flow
 * 1.  The handler receives a request from the client to `/api/proxy/...`.
 * 2.  It extracts the destination from the `X-Target-URL` header. A 400 error is returned if this header is missing.
 * 3.  It constructs a new `fetch` request, copying the method, body, and essential headers.
 * 4.  The `duplex: 'half'` option is critically supplied to the `fetch` call to support streaming request bodies,
 *     a requirement in modern server runtimes like the one used by Next.js.
 * 5.  Upon receiving a response from the target server, it streams the status, headers, and body back to the original client.
 *     It specifically removes headers like `content-encoding` that are managed by the hosting platform to prevent conflicts.
 * 6.  If the proxy fails to reach the target server, it returns a `502 Bad Gateway` error.
 *
 * @param {NextRequest} req - The incoming request object from the Next.js framework.
 * @returns {Promise<NextResponse>} A promise that resolves to a `NextResponse` object, either streaming the
 * proxied response or returning a specific error (400 for bad request, 502 for gateway error).
 */
async function handler(req: NextRequest): Promise<NextResponse> {
  const targetUrl = req.headers.get('X-Target-URL');

  if (!targetUrl) {
    return NextResponse.json(
      { message: 'X-Target-URL header is missing.' },
      { status: 400 }
    );
  }

  try {
    const headers = new Headers();
    headers.set('Content-Type', req.headers.get('Content-Type') || 'application/json');
    if (req.headers.has('Authorization')) {
      headers.set('Authorization', req.headers.get('Authorization')!);
    }

    const remoteResponse = await fetch(targetUrl, {
      method: req.method,
      headers: headers,
      body: req.method !== 'GET' && req.method !== 'HEAD' ? req.body : null,
      redirect: 'follow',
      cache: 'no-store',
      // This option is required for streaming request bodies in modern fetch implementations.
      // @ts-expect-error - 'duplex' is a valid option in the runtime but may not be in the default TS type.
      duplex: 'half',
    });

    // Reconstruct the response headers, filtering out those that can cause issues.
    const responseHeaders = new Headers(remoteResponse.headers);
    responseHeaders.delete('content-encoding');
    responseHeaders.delete('content-length');

    // Stream the remote response back to the client.
    return new NextResponse(remoteResponse.body, {
      status: remoteResponse.status,
      statusText: remoteResponse.statusText,
      headers: responseHeaders,
    });
  } catch (error) {
    console.error(`[API PROXY] Error fetching ${targetUrl}:`, error);
    return NextResponse.json(
      { message: 'Proxy request failed', error: error.message },
      { status: 502 } // Bad Gateway
    );
  }
}

/**
 * Exports the single handler for all common HTTP methods.
 * This makes the proxy versatile and capable of handling any type of API request.
 */
export { handler as GET, handler as POST, handler as PUT, handler as DELETE, handler as PATCH };// END OF FILE: app/api/proxy/[...slug]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(auth)/forgot-password/page.tsx

import { ForgotPasswordForm } from "@/components/auth/forgot-password-form";

export default function ForgotPasswordPage() {
  return (
    // Use a consistent container style for auth pages
    <div className="flex min-h-screen items-center justify-center p-4 bg-gradient-to-br from-background via-background to-muted/30 dark:to-muted/10">
      {/* Apply entry animation to the form card */}
      <div className="animate-fade-in-up">
        <ForgotPasswordForm />
      </div>
    </div>
  );
}// END OF FILE: app/(auth)/forgot-password/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(auth)/layout.tsx

"use client";

import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { useEffect } from "react";
import { Loader2 } from "lucide-react";

export default function AuthLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { status: sessionStatus } = useSession();
  const router = useRouter();

  useEffect(() => {
    // If the session has been determined and the user is authenticated...
    if (sessionStatus === "authenticated") {
      // ...redirect them away from the auth pages to their main dashboard.
      router.replace("/dashboard");
    }
  }, [sessionStatus, router]);

  // While the session is being checked, show a loading state.
  // This prevents a "flash" of the login form before the redirect happens.
  if (sessionStatus === "loading") {
    return (
      <div className="flex min-h-screen items-center justify-center p-4 bg-background">
        <Loader2 className="h-10 w-10 animate-spin text-primary" />
      </div>
    );
  }

  // If the user is not authenticated, render the login/signup page.
  // The check `sessionStatus !== 'authenticated'` ensures that the login form is shown
  // only after the check is complete and the user is confirmed to be unauthenticated.
  return <>{sessionStatus !== "authenticated" && children}</>;
}
// END OF FILE: app/(auth)/layout.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(auth)/login/page.tsx

import { LoginForm } from "@/components/auth/login-form";

export default function LoginPage() {
  return (
    // Use a consistent container style for auth pages
    <div className="flex min-h-screen items-center justify-center p-4 bg-gradient-to-br from-background via-background to-muted/30 dark:to-muted/10">
      {/* Apply entry animation to the form card */}
      <div className="animate-fade-in-up">
        <LoginForm />
      </div>
    </div>
  );
}// END OF FILE: app/(auth)/login/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(auth)/signup/page.tsx

import { SignUpForm } from "@/components/auth/signup-form";

export default function SignUpPage() {
  return (
     // Use a consistent container style for auth pages
    <div className="flex min-h-screen items-center justify-center p-4 bg-gradient-to-br from-background via-background to-muted/30 dark:to-muted/10">
       {/* Apply entry animation to the form card */}
      <div className="animate-fade-in-up">
        <SignUpForm />
      </div>
    </div>
  );
}// END OF FILE: app/(auth)/signup/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/bonus/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from '@/components/ui/button';

export default function CustomerBonusPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Mes Bonus / My Bonus</h1>
      <div className="grid gap-4 md:grid-cols-2">
          <Card>
            <CardHeader>
              <CardTitle>Consulter mes Points / Check My Points</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-4xl font-bold">1,234 Pts</p> {/* TODO: Fetch dynamically */}
              <p className="text-sm text-muted-foreground mt-2">Valeur en monnaie / Monetary Value: $12.34</p> {/* TODO: Fetch/Calculate dynamically */}
               {/* TODO: Show history of points earned/spent */}
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Convertir mes points / Convert My Points</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Redeem your points for rewards or discounts.</p>
              <Button className="mt-4" disabled>Convert Points</Button> {/* TODO: Implement conversion logic */}
              {/* TODO: Show available rewards/conversion options */}
            </CardContent>
          </Card>
      </div>
    </div>
  );
}// END OF FILE: app/(dashboard)/bonus/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/customers/customers-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { CustomerDto, CreateCustomerRequest, UpdateCustomerRequest } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Users, Search as SearchIcon, Building } from "lucide-react";
import { getCustomerColumns } from "@/components/organization/customers/columns";
import { CustomerCard } from "@/components/organization/customers/customer-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { CustomerForm } from "@/components/organization/customers/customer-form";

export function AgencyCustomersClientPage() {
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } = useActiveOrganization();
  const [customers, setCustomers] = useState<CustomerDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<CustomerDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingCustomer, setEditingCustomer] = useState<CustomerDto | undefined>(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId) { setIsLoading(false); setCustomers([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAgencyCustomers(activeOrganizationId, activeAgencyId);
      setCustomers(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load agency customers.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleOpenFormModal = (customer?: CustomerDto) => {
    setEditingCustomer(customer);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: CustomerDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || !activeAgencyId || itemsToDelete.length === 0) return;
    const originalItems = [...customers];
    const idsToDelete = itemsToDelete.map(item => item.customer_id!);
    setCustomers(prev => prev.filter(item => !idsToDelete.includes(item.customer_id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map(item => organizationRepository.deleteAgencyCustomer(activeOrganizationId, activeAgencyId, item.customer_id!)));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} customer(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Customer(s) deleted."; },
      error: (err) => { setCustomers(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    }).unwrap();
  };

  const handleFormSubmit = async (data: CreateCustomerRequest | UpdateCustomerRequest): Promise<boolean> => {
    if (!activeOrganizationId || !activeAgencyId) { toast.error("No active agency selected."); return false; }
    try {
      const promise = editingCustomer?.customer_id
        ? organizationRepository.updateAgencyCustomer(activeOrganizationId, activeAgencyId, editingCustomer.customer_id, data as UpdateCustomerRequest)
        : organizationRepository.createAgencyCustomer(activeOrganizationId, activeAgencyId, data as CreateCustomerRequest);
      
      await toast.promise(promise, {
        loading: `${editingCustomer ? 'Updating' : 'Creating'} customer...`,
        success: `Customer ${editingCustomer ? 'updated' : 'created'} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<CustomerDto>[]>(() => getCustomerColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item])}, [activeAgencyDetails!].filter(Boolean)),[activeAgencyDetails]);

  if (!activeAgencyId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Agency Selected" description="Please select an active agency to manage its customers." />;
  }

  return (
    <>
      <ResourceDataTable
        data={customers}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search agency customers..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="agency-customers-view-mode"
        exportFileName="agency_customers.csv"
        pageHeader={<PageHeader title="Agency Customers" description={`Manage customers for ${activeAgencyDetails?.long_name || 'this agency'}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Customer</Button>} />}
        renderGridItemAction={(customer) => <CustomerCard customer={customer} agencies={[]} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={Users} title="No Customers in this Agency" description="Add your first customer to this agency." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Customer</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Customers Found" description="Your search did not match any customers in this agency." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">{editingCustomer ? "Edit Customer" : "Add New Customer"}</DialogTitle>
          <CustomerForm mode={editingCustomer ? "edit" : "create"} initialData={editingCustomer} onSubmitAction={handleFormSubmit} agencies={[]} hideAgencySelector={true} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} customer(s)</strong> from this agency.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}// END OF FILE: app/(dashboard)/business-actor/agency/customers/customers-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/customers/page.tsx

import { Metadata } from "next";
import { AgencyCustomersClientPage } from "./customers-client";

export const metadata: Metadata = {
  title: "Manage Agency Customers",
  description: "View, add, and manage your agency's customers.",
};

export default async function AgencyCustomersPage() {
  return <AgencyCustomersClientPage />;
}// END OF FILE: app/(dashboard)/business-actor/agency/customers/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/dashboard/dashboard-client.tsx

"use client";

import React, { useEffect, useState, useCallback } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { DollarSign, Users, Briefcase, UserPlus } from "lucide-react";
import { PageHeader } from "@/components/ui/page-header";
import { StatCard, StatCardSkeleton } from "@/components/dashboard/organization/stat-card";
import { SalesChart } from "@/components/dashboard/organization/sales-chart";
import { TeamRoster } from "@/components/dashboard/agency/team-roster";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";
import { organizationRepository } from "@/lib/data-repo/organization";
import { EmployeeDto, CustomerDto } from "@/types/organization";
import { Skeleton } from "@/components/ui/skeleton";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { Building } from "lucide-react";

interface AgencyDashboardData {
    employeeCount: number;
    customerCount: number;
    employees: EmployeeDto[];
    error?: string | null;
}

const initialData: AgencyDashboardData = {
    employeeCount: 0,
    customerCount: 0,
    employees: [],
};

export function AgencyDashboardClientPage() {
  const router = useRouter();
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails, isLoadingAgencyDetails } = useActiveOrganization();
  const [data, setData] = useState<AgencyDashboardData>(initialData);
  const [isLoading, setIsLoading] = useState(true);

  const fetchData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId) {
      setIsLoading(false);
      return;
    }
    setIsLoading(true);
    try {
        const [employees, customers] = await Promise.all([
            organizationRepository.getAgencyEmployees(activeOrganizationId, activeAgencyId),
            organizationRepository.getAgencyCustomers(activeOrganizationId, activeAgencyId),
        ]);
        setData({
            employeeCount: employees?.length || 0,
            customerCount: customers?.length || 0,
            employees: employees || [],
        });
    } catch (error: any) {
        setData({ ...initialData, error: "Failed to load agency dashboard data." });
    } finally {
        setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId]);

  useEffect(() => {
    if (activeAgencyId) {
      fetchData();
    } else if (!isLoadingAgencyDetails) {
      setIsLoading(false);
    }
  }, [activeAgencyId, isLoadingAgencyDetails, fetchData]);

  if (isLoading || isLoadingAgencyDetails) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center"><Skeleton className="h-10 w-1/3" /><Skeleton className="h-10 w-32" /></div>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">{Array.from({ length: 4 }).map((_, i) => <StatCardSkeleton key={i} />)}</div>
        <div className="grid gap-4 lg:grid-cols-7">
          <Skeleton className="lg:col-span-4 h-96 w-full" />
          <Skeleton className="lg:col-span-3 h-96 w-full" />
        </div>
      </div>
    );
  }
  
  if (!activeAgencyId) {
      return <FeedbackCard icon={Building} title="No Agency Selected" description="Please select an agency from the switcher in the sidebar to view its dashboard." />;
  }

  return (
    <div className="space-y-8">
      <PageHeader
        title={activeAgencyDetails?.long_name || "Agency Dashboard"}
        description="A focused overview of this agency's performance."
        action={
            <Button variant="outline" size="sm" onClick={() => router.push('/business-actor/org/agencies')}>
                Back to All Agencies
            </Button>
        }
      />

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <StatCard title="Monthly Revenue" value={`$${(activeAgencyDetails?.average_revenue || 0).toLocaleString()}`} description="Agency's estimated monthly takings" icon={DollarSign} />
        <StatCard title="Agency Customers" value={`${data.customerCount}`} description="Total clients managed by this agency" icon={Briefcase} />
        <StatCard title="Team Members" value={`${data.employeeCount}`} description="Active employees in this agency" icon={Users} />
        <StatCard title="New Prospects" value="+12" description="This month" icon={UserPlus} />
      </div>
      
      <div className="grid grid-cols-1 gap-6 lg:grid-cols-7">
        <SalesChart />
        <TeamRoster employees={data.employees} />
      </div>
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/dashboard/dashboard-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/dashboard/page.tsx

import { Metadata } from "next";
import { AgencyDashboardClientPage } from "./dashboard-client";

export const metadata: Metadata = {
  title: "Agency Dashboard",
  description: "A focused overview of your agency's performance.",
};

export default async function AgencyDashboardPage() {
  return <AgencyDashboardClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/agency/dashboard/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/employees/create/page.tsx

"use client";

import { EmployeeForm } from "@/components/organization/employees/employee-form";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { useRouter } from "next/navigation";
import { organizationRepository } from "@/lib/data-repo/organization";
import { EmployeeFormData } from "@/components/organization/employees/employee-form";
import { toast } from "sonner";

export default function CreateAgencyEmployeePage() {
  const router = useRouter();
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } = useActiveOrganization();

  const handleCreate = async (data: EmployeeFormData): Promise<boolean> => {
    if (!activeOrganizationId || !activeAgencyId) {
      toast.error("No active agency selected.");
      return false;
    }
    try {
      await organizationRepository.createAgencyEmployee(activeOrganizationId, activeAgencyId, data);
      toast.success("Employee created and assigned to agency successfully!");
      router.push("/business-actor/agency/employees");
      router.refresh();
      return true;
    } catch (error: any) {
      toast.error(error.message || "Failed to create employee.");
      return false;
    }
  };

  return (
    <div className="mx-auto">
      <EmployeeForm
        agencies={activeAgencyDetails ? [activeAgencyDetails] : []}
        mode="create"
        onSubmitAction={handleCreate}
        scopedAgencyId={activeAgencyId} // Lock the form to the current agency
      />
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/employees/create/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/employees/[employeeId]/edit-employee-client.tsx

"use client";

import React, { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { EmployeeDto } from "@/types/organization";
import {
  EmployeeForm,
  EmployeeFormData,
} from "@/components/organization/employees/employee-form";
import { toast } from "sonner";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { User, Loader2 } from "lucide-react";

interface EditEmployeeClientPageProps {
  employeeId: string;
}

export function EditAgencyEmployeeClientPage({
  employeeId,
}: EditEmployeeClientPageProps) {
  const router = useRouter();
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } =
    useActiveOrganization();
  const [initialData, setInitialData] = useState<EmployeeDto | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  const fetchData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId || !employeeId) return;
    setIsLoading(true);
    try {
      const data = await organizationRepository.getAgencyEmployeeById(
        activeOrganizationId,
        activeAgencyId,
        employeeId
      );
      setInitialData(data);
    } catch (error) {
      toast.error("Failed to fetch employee details for this agency.");
      setInitialData(null);
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId, employeeId]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const handleUpdate = async (data: EmployeeFormData): Promise<boolean> => {
    if (!activeOrganizationId || !activeAgencyId || !initialData?.employee_id) {
      toast.error("Cannot update employee: Missing context or ID.");
      return false;
    }
    try {
      await organizationRepository.updateAgencyEmployee(
        activeOrganizationId,
        activeAgencyId,
        initialData.employee_id,
        data
      );
      toast.success("Employee updated successfully!");
      router.push("/business-actor/agency/employees");
      router.refresh();
      return true;
    } catch (error: any) {
      toast.error(error.message || "Failed to update employee.");
      return false;
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[400px]">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  if (!initialData) {
    return (
      <FeedbackCard
        icon={User}
        title="Employee Not Found"
        description="The employee you are trying to edit does not exist in this agency."
      />
    );
  }

  return (
    <div className="mx-auto">
      <EmployeeForm
        agencies={activeAgencyDetails ? [activeAgencyDetails] : []}
        mode="edit"
        initialData={initialData}
        onSubmitAction={handleUpdate}
        scopedAgencyId={activeAgencyId} // Lock the form to the current agency
      />
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/employees/[employeeId]/edit-employee-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/employees/[employeeId]/page.tsx

import { Metadata } from "next";
import { EditAgencyEmployeeClientPage } from "./edit-employee-client";

export const metadata: Metadata = {
  title: "Edit Agency Employee",
};

type Props = { params: Promise<{ employeeId: string }> };

export default async function EditAgencyEmployeePage({ params }: Props) {
  const { employeeId } = await params;
  return <EditAgencyEmployeeClientPage employeeId={employeeId} />;
}
// END OF FILE: app/(dashboard)/business-actor/agency/employees/[employeeId]/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/employees/employees-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { EmployeeDto, EmployeeRoleValues } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  Users,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { getEmployeeColumns } from "@/components/organization/employees/columns";
import { EmployeeCard } from "@/components/organization/employees/employee-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

export function AgencyEmployeesClientPage() {
  const router = useRouter();
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } =
    useActiveOrganization();
  const [employees, setEmployees] = useState<EmployeeDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<EmployeeDto[]>([]);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId) {
      setIsLoading(false);
      setEmployees([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAgencyEmployees(
        activeOrganizationId,
        activeAgencyId
      );
      setEmployees(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load agency employees.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleEditAction = (employeeId: string) =>
    router.push(`/business-actor/agency/employees/${employeeId}`);
  const handleDeleteConfirmation = (items: EmployeeDto[]) => {
    if (items.length > 0) {
      setItemsToDelete(items);
      setIsDeleteDialogOpen(true);
    }
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || !activeAgencyId || itemsToDelete.length === 0)
      return;
    const originalItems = [...employees];
    const idsToDelete = itemsToDelete.map((item) => item.employee_id!);
    setEmployees((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.employee_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteAgencyEmployee(
          activeOrganizationId,
          activeAgencyId,
          item.employee_id!
        )
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} employee(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Employee(s) deleted.";
      },
      error: (err) => {
        setEmployees(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  // [ADD] Filter options for the agency view
  const roleOptions: DataTableFilterOption[] = useMemo(
    () =>
      EmployeeRoleValues.map((role) => ({
        label: role.replace(/_/g, " "),
        value: role,
      })),
    []
  );
  const departmentOptions: DataTableFilterOption[] = useMemo(() => {
    const departments = new Set(
      employees.map((item) => item.department).filter(Boolean)
    );
    return Array.from(departments).map((dept) => ({
      label: dept!,
      value: dept!,
    }));
  }, [employees]);

  const columns = useMemo<ColumnDef<EmployeeDto>[]>(
    () =>
      getEmployeeColumns(
        {
          onEditAction: handleEditAction,
          onDeleteAction: (item) => handleDeleteConfirmation([item]),
        },
        activeAgencyDetails ? [activeAgencyDetails] : []
      ),
    [activeAgencyDetails]
  );

  if (!activeAgencyId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Agency Selected"
        description="Please select an active agency to manage its employees."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={employees}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search agency employees..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="agency-employees-view-mode"
        exportFileName="agency_employees.csv"
        pageHeader={
          <PageHeader
            title="Agency Employees"
            description={`Manage the team for ${activeAgencyDetails?.long_name}`}
            action={
              <Button
                onClick={() =>
                  router.push("/business-actor/agency/employees/create")
                }
              >
                <PlusCircle className="mr-2 h-4 w-4" /> Add Employee
              </Button>
            }
          />
        }
        // [ADD] Pass the relevant filters to the toolbar
        filterControls={(table) => (
          <>
            <DataTableFacetedFilter
              column={table.getColumn("employee_role")}
              title="Role"
              options={roleOptions}
            />
            <DataTableFacetedFilter
              column={table.getColumn("department")}
              title="Department"
              options={departmentOptions}
            />
          </>
        )}
        renderGridItemAction={(employee) => (
          <EmployeeCard
            employee={employee}
            agency={activeAgencyDetails}
            onEditAction={handleEditAction}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Users}
            title="No Employees in this Agency"
            description="Assign an existing employee or create a new one for this agency."
            actionButton={
              <Button
                onClick={() =>
                  router.push("/business-actor/agency/employees/create")
                }
              >
                <PlusCircle className="mr-2 h-4 w-4" /> Add Employee
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Employees Found"
            description="Your search did not match any employees in this agency."
          />
        }
      />
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} employee(s)</strong> from this
              agency.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/employees/employees-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/employees/page.tsx

import { Metadata } from "next";
import { AgencyEmployeesClientPage } from "./employees-client";

export const metadata: Metadata = {
  title: "Manage Agency Employees",
  description: "View and manage employees assigned to this agency.",
};

export default function AgencyEmployeesPage() {
  return <AgencyEmployeesClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/agency/employees/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/profile/page.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
export default function AgencyProfilePage() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Agency Profile</CardTitle>
      </CardHeader>
      <CardContent>
        <p>
          This page will contain a form to edit the active agency's details.
        </p>
      </CardContent>
    </Card>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/profile/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/prospects/page.tsx

import { Metadata } from "next";
import { AgencyProspectsClientPage } from "./prospects-client";

export const metadata: Metadata = {
  title: "Manage Agency Prospects",
  description: "View, add, and manage your agency's prospects.",
};

export default async function AgencyProspectsPage() {
  return <AgencyProspectsClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/agency/prospects/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/prospects/prospects-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  ProspectDto,
  CreateProspectRequest,
  UpdateProspectRequest,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  Lightbulb,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { getProspectColumns } from "@/components/organization/prospects/columns";
import { ProspectCard } from "@/components/organization/prospects/prospect-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  ProspectForm,
  ProspectFormData,
} from "@/components/organization/prospects/prospect-form";

export function AgencyProspectsClientPage() {
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } =
    useActiveOrganization();
  const [prospects, setProspects] = useState<ProspectDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<ProspectDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingProspect, setEditingProspect] = useState<
    ProspectDto | undefined
  >(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId) {
      setIsLoading(false);
      setProspects([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAgencyProspects(
        activeOrganizationId,
        activeAgencyId
      );
      setProspects(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load agency prospects.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleOpenFormModal = (prospect?: ProspectDto) => {
    setEditingProspect(prospect);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: ProspectDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || !activeAgencyId || itemsToDelete.length === 0)
      return;
    const originalItems = [...prospects];
    const idsToDelete = itemsToDelete.map((item) => item.prospect_id!);
    setProspects((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.prospect_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteAgencyProspect(
          activeOrganizationId,
          activeAgencyId,
          item.prospect_id!
        )
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} prospect(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Prospect(s) deleted.";
      },
      error: (err) => {
        setProspects(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const handleFormSubmit = async (data: ProspectFormData): Promise<boolean> => {
    if (!activeOrganizationId || !activeAgencyId) {
      toast.error("No active agency selected.");
      return false;
    }
    try {
      const promise = editingProspect?.prospect_id
        ? organizationRepository.updateAgencyProspect(
            activeOrganizationId,
            activeAgencyId,
            editingProspect.prospect_id,
            data as UpdateProspectRequest
          )
        : organizationRepository.createAgencyProspect(
            activeOrganizationId,
            activeAgencyId,
            data as CreateProspectRequest
          );

      await toast.promise(promise, {
        loading: `${editingProspect ? "Updating" : "Creating"} prospect...`,
        success: `Prospect ${
          editingProspect ? "updated" : "created"
        } successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<ProspectDto>[]>(
    () =>
      getProspectColumns(
        {
          onEditAction: handleOpenFormModal,
          onDeleteAction: (item) => handleDeleteConfirmation([item]),
        },
        [activeAgencyDetails!].filter(Boolean)
      ),
    [activeAgencyDetails]
  );

  if (!activeAgencyId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Agency Selected"
        description="Please select an active agency to manage its prospects."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={prospects}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search agency prospects..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="agency-prospects-view-mode"
        exportFileName="agency_prospects.csv"
        pageHeader={
          <PageHeader
            title="Agency Prospects"
            description={`Manage prospects for ${activeAgencyDetails?.long_name}`}
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Prospect
              </Button>
            }
          />
        }
        renderGridItemAction={(item) => (
          <ProspectCard
            prospect={item}
            agencies={[]}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Lightbulb}
            title="No Prospects in this Agency"
            description="Add your first prospect to this agency."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Prospect
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Prospects Found"
            description="Your search did not match any prospects in this agency."
          />
        }
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">
            {editingProspect ? "Edit Prospect" : "Add New Prospect"}
          </DialogTitle>
          <ProspectForm
            mode={editingProspect ? "edit" : "create"}
            initialData={editingProspect}
            onSubmitAction={handleFormSubmit}
            agencies={[]}
            hideAgencySelector={true}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} prospect(s)</strong> from this
              agency.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/prospects/prospects-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/sales-people/page.tsx

import { Metadata } from "next";
import { AgencySalesPeopleClientPage } from "./sales-people-client";

export const metadata: Metadata = {
  title: "Manage Agency Sales People",
  description: "View, add, and manage your agency's sales team.",
};

export default async function AgencySalesPeoplePage() {
  return <AgencySalesPeopleClientPage />;
}// END OF FILE: app/(dashboard)/business-actor/agency/sales-people/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/sales-people/sales-people-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { SalesPersonDto, CreateSalesPersonRequest, UpdateSalesPersonRequest } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, UserCheck, Search as SearchIcon, Building } from "lucide-react";
import { getSalesPersonColumns } from "@/components/organization/sales-people/columns";
import { SalesPersonCard } from "@/components/organization/sales-people/sales-person-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { SalesPersonForm, SalesPersonFormData } from "@/components/organization/sales-people/sales-person-form";

export function AgencySalesPeopleClientPage() {
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } = useActiveOrganization();
  const [salesPeople, setSalesPeople] = useState<SalesPersonDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<SalesPersonDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingSalesPerson, setEditingSalesPerson] = useState<SalesPersonDto | undefined>(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId) { setIsLoading(false); setSalesPeople([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAgencySalesPersons(activeOrganizationId, activeAgencyId);
      setSalesPeople(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load agency sales people.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleOpenFormModal = (salesPerson?: SalesPersonDto) => {
    setEditingSalesPerson(salesPerson);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: SalesPersonDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || !activeAgencyId || itemsToDelete.length === 0) return;
    const originalItems = [...salesPeople];
    const idsToDelete = itemsToDelete.map(item => item.sales_person_id!);
    setSalesPeople(prev => prev.filter(item => !idsToDelete.includes(item.sales_person_id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map(item => organizationRepository.deleteAgencySalesPerson(activeOrganizationId, activeAgencyId, item.sales_person_id!)));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} sales person(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Sales person(s) deleted."; },
      error: (err) => { setSalesPeople(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const handleFormSubmit = async (data: SalesPersonFormData): Promise<boolean> => {
    if (!activeOrganizationId || !activeAgencyId) { toast.error("No active agency selected."); return false; }
    try {
      const promise = editingSalesPerson?.sales_person_id
        ? organizationRepository.updateAgencySalesPerson(activeOrganizationId, activeAgencyId, editingSalesPerson.sales_person_id, data as UpdateSalesPersonRequest)
        : organizationRepository.createAgencySalesPerson(activeOrganizationId, activeAgencyId, data as CreateSalesPersonRequest);
      
      await toast.promise(promise, {
        loading: `${editingSalesPerson ? 'Updating' : 'Creating'} sales person...`,
        success: `Sales person ${editingSalesPerson ? 'updated' : 'created'} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<SalesPersonDto>[]>(() => getSalesPersonColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item]) }, [activeAgencyDetails!].filter(Boolean)), [activeAgencyDetails]);

  if (!activeAgencyId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Agency Selected" description="Please select an active agency to manage its sales people." />;
  }

  return (
    <>
      <ResourceDataTable
        data={salesPeople}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search agency sales people..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="agency-sales-people-view-mode"
        exportFileName="agency_sales_people.csv"
        pageHeader={<PageHeader title="Agency Sales People" description={`Manage the sales team for ${activeAgencyDetails?.long_name}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Sales Person</Button>} />}
        renderGridItemAction={(item) => <SalesPersonCard salesPerson={item} agencies={[]} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={UserCheck} title="No Sales People in this Agency" description="Add your first sales person to this agency's team." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Sales Person</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Sales People Found" description="Your search did not match any sales people in this agency." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">{editingSalesPerson ? "Edit Sales Person" : "Add New Sales Person"}</DialogTitle>
          <SalesPersonForm mode={editingSalesPerson ? "edit" : "create"} initialData={editingSalesPerson} onSubmitAction={handleFormSubmit} agencies={[]} hideAgencySelector={true} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} sales person(s)</strong> from this agency.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}// END OF FILE: app/(dashboard)/business-actor/agency/sales-people/sales-people-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/suppliers/page.tsx

import { Metadata } from "next";
import { AgencySuppliersClientPage } from "./suppliers-client";


export const metadata: Metadata = {
  title: "Manage Agency Suppliers",
  description: "View, add, and manage your agency's suppliers.",
};

export default async function AgencySuppliersPage() {
  return <AgencySuppliersClientPage />;
}// END OF FILE: app/(dashboard)/business-actor/agency/suppliers/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/suppliers/suppliers-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  ProviderDto,
  CreateProviderRequest,
  UpdateProviderRequest,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  Truck,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { getSupplierColumns } from "@/components/organization/suppliers/columns";
import { SupplierCard } from "@/components/organization/suppliers/supplier-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  SupplierForm,
  SupplierFormData,
} from "@/components/organization/suppliers/supplier-form";

export function AgencySuppliersClientPage() {
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } =
    useActiveOrganization();
  const [suppliers, setSuppliers] = useState<ProviderDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<ProviderDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingSupplier, setEditingSupplier] = useState<
    ProviderDto | undefined
  >(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId) {
      setIsLoading(false);
      setSuppliers([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAgencySuppliers(
        activeOrganizationId,
        activeAgencyId
      );
      setSuppliers(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load agency suppliers.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleOpenFormModal = (supplier?: ProviderDto) => {
    setEditingSupplier(supplier);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: ProviderDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || !activeAgencyId || itemsToDelete.length === 0)
      return;
    const originalItems = [...suppliers];
    const idsToDelete = itemsToDelete.map((item) => item.provider_id!);
    setSuppliers((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.provider_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteAgencySupplier(
          activeOrganizationId,
          activeAgencyId,
          item.provider_id!
        )
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} supplier(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Supplier(s) deleted.";
      },
      error: (err) => {
        setSuppliers(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const handleFormSubmit = async (data: SupplierFormData): Promise<boolean> => {
    if (!activeOrganizationId || !activeAgencyId) {
      toast.error("No active agency selected.");
      return false;
    }
    try {
      const promise = editingSupplier?.provider_id
        ? organizationRepository.updateAgencySupplier(
            activeOrganizationId,
            activeAgencyId,
            editingSupplier.provider_id,
            data as UpdateProviderRequest
          )
        : organizationRepository.createAgencySupplier(
            activeOrganizationId,
            activeAgencyId,
            data as CreateProviderRequest
          );

      await toast.promise(promise, {
        loading: `${editingSupplier ? "Updating" : "Creating"} supplier...`,
        success: `Supplier ${
          editingSupplier ? "updated" : "created"
        } successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<ProviderDto>[]>(
    () =>
      getSupplierColumns(
        {
          onEditAction: handleOpenFormModal,
          onDeleteAction: (item) => handleDeleteConfirmation([item]),
        },
        [activeAgencyDetails!].filter(Boolean)
      ),
    [activeAgencyDetails]
  );

  if (!activeAgencyId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Agency Selected"
        description="Please select an active agency to manage its suppliers."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={suppliers}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search agency suppliers..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="agency-suppliers-view-mode"
        exportFileName="agency_suppliers.csv"
        pageHeader={
          <PageHeader
            title="Agency Suppliers"
            description={`Manage suppliers for ${
              activeAgencyDetails?.long_name || "this agency"
            }`}
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Supplier
              </Button>
            }
          />
        }
        renderGridItemAction={(supplier) => (
          <SupplierCard
            supplier={supplier}
            agencies={[]}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Truck}
            title="No Suppliers in this Agency"
            description="Add your first supplier to this agency."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Supplier
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Suppliers Found"
            description="Your search did not match any suppliers in this agency."
          />
        }
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">
            {editingSupplier ? "Edit Supplier" : "Add New Supplier"}
          </DialogTitle>
          <SupplierForm
            mode={editingSupplier ? "edit" : "create"}
            initialData={editingSupplier}
            onSubmitAction={handleFormSubmit}
            agencies={[]}
            hideAgencySelector={true}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} supplier(s)</strong> from this
              agency.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/suppliers/suppliers-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/bonus/page.tsx


import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function BusinessActorBonusPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Bonus Configuration</h1>
       <Tabs defaultValue="rules" className="space-y-4">
        <TabsList>
          <TabsTrigger value="rules">Rules</TabsTrigger>
          <TabsTrigger value="transactions">Bonus Transactions</TabsTrigger>
          <TabsTrigger value="point_value">Point Value</TabsTrigger>
          <TabsTrigger value="campaigns">Campaigns</TabsTrigger>
          {/* Add more tabs for advanced features like loyalty tiers */}
        </TabsList>

        <TabsContent value="rules">
          <Card>
            <CardHeader>
              <CardTitle>Bonification Rules</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Define rules for awarding bonus points based on Bonification API.</p>
              {/* TODO: Implement rule creation/management interface */}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="transactions">
          <Card>
            <CardHeader>
              <CardTitle>Bonus Transactions History</CardTitle>
            </CardHeader>
            <CardContent>
              <p>View a detailed log of all bonus points awarded and redeemed.</p>
              {/* TODO: Implement bonus transaction table/log */}
            </CardContent>
          </Card>
        </TabsContent>

         <TabsContent value="point_value">
          <Card>
            <CardHeader>
              <CardTitle>Monetary Value per Point</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Set the conversion rate for points to currency.</p>
              {/* TODO: Implement setting for point value */}
            </CardContent>
          </Card>
        </TabsContent>

         <TabsContent value="campaigns">
          <Card>
            <CardHeader>
              <CardTitle>Bonus Campaigns</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Create and manage special bonus campaigns (e.g., based on sales targets, referrals).</p>
              {/* TODO: Implement campaign management UI */}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/bonus/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/chat/page.tsx


import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function BusinessActorChatPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Chat & Chatbot</h1>
      <Card>
        <CardHeader>
          <CardTitle>Messaging Center</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Integrated chat interface for communication with customers, team, or support. Includes chatbot functionality.</p>
          {/* TODO: Implement Chat component, potentially integrating a third-party service or building custom */}
          <div className="mt-4 h-96 border rounded-md flex items-center justify-center text-muted-foreground">
            Chat Interface Placeholder
          </div>
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/chat/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/dashboard/dashboard-client.tsx

"use client";

import React, { useEffect, useState, useCallback } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import {
  DollarSign,
  Users,
  Building,
  Truck,
  UserPlus,
  TrendingUp,
} from "lucide-react";
import { PageHeader } from "@/components/ui/page-header";
import {
  StatCard,
  StatCardSkeleton,
} from "@/components/dashboard/organization/stat-card";
import { SalesChart } from "@/components/dashboard/organization/sales-chart";
import {
  RecentActivity,
  ActivityItem,
} from "@/components/dashboard/organization/recent-activity";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  AgencyDto,
  EmployeeDto,
  CustomerDto,
  ProviderDto,
} from "@/types/organization";
import { Skeleton } from "@/components/ui/skeleton";
import { FeedbackCard } from "@/components/ui/feedback-card";
import {
  Bar,
  BarChart,
  ResponsiveContainer,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
} from "recharts";

interface DashboardData {
  employeeCount: number;
  agencyCount: number;
  customerCount: number;
  supplierCount: number;
  employees: EmployeeDto[];
  agencies: AgencyDto[];
  customers: CustomerDto[];
  suppliers: ProviderDto[];
  error?: string | null;
}

const initialData: DashboardData = {
  employeeCount: 0,
  agencyCount: 0,
  customerCount: 0,
  supplierCount: 0,
  employees: [],
  agencies: [],
  customers: [],
  suppliers: [],
};

export function DashboardClientPage() {
  const {
    activeOrganizationId,
    activeOrganizationDetails,
    isLoadingOrgDetails,
  } = useActiveOrganization();
  const [data, setData] = useState<DashboardData>(initialData);
  const [activityFeed, setActivityFeed] = useState<ActivityItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const fetchData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      return;
    }
    setIsLoading(true);
    try {
      const [employees, agencies, customers, suppliers] = await Promise.all([
        organizationRepository.getOrgEmployees(activeOrganizationId),
        organizationRepository.getAgencies(activeOrganizationId),
        organizationRepository.getOrgCustomers(activeOrganizationId),
        organizationRepository.getOrgSuppliers(activeOrganizationId),
      ]);

      const allItems = [
        ...(employees || []).map((item) => ({
          ...item,
          type: "Employee" as const,
          name: `${item.first_name} ${item.last_name}`,
          id: item.employee_id,
          timestamp: item.updated_at || item.created_at,
        })),
        ...(agencies || []).map((item) => ({
          ...item,
          type: "Agency" as const,
          name: item.long_name,
          id: item.agency_id,
          timestamp: item.updated_at || item.created_at,
        })),
        ...(customers || []).map((item) => ({
          ...item,
          type: "Customer" as const,
          name: `${item.first_name} ${item.last_name}`,
          id: item.customer_id,
          timestamp: item.updated_at || item.created_at,
        })),
        ...(suppliers || []).map((item) => ({
          ...item,
          type: "Supplier" as const,
          name: `${item.first_name} ${item.last_name}`,
          id: item.provider_id,
          timestamp: item.updated_at || item.created_at,
        })),
      ];

      const sortedActivities = allItems
        .filter((item) => item.timestamp)
        .sort(
          (a, b) =>
            new Date(b.timestamp!).getTime() - new Date(a.timestamp!).getTime()
        )
        .slice(0, 10)
        .map((item) => ({
          id: `${item.type}-${item.id}`,
          type: item.type,
          targetName: item.name || "Unnamed",
          timestamp: item.timestamp!,
          action: (new Date(item.updated_at!).getTime() -
            new Date(item.created_at!).getTime() <
          2000
            ? "created"
            : "updated") as "created" | "updated",
        }));

      setActivityFeed(sortedActivities);

      setData({
        employeeCount: employees?.length || 0,
        agencyCount: agencies?.length || 0,
        customerCount: customers?.length || 0,
        supplierCount: suppliers?.length || 0,
        employees: employees || [],
        agencies: agencies || [],
        customers: customers || [],
        suppliers: suppliers || [],
      });
    } catch (error: any) {
      setData({ ...initialData, error: "Failed to load dashboard data." });
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    if (activeOrganizationId) fetchData();
    else if (!isLoadingOrgDetails) setIsLoading(false);
  }, [activeOrganizationId, isLoadingOrgDetails, fetchData]);

  if (isLoading || isLoadingOrgDetails) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <Skeleton className="h-10 w-1/3" />
          <Skeleton className="h-10 w-48" />
        </div>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          {Array.from({ length: 4 }).map((_, i) => (
            <StatCardSkeleton key={i} />
          ))}
        </div>
        <div className="grid gap-4 lg:grid-cols-7">
          <Skeleton className="lg:col-span-4 h-96 w-full" />
          <Skeleton className="lg:col-span-3 h-96 w-full" />
        </div>
      </div>
    );
  }

  if (!activeOrganizationId) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Organization Selected"
        description="Please select an organization from the switcher in the sidebar to view its dashboard."
      />
    );
  }

  const departmentData = data.employees.reduce((acc, emp) => {
    const dept = emp.department || "Unassigned";
    acc[dept] = (acc[dept] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  return (
    <div className="space-y-8">
      <PageHeader
        title={activeOrganizationDetails?.long_name || "Dashboard"}
        description="Welcome to your organization's command center."
      />
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <StatCard
          title="Total Agencies"
          value={`${data.agencyCount}`}
          icon={Building}
        />
        <StatCard
          title="Total Employees"
          value={`${data.employeeCount}`}
          icon={Users}
        />
        <StatCard
          title="Total Customers"
          value={`${data.customerCount}`}
          icon={UserPlus}
        />
        <StatCard
          title="Total Suppliers"
          value={`${data.supplierCount}`}
          icon={Truck}
        />
      </div>
      <div className="grid grid-cols-1 gap-6 lg:grid-cols-7">
        <SalesChart />
        <RecentActivity activities={activityFeed} />
      </div>
      <Card>
        <CardHeader>
          <CardTitle>Department Headcount</CardTitle>
          <CardDescription>
            Distribution of employees across departments.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={250}>
            <BarChart
              data={Object.entries(departmentData).map(([name, count]) => ({
                name,
                count,
              }))}
              layout="vertical"
              margin={{ left: 10, right: 30 }}
            >
              <CartesianGrid
                strokeDasharray="3 3"
                horizontal={false}
                stroke="hsl(var(--border))"
              />
              <XAxis
                type="number"
                stroke="hsl(var(--muted-foreground))"
                fontSize={12}
                allowDecimals={false}
              />
              <YAxis
                type="category"
                dataKey="name"
                stroke="hsl(var(--muted-foreground))"
                fontSize={12}
                tickLine={false}
                axisLine={false}
                width={100}
              />
              <Tooltip
                cursor={{ fill: "hsl(var(--muted))" }}
                contentStyle={{
                  backgroundColor: "hsl(var(--background))",
                  border: "1px solid hsl(var(--border))",
                }}
              />
              <Bar
                dataKey="count"
                fill="hsl(var(--primary))"
                radius={[0, 4, 4, 0]}
                name="Employees"
                barSize={20}
              />
            </BarChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/dashboard/dashboard-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/dashboard/page.tsx

import { Metadata } from "next";
import { DashboardClientPage } from "./dashboard-client";
import { getServerSession } from "next-auth";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { redirect } from "next/navigation";

export const metadata: Metadata = {
  title: "Organization Dashboard",
  description: "A complete overview of your organization's performance.",
};

export default async function OrganizationDashboardPage() {
  const session = await getServerSession(authOptions);

  if (!session?.user.businessActorId) {
    redirect('/dashboard');
  }
  
  // The client component now handles all its own data fetching based on context.
  // No initial data needs to be passed.
  return <DashboardClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/dashboard/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/layout.tsx

"use client";

import React, { useEffect } from "react";
import { useSession } from "next-auth/react";
import { useRouter, usePathname } from "next/navigation";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { useActiveOrganization } from "@/contexts/active-organization-context";

export default function BusinessActorLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { data: session, status: sessionStatus } = useSession();
  const { isOrgContextInitialized } = useActiveOrganization();
  const router = useRouter();
  const pathname = usePathname();

  useEffect(() => {
    // Wait until session and org context are fully loaded to prevent premature redirects
    if (sessionStatus === "loading" || !isOrgContextInitialized) {
      return;
    }

    // If the user is not authenticated at all, send them to login.
    if (sessionStatus === "unauthenticated") {
      router.replace("/login");
      return;
    }

    // [THE FIX] The guard logic now includes an exception for the organization creation page.
    // A user is allowed into this layout if:
    // 1. They are already a Business Actor (have a businessActorId).
    // OR
    // 2. They are on the specific page to create their first organization.
    const isAllowed =
      !!session?.user.businessActorId ||
      pathname.startsWith("/business-actor/organization/create");

    if (!isAllowed) {
      toast.error(
        "Access denied. Create an organization to enter the business workspace."
      );
      router.replace("/dashboard");
    }
  }, [session, sessionStatus, router, isOrgContextInitialized, pathname]);

  // Show a loading state while verifying access.
  if (sessionStatus === "loading" || !isOrgContextInitialized) {
    return (
      <div className="flex items-center justify-center min-h-[80vh]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <p className="ml-4 text-muted-foreground">
          Verifying business access...
        </p>
      </div>
    );
  }

  // Render the children. The useEffect handles redirection for unauthorized access.
  // We don't need to conditionally render here, as the redirect will prevent the wrong UI from being shown.
  return <>{children}</>;
}
// END OF FILE: app/(dashboard)/business-actor/layout.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/agencies/[agencyId]/edit/page.tsx

"use client";

import React, { useState, useEffect } from "react";
import { AgencyForm } from "@/components/organization/agencies/agency-form";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { AgencyDto } from "@/types/organization";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { AlertTriangle } from "lucide-react";
import { toast } from "sonner";
import { useRouter } from "next/navigation";

export default async function EditAgencyPage({
  params,
}: {
  params: Promise<{ agencyId: string }>;
}) {
  const { activeOrganizationId, fetchAgenciesForCurrentOrg } =
    useActiveOrganization();
  const [agencyData, setAgencyData] = useState<AgencyDto | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const { agencyId } = await params;

  useEffect(() => {
    if (activeOrganizationId && agencyId) {
      setIsLoading(true);
      organizationRepository
        .getAgencyById(activeOrganizationId, agencyId)
        .then((data) => {
          if (data) setAgencyData(data);
          else setError("Agency not found.");
        })
        .catch(() => setError("Failed to fetch agency details."))
        .finally(() => setIsLoading(false));
    }
  }, [activeOrganizationId, agencyId]);

  const handleSuccessAction = (updatedAgency: AgencyDto) => {
    toast.success(`Agency "${updatedAgency.short_name}" updated successfully!`);
    // Refresh the agency list in the context so the main list page will be up-to-date
    fetchAgenciesForCurrentOrg();
    router.push("/business-actor/org/agencies");
  };

  if (isLoading) {
    return (
      <div>
        <Skeleton className="h-8 w-1/4 mb-6" />
        <Skeleton className="h-[500px] w-full" />
      </div>
    );
  }

  if (error || !agencyData) {
    return (
      <Card className="border-destructive">
        <CardHeader>
          <CardTitle className="text-destructive flex items-center gap-2">
            <AlertTriangle /> Error
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p>{error || "The agency could not be loaded."}</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div>
      <h1 className="text-2xl font-bold tracking-tight mb-6">
        Edit Agency: {agencyData.short_name}
      </h1>
      <AgencyForm
        organizationId={activeOrganizationId!}
        mode="edit"
        initialData={agencyData}
        onSuccessAction={handleSuccessAction}
      />
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/agencies/[agencyId]/edit/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/agencies/create/page.tsx

"use client";

import { AgencyForm } from "@/components/organization/agencies/agency-form";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Inbox } from "lucide-react";
import { AgencyDto } from "@/types/organization";
import { toast } from "sonner";
import { useRouter } from "next/navigation";

export default function CreateAgencyPage() {
  const router = useRouter();
  const {
    activeOrganizationId,
    isLoadingOrgDetails,
    fetchAgenciesForCurrentOrg,
  } = useActiveOrganization();

  const handleCreateSuccess = (newAgency: AgencyDto) => {
    toast.success(`Agency "${newAgency.short_name}" created successfully!`);
    // Refresh the agency list in the context so the main list page will be up-to-date
    fetchAgenciesForCurrentOrg();
    router.push("/business-actor/org/agencies");
  };

  if (!activeOrganizationId && !isLoadingOrgDetails) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>No Organization Selected</CardTitle>
        </CardHeader>
        <CardContent className="flex flex-col items-center justify-center text-center p-10">
          <Inbox className="h-12 w-12 text-muted-foreground mb-4" />
          <p className="text-muted-foreground">
            Please select an active organization before creating an agency.
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div>
      <h1 className="text-2xl font-bold tracking-tight mb-6">
        Create New Agency
      </h1>
      {activeOrganizationId && (
        <AgencyForm
          organizationId={activeOrganizationId}
          mode="create"
          onSuccessAction={handleCreateSuccess}
        />
      )}
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/agencies/create/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/agencies/page.tsx

"use client";

import React, { useState, useEffect, useCallback, useMemo } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { AgencyDto } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Building, SearchIcon } from "lucide-react";
import { getAgencyColumns } from "@/components/organization/agencies/columns";
import { AgencyCard } from "@/components/organization/agencies/agency-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";

const statusOptions: DataTableFilterOption[] = [
  { value: "true", label: "Active" },
  { value: "false", label: "Inactive" },
];

export default function ManageAgenciesPage() {
  const router = useRouter();
  const { activeOrganizationId, activeOrganizationDetails, setActiveAgency } =
    useActiveOrganization();

  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [dataVersion, setDataVersion] = useState(0);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<AgencyDto[]>([]);

  const fetchData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAgencies(
        activeOrganizationId
      );
      setAgencies(data || []);
    } catch (err) {
      setError(err.message || "Could not load agencies.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    fetchData();
  }, [fetchData, dataVersion]);

  const refreshData = useCallback(() => setDataVersion((v) => v + 1), []);

  const handleEnterAgency = async (agency: AgencyDto) => {
    toast.info(`Entering agency: ${agency.short_name}...`);
    await setActiveAgency(agency.agency_id!, agency);
    router.push("/business-actor/agency/dashboard");
  };

  const handleEditAction = (agencyId: string) => {
    router.push(`/business-actor/org/agencies/${agencyId}/edit`);
  };

  const handleDeleteConfirmation = (items: AgencyDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteAgency(
          activeOrganizationId,
          item.agency_id!
        )
      )
    );

    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} agency(s)...`,
      success: () => {
        refreshData();
        setIsDeleteDialogOpen(false);
        setItemsToDelete([]);
        return `${itemsToDelete.length} agency(s) deleted successfully.`;
      },
      error: (err) => `Failed to delete agencies: ${err.message}`,
    });
  };

  const columns = useMemo<ColumnDef<AgencyDto>[]>(
    () =>
      getAgencyColumns({
        onEnterAction: handleEnterAgency,
        onEditAction: handleEditAction,
        onDeleteAction: (item) => handleDeleteConfirmation([item]),
      }),
    [handleEditAction, handleEnterAgency, handleDeleteConfirmation]
  );

  return (
    <>
      <ResourceDataTable
        data={agencies}
        columns={columns}
        isLoading={isLoading}
        error={error}
        viewModeStorageKey="agencies-view-mode"
        exportFileName="agencies_export.csv"
        onRefreshAction={refreshData}
        searchPlaceholder="Search agencies by name or location..."
        onDeleteItemsAction={handleDeleteConfirmation}
        pageHeader={
          <PageHeader
            title="Agency Management"
            description={`Manage branches for ${activeOrganizationDetails?.long_name}`}
            action={
              <Button
                onClick={() =>
                  router.push("/business-actor/org/agencies/create")
                }
                size="sm"
                className="h-10"
              >
                <PlusCircle className="mr-2 h-4 w-4" /> Add Agency
              </Button>
            }
          />
        }
        filterControls={(table) => (
          <DataTableFacetedFilter
            column={table.getColumn("is_active")}
            title="Status"
            options={statusOptions}
          />
        )}
        renderGridItemAction={(agency) => (
          <AgencyCard
            agency={agency}
            onEnterAction={handleEnterAgency}
            onEditAction={handleEditAction}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Building}
            title="No Agencies Created Yet"
            description="Get started by adding your first agency to manage your operations."
            actionButton={
              <Button
                onClick={() =>
                  router.push("/business-actor/org/agencies/create")
                }
              >
                <PlusCircle className="mr-2 h-4 w-4" /> Create Agency
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Agencies Found"
            description="Your search or filter criteria did not match any agencies. Try something different."
          />
        }
      />

      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} agency(s)</strong> and all
              associated data. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/agencies/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/organization/create/page.tsx

"use client";

import { OrganizationForm } from "@/components/organization/organization-form";
import { OrganizationDto } from "@/types/organization";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import { useSession } from "next-auth/react";
import { PageHeader } from "@/components/ui/page-header";

export default function CreateOrganizationPage() {
  const router = useRouter();
  const { data: session, update: updateSession } = useSession();
  const { setActiveOrganization, fetchUserOrganizationsList } =
    useActiveOrganization();

  const handleCreateSuccess = async (newOrgData: OrganizationDto) => {
    toast.success(`Organization "${newOrgData.short_name}" created!`);

    if (newOrgData.organization_id) {
      await updateSession({ businessActorId: session?.user.id });

      await setActiveOrganization(newOrgData.organization_id, newOrgData);
      await fetchUserOrganizationsList();

      // Redirect to the new organization's dashboard.
      router.push(`/business-actor/dashboard`);
    } else {
      toast.error("Could not activate the new organization. Please try again.");
      router.push(`/dashboard`);
    }
  };

  return (
    <div className="">
      <PageHeader
        title="Create Your First Organization"
        description="This is the first step to unlocking your business workspace. Fill out the details below."
        className="text-center mb-8"
      />
      <OrganizationForm onSuccessAction={handleCreateSuccess} mode={"create"} />
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/organization/create/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/organizations/page.tsx

"use client";

import React, { useState, useMemo, useCallback } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { OrganizationDto, OrganizationStatus } from "@/types/organization";
import { Button } from "@/components/ui/button";
import { PlusCircle, Briefcase, Search as SearchIcon } from "lucide-react";
import { PageHeader } from "@/components/ui/page-header";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { OrganizationCard } from "@/components/organization/organization-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { ColumnDef } from "@tanstack/react-table";
import { getOrganizationColumns } from "@/components/organization/organization-columns";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";
import { toast } from "sonner";

const statusOptions: DataTableFilterOption[] = [
  { value: "ACTIVE", label: "Active" },
  { value: "INACTIVE", label: "Inactive" },
  { value: "PENDING_APPROVAL", label: "Pending" },
  { value: "SUSPENDED", label: "Suspended" },
];

export default function OrganizationsHubPage() {
  const router = useRouter();
  const {
    userOrganizations,
    isLoadingUserOrgs,
    setActiveOrganization,
    fetchUserOrganizationsList,
  } = useActiveOrganization();

  const handleEnterDashboard = (org: OrganizationDto) => {
    if (!org.organization_id) return;
    setActiveOrganization(org.organization_id, org);
    router.push("/business-actor/dashboard");
  };

  const handleEditOrganization = (orgId: string) => {
    setActiveOrganization(orgId);
    router.push("/business-actor/org/profile");
  };

  const handleDeleteOrganizations = (orgs: OrganizationDto[]) => {
    toast.error(
      `Deletion of ${orgs.length} organization(s) is not yet implemented.`
    );
  };

  const columns = useMemo<ColumnDef<OrganizationDto>[]>(
    () =>
      getOrganizationColumns({
        onEnterAction: handleEnterDashboard,
        onEditAction: handleEditOrganization,
        onDeleteAction: (org) => handleDeleteOrganizations([org]),
      }),
    []
  );

  return (
    <ResourceDataTable
      data={userOrganizations}
      columns={columns}
      isLoading={isLoadingUserOrgs}
      error={null} // Assuming context handles errors via toast for now
      onRefreshAction={fetchUserOrganizationsList}
      searchPlaceholder="Search organizations..."
      onDeleteItemsAction={handleDeleteOrganizations}
      viewModeStorageKey="organizations-hub-view-mode"
      exportFileName="my_organizations.csv"
      pageHeader={
        <PageHeader
          title="Your Organizations"
          description="Select an organization to manage, or create a new one."
          action={
            <Button
              onClick={() => router.push("/business-actor/organization/create")}
            >
              <PlusCircle className="mr-2 h-4 w-4" />
              New Organization
            </Button>
          }
        />
      }
      filterControls={(table) => (
        <DataTableFacetedFilter
          column={table.getColumn("status")}
          title="Status"
          options={statusOptions}
        />
      )}
      renderGridItemAction={(org) => (
        <OrganizationCard
          organization={org}
          onEnterAction={handleEnterDashboard}
          onEditAction={handleEditOrganization}
          onDeleteAction={(organization) =>
            handleDeleteOrganizations([organization])
          }
        />
      )}
      emptyState={
        <FeedbackCard
          icon={Briefcase}
          title="No Organizations Found"
          description="You haven't created or joined any organizations yet. Get started by creating your first one."
          actionButton={
            <Button
              onClick={() => router.push("/business-actor/organization/create")}
            >
              <PlusCircle className="mr-2 h-4 w-4" />
              Create Your First Organization
            </Button>
          }
        />
      }
      filteredEmptyState={
        <FeedbackCard
          icon={SearchIcon}
          title="No Organizations Found"
          description="Your search or filter criteria did not match any of your organizations."
        />
      }
    />
  );
}
// END OF FILE: app/(dashboard)/business-actor/organizations/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/business-domains/business-domains-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  BusinessDomainDto,
  CreateBusinessDomainRequest,
  UpdateBusinessDomainRequest,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Tag, Search as SearchIcon, Building } from "lucide-react";
import { getBusinessDomainColumns } from "@/components/admin/business-domains/columns";
import { BusinessDomainCard } from "@/components/admin/business-domains/business-domain-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  BusinessDomainForm,
  BusinessDomainFormData,
} from "@/components/admin/business-domains/business-domain-form";

export function OrgBusinessDomainsClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } =
    useActiveOrganization();
  const [domains, setDomains] = useState<BusinessDomainDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<BusinessDomainDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<BusinessDomainDto | undefined>(
    undefined
  );

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      setDomains([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAllBusinessDomains({
        organization_id: activeOrganizationId,
      });
      setDomains(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load custom business domains.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleOpenFormModal = (item?: BusinessDomainDto) => {
    setEditingItem(item);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: BusinessDomainDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (itemsToDelete.length === 0) return;
    const originalItems = [...domains];
    const idsToDelete = itemsToDelete.map((item) => item.id!);
    setDomains((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteBusinessDomain(item.id!)
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} domain(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Domain(s) deleted.";
      },
      error: (err) => {
        setDomains(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const handleFormSubmit = async (
    data: BusinessDomainFormData
  ): Promise<boolean> => {
    try {
      const payload = { ...data, organization_id: activeOrganizationId };
      const promise = editingItem?.id
        ? organizationRepository.updateBusinessDomain(
            editingItem.id,
            payload as UpdateBusinessDomainRequest
          )
        : organizationRepository.createBusinessDomain(
            payload as CreateBusinessDomainRequest
          );

      await toast.promise(promise, {
        loading: `${editingItem ? "Updating" : "Creating"} domain...`,
        success: `Domain ${editingItem ? "updated" : "created"} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<BusinessDomainDto>[]>(
    () =>
      getBusinessDomainColumns({
        onEditAction: handleOpenFormModal,
        onDeleteAction: (item) => handleDeleteConfirmation([item]),
      }),
    []
  );

  if (!activeOrganizationId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Organization Selected"
        description="Please select an active organization to manage its custom domains."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={domains}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search custom domains..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-domains-view-mode"
        exportFileName="custom_domains.csv"
        pageHeader={
          <PageHeader
            title="Custom Business Domains"
            description={`Manage domains specific to ${activeOrganizationDetails?.long_name}`}
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Create Domain
              </Button>
            }
          />
        }
        renderGridItemAction={(item) => (
          <BusinessDomainCard
            domain={item}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Tag}
            title="No Custom Domains"
            description="Create custom business domains tailored to your organization's needs."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Create Domain
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Domains Found"
            description="Your search did not match any custom domains."
          />
        }
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">
            {editingItem ? "Edit Domain" : "Create New Domain"}
          </DialogTitle>
          <BusinessDomainForm
            mode={editingItem ? "edit" : "create"}
            initialData={editingItem}
            onSubmitAction={handleFormSubmit}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} domain(s)</strong>.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/business-domains/business-domains-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/business-domains/page.tsx

import { Metadata } from "next";
import { OrgBusinessDomainsClientPage } from "./business-domains-client";

export const metadata: Metadata = {
  title: "Manage Custom Business Domains",
  description:
    "View and manage business domains specific to your organization.",
};

export default async function OrgBusinessDomainsPage() {
  return <OrgBusinessDomainsClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/business-domains/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/certifications/certifications-client.tsx

"use client";

import React, { useState, useEffect, useCallback, useMemo } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import {
  CertificationDto,
  CreateCertificationRequest,
  UpdateCertificationRequest,
} from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  CertificationForm,
  CertificationFormData,
} from "@/components/organization/certifications/certification-form";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  Award,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { toast } from "sonner";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { ColumnDef } from "@tanstack/react-table";
import { getCertificationColumns } from "@/components/organization/certifications/columns";
import { CertificationCard } from "@/components/organization/certifications/certification-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

const getCertificationTypeOptions = (
  items: CertificationDto[]
): DataTableFilterOption[] => {
  const allTypes = items
    .map((item) => item.type)
    .filter((type): type is string => typeof type === "string");
  return [...new Set(allTypes)]
    .map((type) => ({ label: type, value: type }))
    .sort((a, b) => a.label.localeCompare(b.label));
};

export function CertificationsClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } =
    useActiveOrganization();
  const [allItems, setAllItems] = useState<CertificationDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [editingItem, setEditingItem] = useState<CertificationDto | undefined>(
    undefined
  );
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<CertificationDto[]>([]);

  const derivedTypeOptions = useMemo(
    () => getCertificationTypeOptions(allItems),
    [allItems]
  );

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      setAllItems([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getCertifications(
        activeOrganizationId
      );
      setAllItems(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load certifications.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleFormSubmit = async (
    data: CertificationFormData
  ): Promise<boolean> => {
    if (!activeOrganizationId) {
      toast.error("No active organization selected.");
      return false;
    }
    try {
      const payload = {
        ...data,
        obtainment_date: data.obtainment_date?.toISOString(),
      };
      const promise = editingItem?.certification_id
        ? organizationRepository.updateCertification(
            activeOrganizationId,
            editingItem.certification_id,
            payload as UpdateCertificationRequest
          )
        : organizationRepository.createCertification(
            activeOrganizationId,
            payload as CreateCertificationRequest
          );

      await toast.promise(promise, {
        loading: `${editingItem ? "Updating" : "Creating"} certification...`,
        success: `Certification ${
          editingItem ? "updated" : "created"
        } successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const handleOpenFormModal = (item?: CertificationDto) => {
    setEditingItem(item);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: CertificationDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...allItems];
    const idsToDelete = itemsToDelete.map((item) => item.certification_id!);
    setAllItems((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.certification_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteCertification(
          activeOrganizationId,
          item.certification_id!
        )
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} certification(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Certification(s) deleted.";
      },
      error: (err) => {
        setAllItems(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const columns = useMemo<ColumnDef<CertificationDto>[]>(
    () =>
      getCertificationColumns({
        onEditAction: handleOpenFormModal,
        onDeleteAction: (item) => handleDeleteConfirmation([item]),
      }),
    []
  );

  if (!activeOrganizationId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Organization Selected"
        description="Please select an active organization to manage its certifications."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={allItems}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search by name, type..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-certifications-view-mode"
        exportFileName="certifications.csv"
        pageHeader={
          <PageHeader
            title="Certifications"
            description={`Manage awards and certifications for ${activeOrganizationDetails?.long_name}`}
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add New
              </Button>
            }
          />
        }
        filterControls={(table) =>
          derivedTypeOptions.length > 0 ? (
            <DataTableFacetedFilter
              column={table.getColumn("type")}
              title="Type"
              options={derivedTypeOptions}
            />
          ) : null
        }
        renderGridItemAction={(item) => (
          <CertificationCard
            item={item}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Award}
            title="No Certifications Added Yet"
            description="Showcase your organization's qualifications by adding your first certification."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Certification
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Certifications Found"
            description="Your search or filter criteria did not match any certifications."
          />
        }
      />
      <Dialog
        open={isFormModalOpen}
        onOpenChange={(open) => {
          if (!open) setEditingItem(undefined);
          setIsFormModalOpen(open);
        }}
      >
        <DialogContent className="sm:max-w-lg">
          <DialogTitle className="sr-only">
            {editingItem ? "Edit Certification" : "Add New Certification"}
          </DialogTitle>
          <CertificationForm
            mode={editingItem ? "edit" : "create"}
            initialData={editingItem}
            onSubmitAction={handleFormSubmit}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} certification(s)</strong>.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/certifications/certifications-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/certifications/page.tsx

import { Metadata } from "next";
import { CertificationsClientPage } from "./certifications-client";

export const metadata: Metadata = {
  title: "Manage Certifications",
  description: "View, add, and manage your organization's certifications and awards.",
};

export default async function OrgCertificationsPage() {
  return <CertificationsClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/certifications/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/customers/customers-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  CustomerDto,
  CreateCustomerRequest,
  UpdateCustomerRequest,
  AgencyDto,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  Users,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { getCustomerColumns } from "@/components/organization/customers/columns";
import { CustomerCard } from "@/components/organization/customers/customer-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  CustomerForm,
  CustomerFormData,
} from "@/components/organization/customers/customer-form";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

export function CustomersClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } =
    useActiveOrganization();
  const [customers, setCustomers] = useState<CustomerDto[]>([]);
  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<CustomerDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingCustomer, setEditingCustomer] = useState<
    CustomerDto | undefined
  >(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      setCustomers([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      // [CHANGE] Fetch agencies and all customers in parallel
      const [agenciesData, hqCustomersData] = await Promise.all([
        organizationRepository.getAgencies(activeOrganizationId),
        organizationRepository.getOrgCustomers(activeOrganizationId),
      ]);
      setAgencies(agenciesData || []);

      const agencyCustomerPromises = (agenciesData || []).map((agency) =>
        organizationRepository.getAgencyCustomers(
          activeOrganizationId,
          agency.agency_id!
        )
      );
      const allAgencyCustomersNested = await Promise.all(
        agencyCustomerPromises
      );
      const allAgencyCustomers = allAgencyCustomersNested.flat();

      setCustomers([...(hqCustomersData || []), ...allAgencyCustomers]);
    } catch (err: any) {
      setError(err.message || "Could not load customer data.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleOpenFormModal = (customer?: CustomerDto) => {
    setEditingCustomer(customer);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: CustomerDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...customers];
    const idsToDelete = itemsToDelete.map((item) => item.customer_id!);
    setCustomers((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.customer_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) => {
        if (item.agency_id) {
          return organizationRepository.deleteAgencyCustomer(
            activeOrganizationId,
            item.agency_id,
            item.customer_id!
          );
        }
        return organizationRepository.deleteOrgCustomer(
          activeOrganizationId,
          item.customer_id!
        );
      })
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} customer(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Customer(s) deleted.";
      },
      error: (err) => {
        setCustomers(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const handleFormSubmit = async (data: CustomerFormData): Promise<boolean> => {
    if (!activeOrganizationId) {
      toast.error("No active organization.");
      return false;
    }

    const customerPayload: CreateCustomerRequest | UpdateCustomerRequest = {
      first_name: data.first_name,
      last_name: data.last_name,
      short_description: data.short_description,
      long_description: data.long_description,
    };

    try {
      let customerResponse: CustomerDto;
      if (editingCustomer?.customer_id) {
        // --- EDIT LOGIC ---
        const updatePromise = organizationRepository.updateOrgCustomer(
          activeOrganizationId,
          editingCustomer.customer_id,
          customerPayload as UpdateCustomerRequest
        );
        toast.promise(updatePromise, {
          loading: "Updating customer details...",
          success: "Customer updated!",
          error: (err) => err.message,
        });
        customerResponse = await updatePromise;
        // Check if agency assignment changed
        if (data.agency_id !== editingCustomer.agency_id) {
          if (data.agency_id) {
            // Assigning to a new agency
            await toast.promise(
              organizationRepository.affectCustomerToAgency(
                activeOrganizationId,
                data.agency_id,
                { customer_id: editingCustomer.customer_id }
              ),
              {
                loading: `Assigning to agency...`,
                success: "Assigned to new agency!",
                error: (err) => err.message,
              }
            );
          } else {
            // This implies moving back to HQ. The API spec doesn't have an "un-affect" endpoint.
            // Often, affecting to a special "HQ" ID or simply updating the main record would handle this.
            // For now, we assume affecting handles re-assignment and we'll need a way to un-assign.
            toast.info(
              "Moving customer to Headquarters (un-affect logic to be confirmed)."
            );
          }
        }
      } else {
        // --- CREATE LOGIC ---
        customerResponse = await toast
          .promise(
            organizationRepository.createOrgCustomer(
              activeOrganizationId,
              customerPayload as CreateCustomerRequest
            ),
            {
              loading: "Creating customer...",
              success: "Customer created!",
              error: (err) => err.message,
            }
          )
          .unwrap();
        // If an agency was selected during creation, affect the new customer to it
        if (data.agency_id && customerResponse.customer_id) {
          await toast.promise(
            organizationRepository.affectCustomerToAgency(
              activeOrganizationId,
              data.agency_id,
              { customer_id: customerResponse.customer_id }
            ),
            {
              loading: `Assigning to agency...`,
              success: "Assigned to agency!",
              error: (err) => err.message,
            }
          );
        }
      }
      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<CustomerDto>[]>(
    () =>
      getCustomerColumns(
        {
          onEditAction: handleOpenFormModal,
          onDeleteAction: (item) => handleDeleteConfirmation([item]),
        },
        agencies
      ),
    [agencies]
  );

  const agencyFilterOptions: DataTableFilterOption[] = useMemo(
    () => [
      { value: "headquarters", label: "Headquarters" },
      ...agencies.map((a) => ({ value: a.agency_id!, label: a.short_name! })),
    ],
    [agencies]
  );

  if (!activeOrganizationId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Organization Selected"
        description="Please select an active organization to manage customers."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={customers}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search customers..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-customers-view-mode"
        exportFileName="organization_customers.csv"
        pageHeader={
          <PageHeader
            title="Customers"
            description={`Manage all customers for ${
              activeOrganizationDetails?.long_name || "your organization"
            }`}
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Customer
              </Button>
            }
          />
        }
        filterControls={(table) => (
          <DataTableFacetedFilter
            column={table.getColumn("agency_id")}
            title="Agency"
            options={agencyFilterOptions}
          />
        )}
        renderGridItemAction={(customer) => (
          <CustomerCard
            customer={customer}
            agencies={agencies}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Users}
            title="No Customers Yet"
            description="Add your first customer to start managing your client relationships."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Customer
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Customers Found"
            description="Your search did not match any customers."
          />
        }
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">
            {editingCustomer ? "Edit Customer" : "Add New Customer"}
          </DialogTitle>
          <CustomerForm
            mode={editingCustomer ? "edit" : "create"}
            initialData={editingCustomer}
            onSubmitAction={handleFormSubmit}
            agencies={agencies}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} customer(s)</strong>.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/customers/customers-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/customers/page.tsx

import { Metadata } from "next";
import { CustomersClientPage } from "./customers-client";

export const metadata: Metadata = {
  title: "Manage Customers",
  description: "View, add, and manage your organization's customers.",
};

export default async function OrgCustomersPage() {
  return <CustomersClientPage />;
}// END OF FILE: app/(dashboard)/business-actor/org/customers/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/employees/create/page.tsx

"use client";

import { EmployeeForm } from "@/components/organization/employees/employee-form";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { useRouter } from "next/navigation";
import { organizationRepository } from "@/lib/data-repo/organization";
import { EmployeeFormData } from "@/components/organization/employees/employee-form";
import { toast } from "sonner";

export default function CreateEmployeePage() {
  const router = useRouter();
  const { activeOrganizationId, agenciesForCurrentOrg } = useActiveOrganization();

  const handleCreate = async (data: EmployeeFormData): Promise<boolean> => {
    if (!activeOrganizationId) { toast.error("No active organization selected."); return false; }
    try {
      await organizationRepository.createOrgEmployee(activeOrganizationId, data);
      toast.success("Employee created successfully!");
      router.push("/business-actor/org/employees");
      router.refresh();
      return true;
    } catch (error: any) {
      toast.error(error.message || "Failed to create employee.");
      return false;
    }
  };

  return (
    <div className="mx-auto">
      <EmployeeForm
      
        agencies={agenciesForCurrentOrg}
        mode="create"
  
        onSubmitAction={handleCreate}
      />
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/employees/create/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/employees/[employeeId]/edit-employee-client.tsx

"use client";

import React, { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { EmployeeDto } from "@/types/organization";
import { EmployeeForm, EmployeeFormData } from "@/components/organization/employees/employee-form";
import { toast } from "sonner";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { User, Loader2 } from "lucide-react";

interface EditEmployeeClientPageProps {
  employeeId: string;
}

export function EditEmployeeClientPage({ employeeId }: EditEmployeeClientPageProps) {
  const router = useRouter();
  const { activeOrganizationId, agenciesForCurrentOrg } = useActiveOrganization();
  
  const [initialData, setInitialData] = useState<EmployeeDto | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  const fetchData = useCallback(async () => {
    if (!activeOrganizationId || !employeeId) return;
    setIsLoading(true);
    try {
      const data = await organizationRepository.getOrgEmployeeById(activeOrganizationId, employeeId);
      setInitialData(data);
    } catch (error) {
      toast.error("Failed to fetch employee details.");
      setInitialData(null);
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, employeeId]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const handleUpdate = async (data: EmployeeFormData): Promise<boolean> => {
    if (!activeOrganizationId || !initialData?.employee_id) {
      toast.error("Cannot update employee: Missing context or ID.");
      return false;
    }
    try {
      await organizationRepository.updateOrgEmployee(activeOrganizationId, initialData.employee_id, data);
      toast.success("Employee updated successfully!");
      router.push("/business-actor/org/employees");
      router.refresh();
      return true;
    } catch (error: any) {
      toast.error(error.message || "Failed to update employee.");
      return false;
    }
  };

  if (isLoading) {
    return <div className="flex justify-center items-center min-h-[400px]"><Loader2 className="h-8 w-8 animate-spin" /></div>;
  }

  if (!initialData) {
    return <FeedbackCard icon={User} title="Employee Not Found" description="The employee you are trying to edit does not exist." />;
  }

  return (
    <div className="mx-auto">
      <EmployeeForm
        // organizationId={activeOrganizationId!}
        agencies={agenciesForCurrentOrg}
        mode="edit"
        initialData={initialData}
        onSubmitAction={handleUpdate}
      />
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/org/employees/[employeeId]/edit-employee-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/employees/[employeeId]/page.tsx

import { Metadata } from "next";
import { EditEmployeeClientPage } from "./edit-employee-client";

export const metadata: Metadata = {
  title: "Edit Employee",
};

type Props = { params: Promise<{ employeeId: string }> };

export default async function EditOrgEmployeePage({ params }: Props) {
  const { employeeId } = await params;
  return <EditEmployeeClientPage employeeId={employeeId} />;
}
// END OF FILE: app/(dashboard)/business-actor/org/employees/[employeeId]/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/employees/employees-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  EmployeeDto,
  AgencyDto,
  EmployeeRoleValues,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  Users,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { getEmployeeColumns } from "@/components/organization/employees/columns";
import { EmployeeCard } from "@/components/organization/employees/employee-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

export function OrgEmployeesClientPage() {
  const router = useRouter();
  const { activeOrganizationId, activeOrganizationDetails } =
    useActiveOrganization();
  const [employees, setEmployees] = useState<EmployeeDto[]>([]);
  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<EmployeeDto[]>([]);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      setEmployees([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const [employeesData, agenciesData] = await Promise.all([
        organizationRepository.getOrgEmployees(activeOrganizationId),
        organizationRepository.getAgencies(activeOrganizationId, true),
      ]);
      setEmployees(employeesData || []);
      setAgencies(agenciesData || []);
    } catch (err: any) {
      setError(err.message || "Could not load employee data.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleEditAction = (employeeId: string) =>
    router.push(`/business-actor/org/employees/${employeeId}`);
  const handleDeleteConfirmation = (items: EmployeeDto[]) => {
    if (items.length > 0) {
      setItemsToDelete(items);
      setIsDeleteDialogOpen(true);
    }
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...employees];
    const idsToDelete = itemsToDelete.map((item) => item.employee_id!);
    setEmployees((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.employee_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteOrgEmployee(
          activeOrganizationId,
          item.employee_id!
        )
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} employee(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Employee(s) deleted.";
      },
      error: (err) => {
        setEmployees(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const roleOptions: DataTableFilterOption[] = useMemo(
    () =>
      EmployeeRoleValues.map((role) => ({
        label: role.replace(/_/g, " "),
        value: role,
      })),
    []
  );
  const departmentOptions: DataTableFilterOption[] = useMemo(() => {
    const departments = new Set(
      employees.map((item) => item.department).filter(Boolean)
    );
    return Array.from(departments).map((dept) => ({
      label: dept!,
      value: dept!,
    }));
  }, [employees]);
  const agencyOptions: DataTableFilterOption[] = useMemo(() => {
    const options = agencies.map((agency) => ({
      label: agency.long_name!,
      value: agency.agency_id!,
    }));
    options.unshift({ label: "Headquarters", value: "headquarters" });
    return options;
  }, [agencies]);

  const columns = useMemo<ColumnDef<EmployeeDto>[]>(
    () =>
      getEmployeeColumns(
        {
          onEditAction: handleEditAction,
          onDeleteAction: (item) => handleDeleteConfirmation([item]),
        },
        agencies
      ),
    [agencies,]
  );

  if (!activeOrganizationId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Organization Selected"
        description="Please select an active organization to manage its employees."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={employees}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search employees..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-employees-view-mode"
        exportFileName="organization_employees.csv"
        pageHeader={
          <PageHeader
            title="Employee Roster"
            description={`Manage all employees for ${activeOrganizationDetails?.long_name}`}
            action={
              <Button
                onClick={() =>
                  router.push("/business-actor/org/employees/create")
                }
              >
                <PlusCircle className="mr-2 h-4 w-4" /> Add Employee
              </Button>
            }
          />
        }
        filterControls={(table) => (
          <>
            <DataTableFacetedFilter
              column={table.getColumn("employee_role")}
              title="Role"
              options={roleOptions}
            />
            <DataTableFacetedFilter
              column={table.getColumn("department")}
              title="Department"
              options={departmentOptions}
            />
            <DataTableFacetedFilter
              column={table.getColumn("agency_id")}
              title="Agency"
              options={agencyOptions}
            />
          </>
        )}
        renderGridItemAction={(employee) => {
          const agency = agencies.find(
            (a) => a.agency_id === employee.agency_id
          );
          return (
            <EmployeeCard
              employee={employee}
              agency={agency}
              onEditAction={handleEditAction}
              onDeleteAction={(item) => handleDeleteConfirmation([item])}
            />
          );
        }}
        emptyState={
          <FeedbackCard
            icon={Users}
            title="No Employees Yet"
            description="Add your first employee to build your team."
            actionButton={
              <Button
                onClick={() =>
                  router.push("/business-actor/org/employees/create")
                }
              >
                <PlusCircle className="mr-2 h-4 w-4" /> Add Employee
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Employees Found"
            description="Your search did not match any employees."
          />
        }
      />
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} employee(s)</strong>.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/employees/employees-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/employees/page.tsx

import { Metadata } from "next";
import { OrgEmployeesClientPage } from "./employees-client";

export const metadata: Metadata = {
  title: "Manage Employees",
  description: "View, add, and manage all employees across your organization.",
};

export default async function OrgEmployeesPage() {
  return <OrgEmployeesClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/employees/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/layout.tsx

"use client";

import React from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Skeleton } from "@/components/ui/skeleton";

export default function OrganizationLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { activeOrganizationId, isLoadingOrgDetails } = useActiveOrganization();

  if (isLoadingOrgDetails) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div className="space-y-2">
            <Skeleton className="h-8 w-64" />
            <Skeleton className="h-4 w-80" />
          </div>
          <Skeleton className="h-10 w-32" />
        </div>
        <Skeleton className="h-[400px] w-full" />
      </div>
    );
  }

  // If loading is finished but there's still no active org, show an empty state (or let child pages handle it).
  if (!activeOrganizationId) {
    // This can be a dedicated "Please select an organization" component.
    // For now, we let the child pages render their specific empty states.
    return <div className="w-full">{children}</div>;
  }

  return <div className="w-full">{children}</div>;
}
// END OF FILE: app/(dashboard)/business-actor/org/layout.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/practical-info/page.tsx

import { Metadata } from "next";
import { PracticalInfoClientPage } from "./practical-info-client";

export const metadata: Metadata = {
  title: "Manage Practical Information",
  description: "View, add, and manage operational details for your organization.",
};

export default async function OrgPracticalInfoPage() {
  return <PracticalInfoClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/practical-info/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/practical-info/practical-info-client.tsx

"use client";

import React, { useState, useEffect, useCallback, useMemo } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { PracticalInformationDto, CreatePracticalInformationRequest, UpdatePracticalInformationRequest } from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { PracticalInfoForm, PracticalInfoFormData } from "@/components/organization/practical-info/practical-info-form";
import { Button } from "@/components/ui/button";
import { PlusCircle, Info, Search as SearchIcon, Building } from "lucide-react";
import { toast } from "sonner";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { ColumnDef } from "@tanstack/react-table";
import { getPracticalInfoColumns } from "@/components/organization/practical-info/columns";
import { PracticalInfoCard } from "@/components/organization/practical-info/practical-info-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

const getPracticalInfoTypeOptions = (items: PracticalInformationDto[]): DataTableFilterOption[] => {
  const allTypes = items.map((item) => item.type).filter((type): type is string => typeof type === 'string');
  return [...new Set(allTypes)].map((type) => ({ label: type, value: type })).sort((a, b) => a.label.localeCompare(b.label));
};

export function PracticalInfoClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } = useActiveOrganization();
  const [allItems, setAllItems] = useState<PracticalInformationDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [editingItem, setEditingItem] = useState<PracticalInformationDto | undefined>(undefined);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<PracticalInformationDto[]>([]);

  const derivedTypeOptions = useMemo(() => getPracticalInfoTypeOptions(allItems), [allItems]);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) { setIsLoading(false); setAllItems([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getPracticalInformation(activeOrganizationId);
      setAllItems(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load practical information.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleFormSubmit = async (data: PracticalInfoFormData): Promise<boolean> => {
    if (!activeOrganizationId) { toast.error("No active organization selected."); return false; }
    try {
      const promise = editingItem?.information_id
        ? organizationRepository.updatePracticalInformation(activeOrganizationId, editingItem.information_id, data as UpdatePracticalInformationRequest)
        : organizationRepository.createPracticalInformation(activeOrganizationId, data as CreatePracticalInformationRequest);
      
      await toast.promise(promise, {
        loading: `${editingItem ? 'Updating' : 'Adding'} information...`,
        success: `Information ${editingItem ? 'updated' : 'added'} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const handleOpenFormModal = (item?: PracticalInformationDto) => {
    setEditingItem(item);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: PracticalInformationDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...allItems];
    const idsToDelete = itemsToDelete.map(item => item.information_id!);
    setAllItems(prev => prev.filter(item => !idsToDelete.includes(item.information_id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map((item) => organizationRepository.deletePracticalInformation(activeOrganizationId, item.information_id!)));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} item(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Item(s) deleted."; },
      error: (err) => { setAllItems(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const columns = useMemo<ColumnDef<PracticalInformationDto>[]>(() => getPracticalInfoColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item]) }), []);

  if (!activeOrganizationId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Organization Selected" description="Please select an active organization to manage its practical info." />;
  }

  return (
    <>
      <ResourceDataTable
        data={allItems}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search by type, value..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-practical-info-view-mode"
        exportFileName="practical_info.csv"
        pageHeader={<PageHeader title="Practical Information" description={`Manage operational details for ${activeOrganizationDetails?.long_name}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add New</Button>} />}
        filterControls={(table) => derivedTypeOptions.length > 0 ? <DataTableFacetedFilter column={table.getColumn("type")} title="Type" options={derivedTypeOptions} /> : null}
        renderGridItemAction={(item) => <PracticalInfoCard item={item} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={Info} title="No Practical Information Added" description="Add useful details for your team or customers, like opening hours or contact info." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Information</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Information Found" description="Your search or filter criteria did not match any items." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={(open) => { if (!open) setEditingItem(undefined); setIsFormModalOpen(open); }}>
        <DialogContent className="sm:max-w-lg">
          <DialogTitle className="sr-only">{editingItem ? "Edit Information" : "Add New Information"}</DialogTitle>
          <PracticalInfoForm mode={editingItem ? "edit" : "create"} initialData={editingItem} onSubmitAction={handleFormSubmit} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} item(s)</strong>.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/practical-info/practical-info-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/products/page.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Package } from "lucide-react";

export default function OrganizationProductsPage() {
  return (
    <div className="space-y-6">
        <Card>
            <CardHeader>
                <CardTitle>Product Management</CardTitle>
            </CardHeader>
            <CardContent>
                <Alert>
                    <Package className="h-4 w-4" />
                    <AlertTitle>Under Construction</AlertTitle>
                    <AlertDescription>
                        This page will be used to create, view, and manage all products (resources) owned by the organization. Coming soon.
                    </AlertDescription>
                </Alert>
            </CardContent>
        </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/org/products/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/profile/page.tsx

import { Metadata, ResolvingMetadata } from "next";
import { OrganizationProfileClient } from "./profile-client";

type Props = {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
};

export async function generateMetadata(
  { searchParams }: Props,
  parent: ResolvingMetadata
): Promise<Metadata> {
  const resolvedSearchParams = await searchParams;
  const previousImages = (await parent).openGraph?.images || [];

  return {
    title: "Organization Settings",
    description: "Manage your organization's profile, contacts, and addresses.",
    openGraph: {
      title: "Manage Your Organization",
      images: [...previousImages],
    },
  };
}

export default async function OrganizationProfilePage({ searchParams }: Props) {
  const resolvedSearchParams = await searchParams;
  const tab =
    typeof resolvedSearchParams.tab === "string"
      ? resolvedSearchParams.tab
      : "edit_profile";

  return <OrganizationProfileClient activeTab={tab} />;
}
// END OF FILE: app/(dashboard)/business-actor/org/profile/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/profile/profile-client.tsx

"use client";

import React, { useEffect, useState, useCallback } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { useSession } from "next-auth/react";
import { organizationRepository } from "@/lib/data-repo/organization";
import { OrganizationForm } from "@/components/organization/organization-form";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { ContactList } from "@/components/organization/contact-list";
import { AddressList } from "@/components/organization/address-list";
import { Skeleton } from "@/components/ui/skeleton";
import { AddressDto, OrganizationDto } from "@/types/organization";
import { ProfileNav } from "@/components/organization/profile-nav";
import { toast } from "sonner";

interface OrganizationProfileClientProps {
  activeTab: string;
}

export function OrganizationProfileClient({
  activeTab,
}: OrganizationProfileClientProps) {
  const {
    activeOrganizationId,
    activeOrganizationDetails,
    isLoadingOrgDetails,
    fetchUserOrganizationsList,
  } = useActiveOrganization();
  const { data: session } = useSession();

  const [defaultAddress, setDefaultAddress] = useState<AddressDto | null>(null);
  const [isLoadingAddress, setIsLoadingAddress] = useState(true);

  const fetchDefaultAddress = useCallback(async () => {
    if (activeOrganizationId) {
      setIsLoadingAddress(true);
      try {
        const addresses = await organizationRepository.getAddresses(
          "ORGANIZATION",
          activeOrganizationId
        );
        const defaultAddr =
          addresses.find((addr) => addr.is_default) ||
          (addresses.length > 0 ? addresses[0] : null);
        setDefaultAddress(defaultAddr);
      } catch (error) {
        toast.error("Could not load organization's default address.");
      } finally {
        setIsLoadingAddress(false);
      }
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    fetchDefaultAddress();
  }, [fetchDefaultAddress]);

  const handleUpdateSuccess = async (updatedOrg: OrganizationDto) => {
    toast.success(`Organization "${updatedOrg.short_name}" updated.`);
    if (session?.user.businessActorId) {
      await fetchUserOrganizationsList();
    }
  };

  const renderContent = () => {
    if (!activeOrganizationDetails) return null;

    switch (activeTab) {
      case "contacts":
        return (
          <Card>
            <CardHeader>
              <CardTitle>Manage Contacts</CardTitle>
              <CardDescription>
                Add, edit, or remove contact persons for your organization.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ContactList
                organizationId={activeOrganizationDetails.organization_id!}
                contactableType="ORGANIZATION"
              />
            </CardContent>
          </Card>
        );
      case "addresses":
        return (
          <Card>
            <CardHeader>
              <CardTitle>Manage Addresses</CardTitle>
              <CardDescription>
                Manage the physical locations and addresses for your
                organization.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <AddressList
                organizationId={activeOrganizationDetails.organization_id!}
                addressableType="ORGANIZATION"
              />
            </CardContent>
          </Card>
        );
      case "edit_profile":
      default:
        return (
          <OrganizationForm
            mode="edit"
            initialData={activeOrganizationDetails}
            defaultAddress={defaultAddress}
            onSuccessAction={handleUpdateSuccess}
          />
        );
    }
  };

  if (isLoadingOrgDetails || isLoadingAddress) {
    return (
      <div className="space-y-8">
        <div>
          <Skeleton className="h-8 w-1/3 mb-2" />
          <Skeleton className="h-4 w-1/2" />
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-6 gap-8 items-start">
          <main className="lg:col-span-5 order-2 lg:order-1">
            <Skeleton className="h-[600px] w-full" />
          </main>
          <aside className="lg:col-span-1 sticky top-20 order-1 lg:order-2 space-y-1">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
          </aside>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-2xl font-bold tracking-tight">
          Organization Settings
        </h1>
        <p className="text-muted-foreground">
          Manage your organization's profile, addresses, and contacts.
        </p>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-6 gap-8 items-start">
        <main className="lg:col-span-5 order-2 lg:order-1">
          {renderContent()}
        </main>
        <aside className="lg:col-span-1 sticky top-20 order-1 lg:order-2">
          <ProfileNav activeTab={activeTab} />
        </aside>
      </div>
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/profile/profile-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/proposed-activities/page.tsx

import { Metadata } from "next";
import { OrgProposedActivitiesClientPage } from "./proposed-activities-client";

export const metadata: Metadata = {
  title: "Manage Proposed Activities",
  description: "View, add, and manage all proposed activities for your organization.",
};

export default async function OrgProposedActivitiesPage() {
  return <OrgProposedActivitiesClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/proposed-activities/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/proposed-activities/proposed-activities-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { ProposedActivityDto, CreateProposedActivityRequest, UpdateProposedActivityRequest } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Activity, Search as SearchIcon, Building } from "lucide-react";
import { getProposedActivityColumns } from "@/components/organization/proposed-activities/columns";
import { ProposedActivityCard } from "@/components/organization/proposed-activities/proposed-activity-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { ProposedActivityForm, ProposedActivityFormData } from "@/components/organization/proposed-activities/proposed-activity-form";

export function OrgProposedActivitiesClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } = useActiveOrganization();
  const [activities, setActivities] = useState<ProposedActivityDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<ProposedActivityDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<ProposedActivityDto | undefined>(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) { setIsLoading(false); setActivities([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getProposedActivities(activeOrganizationId, { organizationId: activeOrganizationId });
      setActivities(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load proposed activities.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleOpenFormModal = (item?: ProposedActivityDto) => {
    setEditingItem(item);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: ProposedActivityDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...activities];
    const idsToDelete = itemsToDelete.map(item => item.activity_id!);
    setActivities(prev => prev.filter(item => !idsToDelete.includes(item.activity_id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map(item => organizationRepository.deleteProposedActivity(activeOrganizationId, item.activity_id!)));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} item(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Item(s) deleted."; },
      error: (err) => { setActivities(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const handleFormSubmit = async (data: ProposedActivityFormData): Promise<boolean> => {
    if (!activeOrganizationId) { toast.error("No active organization."); return false; }
    try {
      const promise = editingItem?.activity_id
        ? organizationRepository.updateProposedActivity(activeOrganizationId, editingItem.activity_id, data as UpdateProposedActivityRequest)
        : organizationRepository.createProposedActivity(activeOrganizationId, data as CreateProposedActivityRequest);
      
      await toast.promise(promise, {
        loading: `${editingItem ? 'Updating' : 'Creating'} activity...`,
        success: `Activity ${editingItem ? 'updated' : 'created'} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<ProposedActivityDto>[]>(() => getProposedActivityColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item]) }), []);

  if (!activeOrganizationId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Organization Selected" description="Please select an active organization to manage its proposed activities." />;
  }

  return (
    <>
      <ResourceDataTable
        data={activities}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search activities..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-proposed-activities-view-mode"
        exportFileName="proposed_activities.csv"
        pageHeader={<PageHeader title="Proposed Activities" description={`Manage the catalog of services for ${activeOrganizationDetails?.long_name}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Propose Activity</Button>} />}
        renderGridItemAction={(item) => <ProposedActivityCard activity={item} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={Activity} title="No Activities Proposed Yet" description="Define the services and activities your organization offers to customers." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Propose Activity</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Activities Found" description="Your search did not match any proposed activities." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">{editingItem ? "Edit Activity" : "Propose New Activity"}</DialogTitle>
          <ProposedActivityForm mode={editingItem ? "edit" : "create"} initialData={editingItem} onSubmitAction={handleFormSubmit} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} item(s)</strong>.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/proposed-activities/proposed-activities-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/prospects/page.tsx

import { Metadata } from "next";
import { OrgProspectsClientPage } from "./prospects-client";

export const metadata: Metadata = {
  title: "Manage Prospects",
  description: "View, add, and manage all prospects for your organization.",
};

export default async function OrgProspectsPage() {
  return <OrgProspectsClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/prospects/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/prospects/prospects-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { ProspectDto, CreateProspectRequest, UpdateProspectRequest, AgencyDto } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Lightbulb, Search as SearchIcon, Building } from "lucide-react";
import { getProspectColumns } from "@/components/organization/prospects/columns";
import { ProspectCard } from "@/components/organization/prospects/prospect-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { ProspectForm, ProspectFormData } from "@/components/organization/prospects/prospect-form";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

export function OrgProspectsClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } = useActiveOrganization();
  const [prospects, setProspects] = useState<ProspectDto[]>([]);
  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<ProspectDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingProspect, setEditingProspect] = useState<ProspectDto | undefined>(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) { setIsLoading(false); setProspects([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const [agenciesData, hqData] = await Promise.all([
        organizationRepository.getAgencies(activeOrganizationId),
        organizationRepository.getOrgProspects(activeOrganizationId)
      ]);
      setAgencies(agenciesData || []);
      const agencyPromises = (agenciesData || []).map(agency => organizationRepository.getAgencyProspects(activeOrganizationId, agency.agency_id!));
      const agencyResults = await Promise.all(agencyPromises);
      setProspects([...(hqData || []), ...agencyResults.flat()]);
    } catch (err: any) {
      setError(err.message || "Could not load prospect data.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleOpenFormModal = (prospect?: ProspectDto) => {
    setEditingProspect(prospect);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: ProspectDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...prospects];
    const idsToDelete = itemsToDelete.map(item => item.prospect_id!);
    setProspects(prev => prev.filter(item => !idsToDelete.includes(item.prospect_id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map(item => item.agency_id
      ? organizationRepository.deleteAgencyProspect(activeOrganizationId, item.agency_id, item.prospect_id!)
      : organizationRepository.deleteOrgProspect(activeOrganizationId, item.prospect_id!)
    ));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} prospect(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Prospect(s) deleted."; },
      error: (err) => { setProspects(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const handleFormSubmit = async (data: ProspectFormData): Promise<boolean> => {
    if (!activeOrganizationId) { toast.error("No active organization."); return false; }
    const payload: CreateProspectRequest | UpdateProspectRequest = { ...data };
    try {
      let response: ProspectDto;
      if (editingProspect?.prospect_id) {
        response = await toast.promise(organizationRepository.updateOrgProspect(activeOrganizationId, editingProspect.prospect_id, payload as UpdateProspectRequest), { loading: 'Updating prospect...', success: 'Prospect updated!', error: (err) => err.message }).unwrap();
      } else {
        response = await toast.promise(organizationRepository.createOrgProspect(activeOrganizationId, payload as CreateProspectRequest), { loading: 'Creating prospect...', success: 'Prospect created!', error: (err) => err.message }).unwrap();
      }
      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<ProspectDto>[]>(() => getProspectColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item]) }, agencies), [agencies]);
  const agencyFilterOptions: DataTableFilterOption[] = useMemo(() => [{ value: "headquarters", label: "Headquarters" }, ...agencies.map(a => ({ value: a.agency_id!, label: a.short_name! }))], [agencies]);

  if (!activeOrganizationId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Organization Selected" description="Please select an active organization to manage prospects." />;
  }

  return (
    <>
      <ResourceDataTable
        data={prospects}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search prospects..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-prospects-view-mode"
        exportFileName="organization_prospects.csv"
        pageHeader={<PageHeader title="Prospects" description={`Manage all prospects for ${activeOrganizationDetails?.long_name}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Prospect</Button>} />}
        filterControls={(table) => (<DataTableFacetedFilter column={table.getColumn("agency_id")} title="Agency" options={agencyFilterOptions} />)}
        renderGridItemAction={(item) => <ProspectCard prospect={item} agencies={agencies} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={Lightbulb} title="No Prospects Yet" description="Add your first prospect to track potential leads." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Prospect</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Prospects Found" description="Your search did not match any prospects." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">{editingProspect ? "Edit Prospect" : "Add New Prospect"}</DialogTitle>
          <ProspectForm mode={editingProspect ? "edit" : "create"} initialData={editingProspect} onSubmitAction={handleFormSubmit} agencies={agencies} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} prospect(s)</strong>.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/prospects/prospects-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/sales-people/page.tsx

import { Metadata } from "next";
import { OrgSalesPeopleClientPage } from "./sales-people-client";

export const metadata: Metadata = {
  title: "Manage Sales People",
  description: "View, add, and manage all sales people in your organization.",
};

export default async function OrgSalesPeoplePage() {
  return <OrgSalesPeopleClientPage />;
}// END OF FILE: app/(dashboard)/business-actor/org/sales-people/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/sales-people/sales-people-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  SalesPersonDto,
  CreateSalesPersonRequest,
  UpdateSalesPersonRequest,
  AgencyDto,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  UserCheck,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { getSalesPersonColumns } from "@/components/organization/sales-people/columns";
import { SalesPersonCard } from "@/components/organization/sales-people/sales-person-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  SalesPersonForm,
  SalesPersonFormData,
} from "@/components/organization/sales-people/sales-person-form";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

export function OrgSalesPeopleClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } =
    useActiveOrganization();
  const [salesPeople, setSalesPeople] = useState<SalesPersonDto[]>([]);
  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<SalesPersonDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingSalesPerson, setEditingSalesPerson] = useState<
    SalesPersonDto | undefined
  >(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      setSalesPeople([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const [agenciesData, hqData] = await Promise.all([
        organizationRepository.getAgencies(activeOrganizationId),
        organizationRepository.getOrgSalesPersons(activeOrganizationId),
      ]);
      setAgencies(agenciesData || []);
      const agencyPromises = (agenciesData || []).map((agency) =>
        organizationRepository.getAgencySalesPersons(
          activeOrganizationId,
          agency.agency_id!
        )
      );
      const agencyResults = await Promise.all(agencyPromises);
      setSalesPeople([...(hqData || []), ...agencyResults.flat()]);
    } catch (err: any) {
      setError(err.message || "Could not load sales people.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleOpenFormModal = (salesPerson?: SalesPersonDto) => {
    setEditingSalesPerson(salesPerson);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: SalesPersonDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...salesPeople];
    const idsToDelete = itemsToDelete.map((item) => item.sales_person_id!);
    setSalesPeople((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.sales_person_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        item.agency_id
          ? organizationRepository.deleteAgencySalesPerson(
              activeOrganizationId,
              item.agency_id,
              item.sales_person_id!
            )
          : organizationRepository.deleteOrgSalesPerson(
              activeOrganizationId,
              item.sales_person_id!
            )
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} sales person(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Sales person(s) deleted.";
      },
      error: (err) => {
        setSalesPeople(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const handleFormSubmit = async (
    data: SalesPersonFormData
  ): Promise<boolean> => {
    if (!activeOrganizationId) {
      toast.error("No active organization.");
      return false;
    }
    const payload: CreateSalesPersonRequest | UpdateSalesPersonRequest = {
      ...data,
    };
    try {
      let response: SalesPersonDto;
      if (editingSalesPerson?.sales_person_id) {
        response = await toast.promise(
          organizationRepository.updateOrgSalesPerson(
            activeOrganizationId,
            editingSalesPerson.sales_person_id,
            payload as UpdateSalesPersonRequest
          ),
          {
            loading: "Updating...",
            success: "Saved!",
            error: (err) => err.message,
          }
        ).unwrap();
      } else {
        response = await toast.promise(
          organizationRepository.createOrgSalesPerson(
            activeOrganizationId,
            payload as CreateSalesPersonRequest
          ),
          {
            loading: "Creating...",
            success: "Created!",
            error: (err) => err.message,
          }
        ).unwrap();
      }
      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<SalesPersonDto>[]>(
    () =>
      getSalesPersonColumns(
        {
          onEditAction: handleOpenFormModal,
          onDeleteAction: (item) => handleDeleteConfirmation([item]),
        },
        agencies
      ),
    [agencies]
  );
  const agencyFilterOptions: DataTableFilterOption[] = useMemo(
    () => [
      { value: "headquarters", label: "Headquarters" },
      ...agencies.map((a) => ({ value: a.agency_id!, label: a.short_name! })),
    ],
    [agencies]
  );

  if (!activeOrganizationId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Organization Selected"
        description="Please select an active organization to manage sales people."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={salesPeople}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search sales people..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-sales-people-view-mode"
        exportFileName="organization_sales_people.csv"
        pageHeader={
          <PageHeader
            title="Sales People"
            description={`Manage all sales people for ${activeOrganizationDetails?.long_name}`}
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Sales Person
              </Button>
            }
          />
        }
        filterControls={(table) => (
          <DataTableFacetedFilter
            column={table.getColumn("agency_id")}
            title="Agency"
            options={agencyFilterOptions}
          />
        )}
        renderGridItemAction={(item) => (
          <SalesPersonCard
            salesPerson={item}
            agencies={agencies}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={UserCheck}
            title="No Sales People Yet"
            description="Add your first sales person to build your sales team."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Sales Person
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Sales People Found"
            description="Your search did not match any sales people."
          />
        }
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">
            {editingSalesPerson ? "Edit Sales Person" : "Add New Sales Person"}
          </DialogTitle>
          <SalesPersonForm
            mode={editingSalesPerson ? "edit" : "create"}
            initialData={editingSalesPerson}
            onSubmitAction={handleFormSubmit}
            agencies={agencies}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} sales person(s)</strong>.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/sales-people/sales-people-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/services/page.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Combine } from "lucide-react";

export default function OrganizationServicesPage() {
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Service Management</CardTitle>
        </CardHeader>
        <CardContent>
          <Alert>
            <Combine className="h-4 w-4" />
            <AlertTitle>Under Construction</AlertTitle>
            <AlertDescription>
              This page will be used to define and manage the services offered
              by the organization, often utilizing its available products and
              resources. Coming soon.
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/services/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/suppliers/page.tsx

import { Metadata } from "next";
import { OrgSuppliersClientPage } from "./suppliers-client";

export const metadata: Metadata = {
  title: "Manage Suppliers",
  description: "View, add, and manage all of your organization's suppliers.",
};

export default async function OrgSuppliersPage() {
  return <OrgSuppliersClientPage />;
}// END OF FILE: app/(dashboard)/business-actor/org/suppliers/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/suppliers/suppliers-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { ProviderDto, CreateProviderRequest, UpdateProviderRequest, AgencyDto } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Truck, Search as SearchIcon, Building } from "lucide-react";
import { getSupplierColumns } from "@/components/organization/suppliers/columns";
import { SupplierCard } from "@/components/organization/suppliers/supplier-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { SupplierForm, SupplierFormData } from "@/components/organization/suppliers/supplier-form";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

export function OrgSuppliersClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } = useActiveOrganization();
  const [suppliers, setSuppliers] = useState<ProviderDto[]>([]);
  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<ProviderDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingSupplier, setEditingSupplier] = useState<ProviderDto | undefined>(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) { setIsLoading(false); setSuppliers([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const [agenciesData, hqSuppliersData] = await Promise.all([
        organizationRepository.getAgencies(activeOrganizationId),
        organizationRepository.getOrgSuppliers(activeOrganizationId)
      ]);
      setAgencies(agenciesData || []);
      const agencySupplierPromises = (agenciesData || []).map(agency => organizationRepository.getAgencySuppliers(activeOrganizationId, agency.agency_id!));
      const allAgencySuppliersNested = await Promise.all(agencySupplierPromises);
      setSuppliers([...(hqSuppliersData || []), ...allAgencySuppliersNested.flat()]);
    } catch (err: any) {
      setError(err.message || "Could not load supplier data.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleOpenFormModal = (supplier?: ProviderDto) => {
    setEditingSupplier(supplier);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: ProviderDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...suppliers];
    const idsToDelete = itemsToDelete.map(item => item.provider_id!);
    setSuppliers(prev => prev.filter(item => !idsToDelete.includes(item.provider_id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map(item => item.agency_id
      ? organizationRepository.deleteAgencySupplier(activeOrganizationId, item.agency_id, item.provider_id!)
      : organizationRepository.deleteOrgSupplier(activeOrganizationId, item.provider_id!)
    ));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} supplier(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Supplier(s) deleted."; },
      error: (err) => { setSuppliers(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const handleFormSubmit = async (data: SupplierFormData): Promise<boolean> => {
    if (!activeOrganizationId) { toast.error("No active organization."); return false; }
    const payload: CreateProviderRequest | UpdateProviderRequest = { ...data };
    try {
      let response: ProviderDto;
      if (editingSupplier?.provider_id) {
        response = await toast.promise(organizationRepository.updateOrgSupplier(activeOrganizationId, editingSupplier.provider_id, payload as UpdateProviderRequest), { loading: 'Updating supplier...', success: 'Supplier updated!', error: (err) => err.message }).unwrap();
        if (data.agency_id !== editingSupplier.agency_id && data.agency_id) {
          await toast.promise(organizationRepository.affectSupplierToAgency(activeOrganizationId, data.agency_id, { provider_id: editingSupplier.provider_id }), { loading: 'Assigning to agency...', success: 'Assigned to new agency!', error: (err) => err.message });
        }
      } else {
        response = await toast.promise(organizationRepository.createOrgSupplier(activeOrganizationId, payload as CreateProviderRequest), { loading: 'Creating supplier...', success: 'Supplier created!', error: (err) => err.message }).unwrap();
        if (data.agency_id && response.provider_id) {
          await toast.promise(organizationRepository.affectSupplierToAgency(activeOrganizationId, data.agency_id, { provider_id: response.provider_id }), { loading: 'Assigning to agency...', success: 'Assigned to agency!', error: (err) => err.message });
        }
      }
      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<ProviderDto>[]>(() => getSupplierColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item]) }, agencies), [agencies]);
  const agencyFilterOptions: DataTableFilterOption[] = useMemo(() => [{ value: "headquarters", label: "Headquarters" }, ...agencies.map(a => ({ value: a.agency_id!, label: a.short_name! }))], [agencies]);

  if (!activeOrganizationId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Organization Selected" description="Please select an active organization to manage suppliers." />;
  }

  return (
    <>
      <ResourceDataTable
        data={suppliers}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search suppliers..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-suppliers-view-mode"
        exportFileName="organization_suppliers.csv"
        pageHeader={<PageHeader title="Suppliers" description={`Manage all suppliers for ${activeOrganizationDetails?.long_name}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Supplier</Button>} />}
        filterControls={(table) => (<DataTableFacetedFilter column={table.getColumn("agency_id")} title="Agency" options={agencyFilterOptions} />)}
        renderGridItemAction={(supplier) => <SupplierCard supplier={supplier} agencies={agencies} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={Truck} title="No Suppliers Yet" description="Add your first supplier to manage your supply chain." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Supplier</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Suppliers Found" description="Your search did not match any suppliers." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">{editingSupplier ? "Edit Supplier" : "Add New Supplier"}</DialogTitle>
          <SupplierForm mode={editingSupplier ? "edit" : "create"} initialData={editingSupplier} onSubmitAction={handleFormSubmit} agencies={agencies} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} supplier(s)</strong>.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}// END OF FILE: app/(dashboard)/business-actor/org/suppliers/suppliers-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/third-parties/page.tsx

import { Metadata } from "next";
import { OrgThirdPartiesClientPage } from "./third-parties-client";

export const metadata: Metadata = {
  title: "Manage Third-Parties",
  description: "View, add, and manage all third-party partners for your organization.",
};

export default async function OrgThirdPartiesPage() {
  return <OrgThirdPartiesClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/third-parties/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/third-parties/third-parties-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { ThirdPartyDto, ThirdPartyTypeValues } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Briefcase, Search as SearchIcon, Building } from "lucide-react";
import { getThirdPartyColumns } from "@/components/organization/third-parties/columns";
import { ThirdPartyCard } from "@/components/organization/third-parties/third-party-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { ThirdPartyForm, ThirdPartyFormData } from "@/components/organization/third-parties/third-party-form";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

const statusOptions: DataTableFilterOption[] = [
  { value: "true", label: "Active" },
  { value: "false", label: "Inactive" },
];

const typeOptions: DataTableFilterOption[] = ThirdPartyTypeValues.map(t => ({ value: t, label: t }));

export function OrgThirdPartiesClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } = useActiveOrganization();
  const [thirdParties, setThirdParties] = useState<ThirdPartyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<ThirdPartyDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<ThirdPartyDto | undefined>(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) { setIsLoading(false); setThirdParties([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getThirdParties(activeOrganizationId, {});
      setThirdParties(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load third-party data.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleOpenFormModal = (item?: ThirdPartyDto) => {
    setEditingItem(item);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: ThirdPartyDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...thirdParties];
    const idsToDelete = itemsToDelete.map(item => item.id!);
    setThirdParties(prev => prev.filter(item => !idsToDelete.includes(item.id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map(item => organizationRepository.deleteThirdParty(activeOrganizationId, item.id!)));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} item(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Item(s) deleted."; },
      error: (err) => { setThirdParties(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const handleFormSubmit = async (data: ThirdPartyFormData): Promise<boolean> => {
    if (!activeOrganizationId) { toast.error("No active organization."); return false; }
    try {
      const promise = editingItem?.id
        ? organizationRepository.updateThirdParty(activeOrganizationId, editingItem.id, data)
        : organizationRepository.createThirdParty(activeOrganizationId, data.type, data);
      
      await toast.promise(promise, {
        loading: `${editingItem ? 'Updating' : 'Creating'} third-party...`,
        success: `Third-party ${editingItem ? 'updated' : 'created'} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<ThirdPartyDto>[]>(() => getThirdPartyColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item]) }), []);

  if (!activeOrganizationId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Organization Selected" description="Please select an active organization to manage third-parties." />;
  }

  return (
    <>
      <ResourceDataTable
        data={thirdParties}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search by name..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-third-parties-view-mode"
        exportFileName="organization_third_parties.csv"
        pageHeader={<PageHeader title="Third-Parties" description={`Manage external partners for ${activeOrganizationDetails?.long_name}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Third-Party</Button>} />}
        filterControls={(table) => (
          <>
            <DataTableFacetedFilter column={table.getColumn("is_active")} title="Status" options={statusOptions} />
            <DataTableFacetedFilter column={table.getColumn("type")} title="Type" options={typeOptions} />
          </>
        )}
        renderGridItemAction={(item) => <ThirdPartyCard thirdParty={item} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={Briefcase} title="No Third-Parties Yet" description="Add your first external partner, supplier, or other entity." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Third-Party</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Third-Parties Found" description="Your search did not match any partners." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">{editingItem ? "Edit Third-Party" : "Add New Third-Party"}</DialogTitle>
          <ThirdPartyForm mode={editingItem ? "edit" : "create"} initialData={editingItem} onSubmitAction={handleFormSubmit} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} item(s)</strong>.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/third-parties/third-parties-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/webhooks/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

export default function BusinessActorWebhooksPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Webhooks & Alerts</h1>
      <Tabs defaultValue="manage" className="space-y-4">
        <TabsList>
          <TabsTrigger value="manage">Manage Webhooks</TabsTrigger>
          <TabsTrigger value="templates">Alert Templates</TabsTrigger>
          <TabsTrigger value="logs">Logs</TabsTrigger>
        </TabsList>
        <TabsContent value="manage">
          <Card>
            <CardHeader><CardTitle>Configure Webhooks</CardTitle></CardHeader>
            <CardContent>
              <p>Set up webhooks to receive notifications for specific events.</p>
              {/* TODO: Implement webhook creation/management form and list */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="templates">
          <Card>
            <CardHeader><CardTitle>Notification Templates</CardTitle></CardHeader>
            <CardContent>
              <p>Customize the templates used for webhook alerts.</p>
              {/* TODO: Implement template editor/manager */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="logs">
          <Card>
            <CardHeader><CardTitle>Webhook Delivery Logs</CardTitle></CardHeader>
            <CardContent>
              <p>View the history and status of webhook deliveries.</p>
              {/* TODO: Implement webhook log viewer */}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/webhooks/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/chat/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function CustomerChatPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Chat & Support</h1>
      <Card>
        <CardHeader>
          <CardTitle>Get Help</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Chat with support or use the chatbot for assistance.</p>
          {/* TODO: Implement Customer Chat component */}
          <div className="mt-4 h-96 border rounded-md flex items-center justify-center text-muted-foreground">
             Customer Chat Interface Placeholder
           </div>
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/chat/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/dashboard/page.tsx

"use client";

import React from "react";
import { useSession } from "next-auth/react";
import Link from "next/link";
import { useSettings } from "@/contexts/settings-context";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import {
  Building,
  Gift,
  HandCoins,
  History,
  Megaphone,
  Star,
  ArrowRight,
  Briefcase,
  Loader2,
} from "lucide-react";

export default function UserDashboardPage() {
  const { data: session, status } = useSession();
  const { settings } = useSettings();

  if (status === "loading") {
    return (
      <div className="flex items-center justify-center min-h-[80vh]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <p className="ml-4 text-muted-foreground">Loading Dashboard...</p>
      </div>
    );
  }

  const isBusinessActor = !!session?.user.businessActorId;
  const upcomingReservations = 0;
  const bonusPoints = 1234;
  const recentFavorites = 2;

  return (
    <div className="space-y-8">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">
            Welcome back, {settings.fullName || "User"}!
          </h1>
          <p className="text-muted-foreground">
            Here's a quick overview of your personal account.
          </p>
        </div>
        {isBusinessActor ? (
          <Button size="lg" asChild>
            <Link href="/business-actor/organizations">
              Enter Business Workspace <ArrowRight className="ml-2 h-5 w-5" />
            </Link>
          </Button>
        ) : (
          <Button
            size="lg"
            asChild
            className="animate-pulse bg-gradient-to-r from-primary to-primary/80 hover:from-primary/80 hover:to-primary/70 text-primary-foreground shadow-lg hover:shadow-primary/40 transition-shadow duration-300"
          >
            <Link href="/business-actor/organization/create">
              Create an Organization <Building className="ml-2 h-5 w-5" />
            </Link>
          </Button>
        )}
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
        <Card className="hover:shadow-md transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              My Bonus Points
            </CardTitle>
            <HandCoins className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {bonusPoints.toLocaleString()} Pts
            </div>
            <p className="text-xs text-muted-foreground">
              Value: ~${(bonusPoints * 0.01).toFixed(2)}
            </p>
          </CardContent>
          <CardFooter className="pt-0">
            <Button variant="link" size="sm" className="p-0 h-auto" asChild>
              <Link href="/bonus">View Details</Link>
            </Button>
          </CardFooter>
        </Card>

        <Card className="hover:shadow-md transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Upcoming Reservations
            </CardTitle>
            <History className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{upcomingReservations}</div>
            <p className="text-xs text-muted-foreground">Check your schedule</p>
          </CardContent>
          <CardFooter className="pt-0">
            <Button variant="link" size="sm" className="p-0 h-auto" asChild>
              <Link href="/services?tab=transactions">View Transactions</Link>
            </Button>
          </CardFooter>
        </Card>

        <Card className="hover:shadow-md transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">My Favorites</CardTitle>
            <Star className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{recentFavorites}</div>
            <p className="text-xs text-muted-foreground">
              Recently saved items
            </p>
          </CardContent>
          <CardFooter className="pt-0">
            <Button variant="link" size="sm" className="p-0 h-auto" asChild>
              <Link href="/favorites">Manage Favorites</Link>
            </Button>
          </CardFooter>
        </Card>

        <Card className="hover:shadow-md transition-shadow bg-secondary/30 dark:bg-secondary/20 border-secondary">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Invite Friends
            </CardTitle>
            <Gift className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-lg font-semibold">Earn Rewards!</div>
            <p className="text-xs text-muted-foreground">
              Share your link & get bonuses.
            </p>
          </CardContent>
          <CardFooter className="pt-0">
            <Button variant="link" size="sm" className="p-0 h-auto" asChild>
              <Link href="/invite">Get Invite Link</Link>
            </Button>
          </CardFooter>
        </Card>
      </div>

      <div className="grid gap-6 lg:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Megaphone className="h-5 w-5" /> Latest Announcements
            </CardTitle>
            <CardDescription>
              Updates and offers from businesses you follow.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <p className="text-sm text-muted-foreground p-4 border rounded-md text-center italic">
                No recent announcements.
              </p>
            </div>
            <Button variant="outline" size="sm" className="mt-4" asChild>
              <Link href="/services?tab=announcements">
                View All Announcements
              </Link>
            </Button>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <History className="h-5 w-5" /> Recent Activity
            </CardTitle>
            <CardDescription>
              Your latest reservations or purchases.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <p className="text-sm text-muted-foreground p-4 border rounded-md text-center italic">
                No recent transactions.
              </p>
            </div>
            <Button variant="outline" size="sm" className="mt-4" asChild>
              <Link href="/services?tab=transactions">
                View All Transactions
              </Link>
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
// END OF FILE: app/(dashboard)/dashboard/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/favorites/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function CustomerFavoritesPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">My Favorites</h1>
      <Card>
        <CardHeader>
          <CardTitle>Saved Items/Services</CardTitle>
        </CardHeader>
        <CardContent>
          <p>View and manage your favorited items or services.</p>
          {/* TODO: Implement Favorites list, organization (folders), sharing */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/favorites/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/help/page.tsx

"use client";

import React, { useState, useMemo } from "react";
import Link from "next/link";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import {
  Search,
  LifeBuoy,
  BookOpen,
  MessageSquare,
  Mail,
  Ticket,
} from "lucide-react";
import { toast } from "sonner";

// [UPDATED] FAQ data reflecting the new user flow
const allFaqData = [
  {
    category: "Getting Started",
    questions: [
      {
        q: "How do I create an account?",
        a: "Navigate to the Sign Up page from the homepage and fill in your details. After logging in for the first time, you'll be guided to your next steps.",
      },
      {
        q: "How do I start managing a business?",
        a: "After logging in, you can create your first organization directly from your main dashboard. This action unlocks the business management workspace.",
      },
      {
        q: "What is the difference between a Customer and a Business Actor?",
        a: "A Customer account is for personal use. A user automatically becomes a Business Actor when they create or are invited to an organization, gaining access to management tools.",
      },
    ],
  },
  {
    category: "Account Management",
    questions: [
      {
        q: "How do I change my password?",
        a: "Navigate to Settings > Security. You can enter your current password and a new password there.",
      },
      {
        q: "How can I update my profile information?",
        a: "All your personal details (name, email, phone, avatar) can be managed in the unified Settings > Account page.",
      },
      {
        q: "How do I change the theme or language?",
        a: "Display preferences, including theme (light/dark/system), language, and currency, can be found in Settings > Display.",
      },
    ],
  },
  {
    category: "For Business Actors",
    questions: [
      {
        q: "How do I create my first organization?",
        a: "From your main user dashboard, click the 'Create an Organization' button. You can also create new ones at any time from the 'Organizations Hub'.",
      },
      {
        q: "How do I switch between organizations or agencies?",
        a: "Use the switcher component at the top of the main sidebar. Clicking it will open a dialog allowing you to select an active organization or agency to manage.",
      },
      {
        q: "What is the difference between an organization and an agency?",
        a: "An organization is the top-level entity for your business. Agencies are sub-divisions or branches within that organization, each with its own staff and resources.",
      },
      {
        q: "How do I add an employee to a specific agency?",
        a: "First, enter the desired organization from the hub. Then, navigate to the 'Agencies' page and enter the specific agency. From the agency dashboard, you can manage its employees.",
      },
    ],
  },
  {
    category: "For Customers",
    questions: [
      {
        q: "How do I check my bonus points?",
        a: "You can view your bonus points balance and transaction history in the 'My Bonus' section of your personal dashboard.",
      },
      {
        q: "How can I find services?",
        a: "The 'Services' link in your dashboard will take you to a marketplace where you can browse and reserve services offered by various organizations on the platform.",
      },
    ],
  },
];

export default function HelpPage() {
  const [searchQuery, setSearchQuery] = useState("");

  const filteredFaqData = useMemo(() => {
    if (!searchQuery.trim()) {
      return allFaqData;
    }
    const lowerCaseQuery = searchQuery.toLowerCase();
    const filtered = allFaqData
      .map((category) => {
        const filteredQuestions = category.questions.filter(
          (item) =>
            item.q.toLowerCase().includes(lowerCaseQuery) ||
            item.a.toLowerCase().includes(lowerCaseQuery)
        );
        return { ...category, questions: filteredQuestions };
      })
      .filter((category) => category.questions.length > 0);

    return filtered;
  }, [searchQuery]);

  const handleSearch = () => {
    if (!searchQuery.trim()) {
      toast.info("Please enter a search term.");
      return;
    }
    if (filteredFaqData.length === 0) {
      toast.info(`No results found for "${searchQuery}".`);
    }
  };

  const handleContactAction = (method: string) => {
    toast.info(`Contacting support via ${method} is a placeholder action.`);
  };

  return (
    <div className="container mx-auto py-8 pb-10">
      <div className="flex flex-col md:flex-row items-start md:items-center justify-between mb-8">
        <div className="flex items-center gap-3 mb-4 md:mb-0">
          <LifeBuoy className="h-8 w-8 text-primary" />
          <h1 className="text-3xl font-bold">Help & Support</h1>
        </div>
      </div>

      <Card className="mb-8 shadow-sm">
        <CardHeader>
          <CardTitle className="text-xl">How can we help?</CardTitle>
          <CardDescription>
            Search our knowledge base or browse frequently asked questions.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex w-full items-center space-x-2">
            <Input
              type="text"
              placeholder="Search help articles..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleSearch()}
              className="flex-1"
            />
            <Button type="button" onClick={handleSearch}>
              <Search className="h-4 w-4 mr-2" /> Search
            </Button>
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2">
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle className="text-xl">
                Frequently Asked Questions
              </CardTitle>
            </CardHeader>
            <CardContent>
              {filteredFaqData.length > 0 ? (
                <Accordion type="single" collapsible className="w-full">
                  {filteredFaqData.map((category) => (
                    <div key={category.category} className="mb-4 last:mb-0">
                      <h3 className="text-lg font-semibold mb-2 px-1">
                        {category.category}
                      </h3>
                      {category.questions.map((item, index) => (
                        <AccordionItem
                          value={`${category.category}-${index}`}
                          key={index}
                          className="border-b"
                        >
                          <AccordionTrigger className="text-left hover:no-underline px-1">
                            {item.q}
                          </AccordionTrigger>
                          <AccordionContent className="px-1 text-muted-foreground">
                            {item.a}
                          </AccordionContent>
                        </AccordionItem>
                      ))}
                    </div>
                  ))}
                </Accordion>
              ) : (
                <div className="text-center py-10 text-muted-foreground">
                  <p>No results found for your search.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        <div className="space-y-6">
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle className="text-xl">Contact Support</CardTitle>
              <CardDescription>
                Can't find an answer? Get in touch.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <Button
                variant="outline"
                className="w-full justify-start gap-3"
                onClick={() => handleContactAction("Ticket")}
              >
                <Ticket className="h-5 w-5 text-primary" /> Submit a Ticket
              </Button>
              <Button
                variant="outline"
                className="w-full justify-start gap-3"
                onClick={() => handleContactAction("Chat")}
              >
                <MessageSquare className="h-5 w-5 text-primary" /> Start Live
                Chat
              </Button>
              <Button
                variant="outline"
                className="w-full justify-start gap-3"
                onClick={() => handleContactAction("Email")}
              >
                <Mail className="h-5 w-5 text-primary" /> Send us an Email
              </Button>
            </CardContent>
          </Card>

          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle className="text-xl">Documentation</CardTitle>
              <CardDescription>
                Explore detailed guides and API resources.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Button
                variant="outline"
                asChild
                className="w-full justify-start gap-3"
              >
                <Link href="/docs">
                  <BookOpen className="h-5 w-5 text-primary" /> Browse Guides
                </Link>
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
// END OF FILE: app/(dashboard)/help/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/invite/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

export default function CustomerInvitePage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Invite Friends & Referrals</h1>
      <Card>
        <CardHeader>
          <CardTitle>Share & Earn Rewards</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p>Invite friends to join and earn rewards through our referral program.</p>
          <div className='space-y-2'>
            <Label htmlFor='referral-link'>Your Referral Link</Label>
            <div className='flex gap-2'>
              <Input id="referral-link" readOnly value="https://yowyob.com/ref/cust123" />{/* TODO: Generate dynamically */}
              <Button>Copy Link</Button> {/* TODO: Add copy functionality */}
            </div>
          </div>
          {/* TODO: Add social sharing buttons */}
          {/* TODO: Display referral statistics (invited friends, rewards earned) */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/invite/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/invoices/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function CustomerInvoicesPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">My Invoices</h1>
        <Tabs defaultValue="overview" className="space-y-4">
            <TabsList>
                <TabsTrigger value="overview">Overview</TabsTrigger>
                <TabsTrigger value="payment_details">Payment Details</TabsTrigger>
            </TabsList>
            <TabsContent value="overview">
                <Card>
                    <CardHeader><CardTitle>Invoice History</CardTitle></CardHeader>
                    <CardContent>
                    <p>View your past invoices and their payment status.</p>
                    {/* TODO: Implement Invoice list/table for customer */}
                    </CardContent>
                </Card>
            </TabsContent>
             <TabsContent value="payment_details">
                <Card>
                    <CardHeader><CardTitle>Saved Payment Methods</CardTitle></CardHeader>
                    <CardContent>
                    <p>Manage your saved payment details (e.g., credit cards).</p>
                    {/* TODO: Implement payment method management UI */}
                    </CardContent>
                </Card>
            </TabsContent>
        </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/invoices/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/layout.tsx

"use client";

import { Sidebar } from "@/components/sidebar";
import { TopNav } from "@/components/top-nav";
import { ActiveOrganizationProvider } from "@/contexts/active-organization-context";
import { CommandPalette } from "@/components/command-palette";
import { useCommandPalette } from "@/hooks/use-command-palette";
import { AppFooter } from "@/components/app-footer";

interface DashboardLayoutProps {
  children: React.ReactNode;
}

export default function DashboardLayout({ children }: DashboardLayoutProps) {
  const { isOpen, setIsOpen } = useCommandPalette();

  return (
    <ActiveOrganizationProvider>
      <CommandPalette isOpen={isOpen} setIsOpen={setIsOpen} />
      <div className="flex min-h-screen">
        <Sidebar />
        <div className="flex flex-1 flex-col overflow-x-hidden">
          <TopNav onOpenCommandPalette={() => setIsOpen(true)} />
          <main className="flex-1 bg-muted/30 p-4 pt-20 sm:p-6 md:p-8">
            <div className="mx-auto">{children}</div>
          </main>
          <AppFooter />
        </div>
      </div>
    </ActiveOrganizationProvider>
  );
}
// END OF FILE: app/(dashboard)/layout.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/settings/page.tsx

"use client";

import { useSettings } from "@/contexts/settings-context";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
// Checkbox might not be directly used if FormFieldSwitchInternal is preferred, but good to have for flexibility
// import { Checkbox } from "@/components/ui/checkbox";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  UserCircle,
  Palette,
  BellRing,
  LockKeyhole,
  Shield,
  Trash2,
  Download,
  Info,
  Star,
  Settings as SettingsIconLucide,
  MessageCircleIcon,
} from "lucide-react";
import { useState, useEffect, useMemo } from "react";
import { toast } from "sonner";
import { useTheme } from "next-themes";
import { Loader2 } from "lucide-react";
import { usePathname, useRouter } from "next/navigation"; // Added useRouter
import { ImageUploader } from "@/components/ui/image-uploader";
import { Separator } from "@/components/ui/separator";
import { cn } from "@/lib/utils";
import { FormControl, FormItem } from "@/components/ui/form";
import Link from "next/link";

// const defaultAvatarsStock = [
//   // Renamed to avoid conflict if defaultAvatars is used elsewhere
//   "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/9439775.jpg-4JVJWOjPksd3DtnBYJXoWHA5lc1DU9.jpeg",
//   "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/375238645_11475210.jpg-lU8bOe6TLt5Rv51hgjg8NT8PsDBmvN.jpeg",
//   "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/375238208_11475222.jpg-poEIzVHAGiIfMFQ7EiF8PUG1u0Zkzz.jpeg",
//   "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/dd.jpg-4MCwPC2Bec6Ume26Yo1kao3CnONxDg.jpeg",
//   "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/9334178.jpg-Y74tW6XFO68g7N36SE5MSNDNVKLQ08.jpeg",
// ];

type UserRoleForUI = "customer" | "business-actor" | "super-admin" | "unknown";

const FormFieldItem: React.FC<{
  label: string;
  id: string;
  value: string | undefined;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
  type?: string;
  readOnly?: boolean;
  placeholder?: string;
  description?: string;
  disabled?: boolean;
}> = ({
  label,
  id,
  value,
  onChange,
  type = "text",
  readOnly = false,
  placeholder,
  description,
  disabled = false,
}) => (
    <div className="space-y-1.5">
      <Label htmlFor={id}>{label}</Label>
      <Input
        id={id}
        type={type}
        value={value || ""}
        onChange={onChange}
        readOnly={readOnly}
        placeholder={placeholder}
        disabled={disabled}
      />
      {description && (
        <p className="text-xs text-muted-foreground">{description}</p>
      )}
    </div>
  );

const FormFieldSelectInternal: React.FC<{
  label: string;
  value: string | undefined;
  onValueChange: (value: string) => void;
  options: { value: string; label: string }[];
  placeholder?: string;
  id?: string;
  disabled?: boolean;
}> = ({
  label,
  value,
  onValueChange,
  options,
  placeholder,
  id,
  disabled = false,
}) => (
    <div className="space-y-1.5">
      <Label htmlFor={id}>{label}</Label>
      <Select value={value} onValueChange={onValueChange} disabled={disabled}>
        <SelectTrigger id={id}>
          <SelectValue placeholder={placeholder} />
        </SelectTrigger>
        <SelectContent>
          {options.map((opt) => (
            <SelectItem key={opt.value} value={opt.value}>
              {opt.label}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
    </div>
  );

const FormFieldSwitchInternal: React.FC<{
  id: string;
  label: string;
  description?: string;
  checked: boolean;
  onCheckedChange: (checked: boolean) => void;
  disabled?: boolean;
}> = ({
  id,
  label,
  description,
  checked,
  onCheckedChange,
  disabled = false,
}) => (
    <div
      className={cn(
        "flex items-center justify-between rounded-lg border p-3 shadow-sm bg-background/50",
        disabled && "opacity-70 cursor-not-allowed"
      )}
    >
      <div className="space-y-0.5 pr-4">
        <Label
          htmlFor={id}
          className={cn(
            "text-base font-normal",
            disabled && "cursor-not-allowed"
          )}
        >
          {label}
        </Label>
        {description && (
          <p className="text-xs text-muted-foreground">{description}</p>
        )}
      </div>
      <Switch
        id={id}
        checked={checked}
        onCheckedChange={onCheckedChange}
        disabled={disabled}
      />
    </div>
  );

export default function UnifiedSettingsPage() {
  const {
    settings,
    isLoadingSettings,
    updateUserProfile,
    updateDisplayPreferences,
    updateNotificationPreferences,
    updatePrivacyPreferences,
  } = useSettings();
  const { setTheme: setNextTheme } = useTheme();
  const pathname = usePathname();
  // const router = useRouter();

  const inferredRole = useMemo((): UserRoleForUI => {
    // This inference will be replaced by actual role from session when available
    if (pathname.includes("/business-actor")) return "business-actor";
    if (pathname.includes("/customer")) return "customer";
    if (pathname.includes("/super-admin")) return "super-admin";
    // A more robust way, if settings page is always /settings, might involve checking session data
    // For now, if accessed directly via /settings, it might default based on some logic or show a generic view
    return "customer"; // Fallback for direct /settings access
  }, [pathname]);

  // Local state for Account Profile form fields
  const [localFirstName, setLocalFirstName] = useState("");
  const [localLastName, setLocalLastName] = useState("");
  const [localPhone, setLocalPhone] = useState("");
  const [profilePhotoFile, setProfilePhotoFile] = useState<File | null>(null);
  const [profilePhotoPreview, setProfilePhotoPreview] = useState<string | null>(
    null
  );

  // Local state for Security form fields
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [is2FAEnabled, setIs2FAEnabled] = useState(false); // Placeholder for 2FA status

  useEffect(() => {
    if (!isLoadingSettings) {
      setLocalFirstName(settings.firstName || "");
      setLocalLastName(settings.lastName || "");
      setLocalPhone(settings.phone || "");
      setProfilePhotoPreview(settings.avatar); // settings.avatar is the profilePhotoUrl
      // Potentially set is2FAEnabled from settings if it comes from backend
    }
  }, [settings, isLoadingSettings]);

  const handleProfilePhotoSelected = (
    file: File | null,
    previewUrl: string | null
  ) => {
    setProfilePhotoFile(file);
    setProfilePhotoPreview(previewUrl);
  };

  const handleSaveAccountProfile = async () => {
    const fn = localFirstName.trim();
    const ln = localLastName.trim();
    if (!fn) {
      toast.error("First name cannot be empty.");
      return;
    }

    await updateUserProfile({
      first_name: fn,
      last_name: ln, // Send empty string if user clears it
      phone_number: localPhone.trim(),
    });

    if (
      (profilePhotoFile || profilePhotoPreview === null) &&
      profilePhotoPreview !== settings.avatar
    ) {
      let newPhotoUrl = profilePhotoPreview;
      if (profilePhotoFile) {
        toast.info("Simulating photo upload...");
        await new Promise((r) => setTimeout(r, 1000)); // Simulate upload delay
        // In a real app: const uploadedUrl = await uploadActualFile(profilePhotoFile);
        // newPhotoUrl = uploadedUrl; // Replace with actual URL
        newPhotoUrl = `/mock-profile-photos/${profilePhotoFile.name}`; // Mock URL
        console.log("Simulated upload, using mock URL:", newPhotoUrl);
      }
      await updateDisplayPreferences({ profilePhotoUrl: newPhotoUrl ?? undefined });
      setProfilePhotoFile(null);
    }
  };

  const handleSaveSecurity = async () => {
    if (newPassword && newPassword.length < 6) {
      toast.error("New password must be at least 6 characters.");
      return;
    }
    if (newPassword && newPassword !== confirmPassword) {
      toast.error("New passwords do not match.");
      return;
    }
    // TODO: API call to backend to change password (currentPassword, newPassword)
    // TODO: API call for 2FA enablement/disablement (is2FAEnabled)
    toast.info("Security settings update action triggered (backend pending).");
    setCurrentPassword("");
    setNewPassword("");
    setConfirmPassword("");
  };

  const handleDeleteAccount = () => {
    if (
      confirm(
        "DANGER: Are you absolutely sure you want to delete your account? This action is irreversible and will permanently erase all your data associated with this account."
      )
    ) {
      if (
        confirm(
          "FINAL WARNING: This cannot be undone. Proceed with account deletion?"
        )
      ) {
        toast.warning(
          "Account deletion process initiated (backend call not implemented)."
        );
        // TODO: API call to user/auth service to delete account.
        // After successful deletion, sign out and redirect to homepage.
        // signOut({ callbackUrl: '/' });
      }
    }
  };

  const showPreferencesTab =
    inferredRole === "business-actor" || inferredRole === "super-admin";

  if (isLoadingSettings && !settings.userId) {
    return (
      <div className="container mx-auto flex justify-center items-center min-h-[calc(100vh-200px)]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
      </div>
    );
  }

  return (
    <div className="container mx-auto pb-10">
      <div className="mb-6 flex items-center gap-3">
        <SettingsIconLucide className="h-8 w-8 text-primary" />
        <h1 className="text-3xl font-bold">User Settings</h1>
      </div>
      <Tabs defaultValue="account" className="space-y-6">
        <TabsList
          className={cn(
            "grid w-full",
            showPreferencesTab ? "grid-cols-5" : "grid-cols-4"
          )}
        >
          <TabsTrigger value="account" className="gap-1.5">
            <UserCircle className="h-4 w-4" />
            Account
          </TabsTrigger>
          {showPreferencesTab && (
            <TabsTrigger value="preferences" className="gap-1.5">
              <Palette className="h-4 w-4" />
              Display
            </TabsTrigger>
          )}
          <TabsTrigger value="security" className="gap-1.5">
            <LockKeyhole className="h-4 w-4" />
            Security
          </TabsTrigger>
          <TabsTrigger value="notifications" className="gap-1.5">
            <BellRing className="h-4 w-4" />
            Notifications
          </TabsTrigger>
          <TabsTrigger value="privacy" className="gap-1.5">
            <Shield className="h-4 w-4" />
            Privacy
          </TabsTrigger>
        </TabsList>

        <TabsContent value="account">
          <Card>
            <CardHeader>
              <CardTitle>Account Profile</CardTitle>
              <CardDescription>
                Manage your personal information and profile photo.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <ImageUploader
                currentImageUrl={settings.avatar}
                onImageSelectedAction={handleProfilePhotoSelected}
                label="Profile Photo"
                fallbackName={settings.fullName}
              />
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4">
                <FormFieldItem
                  label="First Name"
                  id="firstName"
                  value={localFirstName}
                  onChange= {(e)  => setLocalFirstName(e.target.value)}
                  placeholder="Your first name"
                />
                <FormFieldItem
                  label="Last Name"
                  id="lastName"
                  value={localLastName}
                  onChange= {(e)  => setLocalLastName(e.target.value)}
                  placeholder="Your last name"
                />
              </div>
              <FormFieldItem
                label="Username"
                id="username"
                value={settings.username}
                readOnly
                description="Your unique username (cannot be changed)."
              />
              <FormFieldItem
                label="Email"
                id="email"
                value={settings.email}
                readOnly
                description={
                  settings.emailVerified
                    ? "Email verified."
                    : "Email not verified."
                }
              />
              <FormFieldItem
                label="Phone Number"
                id="phone"
                type="tel"
                value={localPhone}
                onChange= {(e)  => setLocalPhone(e.target.value)}
                placeholder="+1234567890"
                description={
                  settings.phoneVerified
                    ? "Phone verified."
                    : "Phone not verified (if applicable)."
                }
              />
            </CardContent>
            <CardFooter>
              <Button
                onClick={handleSaveAccountProfile}
                disabled={isLoadingSettings}
              >
                {isLoadingSettings && (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                )}
                Save Profile Changes
              </Button>
            </CardFooter>
          </Card>
        </TabsContent>

        {showPreferencesTab && (
          <TabsContent value="preferences">
            <Card>
              <CardHeader>
                <CardTitle>Display Preferences</CardTitle>
                <CardDescription>
                  Customize your dashboard appearance and experience.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <FormFieldSelectInternal
                  label="Language"
                  id="language"
                  value={settings.language}
                  onValueChange={(val) =>
                    updateDisplayPreferences({ language: val })
                  }
                  options={[
                    { value: "en", label: "English" },
                    { value: "fr", label: "Français" },
                    { value: "es", label: "Español" },
                  ]}
                  placeholder="Select Language"
                />
                <FormFieldSelectInternal
                  label="Theme"
                  id="theme"
                  value={settings.theme}
                  onValueChange={(val) => {
                    setNextTheme(val);
                    updateDisplayPreferences({ theme: val  });
                  }}
                  options={[
                    { value: "light", label: "Light" },
                    { value: "dark", label: "Dark" },
                    { value: "system", label: "System Default" },
                  ]}
                  placeholder="Select Theme"
                />
                <FormFieldSelectInternal
                  label="Date Format"
                  id="dateFormat"
                  value={settings.dateFormat}
                  onValueChange={(val) =>
                    updateDisplayPreferences({ dateFormat: val  })
                  }
                  options={[
                    { value: "mm-dd-yyyy", label: "MM-DD-YYYY" },
                    { value: "dd-mm-yyyy", label: "DD-MM-YYYY" },
                    { value: "yyyy-mm-dd", label: "YYYY-MM-DD" },
                  ]}
                  placeholder="Select Date Format"
                />
                <FormFieldSelectInternal
                  label="Timezone"
                  id="timezone"
                  value={settings.timezone}
                  onValueChange={(val) =>
                    updateDisplayPreferences({ timezone: val })
                  }
                  options={[
                    { value: "utc-8", label: "Pacific Time (UTC-8)" },
                    { value: "utc-5", label: "Eastern Time (UTC-5)" },
                    { value: "utc+0", label: "Greenwich Mean Time (UTC+0)" },
                    { value: "utc+1", label: "Central European Time (UTC+1)" },
                    { value: "utc+2", label: "Eastern European Time (UTC+2)" },
                  ]}
                  placeholder="Select Timezone"
                />
                <FormFieldSelectInternal
                  label="Currency"
                  id="currency"
                  value={settings.currency}
                  onValueChange={(val) =>
                    updateDisplayPreferences({ currency: val })
                  }
                  options={[
                    { value: "usd", label: "USD ($)" },
                    { value: "eur", label: "EUR (€)" },
                    { value: "gbp", label: "GBP (£)" },
                    { value: "jpy", label: "JPY (¥)" },
                  ]}
                  placeholder="Select Currency"
                />
                <div className="space-y-1.5">
                  <Label htmlFor="fontSize">
                    Font Size ({settings.fontSize}px)
                  </Label>
                  <Slider
                    id="fontSize"
                    value={[settings.fontSize]}
                    onValueCommit={(val) =>
                      updateDisplayPreferences({ fontSize: val[0] })
                    }
                    min={12}
                    max={20}
                    step={1}
                  />
                </div>
                <div className="space-y-2">
                  <Label>Dashboard Layout</Label>
                  <RadioGroup
                    value={settings.layout}
                    onValueChange={(val) =>
                      updateDisplayPreferences({ layout: val  })
                    }
                    className="flex flex-col sm:flex-row sm:space-x-4 space-y-2 sm:space-y-0"
                  >
                    <FormItem className="flex items-center space-x-2">
                      <FormControl>
                        <RadioGroupItem value="default" id="layout-default" />
                      </FormControl>
                      <Label htmlFor="layout-default" className="font-normal">
                        Default
                      </Label>
                    </FormItem>
                    <FormItem className="flex items-center space-x-2">
                      <FormControl>
                        <RadioGroupItem value="compact" id="layout-compact" />
                      </FormControl>
                      <Label htmlFor="layout-compact" className="font-normal">
                        Compact
                      </Label>
                    </FormItem>
                    <FormItem className="flex items-center space-x-2">
                      <FormControl>
                        <RadioGroupItem value="expanded" id="layout-expanded" />
                      </FormControl>
                      <Label htmlFor="layout-expanded" className="font-normal">
                        Expanded
                      </Label>
                    </FormItem>
                  </RadioGroup>
                </div>
              </CardContent>
              {/* No explicit save button as preferences update on change via context */}
            </Card>
          </TabsContent>
        )}

        <TabsContent value="security">
          <Card>
            <CardHeader>
              <CardTitle>Security Settings</CardTitle>
              <CardDescription>
                Manage your password and account security features.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <FormFieldItem
                label="Current Password"
                id="currentPassword"
                type="password"
                value={currentPassword}
                onChange= {(e)  => setCurrentPassword(e.target.value)}
                placeholder="Enter your current password"
              />
              <FormFieldItem
                label="New Password"
                id="newPassword"
                type="password"
                value={newPassword}
                onChange= {(e)  => setNewPassword(e.target.value)}
                placeholder="Enter a new strong password"
              />
              <FormFieldItem
                label="Confirm New Password"
                id="confirmPassword"
                type="password"
                value={confirmPassword}
                onChange= {(e)  => setConfirmPassword(e.target.value)}
                placeholder="Re-enter your new password"
              />
              <Button
                onClick={handleSaveSecurity}
                disabled={isLoadingSettings}
                className="mt-2"
              >
                {isLoadingSettings && (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                )}
                Change Password
              </Button>
              <Separator />
              <FormFieldSwitchInternal
                id="twoFactorAuth"
                label="Two-Factor Authentication (2FA)"
                description="Add an extra layer of security to your account."
                checked={is2FAEnabled}
                onCheckedChange={setIs2FAEnabled}
              />
              {/* TODO: If is2FAEnabled is true, show 2FA setup/management options */}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="notifications">
          <Card>
            <CardHeader>
              <CardTitle>Notification Preferences</CardTitle>
              <CardDescription>
                Choose how you receive notifications.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <FormFieldSwitchInternal
                id="emailNotif"
                label="Email Notifications"
                checked={settings.notifications.email}
                onCheckedChange={(val) =>
                  updateNotificationPreferences({ email: val })
                }
                description="Receive important updates via email."
              />
              <FormFieldSwitchInternal
                id="pushNotif"
                label="Push Notifications (App)"
                checked={settings.notifications.push}
                onCheckedChange={(val) =>
                  updateNotificationPreferences({ push: val })
                }
                description="Get real-time alerts in the app."
              />
              <FormFieldSwitchInternal
                id="smsNotif"
                label="SMS Notifications"
                checked={settings.notifications.sms}
                onCheckedChange={(val) =>
                  updateNotificationPreferences({ sms: val })
                }
                description="Receive critical alerts via text message."
              />
              <Separator />
              <FormFieldSwitchInternal
                id="accountActivityNotif"
                label="Account Activity"
                checked={settings.notifications.accountActivity}
                onCheckedChange={(val) =>
                  updateNotificationPreferences({ accountActivity: val })
                }
                description="Alerts for logins, password changes, etc."
              />
              <FormFieldSwitchInternal
                id="newFeaturesNotif"
                label="New Features & Updates"
                checked={settings.notifications.newFeatures}
                onCheckedChange={(val) =>
                  updateNotificationPreferences({ newFeatures: val })
                }
                description="Stay informed about new platform capabilities."
              />
              <FormFieldSwitchInternal
                id="marketingNotif"
                label="Marketing & Promotions"
                checked={settings.notifications.marketing}
                onCheckedChange={(val) =>
                  updateNotificationPreferences({ marketing: val })
                }
                description="Receive offers and promotional content."
              />
              <FormFieldSelectInternal
                label="Notification Frequency"
                id="notifFreq"
                value={settings.notifications.frequency}
                onValueChange={(val) =>
                  updateNotificationPreferences({ frequency: val  })
                }
                options={[
                  { value: "real-time", label: "Real-time" },
                  { value: "daily", label: "Daily Digest" },
                  { value: "weekly", label: "Weekly Summary" },
                  { value: "never", label: "Never" },
                ]}
                placeholder="Select Frequency"
              />
              <div className="space-y-1.5">
                <Label>Quiet Hours (Notifications Paused)</Label>
                <div className="flex items-center space-x-2">
                  <Input
                    id="quiet-hours-start"
                    type="time"
                    value={settings.notifications.quietHoursStart}
                    onChange= {(e)  =>
                      updateNotificationPreferences({
                        quietHoursStart: e.target.value,
                      })
                    }
                    className="w-[130px]"
                  />
                  <span>to</span>
                  <Input
                    id="quiet-hours-end"
                    type="time"
                    value={settings.notifications.quietHoursEnd}
                    onChange= {(e)  =>
                      updateNotificationPreferences({
                        quietHoursEnd: e.target.value,
                      })
                    }
                    className="w-[130px]"
                  />
                </div>
                <p className="text-xs text-muted-foreground">
                  Set a time range to pause non-critical notifications.
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="privacy">
          <Card>
            <CardHeader>
              <CardTitle>Privacy & Data</CardTitle>
              <CardDescription>
                Manage your data sharing settings and account actions.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <FormFieldSwitchInternal
                id="analyticsSharing"
                label="Share Usage Data"
                description="Help us improve by sharing anonymized usage analytics."
                checked={settings.privacy.analyticsSharing}
                onCheckedChange={(val) =>
                  updatePrivacyPreferences({ analyticsSharing: val })
                }
              />
              <FormFieldSwitchInternal
                id="personalizedAds"
                label="Personalized Content & Offers"
                description="Allow us to tailor content and offers based on your activity."
                checked={settings.privacy.personalizedAds}
                onCheckedChange={(val) =>
                  updatePrivacyPreferences({ personalizedAds: val })
                }
              />
              <FormFieldSelectInternal
                label="Account Visibility"
                id="visibility"
                value={settings.privacy.visibility}
                onValueChange={(val) =>
                  updatePrivacyPreferences({ visibility: val  })
                }
                options={[
                  { value: "public", label: "Public" },
                  { value: "private", label: "Private" },
                  {
                    value: "friends-only",
                    label: "Friends Only (if applicable)",
                  },
                ]}
                placeholder="Select Account Visibility"
              />
              <FormFieldSelectInternal
                label="Data Retention Policy"
                id="dataRetention"
                value={settings.privacy.dataRetention}
                onValueChange={(val) =>
                  updatePrivacyPreferences({ dataRetention: val  })
                }
                options={[
                  { value: "6-months", label: "6 Months" },
                  { value: "1-year", label: "1 Year" },
                  { value: "2-years", label: "2 Years" },
                  { value: "indefinite", label: "Indefinite (Until Deletion)" },
                ]}
                placeholder="Select Data Retention"
              />
              <Separator className="my-6" />
              <div className="flex flex-col sm:flex-row justify-between gap-3">
                <Button
                  variant="outline"
                  onClick={() =>
                    toast.info("Download data feature coming soon.")
                  }
                  disabled={isLoadingSettings}
                  className="w-full sm:w-auto"
                >
                  <Download className="mr-2 h-4 w-4" />
                  Download Your Data
                </Button>
                <Button
                  variant="destructive"
                  onClick={handleDeleteAccount}
                  disabled={isLoadingSettings}
                  className="w-full sm:w-auto"
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  Delete My Account
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <MessageCircleIcon className="mr-2 h-5 w-5" />
              Help Center
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Button variant="outline" asChild className="w-full">
              <Link href="/help">Visit Support & FAQs</Link>
            </Button>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Info className="mr-2 h-5 w-5" />
              What is New
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Button variant="outline" asChild className="w-full">
              <Link href="/whats-new">See Latest Updates</Link>
            </Button>
          </CardContent>
        </Card>
        {/* Rate App should be context-aware, e.g. only for customer or if a general app rating */}
        {(inferredRole === "customer" || inferredRole === "business-actor") && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Star className="mr-2 h-5 w-5" />
                Rate Our Platform
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Button
                variant="outline"
                onClick={() =>
                  toast.info("Link to app store or feedback form TBD.")
                }
                className="w-full"
              >
                Leave a Rating
              </Button>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
// END OF FILE: app/(dashboard)/settings/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/agencies/agencies-client.tsx

"use client";

import React, { useState, useMemo } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { AgencyDto, OrganizationDto } from "@/types/organization";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { getSuperAdminAgencyColumns } from "./columns";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { Building, Search } from "lucide-react";

interface AgenciesClientProps {
  allAgencies: AgencyDto[];
  allOrganizations: OrganizationDto[];
}

export function AgenciesClient({
  allAgencies,
  allOrganizations,
}: AgenciesClientProps) {
  const orgOptions = useMemo(
    () =>
      allOrganizations.map((org) => ({
        label: org.long_name || org.organization_id!,
        value: org.organization_id!,
      })),
    [allOrganizations]
  );

  const columns = useMemo<ColumnDef<AgencyDto>[]>(
    () => getSuperAdminAgencyColumns(),
    []
  );

  return (
    <ResourceDataTable
      data={allAgencies}
      columns={columns}
      isLoading={false}
      error={null}
      onRefreshAction={() => window.location.reload()}
      searchPlaceholder="Search by agency name or location..."
      onDeleteItemsAction={() => {}}
      viewModeStorageKey="sa-agencies-view-mode"
      exportFileName="all_agencies.csv"
      pageHeader={
        <PageHeader
          title="Global Agency Overview"
          description="View and filter all agencies across the platform."
        />
      }
      filterControls={(table) => (
        <DataTableFacetedFilter
          column={table.getColumn("organization_id")}
          title="Organization"
          options={orgOptions}
        />
      )}
      renderGridItemAction={(agency) => (
        <div className="p-4 border rounded-md">{agency.long_name}</div>
      )} // Placeholder card
      emptyState={
        <FeedbackCard
          icon={Building}
          title="No Agencies Found"
          description="There are no agencies created on the platform yet."
        />
      }
      filteredEmptyState={
        <FeedbackCard
          icon={Search}
          title="No Agencies Found"
          description="Your filter criteria did not match any agencies."
        />
      }
    />
  );
}
// END OF FILE: app/(dashboard)/super-admin/agencies/agencies-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/agencies/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { AgencyDto } from "@/types/organization";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { CheckCircle, XCircle } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

export const getSuperAdminAgencyColumns = (): ColumnDef<AgencyDto>[] => [
  {
    accessorKey: "long_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Agency" />
    ),
    cell: ({ row }) => {
      const agency = row.original;
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-9 w-9 border">
            <AvatarImage src={agency.logo} />
            <AvatarFallback>{agency.short_name?.charAt(0)}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{agency.long_name}</div>
            <div className="text-xs text-muted-foreground">
              {agency.location}
            </div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "organization_id",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Organization" />
    ),
    cell: ({ row }) => (
      <div className="text-sm text-muted-foreground">
        {row.original.organization_id}
      </div>
    ),
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "is_active",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Status" />
    ),
    cell: ({ row }) => {
      const isActive = row.getValue("is_active");
      return (
        <Badge
          variant={isActive ? "default" : "destructive"}
          className={isActive ? "bg-green-100 text-green-800" : ""}
        >
          {isActive ? "Active" : "Inactive"}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(String(row.getValue(id))),
  },
  {
    accessorKey: "total_affiliated_customers",
    header: ({ column }) => (
      <DataTableColumnHeader
        column={column}
        title="Customers"
        className="justify-end"
      />
    ),
    cell: ({ row }) => (
      <div className="text-right font-medium">
        {row.getValue("total_affiliated_customers") || 0}
      </div>
    ),
  },
];
// END OF FILE: app/(dashboard)/super-admin/agencies/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/agencies/page.tsx

import { Metadata } from "next";
import { organizationRepository } from "@/lib/data-repo/organization";
import { AgenciesClient } from "./agencies-client";

export const metadata: Metadata = {
  title: "Global Agency Overview",
  description: "View and filter all agencies across all organizations.",
};

export default async function SuperAdminAgenciesPage() {
  const [agencies, organizations] = await Promise.all([
    // A new repository method would be ideal here, but we can simulate by fetching all orgs then all their agencies
    // For simplicity, we'll assume a flat list can be fetched or constructed.
    // This mock will be a placeholder for a real `getAllAgencies` endpoint.
    organizationRepository
      .getAllOrganizations()
      .then((orgs) =>
        Promise.all(
          orgs.map((org) =>
            organizationRepository.getAgencies(org.organization_id!)
          )
        )
      )
      .then((agencyArrays) => agencyArrays.flat()),
    organizationRepository.getAllOrganizations(),
  ]);

  return (
    <AgenciesClient allAgencies={agencies} allOrganizations={organizations} />
  );
}
// END OF FILE: app/(dashboard)/super-admin/agencies/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/bonus/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function SuperAdminBonusPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Bonus System Overview</h1>
        <Tabs defaultValue="overview" className="space-y-4">
            <TabsList>
                <TabsTrigger value="overview">Points Overview</TabsTrigger>
                <TabsTrigger value="point_value">Monetary Value</TabsTrigger>
                 <TabsTrigger value="config">Global Config</TabsTrigger>
                {/* Add more tabs if needed */}
            </TabsList>
             <TabsContent value="overview">
                <Card>
                    <CardHeader><CardTitle>Total Points Issued/Redeemed</CardTitle></CardHeader>
                    <CardContent>
                        <p>Platform-wide statistics on bonus points.</p>
                        {/* TODO: Implement Bonus system stats and charts */}
                    </CardContent>
                </Card>
             </TabsContent>
            <TabsContent value="point_value">
                <Card>
                    <CardHeader><CardTitle>Point Monetary Value Setting</CardTitle></CardHeader>
                    <CardContent>
                        <p>View or set the global monetary value per bonus point.</p>
                        {/* TODO: Display/Edit global point value */}
                    </CardContent>
                </Card>
            </TabsContent>
             <TabsContent value="config">
                <Card>
                    <CardHeader><CardTitle>Global Bonus Configuration</CardTitle></CardHeader>
                    <CardContent>
                        <p>Manage default rules or settings for the bonus system.</p>
                         {/* TODO: Implement global bonus settings */}
                    </CardContent>
                </Card>
            </TabsContent>
        </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/bonus/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-actors/business-actor-card.tsx

"use client";

import { BusinessActorDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  CheckCircle,
  XCircle,
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface BusinessActorCardProps {
  actor: BusinessActorDto;
  onEditAction: (actor: BusinessActorDto) => void;
  onDeleteAction: (actor: BusinessActorDto) => void;
}

export function BusinessActorCard({
  actor,
  onEditAction,
  onDeleteAction,
}: BusinessActorCardProps) {
  const name = `${actor.first_name || ""} ${actor.last_name || ""}`.trim();
  return (
    <Card className="flex flex-col h-full">
      <CardHeader>
        <div className="flex justify-between items-start">
          <div className="flex items-center gap-3">
            <Avatar className="h-12 w-12">
              <AvatarImage src={actor.avatar_picture} />
              <AvatarFallback>{name.charAt(0)}</AvatarFallback>
            </Avatar>
            <div>
              <CardTitle className="text-base line-clamp-1">{name}</CardTitle>
              <CardDescription className="text-xs line-clamp-1">
                {actor.profession || "No profession listed"}
              </CardDescription>
            </div>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" className="h-8 w-8">
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onEditAction(actor)}>
                <Edit3 className="mr-2 h-4 w-4" /> Edit
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => onDeleteAction(actor)}
                className="text-destructive focus:text-destructive"
              >
                <Trash2 className="mr-2 h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent className="flex-grow">
        <Badge variant="secondary">{actor.type || "UNKNOWN"}</Badge>
      </CardContent>
      <CardFooter className="flex justify-between items-center text-xs text-muted-foreground">
        <div className="flex items-center gap-1">
          {actor.is_active ? (
            <CheckCircle className="h-4 w-4 text-green-500" />
          ) : (
            <XCircle className="h-4 w-4" />
          )}{" "}
          {actor.is_active ? "Active" : "Inactive"}
        </div>
        <div className="flex items-center gap-1">
          {actor.is_verified ? (
            <CheckCircle className="h-4 w-4 text-sky-500" />
          ) : (
            <XCircle className="h-4 w-4" />
          )}{" "}
          {actor.is_verified ? "Verified" : "Not Verified"}
        </div>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: app/(dashboard)/super-admin/business-actors/business-actor-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-actors/business-actors-client.tsx

"use client";

import React, { useState, useMemo, useCallback } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { BusinessActorDto } from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { Button } from "@/components/ui/button";
import { PlusCircle, UserPlus, Search as SearchIcon } from "lucide-react";
import { getBusinessActorColumns } from "./columns";
import { BusinessActorCard } from "./business-actor-card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { BusinessActorForm } from "@/components/business-actor/business-actor-form";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";

const statusOptions = [
  { value: "true", label: "Active" },
  { value: "false", label: "Inactive" },
];
const verifiedOptions = [
  { value: "true", label: "Verified" },
  { value: "false", label: "Not Verified" },
];

interface BusinessActorsClientProps {
  initialActors: BusinessActorDto[];
}

export function BusinessActorsClient({
  initialActors,
}: BusinessActorsClientProps) {
  const [actors, setActors] = useState<BusinessActorDto[]>(initialActors);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingActor, setEditingActor] = useState<
    BusinessActorDto | undefined
  >();

  const refreshData = useCallback(async () => {
    const updatedActors = await organizationRepository.getAllBusinessActors();
    setActors(updatedActors);
  }, []);

  const handleOpenDialog = (actor?: BusinessActorDto) => {
    setEditingActor(actor);
    setIsFormOpen(true);
  };

  const handleFormSuccess = () => {
    refreshData();
    setIsFormOpen(false);
    setEditingActor(undefined);
  };

  const handleDelete = (actorsToDelete: BusinessActorDto[]) => {
    toast.error(
      `Deletion of ${actorsToDelete.length} actor(s) is not implemented.`
    );
  };

  const columns = useMemo<ColumnDef<BusinessActorDto>[]>(
    () =>
      getBusinessActorColumns({
        onEditAction: handleOpenDialog,
        onDeleteAction: (actor) => handleDelete([actor]),
      }),
    []
  );

  return (
    <>
      <ResourceDataTable
        data={actors}
        columns={columns}
        isLoading={false}
        error={null}
        onRefreshAction={refreshData}
        searchPlaceholder="Search by name, email..."
        onDeleteItemsAction={handleDelete}
        viewModeStorageKey="sa-ba-view-mode"
        exportFileName="business_actors.csv"
        pageHeader={
          <PageHeader
            title="Business Actors"
            description="Manage all business actor profiles on the platform."
            action={
              <Button onClick={() => handleOpenDialog()}>
                <UserPlus className="mr-2 h-4 w-4" /> Create Profile
              </Button>
            }
          />
        }
        filterControls={(table) => (
          <>
            <DataTableFacetedFilter
              column={table.getColumn("is_active")}
              title="Status"
              options={statusOptions}
            />
            <DataTableFacetedFilter
              column={table.getColumn("is_verified")}
              title="Verification"
              options={verifiedOptions}
            />
          </>
        )}
        renderGridItemAction={(actor) => (
          <BusinessActorCard
            actor={actor}
            onEditAction={handleOpenDialog}
            onDeleteAction={() => handleDelete([actor])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={UserPlus}
            title="No Business Actors"
            description="There are no business actor profiles created yet. Create one to get started."
            actionButton={
              <Button onClick={() => handleOpenDialog()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Create Profile
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Actors Found"
            description="Your search or filter criteria did not match any business actors."
          />
        }
      />

      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
        <DialogContent className="sm:max-w-4xl">
          <DialogHeader>
            <DialogTitle>
              {editingActor
                ? "Edit Business Actor Profile"
                : "Create New Business Actor Profile"}
            </DialogTitle>
            <DialogDescription>
              {editingActor
                ? `Editing profile for ${editingActor.first_name}`
                : "Create a new, independent business profile."}
            </DialogDescription>
          </DialogHeader>
          <div className="py-4 max-h-[80vh] overflow-y-auto pr-2">
            <BusinessActorForm
              mode={editingActor ? "edit" : "create"}
              initialData={editingActor}
              onSuccessAction={handleFormSuccess}
              onCancelAction={() => setIsFormOpen(false)}
            />
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/super-admin/business-actors/business-actors-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-actors/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { BusinessActorDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, CheckCircle, XCircle } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface BusinessActorRowActionsProps {
  actor: BusinessActorDto;
  onEditAction: (actor: BusinessActorDto) => void;
  onDeleteAction: (actor: BusinessActorDto) => void;
}

const RowActions: React.FC<BusinessActorRowActionsProps> = ({ actor, onEditAction, onDeleteAction }) => (
  <DropdownMenu>
    <DropdownMenuTrigger asChild><Button variant="ghost" className="h-8 w-8 p-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
    <DropdownMenuContent align="end">
      <DropdownMenuItem onClick={() => onEditAction(actor)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
      <DropdownMenuItem onClick={() => onDeleteAction(actor)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
    </DropdownMenuContent>
  </DropdownMenu>
);

export const getBusinessActorColumns = (actions: Omit<BusinessActorRowActionsProps, "actor">): ColumnDef<BusinessActorDto>[] => [
  { id: "select", header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected()} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} />, cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} />, enableSorting: false, enableHiding: false },
  { accessorKey: "first_name", header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />, cell: ({ row }) => {
    const actor = row.original;
    const name = `${actor.first_name || ''} ${actor.last_name || ''}`.trim();
    return (
      <div className="flex items-center gap-3">
        <Avatar className="h-9 w-9"><AvatarImage src={actor.avatar_picture} /><AvatarFallback>{name.charAt(0)}</AvatarFallback></Avatar>
        <div>
          <div className="font-medium">{name}</div>
          <div className="text-xs text-muted-foreground">{actor.email}</div>
        </div>
      </div>
    );
  }},
  { accessorKey: "type", header: ({ column }) => <DataTableColumnHeader column={column} title="Type" />, cell: ({ row }) => <Badge variant="outline">{row.getValue("type")}</Badge>, filterFn: (row, id, value) => value.includes(row.getValue(id)) },
  { accessorKey: "is_active", header: ({ column }) => <DataTableColumnHeader column={column} title="Status" />, cell: ({ row }) => {
    const isActive = row.getValue("is_active");
    return <Badge variant={isActive ? "default" : "secondary"} className={isActive ? "bg-green-100 text-green-800" : ""}>{isActive ? "Active" : "Inactive"}</Badge>;
  }, filterFn: (row, id, value) => value.includes(String(row.getValue(id))) },
  { accessorKey: "is_verified", header: ({ column }) => <DataTableColumnHeader column={column} title="Verified" />, cell: ({ row }) => {
    const isVerified = row.getValue("is_verified");
    return isVerified ? <CheckCircle className="h-5 w-5 text-sky-500" /> : <XCircle className="h-5 w-5 text-muted-foreground" />;
  }, filterFn: (row, id, value) => value.includes(String(row.getValue(id))) },
  { id: "actions", cell: ({ row }) => <RowActions actor={row.original} {...actions} /> },
];// END OF FILE: app/(dashboard)/super-admin/business-actors/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-actors/page.tsx

import { Metadata } from "next";
import { organizationRepository } from "@/lib/data-repo/organization";
import { BusinessActorsClient } from "./business-actors-client";

export const metadata: Metadata = {
  title: "Business Actors Management",
  description:
    "Create, view, and manage all Business Actor profiles on the platform.",
};

export default async function SuperAdminBusinessActorsPage() {
  // Fetch only the business actors. No user list is needed.
  const actors = await organizationRepository.getAllBusinessActors();
  return <BusinessActorsClient initialActors={actors} />;
}
// END OF FILE: app/(dashboard)/super-admin/business-actors/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-domains/business-domains-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  BusinessDomainDto,
  CreateBusinessDomainRequest,
  UpdateBusinessDomainRequest,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Tag, Search as SearchIcon } from "lucide-react";
import { getBusinessDomainColumns } from "@/components/admin/business-domains/columns";
import { BusinessDomainCard } from "@/components/admin/business-domains/business-domain-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  BusinessDomainForm,
  BusinessDomainFormData,
} from "@/components/admin/business-domains/business-domain-form";

export function BusinessDomainsClientPage() {
  const [domains, setDomains] = useState<BusinessDomainDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<BusinessDomainDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<BusinessDomainDto | undefined>(
    undefined
  );

  const refreshData = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAllBusinessDomains();
      setDomains(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load business domains.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleOpenFormModal = (item?: BusinessDomainDto) => {
    setEditingItem(item);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: BusinessDomainDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (itemsToDelete.length === 0) return;
    const originalItems = [...domains];
    const idsToDelete = itemsToDelete.map((item) => item.id!);
    setDomains((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteBusinessDomain(item.id!)
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} domain(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Domain(s) deleted.";
      },
      error: (err) => {
        setDomains(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const handleFormSubmit = async (
    data: BusinessDomainFormData
  ): Promise<boolean> => {
    try {
      const promise = editingItem?.id
        ? organizationRepository.updateBusinessDomain(
            editingItem.id,
            data as UpdateBusinessDomainRequest
          )
        : organizationRepository.createBusinessDomain(
            data as CreateBusinessDomainRequest
          );

      await toast.promise(promise, {
        loading: `${editingItem ? "Updating" : "Creating"} domain...`,
        success: `Domain ${editingItem ? "updated" : "created"} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<BusinessDomainDto>[]>(
    () =>
      getBusinessDomainColumns({
        onEditAction: handleOpenFormModal,
        onDeleteAction: (item) => handleDeleteConfirmation([item]),
      }),
    []
  );

  return (
    <>
      <ResourceDataTable
        data={domains}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search domains..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="admin-domains-view-mode"
        exportFileName="business_domains.csv"
        pageHeader={
          <PageHeader
            title="Business Domains"
            description="Manage the global list of business domains available on the platform."
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Create Domain
              </Button>
            }
          />
        }
        renderGridItemAction={(item) => (
          <BusinessDomainCard
            domain={item}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Tag}
            title="No Business Domains"
            description="Create the first business domain to categorize organizations."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Create Domain
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Domains Found"
            description="Your search did not match any business domains."
          />
        }
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">
            {editingItem ? "Edit Domain" : "Create New Domain"}
          </DialogTitle>
          <BusinessDomainForm
            mode={editingItem ? "edit" : "create"}
            initialData={editingItem}
            onSubmitAction={handleFormSubmit}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} domain(s)</strong>. Organizations
              using this domain will need to be updated.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/super-admin/business-domains/business-domains-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-domains/page.tsx

import { Metadata } from "next";
import { BusinessDomainsClientPage } from "./business-domains-client";

export const metadata: Metadata = {
  title: "Manage Business Domains",
  description: "Administer the global list of business domains for all organizations.",
};

export default async function BusinessDomainsPage() {
  return <BusinessDomainsClientPage />;
}// END OF FILE: app/(dashboard)/super-admin/business-domains/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/certifications/certifications-client.tsx

"use client";

import React, { useMemo } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { CertificationDto, OrganizationDto } from "@/types/organization";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { getSuperAdminCertificationColumns } from "./columns";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { Award, Search } from "lucide-react";

interface CertificationsClientProps {
  allCertifications: CertificationDto[];
  allOrganizations: OrganizationDto[];
}

export function CertificationsClient({
  allCertifications,
  allOrganizations,
}: CertificationsClientProps) {
  const orgOptions = useMemo(
    () =>
      allOrganizations.map((org) => ({
        label: org.long_name || org.organization_id!,
        value: org.organization_id!,
      })),
    [allOrganizations]
  );

  const columns = useMemo<ColumnDef<CertificationDto>[]>(
    () => getSuperAdminCertificationColumns(),
    []
  );

  return (
    <ResourceDataTable
      data={allCertifications}
      columns={columns}
      isLoading={false}
      error={null}
      onRefreshAction={() => window.location.reload()}
      searchPlaceholder="Search by certification name or type..."
      onDeleteItemsAction={() => {}}
      viewModeStorageKey="sa-certs-view-mode"
      exportFileName="all_certifications.csv"
      pageHeader={
        <PageHeader
          title="Global Certification Overview"
          description="View and filter all certifications across the platform."
        />
      }
      filterControls={(table) => (
        <DataTableFacetedFilter
          column={table.getColumn("organization_id")}
          title="Organization"
          options={orgOptions}
        />
      )}
      renderGridItemAction={(cert) => (
        <div className="p-4 border rounded-md">{cert.name}</div>
      )}
      emptyState={
        <FeedbackCard
          icon={Award}
          title="No Certifications Found"
          description="No organizations have added certifications yet."
        />
      }
      filteredEmptyState={
        <FeedbackCard
          icon={Search}
          title="No Certifications Found"
          description="Your filter criteria did not match any certifications."
        />
      }
    />
  );
}
// END OF FILE: app/(dashboard)/super-admin/certifications/certifications-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/certifications/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { CertificationDto } from "@/types/organization";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { format, parseISO, isValid } from "date-fns";
import { Award } from "lucide-react";

export const getSuperAdminCertificationColumns =
  (): ColumnDef<CertificationDto>[] => [
    {
      accessorKey: "name",
      header: ({ column }) => (
        <DataTableColumnHeader column={column} title="Certification" />
      ),
      cell: ({ row }) => (
        <div className="flex items-center gap-2">
          <Award className="h-4 w-4 text-muted-foreground" />
          <span className="font-medium">{row.getValue("name")}</span>
        </div>
      ),
    },
    {
      accessorKey: "organization_id",
      header: ({ column }) => (
        <DataTableColumnHeader column={column} title="Organization" />
      ),
      filterFn: (row, id, value) => value.includes(row.getValue(id)),
    },
    {
      accessorKey: "type",
      header: ({ column }) => (
        <DataTableColumnHeader column={column} title="Type" />
      ),
    },
    {
      accessorKey: "obtainment_date",
      header: ({ column }) => (
        <DataTableColumnHeader column={column} title="Obtained" />
      ),
      cell: ({ row }) => {
        const date = row.getValue("obtainment_date") as string;
        return (
          <div>
            {isValid(parseISO(date)) ? format(parseISO(date), "PP") : "-"}
          </div>
        );
      },
    },
  ];
// END OF FILE: app/(dashboard)/super-admin/certifications/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/certifications/page.tsx

import { Metadata } from "next";
import { organizationRepository } from "@/lib/data-repo/organization";
import { CertificationsClient } from "./certifications-client";

export const metadata: Metadata = {
  title: "Global Certification Overview",
  description: "View and filter all certifications across all organizations.",
};

export default async function SuperAdminCertificationsPage() {
  const [certifications, organizations] = await Promise.all([
    organizationRepository
      .getAllOrganizations()
      .then((orgs) =>
        Promise.all(
          orgs.map((org) =>
            organizationRepository.getCertifications(org.organization_id!)
          )
        )
      )
      .then((arrays) => arrays.flat()),
    organizationRepository.getAllOrganizations(),
  ]);

  return (
    <CertificationsClient
      allCertifications={certifications}
      allOrganizations={organizations}
    />
  );
}
// END OF FILE: app/(dashboard)/super-admin/certifications/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/chat/page.tsx


import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function SuperAdminChatPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Admin Chat & Support</h1>
       <Card>
        <CardHeader>
          <CardTitle>Admin Communication</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Interface for Super Admin communication or monitoring support channels.</p>
          {/* TODO: Implement Admin Chat/Support Monitoring component */}
           <div className="mt-4 h-96 border rounded-md flex items-center justify-center text-muted-foreground">
             Admin Chat Interface Placeholder
           </div>
        </CardContent>
      </Card>
       {/* Add sections for Reviews Stats, Rate App overview, Notification Info */}
        <Card className="mt-4">
            <CardHeader><CardTitle>Reviews Statistics</CardTitle></CardHeader>
            <CardContent><p>Overall statistics on customer reviews.</p></CardContent>{/* TODO */}
        </Card>
        <Card className="mt-4">
            <CardHeader><CardTitle>App Rating Overview</CardTitle></CardHeader>
            <CardContent><p>Platform-wide app rating data.</p></CardContent>{/* TODO */}
        </Card>
         <Card className="mt-4">
            <CardHeader><CardTitle>Notification Info / System Alerts</CardTitle></CardHeader>
            <CardContent><p>View or manage system-wide notifications.</p></CardContent>{/* TODO */}
        </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/chat/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/customers/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { CustomerDto } from "@/types/organization";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

export const getSuperAdminCustomerColumns = (): ColumnDef<CustomerDto>[] => [
  {
    accessorKey: "first_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Customer" />
    ),
    cell: ({ row }) => {
      const customer = row.original;
      const name = `${customer.first_name || ""} ${
        customer.last_name || ""
      }`.trim();
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-9 w-9">
            <AvatarImage src={customer.logo} />
            <AvatarFallback>{name.charAt(0)}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{name}</div>
            <div className="text-xs text-muted-foreground">
              {customer.short_description}
            </div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "organization_id",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Organization" />
    ),
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "agency_id",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Agency" />
    ),
  },
  {
    accessorKey: "payment_method",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Last Payment" />
    ),
  },
];
// END OF FILE: app/(dashboard)/super-admin/customers/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/customers/customers-client.tsx

"use client";

import React, { useMemo } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { CustomerDto, OrganizationDto } from "@/types/organization";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { getSuperAdminCustomerColumns } from "./columns";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { Users, Search } from "lucide-react";

interface CustomersClientProps {
  allCustomers: CustomerDto[];
  allOrganizations: OrganizationDto[];
}

export function CustomersClient({
  allCustomers,
  allOrganizations,
}: CustomersClientProps) {
  const orgOptions = useMemo(
    () =>
      allOrganizations.map((org) => ({
        label: org.long_name || org.organization_id!,
        value: org.organization_id!,
      })),
    [allOrganizations]
  );

  const columns = useMemo<ColumnDef<CustomerDto>[]>(
    () => getSuperAdminCustomerColumns(),
    []
  );

  return (
    <ResourceDataTable
      data={allCustomers}
      columns={columns}
      isLoading={false}
      error={null}
      onRefreshAction={() => window.location.reload()}
      searchPlaceholder="Search by customer name..."
      onDeleteItemsAction={() => {}}
      viewModeStorageKey="sa-customers-view-mode"
      exportFileName="all_customers.csv"
      pageHeader={
        <PageHeader
          title="Global Customer Overview"
          description="View and filter all customers across the platform."
        />
      }
      filterControls={(table) => (
        <DataTableFacetedFilter
          column={table.getColumn("organization_id")}
          title="Organization"
          options={orgOptions}
        />
      )}
      renderGridItemAction={(customer) => (
        <div className="p-4 border rounded-md">{customer.first_name}</div>
      )}
      emptyState={
        <FeedbackCard
          icon={Users}
          title="No Customers Found"
          description="There are no customers registered on the platform yet."
        />
      }
      filteredEmptyState={
        <FeedbackCard
          icon={Search}
          title="No Customers Found"
          description="Your filter criteria did not match any customers."
        />
      }
    />
  );
}
// END OF FILE: app/(dashboard)/super-admin/customers/customers-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/customers/page.tsx

import { Metadata } from "next";
import { organizationRepository } from "@/lib/data-repo/organization";
import { CustomersClient } from "./customers-client";

export const metadata: Metadata = {
  title: "Global Customer Overview",
  description: "View and filter all customers across all organizations.",
};

export default async function SuperAdminCustomersPage() {
  const [customers, organizations] = await Promise.all([
    organizationRepository
      .getAllOrganizations()
      .then((orgs) =>
        Promise.all(
          orgs.map((org) =>
            organizationRepository.getOrgCustomers(org.organization_id!)
          )
        )
      )
      .then((arrays) => arrays.flat()),
    organizationRepository.getAllOrganizations(),
  ]);

  return (
    <CustomersClient
      allCustomers={customers}
      allOrganizations={organizations}
    />
  );
}
// END OF FILE: app/(dashboard)/super-admin/customers/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/dashboard/dashboard-client.tsx

"use client";

import React from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { PageHeader } from "@/components/ui/page-header";
import {
  Bar,
  BarChart,
  ResponsiveContainer,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  Pie,
  PieChart,
  Cell,
} from "recharts";
import { Users, Building, Briefcase, FileText, UserPlus } from "lucide-react";
import { OrganizationDto, BusinessActorDto } from "@/types/organization";
import { UserDto } from "@/types/auth";
import { format } from "date-fns";

export interface DashboardData {
  stats: {
    totalUsers: number;
    totalOrgs: number;
    totalBAs: number;
  };
  charts: {
    orgStatusCounts: Record<string, number>;
    baTypeCounts: Record<string, number>;
  };
  recentActivity: {
    users: UserDto[];
    organizations: OrganizationDto[];
  };
}

interface SuperAdminDashboardClientProps {
  initialData: DashboardData;
}

const COLORS = [
  "#0088FE",
  "#00C49F",
  "#FFBB28",
  "#FF8042",
  "#8884d8",
  "#82ca9d",
];

export function SuperAdminDashboardClient({
  initialData,
}: SuperAdminDashboardClientProps) {
  const { stats, charts, recentActivity } = initialData;

  const orgStatusData = Object.entries(charts.orgStatusCounts).map(
    ([name, value]) => ({ name, value })
  );
  const baTypeData = Object.entries(charts.baTypeCounts).map(
    ([name, value]) => ({ name, value })
  );

  return (
    <div className="space-y-6">
      <PageHeader
        title="Platform Dashboard"
        description="A high-level overview of all activity across the YowYob platform."
      />

      {/* Stat Cards */}
      <div className="grid gap-4 md:grid-cols-3">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Users</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalUsers}</div>
            <p className="text-xs text-muted-foreground">
              All registered user accounts.
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Total Organizations
            </CardTitle>
            <Building className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalOrgs}</div>
            <p className="text-xs text-muted-foreground">Across all users.</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Total Business Actors
            </CardTitle>
            <Briefcase className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalBAs}</div>
            <p className="text-xs text-muted-foreground">
              Users with business profiles.
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Charts */}
      <div className="grid gap-4 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Organizations by Status</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={orgStatusData}
                  dataKey="value"
                  nameKey="name"
                  cx="50%"
                  cy="50%"
                  outerRadius={100}
                  label
                >
                  {orgStatusData.map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={COLORS[index % COLORS.length]}
                    />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Business Actors by Type</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={baTypeData}>
                <XAxis
                  dataKey="name"
                  stroke="#888888"
                  fontSize={12}
                  tickLine={false}
                  axisLine={false}
                />
                <YAxis
                  stroke="#888888"
                  fontSize={12}
                  tickLine={false}
                  axisLine={false}
                />
                <Tooltip />
                <Bar dataKey="value" fill="#8884d8" radius={[4, 4, 0, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Recent Activity Feeds */}
      <div className="grid gap-4 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Recently Created Organizations</CardTitle>
            <CardDescription>
              The 5 most recently created organizations.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {recentActivity.organizations.map((org) => (
                <div key={org.organization_id} className="flex items-center">
                  <FileText className="h-5 w-5 text-muted-foreground" />
                  <div className="ml-4 space-y-1">
                    <p className="text-sm font-medium leading-none">
                      {org.long_name}
                    </p>
                    <p className="text-sm text-muted-foreground">{org.email}</p>
                  </div>
                  <div className="ml-auto text-xs text-muted-foreground">
                    {format(new Date(org.created_at!), "PP")}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Recently Joined Users</CardTitle>
            <CardDescription>
              The 5 most recently registered users.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {recentActivity.users.map((user) => (
                <div key={user.id} className="flex items-center">
                  <UserPlus className="h-5 w-5 text-muted-foreground" />
                  <div className="ml-4 space-y-1">
                    <p className="text-sm font-medium leading-none">
                      {user.first_name} {user.last_name}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      {user.username}
                    </p>
                  </div>
                  <div className="ml-auto text-xs text-muted-foreground">
                    {format(new Date(user.created_at!), "PP")}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
// END OF FILE: app/(dashboard)/super-admin/dashboard/dashboard-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/dashboard/page.tsx

import { Metadata } from "next";
import { authRepository } from "@/lib/data-repo/auth";
import { organizationRepository } from "@/lib/data-repo/organization";
import { DashboardData, SuperAdminDashboardClient } from "./dashboard-client";

export const metadata: Metadata = {
  title: "Super Admin Dashboard",
  description: "Platform-wide overview of users, organizations, and activity.",
};

// Change return type to: DashboardData | null
async function getDashboardStats(): Promise<DashboardData | null> {
  try {
    const [users, organizations, businessActors] = await Promise.all([
      authRepository.getAllUsers(),
      organizationRepository.getAllOrganizations(),
      organizationRepository.getAllBusinessActors(),
    ]);

    const totalUsers = users.length;
    const totalOrgs = organizations.length;
    const totalBAs = businessActors.length;

    const orgStatusCounts = organizations.reduce((acc, org) => {
      const status = org.status || "UNKNOWN";
      acc[status] = (acc[status] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const baTypeCounts = businessActors.reduce((acc, ba) => {
      const type = ba.type || "UNKNOWN";
      acc[type] = (acc[type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    return {
      stats: { totalUsers, totalOrgs, totalBAs },
      charts: { orgStatusCounts, baTypeCounts },
      recentActivity: {
        users: users.slice(0, 5),
        organizations: organizations.slice(0, 5),
      },
    };
  } catch (error) {
    console.error("Failed to fetch dashboard stats:", error);
    return null;
  }
}

export default async function SuperAdminDashboardPage() {
  const dashboardData = await getDashboardStats();

  if (!dashboardData) {
    return <div>Error: Could not load platform statistics.</div>;
  }

  return <SuperAdminDashboardClient initialData={dashboardData} />;
}
// END OF FILE: app/(dashboard)/super-admin/dashboard/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/organizations/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { OrganizationDto, OrganizationStatus } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit,
  Trash2,
  Eye,
  CheckCircle,
  XCircle,
  Clock,
  ShieldQuestion,
} from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { cn } from "@/lib/utils";

const getStatusInfo = (status: OrganizationDto["status"]) => {
  switch (status) {
    case "ACTIVE":
      return { icon: CheckCircle, color: "text-green-600", label: "Active" };
    case "INACTIVE":
      return { icon: XCircle, color: "text-slate-500", label: "Inactive" };
    case "PENDING_APPROVAL":
      return { icon: Clock, color: "text-amber-600", label: "Pending" };
    case "SUSPENDED":
      return {
        icon: ShieldQuestion,
        color: "text-red-600",
        label: "Suspended",
      };
    default:
      return {
        icon: XCircle,
        color: "text-destructive",
        label: status || "Unknown",
      };
  }
};

interface RowActionsProps {
  organization: OrganizationDto;
  onStatusChangeAction: (
    organization: OrganizationDto,
    status: OrganizationStatus
  ) => void;
  onDeleteAction: (organization: OrganizationDto) => void;
}

const RowActions: React.FC<RowActionsProps> = ({
  organization,
  onStatusChangeAction,
  onDeleteAction,
}) => (
  <DropdownMenu>
    <DropdownMenuTrigger asChild>
      <Button variant="ghost" className="h-8 w-8 p-0">
        <MoreHorizontal className="h-4 w-4" />
      </Button>
    </DropdownMenuTrigger>
    <DropdownMenuContent align="end">
      <DropdownMenuItem
        onClick={() => onStatusChangeAction(organization, "ACTIVE")}
      >
        <CheckCircle className="mr-2 h-4 w-4 text-green-500" /> Approve/Activate
      </DropdownMenuItem>
      <DropdownMenuItem
        onClick={() => onStatusChangeAction(organization, "SUSPENDED")}
      >
        <ShieldQuestion className="mr-2 h-4 w-4 text-red-500" /> Suspend
      </DropdownMenuItem>
      <DropdownMenuSeparator />
      <DropdownMenuItem
        onClick={() => onDeleteAction(organization)}
        className="text-destructive focus:text-destructive"
      >
        <Trash2 className="mr-2 h-4 w-4" /> Delete
      </DropdownMenuItem>
    </DropdownMenuContent>
  </DropdownMenu>
);

export const getSuperAdminOrganizationColumns = (
  actions: Omit<RowActionsProps, "organization">
): ColumnDef<OrganizationDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={table.getIsAllPageRowsSelected()}
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "long_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Organization" />
    ),
    cell: ({ row }) => {
      const org = row.original;
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border">
            <AvatarImage src={org.logo_url} />
            <AvatarFallback>{org.short_name?.charAt(0)}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{org.long_name}</div>
            <div className="text-xs text-muted-foreground">{org.email}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "status",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Status" />
    ),
    cell: ({ row }) => {
      const statusInfo = getStatusInfo(row.getValue("status"));
      return (
        <Badge variant="outline" className={cn("capitalize", statusInfo.color)}>
          <statusInfo.icon className="mr-1.5 h-3.5 w-3.5" />
          {statusInfo.label}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "business_actor_id",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Owner ID" />
    ),
    cell: ({ row }) => (
      <div className="text-xs text-muted-foreground truncate">
        {row.getValue("business_actor_id")}
      </div>
    ),
  },
  {
    id: "actions",
    cell: ({ row }) => <RowActions organization={row.original} {...actions} />,
  },
];
// END OF FILE: app/(dashboard)/super-admin/organizations/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/organizations/organization-card.tsx

"use client";

import { OrganizationDto, OrganizationStatus } from "@/types/organization";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2, Building, CheckCircle, XCircle, Clock, ShieldQuestion } from "lucide-react";
import { cn } from "@/lib/utils";
import Image from "next/image";

const getStatusInfo = (status: OrganizationDto['status']) => {
  switch (status) {
    case "ACTIVE": return { icon: CheckCircle, color: "text-green-600", label: "Active" };
    case "INACTIVE": return { icon: XCircle, color: "text-slate-500", label: "Inactive" };
    case "PENDING_APPROVAL": return { icon: Clock, color: "text-amber-600", label: "Pending" };
    case "SUSPENDED": return { icon: ShieldQuestion, color: "text-red-600", label: "Suspended" };
    default: return { icon: XCircle, color: "text-destructive", label: status || "Unknown" };
  }
};

interface AdminOrganizationCardProps {
  organization: OrganizationDto;
  onStatusChangeAction: (organization: OrganizationDto, status: OrganizationStatus) => void;
  onDeleteAction: (organization: OrganizationDto) => void;
}

export function AdminOrganizationCard({ organization, onStatusChangeAction, onDeleteAction }: AdminOrganizationCardProps) {
  const statusInfo = getStatusInfo(organization.status);

  return (
    <Card className="flex flex-col h-full shadow-md hover:shadow-xl transition-all duration-300 ease-in-out group">
      <CardHeader>
        <div className="flex justify-between items-start gap-3">
          <div className="flex items-center gap-4">
            <Image src={organization.logo_url || '/placeholder.svg'} alt={organization.long_name || ""} width={48} height={48} className="h-12 w-12 rounded-lg object-cover border" />
            <div>
              <CardTitle className="text-md font-bold leading-tight line-clamp-2">{organization.long_name}</CardTitle>
              <CardDescription className="text-xs">{organization.short_name}</CardDescription>
            </div>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onStatusChangeAction(organization, 'ACTIVE')}><CheckCircle className="mr-2 h-4 w-4 text-green-500" /> Approve/Activate</DropdownMenuItem>
              <DropdownMenuItem onClick={() => onStatusChangeAction(organization, 'SUSPENDED')}><ShieldQuestion className="mr-2 h-4 w-4 text-red-500" /> Suspend</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={() => onDeleteAction(organization)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent className="flex-grow">
        <p className="text-muted-foreground line-clamp-3 text-sm leading-relaxed min-h-[60px]">
          {organization.description || "No description provided."}
        </p>
      </CardContent>
      <CardFooter>
        <Badge variant="outline" className={cn("capitalize text-xs items-center font-normal", statusInfo.color)}>
          <statusInfo.icon className="mr-1.5 h-3.5 w-3.5" />
          {statusInfo.label}
        </Badge>
      </CardFooter>
    </Card>
  );
}// END OF FILE: app/(dashboard)/super-admin/organizations/organization-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/organizations/organizations-client.tsx

"use client";

import React, { useState, useMemo, useCallback } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  OrganizationDto,
  OrganizationStatus,
  OrganizationStatusValues,
} from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { Button } from "@/components/ui/button";
import { Building, Search as SearchIcon } from "lucide-react";
import { getSuperAdminOrganizationColumns } from "./columns";
import { AdminOrganizationCard } from "./organization-card";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";

const statusOptions = OrganizationStatusValues.map((s) => ({
  value: s,
  label: s.replace(/_/g, " "),
}));

interface OrganizationsClientProps {
  initialOrganizations: OrganizationDto[];
}

export function OrganizationsClient({
  initialOrganizations,
}: OrganizationsClientProps) {
  const [organizations, setOrganizations] =
    useState<OrganizationDto[]>(initialOrganizations);
  const [isLoading, setIsLoading] = useState(false);
  const [dialogState, setDialogState] = useState<{
    open: boolean;
    items: OrganizationDto[];
    newStatus?: OrganizationStatus;
    type?: "status" | "delete";
  }>({ open: false, items: [] });

  const refreshData = useCallback(async () => {
    setIsLoading(true);
    try {
      const data = await organizationRepository.getAllOrganizations();
      setOrganizations(data);
    } catch (error) {
      toast.error("Failed to refresh organization data.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  const handleStatusChangeConfirmation = (
    org: OrganizationDto,
    newStatus: OrganizationStatus
  ) => {
    setDialogState({ open: true, items: [org], newStatus, type: "status" });
  };

  const handleDeleteConfirmation = (orgs: OrganizationDto[]) => {
    if (orgs.length === 0) return;
    setDialogState({ open: true, items: orgs, type: "delete" });
  };

  const executeAction = async () => {
    const { items, newStatus, type } = dialogState;
    if (items.length === 0) return;

    const actionPromise: Promise<void> =
      type === "status" && newStatus
        ? organizationRepository
            .updateOrganizationStatus(items[0].organization_id!, {
              status: newStatus,
            })
            .then(() => {})
        : Promise.all(
            items.map((org) =>
              organizationRepository.deleteOrganization(org.organization_id!)
            )
          ).then(() => {});

    toast.promise(actionPromise, {
      loading: `Processing action...`,
      success: () => {
        refreshData();
        setDialogState({ open: false, items: [] });
        return `Action completed successfully.`;
      },
      error: (err) => `An error occurred: ${err.message}`,
    });
  };

  const columns = useMemo<ColumnDef<OrganizationDto>[]>(
    () =>
      getSuperAdminOrganizationColumns({
        onStatusChangeAction: handleStatusChangeConfirmation,
        onDeleteAction: (org) => handleDeleteConfirmation([org]),
      }),
    []
  );

  return (
    <>
      <ResourceDataTable
        data={organizations}
        columns={columns}
        isLoading={isLoading}
        error={null}
        onRefreshAction={refreshData}
        searchPlaceholder="Search by name, email..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="sa-orgs-view-mode"
        exportFileName="organizations_export.csv"
        pageHeader={
          <PageHeader
            title="Organization Management"
            description="Monitor, approve, and manage all organizations on the platform."
          />
        }
        filterControls={(table) => (
          <DataTableFacetedFilter
            column={table.getColumn("status")}
            title="Status"
            options={statusOptions}
          />
        )}
        renderGridItemAction={(org) => (
          <AdminOrganizationCard
            organization={org}
            onStatusChangeAction={handleStatusChangeConfirmation}
            onDeleteAction={() => handleDeleteConfirmation([org])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Building}
            title="No Organizations Found"
            description="There are currently no organizations registered on the platform."
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Organizations Found"
            description="Your search or filter criteria did not match any organizations."
          />
        }
      />

      <AlertDialog
        open={dialogState.open}
        onOpenChange={(open) => setDialogState((prev) => ({ ...prev, open }))}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
            <AlertDialogDescription>
              {dialogState.type === "delete"
                ? `This will permanently delete ${dialogState.items.length} organization(s). This action cannot be undone.`
                : `This will change the status of "${dialogState.items[0]?.long_name}" to ${dialogState.newStatus}.`}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeAction}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/super-admin/organizations/organizations-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/organizations/page.tsx

import { Metadata } from "next";
import { organizationRepository } from "@/lib/data-repo/organization";
import { OrganizationsClient } from "./organizations-client";

export const metadata: Metadata = {
  title: "Organization Management",
  description:
    "Approve, monitor, and manage all organizations on the platform.",
};

export default async function SuperAdminOrganizationsPage() {
  const organizations = await organizationRepository.getAllOrganizations();
  return <OrganizationsClient initialOrganizations={organizations} />;
}
// END OF FILE: app/(dashboard)/super-admin/organizations/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/platforms/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function SuperAdminPlatformsPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Platform Management</h1>
       <Tabs defaultValue="stats" className="space-y-4">
            <TabsList>
                <TabsTrigger value="stats">Stats & Analytics</TabsTrigger>
                <TabsTrigger value="activities">Activities</TabsTrigger>
                <TabsTrigger value="subscribers">Subscribers</TabsTrigger>
                {/* Add more tabs if needed, e.g., Configuration */}
            </TabsList>
             <TabsContent value="stats">
                <Card>
                    <CardHeader><CardTitle>Platform Statistics</CardTitle></CardHeader>
                    <CardContent>
                        <p>Detailed statistics for each managed platform.</p>
                        {/* TODO: Implement platform stats display (table/charts) */}
                    </CardContent>
                </Card>
            </TabsContent>
            <TabsContent value="activities">
                <Card>
                    <CardHeader><CardTitle>Platform Activities</CardTitle></CardHeader>
                    <CardContent>
                        <p>Logs of significant activities occurring on the platforms.</p>
                        {/* TODO: Implement platform activity log viewer */}
                    </CardContent>
                </Card>
            </TabsContent>
             <TabsContent value="subscribers">
                <Card>
                    <CardHeader><CardTitle>Platform Subscribers</CardTitle></CardHeader>
                    <CardContent>
                        <p>Overview of subscribers (BAs, Customers) per platform.</p>
                        {/* TODO: Implement subscriber overview */}
                    </CardContent>
                </Card>
            </TabsContent>
       </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/platforms/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/profile/page.tsx

// import React from 'react';
import { redirect } from 'next/navigation';

export default function SuperAdminProfilePage() {
  // Adjust the target tab if needed (e.g., using query params if implemented)
  redirect('/super-admin/settings');

  // Or, if you want a dedicated page, keep simple content:
  /*
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Admin Profile</h1>
      <p>This page displays admin profile details. Consider consolidating with Settings.</p>
      {}
    </div>
  );
  */
}
// END OF FILE: app/(dashboard)/super-admin/profile/page.tsx// END OF FILE: app/(dashboard)/super-admin/profile/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/roles/page.tsx

import { Metadata } from "next";
import { authRepository } from "@/lib/data-repo/auth";
import { RoleAssignmentClient } from "./roles-client";

export const metadata: Metadata = {
  title: "Roles & Permissions",
  description: "Configure Role-Based Access Control (RBAC) for the platform.",
};

export default async function SuperAdminRolesPage() {
  const [roles, permissions] = await Promise.all([
    authRepository.getRoles(),
    authRepository.getAllPermissions(),
  ]);

  return (
    <RoleAssignmentClient initialRoles={roles} allPermissions={permissions} />
  );
}
// END OF FILE: app/(dashboard)/super-admin/roles/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/roles/roles-client.tsx

"use client";

import React, { useState, useEffect, useMemo } from "react";
import { toast } from "sonner";
import { RoleDto, PermissionDto } from "@/types/auth";
import { authRepository } from "@/lib/data-repo/auth";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { PageHeader } from "@/components/ui/page-header";
import { Separator } from "@/components/ui/separator";
import { Loader2, Save } from "lucide-react";
import { cn } from "@/lib/utils";

interface RoleAssignmentClientProps {
  initialRoles: RoleDto[];
  allPermissions: PermissionDto[];
}

export function RoleAssignmentClient({ initialRoles, allPermissions }: RoleAssignmentClientProps) {
  const [roles, setRoles] = useState<RoleDto[]>(initialRoles);
  const [selectedRole, setSelectedRole] = useState<RoleDto | null>(null);
  const [rolePermissions, setRolePermissions] = useState<Set<string>>(new Set());
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (roles.length > 0 && !selectedRole) {
      setSelectedRole(roles[0]);
    }
  }, [roles, selectedRole]);

  useEffect(() => {
    if (selectedRole?.id) {
      setIsLoading(true);
      // In a real app, you'd fetch permissions for the selected role.
      // Here, we'll just simulate it.
      // For mock, we can assume some roles have some permissions.
      const mockPerms = new Set<string>();
      if (selectedRole.name === 'ADMIN_ROLE') {
        allPermissions.slice(0, 5).forEach(p => mockPerms.add(p.id!));
      }
      setRolePermissions(mockPerms);
      setIsLoading(false);
    }
  }, [selectedRole, allPermissions]);

  const handlePermissionToggle = (permissionId: string, checked: boolean) => {
    setRolePermissions(prev => {
      const newSet = new Set(prev);
      if (checked) {
        newSet.add(permissionId);
      } else {
        newSet.delete(permissionId);
      }
      return newSet;
    });
  };

  const handleSaveChanges = async () => {
    if (!selectedRole?.id) return;
    setIsLoading(true);
    try {
      // This logic would need to be more sophisticated in a real app,
      // calculating which permissions to add and which to remove.
      await authRepository.assignPermissionsToRole(selectedRole.id, Array.from(rolePermissions));
      toast.success(`Permissions for role "${selectedRole.name}" updated.`);
    } catch (error: any) {
      toast.error(`Failed to save permissions: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <PageHeader
        title="Role & Permission Management"
        description="Assign permissions to roles to control user access across the platform."
        action={<Button onClick={handleSaveChanges} disabled={isLoading}>{isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />} Save Changes</Button>}
      />
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="md:col-span-1">
          <CardHeader><CardTitle>Roles</CardTitle></CardHeader>
          <CardContent>
            <ScrollArea className="h-[60vh]">
              <div className="space-y-1 pr-4">
                {roles.map(role => (
                  <Button
                    key={role.id}
                    variant="ghost"
                    className={cn("w-full justify-start", selectedRole?.id === role.id && "bg-accent text-accent-foreground")}
                    onClick={() => setSelectedRole(role)}
                  >
                    {role.name}
                  </Button>
                ))}
              </div>
            </ScrollArea>
          </CardContent>
        </Card>
        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle>Permissions for: {selectedRole?.name || '...'}</CardTitle>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <div className="flex justify-center items-center h-[60vh]"><Loader2 className="h-8 w-8 animate-spin" /></div>
            ) : (
              <ScrollArea className="h-[60vh]">
                <div className="space-y-4 pr-4">
                  {allPermissions.map(permission => (
                    <div key={permission.id} className="flex items-center space-x-3 rounded-md border p-3">
                      <Checkbox
                        id={`perm-${permission.id}`}
                        checked={rolePermissions.has(permission.id!)}
                        onCheckedChange={(checked) => handlePermissionToggle(permission.id!, !!checked)}
                      />
                      <Label htmlFor={`perm-${permission.id}`} className="font-medium leading-none cursor-pointer">
                        {permission.name}
                        <p className="text-xs text-muted-foreground font-normal">{permission.description}</p>
                      </Label>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/roles/roles-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/suppliers/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ProviderDto } from "@/types/organization";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

export const getSuperAdminSupplierColumns = (): ColumnDef<ProviderDto>[] => [
  {
    accessorKey: "first_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Supplier" />
    ),
    cell: ({ row }) => {
      const supplier = row.original;
      const name = `${supplier.first_name || ""} ${
        supplier.last_name || ""
      }`.trim();
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-9 w-9">
            <AvatarImage src={supplier.logo} />
            <AvatarFallback>{name.charAt(0)}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{name}</div>
            <div className="text-xs text-muted-foreground">
              {supplier.product_service_type}
            </div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "organization_id",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Organization" />
    ),
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "contact_info",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Contact" />
    ),
  },
];
// END OF FILE: app/(dashboard)/super-admin/suppliers/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/suppliers/page.tsx

import { Metadata } from "next";
import { organizationRepository } from "@/lib/data-repo/organization";
import { SuppliersClient } from "./suppliers-client";

export const metadata: Metadata = {
  title: "Global Supplier Overview",
  description: "View and filter all suppliers across all organizations.",
};

export default async function SuperAdminSuppliersPage() {
  const [suppliers, organizations] = await Promise.all([
    organizationRepository.getAllOrganizations().then(orgs => 
      Promise.all(orgs.map(org => organizationRepository.getOrgSuppliers(org.organization_id!)))
    ).then(arrays => arrays.flat()),
    organizationRepository.getAllOrganizations(),
  ]);

  return <SuppliersClient allSuppliers={suppliers} allOrganizations={organizations} />;
}// END OF FILE: app/(dashboard)/super-admin/suppliers/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/suppliers/suppliers-client.tsx

"use client";

import React, { useMemo } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { ProviderDto, OrganizationDto } from "@/types/organization";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { getSuperAdminSupplierColumns } from "./columns";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { Truck, Search } from "lucide-react";

interface SuppliersClientProps {
  allSuppliers: ProviderDto[];
  allOrganizations: OrganizationDto[];
}

export function SuppliersClient({
  allSuppliers,
  allOrganizations,
}: SuppliersClientProps) {
  const orgOptions = useMemo(
    () =>
      allOrganizations.map((org) => ({
        label: org.long_name || org.organization_id!,
        value: org.organization_id!,
      })),
    [allOrganizations]
  );

  const columns = useMemo<ColumnDef<ProviderDto>[]>(
    () => getSuperAdminSupplierColumns(),
    []
  );

  return (
    <ResourceDataTable
      data={allSuppliers}
      columns={columns}
      isLoading={false}
      error={null}
      onRefreshAction={() => window.location.reload()}
      searchPlaceholder="Search by supplier name..."
      onDeleteItemsAction={() => {}}
      viewModeStorageKey="sa-suppliers-view-mode"
      exportFileName="all_suppliers.csv"
      pageHeader={
        <PageHeader
          title="Global Supplier Overview"
          description="View and filter all suppliers across the platform."
        />
      }
      filterControls={(table) => (
        <DataTableFacetedFilter
          column={table.getColumn("organization_id")}
          title="Organization"
          options={orgOptions}
        />
      )}
      renderGridItemAction={(supplier) => (
        <div className="p-4 border rounded-md">{supplier.first_name}</div>
      )}
      emptyState={
        <FeedbackCard
          icon={Truck}
          title="No Suppliers Found"
          description="There are no suppliers registered on the platform yet."
        />
      }
      filteredEmptyState={
        <FeedbackCard
          icon={Search}
          title="No Suppliers Found"
          description="Your filter criteria did not match any suppliers."
        />
      }
    />
  );
}
// END OF FILE: app/(dashboard)/super-admin/suppliers/suppliers-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/users/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { UserDto } from "@/types/auth";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  CheckCircle,
  XCircle,
  ShieldCheck,
  Phone,
  Mail,
} from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface UserRowActionsProps {
  user: UserDto;
  onStatusToggleAction: (user: UserDto) => void;
  onVerifyAction: (user: UserDto, type: "email" | "phone") => void;
}

const RowActions: React.FC<UserRowActionsProps> = ({
  user,
  onStatusToggleAction,
  onVerifyAction,
}) => (
  <DropdownMenu>
    <DropdownMenuTrigger asChild>
      <Button variant="ghost" className="h-8 w-8 p-0">
        <MoreHorizontal className="h-4 w-4" />
      </Button>
    </DropdownMenuTrigger>
    <DropdownMenuContent align="end">
      <DropdownMenuItem onClick={() => onStatusToggleAction(user)}>
        {user.is_enabled ? (
          <XCircle className="mr-2 h-4 w-4 text-destructive" />
        ) : (
          <CheckCircle className="mr-2 h-4 w-4 text-green-500" />
        )}
        {user.is_enabled ? "Disable" : "Enable"}
      </DropdownMenuItem>
      {!user.email_verified && (
        <DropdownMenuItem onClick={() => onVerifyAction(user, "email")}>
          <Mail className="mr-2 h-4 w-4" /> Verify Email
        </DropdownMenuItem>
      )}
      {!user.phone_number_verified && (
        <DropdownMenuItem onClick={() => onVerifyAction(user, "phone")}>
          <Phone className="mr-2 h-4 w-4" /> Verify Phone
        </DropdownMenuItem>
      )}
    </DropdownMenuContent>
  </DropdownMenu>
);

export const getUserColumns = (
  actions: Omit<UserRowActionsProps, "user">
): ColumnDef<UserDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={table.getIsAllPageRowsSelected()}
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "first_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="User" />
    ),
    cell: ({ row }) => {
      const user = row.original;
      const name = `${user.first_name || ""} ${user.last_name || ""}`.trim();
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-9 w-9">
            <AvatarFallback>{name.charAt(0)}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{name}</div>
            <div className="text-xs text-muted-foreground">
              @{user.username}
            </div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "email",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Email" />
    ),
  },
  {
    accessorKey: "is_enabled",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Status" />
    ),
    cell: ({ row }) => {
      const isEnabled = row.getValue("is_enabled");
      return (
        <Badge
          variant={isEnabled ? "default" : "destructive"}
          className={isEnabled ? "bg-green-100 text-green-800" : ""}
        >
          {isEnabled ? "Enabled" : "Disabled"}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(String(row.getValue(id))),
  },
  {
    accessorKey: "email_verified",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Verification" />
    ),
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        {row.original.email_verified && (
          <ShieldCheck className="h-4 w-4 text-sky-500" />
        )}
        {row.original.phone_number_verified && (
          <Phone className="h-4 w-4 text-sky-500" />
        )}
      </div>
    ),
    filterFn: (row, id, value) => value.includes(String(row.getValue(id))),
  },
  {
    id: "actions",
    cell: ({ row }) => <RowActions user={row.original} {...actions} />,
  },
];
// END OF FILE: app/(dashboard)/super-admin/users/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/users/page.tsx

import { Metadata } from "next";
import { authRepository } from "@/lib/data-repo/auth";
import { UsersClient } from "./users-client";

export const metadata: Metadata = {
  title: "User Management",
  description: "View, manage, and moderate all user accounts on the platform.",
};

export default async function SuperAdminUsersPage() {
  const users = await authRepository.getAllUsers();
  return <UsersClient initialUsers={users} />;
}
// END OF FILE: app/(dashboard)/super-admin/users/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/users/user-card.tsx

"use client";

import { UserDto } from "@/types/auth";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  CheckCircle,
  XCircle,
  ShieldCheck,
  Phone,
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface UserCardProps {
  user: UserDto;
  onStatusToggleAction: (user: UserDto) => void;
  onVerifyAction: (user: UserDto, type: "email" | "phone") => void;
}

export function UserCard({
  user,
  onStatusToggleAction,
  onVerifyAction,
}: UserCardProps) {
  const name = `${user.first_name || ""} ${user.last_name || ""}`.trim();
  return (
    <Card className="flex flex-col h-full">
      <CardHeader>
        <div className="flex justify-between items-start">
          <div className="flex items-center gap-3">
            <Avatar className="h-12 w-12">
              <AvatarFallback>{name.charAt(0)}</AvatarFallback>
            </Avatar>
            <div>
              <CardTitle className="text-base line-clamp-1">{name}</CardTitle>
              <CardDescription className="text-xs line-clamp-1">
                @{user.username}
              </CardDescription>
            </div>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" className="h-8 w-8">
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onStatusToggleAction(user)}>
                {user.is_enabled ? "Disable" : "Enable"}
              </DropdownMenuItem>
              {!user.email_verified && (
                <DropdownMenuItem onClick={() => onVerifyAction(user, "email")}>
                  Verify Email
                </DropdownMenuItem>
              )}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent className="flex-grow">
        <p className="text-sm text-muted-foreground">{user.email}</p>
      </CardContent>
      <CardFooter className="flex justify-between items-center text-xs">
        <Badge
          variant={user.is_enabled ? "default" : "destructive"}
          className={user.is_enabled ? "bg-green-100 text-green-800" : ""}
        >
          {user.is_enabled ? "Enabled" : "Disabled"}
        </Badge>
        <div className="flex items-center gap-2 text-muted-foreground">
          {user.email_verified && (
            <ShieldCheck
              className="h-4 w-4 text-sky-500"
              // title="Email Verified"
            />
          )}
          {user.phone_number_verified && (
            <Phone className="h-4 w-4 text-sky-500" />
          )}
        </div>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: app/(dashboard)/super-admin/users/user-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/users/users-client.tsx

"use client";

import React, { useState, useMemo, useCallback } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { UserDto } from "@/types/auth";
import { authRepository } from "@/lib/data-repo/auth";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { Button } from "@/components/ui/button";
import { Users, Search as SearchIcon } from "lucide-react";
import { getUserColumns } from "./columns";
import { UserCard } from "./user-card";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";

const statusOptions = [
  { value: "true", label: "Enabled" },
  { value: "false", label: "Disabled" },
];

interface UsersClientProps {
  initialUsers: UserDto[];
}

export function UsersClient({ initialUsers }: UsersClientProps) {
  const [users, setUsers] = useState<UserDto[]>(initialUsers);
  const [isLoading, setIsLoading] = useState(false);

  const refreshData = useCallback(async () => {
    setIsLoading(true);
    try {
      const data = await authRepository.getAllUsers();
      setUsers(data);
    } catch (error) {
      toast.error("Failed to refresh user data.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  const handleStatusToggle = (user: UserDto) => {
    toast.info(`Toggling status for ${user.username}... (Not Implemented in backend)`);
    // In a real app: call an API to update user status, then refreshData()
  };

  const handleVerify = (user: UserDto, type: "email" | "phone") => {
    toast.info(`Verifying ${type} for ${user.username}... (Not Implemented in backend)`);
    // In a real app: call an API to verify, then refreshData()
  };

  const columns = useMemo<ColumnDef<UserDto>[]>(
    () =>
      getUserColumns({
        onStatusToggleAction: handleStatusToggle,
        onVerifyAction: handleVerify,
      }),
    []
  );

  return (
    <ResourceDataTable
      data={users}
      columns={columns}
      isLoading={isLoading}
      error={null}
      onRefreshAction={refreshData}
      searchPlaceholder="Search by name, username, email..."
      onDeleteItemsAction={(items) =>
        toast.error(`Deletion of ${items.length} users is not implemented in backend.`)
      }
      viewModeStorageKey="sa-users-view-mode"
      exportFileName="users_export.csv"
      pageHeader={
        <PageHeader
          title="User Management"
          description="View, manage, and moderate all user accounts."
        />
      }
      filterControls={(table) => (
        <DataTableFacetedFilter
          column={table.getColumn("is_enabled")}
          title="Status"
          options={statusOptions}
        />
      )}
      renderGridItemAction={(user) => (
        <UserCard
          user={user}
          onStatusToggleAction={handleStatusToggle}
          onVerifyAction={handleVerify}
        />
      )}
      emptyState={
        <FeedbackCard
          icon={Users}
          title="No Users Found"
          description="There are no users registered on the platform yet."
        />
      }
      filteredEmptyState={
        <FeedbackCard
          icon={SearchIcon}
          title="No Users Found"
          description="Your search or filter criteria did not match any users."
        />
      }
    />
  );
}
// END OF FILE: app/(dashboard)/super-admin/users/users-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/webhooks/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function SuperAdminWebhooksPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Webhooks Configuration</h1>
      <Card>
        <CardHeader>
          <CardTitle>Platform Webhooks</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Configure global or platform-wide webhook settings and monitor deliveries.</p>
          {/* TODO: Implement Super Admin webhook configuration interface and logs */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/webhooks/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/layout.tsx

import "./globals.css";
import type { Metadata } from "next"; // [ADD] Import Metadata type
import type React from "react";
import { Montserrat } from "next/font/google";
import { ThemeProvider } from "next-themes";
import { Toaster } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { SettingsProvider } from "@/contexts/settings-context";
import { SessionProvider } from "@/components/providers/session-provider";
import { cn } from "@/lib/utils";

const montserrat = Montserrat({
  subsets: ["latin"],
  display: "swap",
  variable: "--font-montserrat",
});

// [ADD] Add root metadata object
export const metadata: Metadata = {
  title: {
    default: "YowYob Dashboard",
    template: "%s | YowYob",
  },
  description:
    "The Command Center for Your Business. Unify organization management, customer relations, and secure administration on one platform.",
  keywords: [
    "business management",
    "CRM",
    "organization tool",
    "SaaS",
    "YowYob",
    "agency management",
  ],
  openGraph: {
    title: "YowYob Dashboard",
    description: "The Command Center for Your Business.",
    url: process.env.NEXT_PUBLIC_URL || "http://localhost:3000",
    siteName: "YowYob",
    images: [
      {
        url: `${process.env.NEXT_PUBLIC_URL}/og-image.png`, // It's conventional to have an OG image in /public
        width: 1200,
        height: 630,
      },
    ],
    locale: "en_US",
    type: "website",
  },
  twitter: {
    card: "summary_large_image",
    title: "YowYob Dashboard",
    description: "The Command Center for Your Business.",
    images: [`${process.env.NEXT_PUBLIC_URL}/og-image.png`],
  },
  icons: {
    icon: "/favicon.ico",
    shortcut: "/favicon-16x16.png",
    apple: "/apple-touch-icon.png",
  },
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={cn(
          "antialiased min-h-screen flex flex-col font-sans",
          montserrat.variable
        )}
      >
        <SessionProvider>
          <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
            <SettingsProvider>
              <TooltipProvider delayDuration={0}>
                <div className="relative flex-1">{children}</div>
                <Toaster position="top-right" richColors closeButton />
              </TooltipProvider>
            </SettingsProvider>
          </ThemeProvider>
        </SessionProvider>
      </body>
    </html>
  );
}
// END OF FILE: app/layout.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/not-found.tsx

import { getServerSession } from "next-auth/next";
import { AlertTriangle } from "lucide-react"; // Using a more relevant icon

import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { NotFoundButtons } from "@/components/not-found-buttons";

export default async function NotFound() {
  const session = await getServerSession(authOptions);
  const isAuthenticated = !!session;

  // Determine primary link props (remains same)
  const primaryLinkHref = isAuthenticated ? "/business-actor/dashboard" : "/";
  const primaryLinkText = isAuthenticated
    ? "Return to Dashboard"
    : "Go to Homepage";

  return (
    // Consistent background with auth pages
    <div className="flex min-h-screen flex-col items-center justify-center p-8 text-center bg-gradient-to-br from-background via-background to-muted/30 dark:to-muted/10">
      {/* Card styling similar to AuthCardWrapper, apply animation */}
      <div className="max-w-lg w-full rounded-xl bg-card p-8 sm:p-10 shadow-xl border border-border/60 space-y-6 animate-fade-in-up">
        <AlertTriangle className="mx-auto h-16 w-16 text-destructive opacity-70" />{" "}
        {/* Changed Icon and color */}
        <h1 className="text-6xl font-extrabold tracking-tighter text-destructive lg:text-8xl">
          404
        </h1>
        <h2 className="text-2xl font-semibold tracking-tight text-foreground sm:text-3xl">
          Page Not Found
        </h2>
        <p className="text-base text-muted-foreground">
          Sorry, the page you requested could not be found. It might have been
          moved, deleted, or the URL might be incorrect.
        </p>
        {/* Use the Client Component for buttons */}
        <NotFoundButtons
          isAuthenticated={isAuthenticated}
          primaryLinkHref={primaryLinkHref}
          primaryLinkText={primaryLinkText}
        />
      </div>
      <p className="mt-12 text-xs text-muted-foreground animate-fade-in-up [animation-delay:0.2s]">
        If you believe this is an error, please{" "}
        <a href="/help" className="underline hover:text-primary">
          contact support
        </a>
        . {/* Added link */}
      </p>
    </div>
  );
}
// END OF FILE: app/not-found.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/page.tsx

"use client";

import React from "react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { ModeToggle } from "@/components/mode-toggle";
import { ArrowRight, ShieldCheck, Zap, Layers, Building2, User, ShieldAlert } from "lucide-react";
import { cn } from "@/lib/utils";
import Image from "next/image";
import { AppFooter } from "@/components/app-footer";

export default function LandingPage() {
  return (
    <div className="flex min-h-screen w-full flex-col items-center bg-background text-foreground overflow-x-hidden">
      <header className="fixed top-0 left-0 right-0 z-50 border-b bg-background/80 backdrop-blur-sm">
        <div className="container mx-auto flex h-16 items-center justify-between px-4">
          <Link href="/" className="flex items-center gap-2 font-bold text-lg">
            <Image src={"/logo.svg"} width={32} height={32} alt="Logo" />
            <span>YowYob</span>
          </Link>
          <div className="flex items-center gap-2">
            <ModeToggle />
            <Button asChild variant="ghost">
              <Link href="/login">Log In</Link>
            </Button>
            <Button asChild>
              <Link href="/signup">Get Started</Link>
            </Button>
          </div>
        </div>
      </header>

      <div className="absolute inset-0 -z-10 h-full w-full bg-white dark:bg-black bg-[linear-gradient(to_right,#8080800a_1px,transparent_1px),linear-gradient(to_bottom,#8080800a_1px,transparent_1px)] bg-[size:32px_32px]">
        <div className="absolute left-0 right-0 top-0 -z-10 m-auto h-[410px] w-[410px] rounded-full bg-primary/10 blur-3xl dark:bg-primary/20"></div>
      </div>

      <main className="w-full">
        <section className="container mx-auto mt-16 px-4 pt-20 text-center">
          <div className="flex flex-col items-center justify-center">
            <h1 className="text-4xl font-extrabold tracking-tight text-foreground sm:text-5xl lg:text-6xl max-w-4xl">
              The Command Center for
              <span className="block bg-gradient-to-br from-primary via-primary/80 to-blue-400 bg-clip-text text-transparent">
                Your Entire Business
              </span>
            </h1>
            <p className="mx-auto mt-6 max-w-2xl text-lg text-muted-foreground">
              Stop juggling multiple apps. YowYob integrates your entire business—from organization management and customer relations to secure administration—into one intelligent, unified platform.
            </p>
            <div className="mt-8 flex flex-col items-center justify-center gap-4 sm:flex-row">
              <Button size="lg" asChild>
                <Link href="/signup">
                  Get Started For Free
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Link>
              </Button>
            </div>
          </div>
        </section>

        <section id="features" className="container mx-auto mt-24 max-w-6xl px-4 md:mt-32 scroll-mt-20">
          <div className="mb-12 text-center">
            <h2 className="text-3xl font-bold tracking-tight">A Dashboard for Every Role</h2>
            <p className="mt-2 text-muted-foreground">Powerful tools tailored to your specific needs.</p>
          </div>
          <div className="grid grid-cols-1 gap-8 md:grid-cols-3">
            <FeatureCard
              icon={Building2}
              title="For Business Actors"
              description="The ultimate toolkit to build and grow. Manage your organization, define products, oversee agencies, and track performance."
            />
            <FeatureCard
              icon={User}
              title="For Customers"
              description="A simple, elegant portal to engage with services, track transactions and rewards, and manage your personal profile with ease."
            />
            <FeatureCard
              icon={ShieldAlert}
              title="For Super Admins"
              description="The eagle-eye view. Oversee all platform activity, manage users and roles, and ensure the system's security and integrity."
            />
          </div>
        </section>

        <section id="unified-workspace" className="container mx-auto mt-24 max-w-6xl px-4 md:mt-32 scroll-mt-20">
          <div className="mb-12 text-center">
            <h2 className="text-3xl font-bold tracking-tight">One Unified Workspace</h2>
            <p className="mt-2 text-muted-foreground">
              Manage your entire business lifecycle from a single, secure environment.
            </p>
          </div>
          <div className="grid grid-cols-1 gap-8 md:grid-cols-3">
            <InfoCard icon={Layers} title="Manage & Organize" description="Structure your business with tools for creating organizations, defining agencies, and managing employees." />
            <InfoCard icon={Zap} title="Engage & Transact" description="Connect with your customers, manage prospects, and handle sales with integrated CRM-like features." />
            <InfoCard icon={ShieldCheck} title="Secure & Administer" description="Your data privacy is paramount. Robust security protocols protect your business at every level." />
          </div>
        </section>

        <section className="container mx-auto mt-24 max-w-4xl px-4 md:mt-32">
          <div className="relative overflow-hidden rounded-2xl bg-primary/90 p-8 text-center shadow-2xl shadow-primary/20 sm:p-12">
            <div className="absolute inset-0 bg-[url('/grid.svg')] bg-center [mask-image:linear-gradient(180deg,white,rgba(255,255,255,0))]"></div>
            <div className="relative z-10">
              <h2 className="text-3xl font-bold text-primary-foreground">Ready to Unify Your Business?</h2>
              <p className="mt-2 text-primary-foreground/80">Join businesses building their future on YowYob. Create your account today.</p>
              <Button size="lg" variant="secondary" asChild className="mt-6">
                <Link href="/signup">Sign Up Now <ArrowRight className="ml-2 h-4 w-4" /></Link>
              </Button>
            </div>
          </div>
        </section>
      </main>
      <AppFooter className="mt-32" />
    </div>
  );
}

// --- Helper Components ---
interface FeatureCardProps { icon: React.ElementType; title: string; description: string; }
const FeatureCard = ({ icon: Icon, title, description }: FeatureCardProps) => (
  <div className="flex flex-col items-center text-center p-6 border rounded-lg bg-card/50">
    <div className="flex h-12 w-12 items-center justify-center rounded-full border bg-muted">
      <Icon className="h-6 w-6 text-primary" />
    </div>
    <h3 className="mt-4 text-xl font-semibold">{title}</h3>
    <p className="mt-2 text-muted-foreground">{description}</p>
  </div>
);

interface InfoCardProps { icon: React.ElementType; title: string; description: string; }
const InfoCard = ({ icon: Icon, title, description }: InfoCardProps) => (
  <div className="rounded-xl border bg-card/50 p-6 text-center shadow-sm">
    <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-primary/10">
      <Icon className="h-6 w-6 text-primary" />
    </div>
    <h3 className="mt-4 text-xl font-semibold">{title}</h3>
    <p className="mt-2 text-muted-foreground">{description}</p>
  </div>
);
// END OF FILE: app/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/robots.ts

import { MetadataRoute } from 'next';

export default function robots(): MetadataRoute.Robots {
  const siteUrl = process.env.NEXT_PUBLIC_URL || 'http://localhost:3000';

  return {
    rules: [
      {
        userAgent: '*',
        allow: '/',
        disallow: [
          '/api/',
          '/settings/',
          '/dashboard/',
          '/business-actor/',
          '/super-admin/',
        ],
      },
    ],
    sitemap: `${siteUrl}/sitemap.xml`,
  };
}// END OF FILE: app/robots.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/sitemap.ts

import { MetadataRoute } from 'next';

export default function sitemap(): MetadataRoute.Sitemap {
  const siteUrl = process.env.NEXT_PUBLIC_URL || 'http://localhost:3000';

  // List your public-facing pages here
  const publicRoutes = [
    '/',
    '/pricing',
    '/login',
    '/signup',
    '/forgot-password',
    '/help',
  ];

  const routes = publicRoutes.map((route) => ({
    url: `${siteUrl}${route}`,
    lastModified: new Date().toISOString(),
    changeFrequency: 'monthly' as const,
    priority: route === '/' ? 1 : 0.8,
  }));

  return routes;
}// END OF FILE: app/sitemap.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/.code-workspace.code-workspace

{
	"folders": [
		{
			"path": "."
		}
	],
	"settings": {
		"typescript.tsdk": "node_modules/typescript/lib",
		"postman.settings.dotenv-detection-notification-visibility": false
	}
}// END OF FILE: .code-workspace.code-workspace

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/admin/business-domains/business-domain-card.tsx

"use client";

import React from "react";
import { BusinessDomainDto } from "@/types/organization";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Tag } from "lucide-react";

interface BusinessDomainCardProps {
  domain: BusinessDomainDto;
  onEditAction: (domain: BusinessDomainDto) => void;
  onDeleteAction: (domain: BusinessDomainDto) => void;
}

export function BusinessDomainCard({ domain, onEditAction, onDeleteAction }: BusinessDomainCardProps) {
  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border rounded-md">
            <AvatarImage src={domain.image} alt={domain.name} />
            <AvatarFallback className="rounded-md"><Tag className="h-6 w-6 text-muted-foreground" /></AvatarFallback>
          </Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">{domain.name}</CardTitle>
            <p className="text-xs text-muted-foreground">{domain.type_label}</p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(domain)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onDeleteAction(domain)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow text-sm text-muted-foreground">
        <p className="line-clamp-2">{domain.description || "No description provided."}</p>
      </CardContent>
      <CardFooter>
        <Button variant="outline" className="w-full" onClick={() => onEditAction(domain)}>View Details</Button>
      </CardFooter>
    </Card>
  );
}// END OF FILE: components/admin/business-domains/business-domain-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/admin/business-domains/business-domain-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { BusinessDomainDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

const formSchema = z.object({
  name: z.string().min(3, "Domain name is required."),
  type: z.string().min(2, "Type code is required (e.g., TECH)."),
  type_label: z.string().min(3, "Type label is required (e.g., Technology)."),
  description: z.string().optional(),
  image: z.string().url("Must be a valid URL.").optional().or(z.literal("")),
});

export type BusinessDomainFormData = z.infer<typeof formSchema>;

interface BusinessDomainFormProps {
  initialData?: Partial<BusinessDomainDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: BusinessDomainFormData) => Promise<boolean>;
}

export function BusinessDomainForm({ initialData, mode, onSubmitAction }: BusinessDomainFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<BusinessDomainFormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: initialData?.name || "",
      type: initialData?.type || "",
      type_label: initialData?.type_label || "",
      description: initialData?.description || "",
      image: initialData?.image || "",
    },
  });

  const handleSubmit = async (data: BusinessDomainFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Create Business Domain" : "Edit Business Domain"}
      description="Manage the categories that organizations can operate within."
      submitButtonText={mode === 'create' ? "Create Domain" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <FormField control={form.control} name="name" render={({ field }) => (<FormItem><FormLabel>Domain Name *</FormLabel><FormControl><Input placeholder="e.g., Technology & Software" {...field} /></FormControl><FormMessage /></FormItem>)} />
          <div className="grid grid-cols-2 gap-4">
            <FormField control={form.control} name="type" render={({ field }) => (<FormItem><FormLabel>Type Code *</FormLabel><FormControl><Input placeholder="e.g., TECH" {...field} /></FormControl><FormMessage /></FormItem>)} />
            <FormField control={form.control} name="type_label" render={({ field }) => (<FormItem><FormLabel>Type Label *</FormLabel><FormControl><Input placeholder="e.g., Technology" {...field} /></FormControl><FormMessage /></FormItem>)} />
          </div>
          <FormField control={form.control} name="image" render={({ field }) => (<FormItem><FormLabel>Icon URL</FormLabel><FormControl><Input type="url" placeholder="https://example.com/icon.png" {...field} /></FormControl><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="description" render={({ field }) => (<FormItem><FormLabel>Description</FormLabel><FormControl><Textarea placeholder="Describe this business domain..." {...field} /></FormControl><FormMessage /></FormItem>)} />
        </div>
      )}
    </FormWrapper>
  );
}// END OF FILE: components/admin/business-domains/business-domain-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/admin/business-domains/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { BusinessDomainDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Tag } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";

interface RowActionsProps {
  domain: BusinessDomainDto;
  onEditAction: (domain: BusinessDomainDto) => void;
  onDeleteAction: (domain: BusinessDomainDto) => void;
}

const RowActions: React.FC<RowActionsProps> = ({ domain, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(domain)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(domain)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getBusinessDomainColumns = (
  actionHandlers: Omit<RowActionsProps, "domain">
): ColumnDef<BusinessDomainDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false} onCheckedChange={v => table.toggleAllPageRowsSelected(!!v)} aria-label="Select all" />
,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Domain Name" />,
    cell: ({ row }) => {
      const domain = row.original;
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border rounded-md">
            <AvatarImage src={domain.image} alt={domain.name} />
            <AvatarFallback className="rounded-md"><Tag className="h-5 w-5 text-muted-foreground" /></AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{domain.name}</div>
            <div className="text-xs text-muted-foreground">{domain.type_label}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "type",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Type Code" />,
  },
  {
    accessorKey: "description",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Description" />,
    cell: ({ row }) => <p className="text-sm text-muted-foreground truncate max-w-xs">{row.getValue("description")}</p>,
  },
  {
    id: "actions",
    cell: ({ row }) => <RowActions domain={row.original} {...actionHandlers} />,
  },
];// END OF FILE: components/admin/business-domains/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/admin/users/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { UserDto } from "@/types/auth";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Shield, Ban } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";

interface RowActionsProps {
  user: UserDto;
  onEditAction: (user: UserDto) => void;
}

const RowActions: React.FC<RowActionsProps> = ({ user, onEditAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild><Button variant="ghost" className="h-8 w-8 p-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => onEditAction(user)}><Edit className="mr-2 h-4 w-4" /> Edit User</DropdownMenuItem>
        <DropdownMenuItem className="text-destructive focus:text-destructive"><Ban className="mr-2 h-4 w-4" /> Disable User</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getUserColumns = (actionHandlers: Omit<RowActionsProps, "user">): ColumnDef<UserDto>[] => [
  { id: "select", header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected()} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} />, cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} />, enableSorting: false, enableHiding: false },
  {
    accessorKey: "first_name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="User" />,
    cell: ({ row }) => {
      const user = row.original;
      const name = `${user.first_name || ''} ${user.last_name || ''}`.trim() || user.username;
      const fallback = name ? name.charAt(0).toUpperCase() : "U";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border"><AvatarImage src={undefined} alt={name} /><AvatarFallback>{fallback}</AvatarFallback></Avatar>
          <div>
            <div className="font-medium">{name}</div>
            <div className="text-xs text-muted-foreground">{user.email}</div>
          </div>
        </div>
      );
    },
  },
  { accessorKey: "username", header: ({ column }) => <DataTableColumnHeader column={column} title="Username" /> },
  {
    accessorKey: "is_enabled",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Status" />,
    cell: ({ row }) => <Badge variant={row.getValue("is_enabled") ? "default" : "destructive"}>{row.getValue("is_enabled") ? "Enabled" : "Disabled"}</Badge>,
    filterFn: (row, id, value) => value.includes(String(row.getValue(id))),
  },
  { id: "actions", cell: ({ row }) => <RowActions user={row.original} {...actionHandlers} /> },
];
// END OF FILE: components/admin/users/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/app-footer.tsx

"use client";

import React from "react";
import Link from "next/link";
import { Separator } from "@/components/ui/separator";
import { Globe, Shield, FileText, MessageSquareHeart } from "lucide-react";
import { cn } from "@/lib/utils";
import Image from "next/image";

interface AppFooterProps {
  className?: string;
}

export function AppFooter({ className }: AppFooterProps) {
  const currentYear = new Date().getFullYear();

  const footerLinks = [
    { name: "Privacy Policy", href: "/privacy-policy" },
    { name: "Terms of Service", href: "/terms-of-service" },
    { name: "Help Center", href: "/help" },
  ];

  return (
    <footer className={cn("bg-background border-t text-muted-foreground print:hidden", className)}>
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="py-8 grid grid-cols-1 md:grid-cols-3 gap-8 items-center">
          <div className="flex items-center justify-center md:justify-start gap-2">
            <Image src="/logo.svg" alt="YowYob Logo" width={28} height={28} />
            <span className="text-lg font-semibold text-foreground">YowYob</span>
          </div>
          <nav className="flex flex-wrap justify-center gap-x-6 gap-y-2 md:col-span-1">
            {footerLinks.map((item) => (
              <Link key={item.name} href={item.href} className="text-sm hover:text-primary transition-colors">
                {item.name}
              </Link>
            ))}
          </nav>
        </div>
        <Separator className="mb-6" />
        <div className="py-6 flex flex-col sm:flex-row justify-between items-center text-xs">
          <p>© {currentYear} YowYob Inc. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
}
// END OF FILE: components/app-footer.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/auth/auth-card-wrapper.tsx

import React from "react";
import Link from "next/link";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Image from "next/image";

interface AuthCardWrapperProps {
  children: React.ReactNode;
  title: string;
  description?: string;
  backButtonLabel: string;
  backButtonHref: string;
  showSocial?: boolean;
}

export const AuthCardWrapper = ({
  children,
  title,
  description,
  backButtonLabel,
  backButtonHref,
  showSocial,
}: AuthCardWrapperProps) => {
  return (
    // Added slightly more padding (py-8) and refined shadow/border
    <Card className="w-xl shadow-lg border border-border/40 py-2 sm:py-4">
      <CardHeader className="text-center px-6 sm:px-8 pt-6 pb-4"> {/* Adjusted padding */}
        <div className="mx-auto mb-4">
          <Image src="/logo.svg" alt="Logo" width={48} height={48} />
        </div>
        <CardTitle className="text-2xl font-semibold tracking-tight">{title}</CardTitle>
        {description && (
          <CardDescription className="text-sm text-muted-foreground pt-1">
            {description}
          </CardDescription>
        )}
      </CardHeader>
      {/* Adjusted content padding */}
      <CardContent className="px-6 sm:px-8">{children}</CardContent>
      {showSocial && (
        // Keep social section padding consistent
        <CardFooter className="flex-col px-6 sm:px-8 pt-4 pb-0">
          <div className="w-full">
            <div className="relative my-4">
              <div className="absolute inset-0 flex items-center">
                <span className="w-full border-t border-border/60" />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-card px-2 text-muted-foreground">
                  Or continue with
                </span>
              </div>
            </div>
            {/* Placeholder for Social Buttons */}
            <p className="text-center text-sm text-muted-foreground py-4">Social logins coming soon!</p>
          </div>
        </CardFooter>
      )}
       {/* Adjusted footer padding and button style */}
      <CardFooter className="flex justify-center px-6 sm:px-8 pt-2 pb-6">
        <Button variant="link" className="px-0 font-normal text-sm text-muted-foreground hover:text-primary" size="sm" asChild>
          <Link href={backButtonHref}>{backButtonLabel}</Link>
        </Button>
      </CardFooter>
    </Card>
  );
};// END OF FILE: components/auth/auth-card-wrapper.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/auth/forgot-password-form.tsx

// FILE: components/auth/forgot-password-form.tsx
"use client";

import React, { useState, useTransition } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";

import { AuthCardWrapper } from "./auth-card-wrapper";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertTriangle, CheckCircle } from "lucide-react";

const ForgotPasswordSchema = z.object({
  email: z.string().email({ message: "Please enter a valid email address." }),
});

type ForgotPasswordFormValues = z.infer<typeof ForgotPasswordSchema>;

export const ForgotPasswordForm = () => {
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [isPending, startTransition] = useTransition();

  const form = useForm<ForgotPasswordFormValues>({
    resolver: zodResolver(ForgotPasswordSchema),
    defaultValues: {
      email: "",
    },
  });

  const onSubmit = (values: ForgotPasswordFormValues) => {
    setError(null);
    setSuccess(null);

    startTransition(async () => {
      // !!! IMPORTANT: Replace this with an API call to your backend !!!
      // Your backend should:
      // 1. Check if the email exists.
      // 2. Generate a secure password reset token.
      // 3. Store the token (with expiry) associated with the user.
      // 4. Send an email to the user with a link containing the token.
      console.log("Simulating password reset request for:", values.email);
      try {
        // --- Start Placeholder ---
        await new Promise(resolve => setTimeout(resolve, 1000));
        // Simulate success
        console.log("Simulated password reset email sent to:", values.email);
        // --- End Placeholder ---

        setSuccess("Password reset email sent! Please check your inbox.");

      } catch (err) {
        console.error("Forgot Password Simulation Error:", err);
        setError("Something went wrong. Please try again.");
      }
      // !!! END OF REPLACEMENT BLOCK !!!
    });
  };

  return (
    <AuthCardWrapper
      title="Forgot Your Password?"
      description="Enter your email to receive reset instructions"
      backButtonLabel="Back to Sign In"
      backButtonHref="/login"
    >
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-4">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email Address</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="email"
                      placeholder="you@example.com"
                      disabled={isPending}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          {error && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          {success && (
            <Alert variant="default" className="bg-green-100 dark:bg-green-900/30 border-green-300 dark:border-green-700">
              <CheckCircle className="h-4 w-4 text-green-600 dark:text-green-400" />
              <AlertTitle className="text-green-800 dark:text-green-300">Success!</AlertTitle>
              <AlertDescription className="text-green-700 dark:text-green-400">
                {success}
              </AlertDescription>
            </Alert>
          )}

          <Button type="submit" className="w-full" disabled={isPending || !!success}>
            {isPending ? "Sending..." : "Send Reset Instructions"}
          </Button>
        </form>
      </Form>
    </AuthCardWrapper>
  );
};// END OF FILE: components/auth/forgot-password-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/auth/login-form.tsx

"use client";

import React, { useState, useTransition } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { signIn } from "next-auth/react";
import { useSearchParams } from "next/navigation";
import Link from "next/link";
import { AuthCardWrapper } from "./auth-card-wrapper";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertTriangle, Eye, EyeOff, Loader2 } from "lucide-react";
import { toast } from "sonner";

const LoginSchema = z.object({
  username: z
    .string()
    .min(1, { message: "Username, email or phone is required." }),
  password: z.string().min(1, { message: "Password is required." }),
});

type LoginFormValues = z.infer<typeof LoginSchema>;

export const LoginForm = () => {
  const searchParams = useSearchParams();
  const callbackUrl = searchParams.get("callbackUrl");
  const [error, setError] = useState<string | null>(null);
  const [isPending, startTransition] = useTransition();
  const [showPassword, setShowPassword] = useState(false);
  const isNewUser = searchParams.get("new_user") === "true";

  const form = useForm<LoginFormValues>({
    resolver: zodResolver(LoginSchema),
    defaultValues: { username: "", password: "" },
  });

  const onSubmit: SubmitHandler<LoginFormValues> = (values) => {
    setError(null);
    startTransition(async () => {
      try {
        const result = await signIn("credentials", {
          redirect: false,
          username: values.username,
          password: values.password,
        });

        if (result?.error) {
          const errorMessage =
            result.error === "CredentialsSignin"
              ? "Invalid username or password."
              : result.error;
          setError(errorMessage);
          toast.error(errorMessage);
        } else if (result?.ok) {
          toast.success("Login successful! Redirecting...");
          const destination =  "/dashboard";
          window.location.href =destination
        } else {
          setError("An unexpected error occurred during login.");
          toast.error("An unexpected login error occurred.");
        }
      } catch (err) {
        setError("An unexpected error occurred. Please try again.");
        toast.error("An unexpected error occurred.");
      }
    });
  };

  return (
    <AuthCardWrapper
      title="Welcome Back"
      description="Sign in to access your dashboard"
      backButtonLabel="Don't have an account? Sign Up"
      backButtonHref="/signup"
    >
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-4">
            <FormField
              control={form.control}
              name="username"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Username, Email or Phone</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="yourusername"
                      {...field}
                      disabled={isPending}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <div className="flex justify-between items-center">
                    <FormLabel>Password</FormLabel>
                    <Button
                      size="sm"
                      variant="link"
                      asChild
                      className="px-0 font-normal text-xs h-auto text-muted-foreground hover:text-primary"
                    >
                      <Link href="/forgot-password" tabIndex={-1}>
                        Forgot password?
                      </Link>
                    </Button>
                  </div>
                  <FormControl>
                    <div className="relative">
                      <Input
                        type={showPassword ? "text" : "password"}
                        placeholder="••••••••"
                        {...field}
                        disabled={isPending}
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7"
                        onClick={() => setShowPassword(!showPassword)}
                        tabIndex={-1}
                      >
                        {showPassword ? (
                          <EyeOff className="h-4 w-4" />
                        ) : (
                          <Eye className="h-4 w-4" />
                        )}
                      </Button>
                    </div>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          {error && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Login Failed</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          <Button type="submit" className="w-full" disabled={isPending}>
            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isPending ? "Signing In..." : "Sign In"}
          </Button>
        </form>
      </Form>
    </AuthCardWrapper>
  );
};
// END OF FILE: components/auth/login-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/auth/signup-form.tsx

"use client";

import React, { useState, useTransition } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useRouter } from "next/navigation";
import { AuthCardWrapper } from "./auth-card-wrapper";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertTriangle, CheckCircle, Eye, EyeOff, Loader2 } from "lucide-react";
import { authRepository } from "@/lib/data-repo/auth";
import { CreateUserRequest } from "@/types/auth";
import { toast } from "sonner";

const SignUpSchema = z
  .object({
    username: z
      .string()
      .min(3, { message: "Username must be at least 3 characters." }),
    email: z
      .string()
      .email({ message: "Please enter a valid email address." })
      .optional()
      .or(z.literal("")),
    password: z
      .string()
      .min(6, { message: "Password must be at least 6 characters." }),
    confirmPassword: z
      .string()
      .min(6, { message: "Please confirm your password." }),
    first_name: z
      .string()
      .min(3, { message: "First name must be at least 3 characters." })
      .max(50),
    last_name: z.string().max(50).optional().or(z.literal("")),
    phone_number: z.string().optional().or(z.literal("")),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords do not match.",
    path: ["confirmPassword"],
  });

type SignUpFormValues = z.infer<typeof SignUpSchema>;

export const SignUpForm = () => {
  const router = useRouter();
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [isPending, startTransition] = useTransition();
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const form = useForm<SignUpFormValues>({
    resolver: zodResolver(SignUpSchema),
    defaultValues: {
      username: "",
      email: "",
      password: "",
      confirmPassword: "",
      first_name: "",
      last_name: "",
      phone_number: "",
    },
  });

  const onSubmit: SubmitHandler<SignUpFormValues> = (values) => {
    setError(null);
    setSuccess(null);
    startTransition(async () => {
      try {
        const requestPayload: CreateUserRequest = {
          username: values.username,
          password: values.password,
          first_name: values.first_name,
          ...(values.email && { email: values.email }),
          ...(values.last_name && { last_name: values.last_name }),
          ...(values.phone_number && { phone_number: values.phone_number }),
        };

        const registeredUser = await authRepository.register(requestPayload);
        toast.success(
          `Account for ${registeredUser.username} created! Redirecting to login...`
        );
        setSuccess(`Account created successfully! Please proceed to login.`);

        setTimeout(() => {
          // Redirect to login with a query param to indicate a new user
          router.push("/login?new_user=true");
        }, 2000);
      } catch (err) {
        const apiErrorMessage =
          err.message || "An unknown error occurred during sign up.";
        setError(apiErrorMessage);
        toast.error(apiErrorMessage);
      }
    });
  };

  return (
    <AuthCardWrapper
      title="Create an Account"
      description="Enter your details to get started"
      backButtonLabel="Already have an account? Sign In"
      backButtonHref="/login"
    >
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="first_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>
                    First Name <span className="text-destructive">*</span>
                  </FormLabel>
                  <FormControl>
                    <Input placeholder="John" {...field} disabled={isPending} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="last_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Last Name</FormLabel>
                  <FormControl>
                    <Input placeholder="Doe" {...field} disabled={isPending} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="username"
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  Username <span className="text-destructive">*</span>
                </FormLabel>
                <FormControl>
                  <Input
                    placeholder="johndoe"
                    {...field}
                    disabled={isPending}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Email</FormLabel>
                <FormControl>
                  <Input
                    type="email"
                    placeholder="you@example.com"
                    {...field}
                    disabled={isPending}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="phone_number"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Phone Number</FormLabel>
                <FormControl>
                  <Input
                    type="tel"
                    placeholder="+1234567890"
                    {...field}
                    disabled={isPending}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="password"
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  Password <span className="text-destructive">*</span>
                </FormLabel>
                <FormControl>
                  <div className="relative">
                    <Input
                      type={showPassword ? "text" : "password"}
                      placeholder="••••••••"
                      {...field}
                      disabled={isPending}
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      className="absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7"
                      onClick={() => setShowPassword(!showPassword)}
                      tabIndex={-1}
                    >
                      {showPassword ? (
                        <EyeOff className="h-4 w-4" />
                      ) : (
                        <Eye className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="confirmPassword"
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  Confirm Password <span className="text-destructive">*</span>
                </FormLabel>
                <FormControl>
                  <div className="relative">
                    <Input
                      type={showConfirmPassword ? "text" : "password"}
                      placeholder="••••••••"
                      {...field}
                      disabled={isPending}
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      className="absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7"
                      onClick={() =>
                        setShowConfirmPassword(!showConfirmPassword)
                      }
                      tabIndex={-1}
                    >
                      {showConfirmPassword ? (
                        <EyeOff className="h-4 w-4" />
                      ) : (
                        <Eye className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          {error && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Sign Up Failed</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          {success && (
            <Alert
              variant="default"
              className="bg-green-100 dark:bg-green-900/30 border-green-300 dark:border-green-700"
            >
              <CheckCircle className="h-4 w-4 text-green-600 dark:text-green-400" />
              <AlertTitle className="text-green-800 dark:text-green-300">
                Success!
              </AlertTitle>
              <AlertDescription className="text-green-700 dark:text-green-400">
                {success}
              </AlertDescription>
            </Alert>
          )}
          <Button
            type="submit"
            className="w-full transition-all hover:brightness-110 active:scale-[0.98]"
            disabled={isPending || !!success}
          >
            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isPending ? "Creating Account..." : "Create Account"}
          </Button>
        </form>
      </Form>
    </AuthCardWrapper>
  );
};
// END OF FILE: components/auth/signup-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/business-actor/business-actor-form.tsx

"use client";

import React, { useMemo, useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { toast } from "sonner";
import { organizationRepository } from "@/lib/data-repo/organization";
import { mediaRepository } from "@/lib/data-repo/media";
import {
  CreateBusinessActorRequest,
  BusinessActorTypeValues,
  GenderValues,
  BusinessActorDto,
  UpdateBusinessActorRequest,
} from "@/types/organization";
import { UserDto } from "@/types/auth";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Loader2 } from "lucide-react";
import { isValid } from "date-fns";
import { Button } from "../ui/button";

const personalInfoSchema = z.object({
  first_name: z.string().min(2, "First name is required."),
  last_name: z.string().min(2, "Last name is required."),
  gender: z.enum(GenderValues, { required_error: "Gender is required." }),
  birth_date: z
    .date({ required_error: "Date of birth is required." })
    .max(new Date(), "Date of birth cannot be in the future."),
  nationality: z.string().min(2, "Nationality is required."),
  is_individual: z.boolean().default(true),
});

const professionalInfoSchema = z.object({
  type: z.enum(BusinessActorTypeValues, {
    required_error: "Actor type is required.",
  }),
  profession: z.string().min(2, "Profession is required."),
  biography: z.string().min(10, "A brief biography is required.").max(500),
});

const contactAndMediaSchema = z.object({
  email: z.string().email("A valid contact email is required."),
  phone_number: z.string().optional().or(z.literal("")),
  avatarFile: z.any().optional(),
  profileFile: z.any().optional(),
  avatar_picture: z
    .string()
    .url("Invalid URL")
    .or(z.literal(""))
    .nullable()
    .optional(),
  profile_picture: z
    .string()
    .url("Invalid URL")
    .or(z.literal(""))
    .nullable()
    .optional(),
});

const adminSchema = z.object({
  user_id: z
    .string({ required_error: "You must select a user." })
    .min(1, "You must select a user."),
});

const fullBASchema = personalInfoSchema
  .merge(professionalInfoSchema)
  .merge(contactAndMediaSchema)
  .merge(adminSchema.partial()); // Make admin fields optional by default

interface BusinessActorFormProps {
  mode: "create" | "edit";
  initialData?: Partial<BusinessActorDto>;
  onSuccessAction: (data: BusinessActorDto) => void;
  onCancelAction: () => void;
  isAdminMode?: boolean;
  users?: UserDto[];
}

export function BusinessActorForm({
  mode,
  initialData,
  onSuccessAction,
  onCancelAction,
  isAdminMode = false,
  users = [],
}: BusinessActorFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const formSchema = useMemo(() => {
    if (isAdminMode && mode === "create") {
      return fullBASchema.required({ user_id: true });
    }
    return fullBASchema;
  }, [isAdminMode, mode]);

  type BAFormData = z.infer<typeof formSchema>;

  const form = useForm<BAFormData>({
    resolver: zodResolver(formSchema),
    mode: "onChange",
    defaultValues: {
      first_name: initialData?.first_name || "",
      last_name: initialData?.last_name || "",
      gender: initialData?.gender,
      birth_date:
        initialData?.birth_date && isValid(new Date(initialData.birth_date))
          ? new Date(initialData.birth_date)
          : undefined,
      nationality: initialData?.nationality || "",
      is_individual: initialData?.is_individual ?? true,
      type: initialData?.type,
      profession: initialData?.profession || "",
      biography: initialData?.biography || "",
      email: initialData?.email || "",
      phone_number: initialData?.phone_number || "",
      avatar_picture: initialData?.avatar_picture || "",
      profile_picture: initialData?.profile_picture || "",
  
    },
  });

  const onSubmit = async (data: BAFormData) => {
    setIsLoading(true);
    const userIdForUpload =
      mode === "edit" ? initialData?.business_actor_id : data.user_id;
    if (!userIdForUpload) {
      toast.error("Target user ID is missing.");
      setIsLoading(false);
      return;
    }

    try {
      let avatarUrl = data.avatar_picture;
      if (data.avatarFile instanceof File) {
        const res = await mediaRepository.uploadFile(
          "business-actor",
          "image",
          "avatars",
          userIdForUpload,
          data.avatarFile
        );
        avatarUrl = res.url;
      }

      const payload: CreateBusinessActorRequest | UpdateBusinessActorRequest = {
        ...data,
        birth_date: data.birth_date.toISOString(),
        avatar_picture: avatarUrl ?? undefined,
      };

      if (mode === "edit" && initialData?.business_actor_id) {
        const updatedBA = await organizationRepository.updateBusinessActor(
          initialData.business_actor_id,
          payload
        );
        toast.success("Business Actor profile updated successfully!");
        onSuccessAction(updatedBA);
      } else {
        const newBA = await organizationRepository.createBusinessActor(
          payload as CreateBusinessActorRequest
        );
        toast.success(
          `Business Actor profile created for ${newBA.first_name}.`
        );
        onSuccessAction(newBA);
      }
    } catch (error: any) {
      toast.error(error.message || `An error occurred.`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        {isAdminMode && (
          <FormField
            control={form.control}
            name="user_id"
            render={({ field }) => (
              <FormItem>
                <FormLabel>User to Assign *</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  disabled={mode === "edit"}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a user to create a profile for..." />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {users.map((user) => (
                      <SelectItem key={user.id} value={user.id!}>
                        {user.first_name} {user.last_name} ({user.email})
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {mode === "edit" && (
                  <FormDescription>
                    The assigned user cannot be changed.
                  </FormDescription>
                )}
                <FormMessage />
              </FormItem>
            )}
          />
        )}
        {/* All other form fields remain the same, wrapped in their respective sections */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="first_name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>First Name *</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="last_name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Last Name *</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Contact Email *</FormLabel>
              <FormControl>
                <Input type="email" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="type"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Actor Type *</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select role..." />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {BusinessActorTypeValues.map((t) => (
                    <SelectItem key={t} value={t}>
                      {t}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <div className="flex justify-end gap-2 pt-4">
          <Button
            type="button"
            variant="outline"
            onClick={onCancelAction}
            disabled={isLoading}
          >
            Cancel
          </Button>
          <Button type="submit" disabled={isLoading}>
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {mode === "create" ? "Create Profile" : "Save Changes"}
          </Button>
        </div>
      </form>
    </Form>
  );
}
// END OF FILE: components/business-actor/business-actor-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/command-palette.tsx

"use client";

import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import {
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandSeparator,
} from "@/components/ui/command";
import {
  LayoutGrid,
  Building,
  Users,
  Settings,
  HelpCircle,
  FileText,
} from "lucide-react";

interface CommandPaletteProps {
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
}

export function CommandPalette({ isOpen, setIsOpen }: CommandPaletteProps) {
  const router = useRouter();
  const { userOrganizations, agenciesForCurrentOrg, activeOrganizationId } =
    useActiveOrganization();

  const runCommand = (command: () => unknown) => {
    setIsOpen(false);
    command();
  };

  return (
    <CommandDialog open={isOpen} onOpenChange={setIsOpen}>
      <CommandInput placeholder="Type a command or search..." />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>

        <CommandGroup heading="Navigation">
          <CommandItem
            onSelect={() => runCommand(() => router.push("/dashboard"))}
          >
            <LayoutGrid className="mr-2 h-4 w-4" />
            <span>Dashboard</span>
          </CommandItem>
          <CommandItem
            onSelect={() => runCommand(() => router.push("/settings"))}
          >
            <Settings className="mr-2 h-4 w-4" />
            <span>Settings</span>
          </CommandItem>
          <CommandItem onSelect={() => runCommand(() => router.push("/help"))}>
            <HelpCircle className="mr-2 h-4 w-4" />
            <span>Help & Support</span>
          </CommandItem>
        </CommandGroup>

        {activeOrganizationId && (
          <>
            <CommandSeparator />
            <CommandGroup heading="Active Organization">
              <CommandItem
                onSelect={() =>
                  runCommand(() => router.push("/business-actor/org/agencies"))
                }
              >
                <Building className="mr-2 h-4 w-4" />
                <span>Manage Agencies</span>
              </CommandItem>
              <CommandItem
                onSelect={() =>
                  runCommand(() => router.push("/business-actor/org/employees"))
                }
              >
                <Users className="mr-2 h-4 w-4" />
                <span>Manage Employees</span>
              </CommandItem>
            </CommandGroup>
          </>
        )}

        {userOrganizations.length > 0 && (
          <>
            <CommandSeparator />
            <CommandGroup heading="Organizations">
              {userOrganizations.map((org) => (
                <CommandItem
                  key={org.organization_id}
                  onSelect={() =>
                    runCommand(() => router.push("/business-actor/dashboard"))
                  }
                >
                  <FileText className="mr-2 h-4 w-4" />
                  <span>{org.long_name}</span>
                </CommandItem>
              ))}
            </CommandGroup>
          </>
        )}

        {agenciesForCurrentOrg.length > 0 && (
          <>
            <CommandSeparator />
            <CommandGroup heading="Agencies">
              {agenciesForCurrentOrg.map((agency) => (
                <CommandItem
                  key={agency.agency_id}
                  onSelect={() =>
                    runCommand(() =>
                      router.push("/business-actor/agency/dashboard")
                    )
                  }
                >
                  <Building className="mr-2 h-4 w-4" />
                  <span>{agency.long_name}</span>
                </CommandItem>
              ))}
            </CommandGroup>
          </>
        )}
      </CommandList>
    </CommandDialog>
  );
}
// END OF FILE: components/command-palette.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/customer/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import Image from "next/image";
import { ProductListItemData } from "@/types/product";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  ShoppingCart,
  Info,
  Package,
  Combine,
  PlayCircle,
  CheckCircle2,
  InfoIcon as StatusInfoIcon,
  CircleSlash, // Renamed to avoid conflict
} from "lucide-react";
import { ImagePlaceholder } from "@/components/ui/image-placeholder";

// Helper for state display (can be moved to a shared utils file if used elsewhere)
interface StateDisplayInfo {
  variant: "default" | "secondary" | "outline" | "destructive";
  icon: React.ElementType;
  label: string;
}

const getStateDisplayInfo = (state: string = ""): StateDisplayInfo => {
  const upperState = state.toUpperCase();
  const label = upperState.toLowerCase().replace(/_/g, " ");
  switch (upperState) {
    case "PUBLISHED":
    case "AVAILABLE":
    case "FINISHED":
      return { variant: "default", icon: CheckCircle2, label };
    case "PLANNED": // Assuming customers might see planned services
      return { variant: "secondary", icon: PlayCircle, label }; // Or a clock icon
    case "ONGOING": // For active services
      return { variant: "outline", icon: PlayCircle, label };
    // case "IN_USE": // For resources, might not be a primary filter for customers
    //   return { variant: "outline", icon: PlayCircle, label };
    case "CANCELLED":
      return { variant: "destructive", icon: CircleSlash, label };
    default:
      return {
        variant: "outline",
        icon: StatusInfoIcon,
        label: label || "Unknown",
      };
  }
};

export interface CustomerProductRowActionsProps {
  product: ProductListItemData;
  onViewDetails: (product: ProductListItemData) => void;
  onReserve: (product: ProductListItemData) => void;
}

const CustomerProductRowActions: React.FC<CustomerProductRowActionsProps> = ({
  product,
  onViewDetails,
  onReserve,
}) => {
  return (
    <div className="flex items-center justify-end gap-2">
      <Button
        variant="outline"
        size="sm"
        className="h-8 px-2"
        onClick={() => onViewDetails(product)}
        title="View Details"
      >
        <Info className="h-3.5 w-3.5" />
        <span className="sr-only sm:not-sr-only sm:ml-1.5">Details</span>
      </Button>
      <Button
        variant="default"
        size="sm"
        className="h-8 px-2"
        onClick={() => onReserve(product)}
        title="Reserve or Enquire"
      >
        <ShoppingCart className="h-3.5 w-3.5" />
        <span className="sr-only sm:not-sr-only sm:ml-1.5">Reserve</span>
      </Button>
    </div>
  );
};

export const getCustomerProductColumns = (
  actionHandlers: Omit<CustomerProductRowActionsProps, "product">
): ColumnDef<ProductListItemData>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected()
            ? true
            : table.getIsSomePageRowsSelected()
            ? "indeterminate"
            : false
        }
        onCheckedChange={(v) => table.toggleAllPageRowsSelected(!!v)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
        className="translate-y-[2px]"
      />
    ),
    enableSorting: false,
    enableHiding: false,
    size: 40,
  },
  {
    id: "imageAndName",
    accessorFn: (row) => row.name,
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Product / Service" />
    ),
    cell: ({ row }) => {
      /* ... same as before ... */
      const product = row.original;
      return (
        <div className="flex items-center gap-3 py-1">
          <div className="h-12 w-12 flex-shrink-0 rounded-md overflow-hidden">
            {product.imageUrl && product.imageUrl !== "/placeholder.svg" ? (
              <Image
                src={product.imageUrl}
                alt={product.name}
                width={48}
                height={48}
                className="object-cover h-full w-full"
              />
            ) : (
              <ImagePlaceholder
                iconType={
                  product.productType === "RESOURCE" ? "resource" : "service"
                }
                className="h-12 w-12"
                iconClassName="h-6 w-6"
              />
            )}
          </div>
          <div className="flex flex-col min-w-0">
            <span
              className="font-medium text-sm leading-snug line-clamp-2 hover:text-primary cursor-pointer truncate"
              onClick={() => actionHandlers.onViewDetails(product)}
              title={product.name}
            >
              {product.name}
            </span>
            {product.baInfo && (
              <span
                className="text-xs text-muted-foreground flex items-center mt-0.5 truncate"
                title={`Offered by ${product.baInfo.name}`}
              >
                <Avatar className="h-4 w-4 mr-1.5 border flex-shrink-0">
                  <AvatarImage
                    src={product.baInfo.logoUrl}
                    alt={product.baInfo.name}
                  />
                  <AvatarFallback className="text-[8px] bg-secondary text-secondary-foreground">
                    {product.baInfo.name.charAt(0)}
                  </AvatarFallback>
                </Avatar>
                <span className="truncate">{product.baInfo.name}</span>
              </span>
            )}
          </div>
        </div>
      );
    },
    enableHiding: false,
    size: 300,
  },
  {
    accessorKey: "productType",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Type" />
    ),
    cell: ({ row }) => {
      /* ... same as before ... */
      const ProductIcon =
        row.original.productType === "RESOURCE" ? Package : Combine;
      return (
        <Badge
          variant={
            row.original.productType === "RESOURCE" ? "outline" : "secondary"
          }
          className="capitalize text-xs items-center font-normal"
        >
          <ProductIcon className="mr-1.5 h-3.5 w-3.5 opacity-80" />
          {row.original.productType.toLowerCase()}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
    size: 120,
  },
  {
    // ADDED currentState column for filtering
    accessorKey: "currentState",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Status" />
    ),
    cell: ({ row }) => {
      const stateInfo = getStateDisplayInfo(row.original.currentState);
      const StatusIconComponent = stateInfo.icon;
      return (
        <Badge
          variant={stateInfo.variant}
          className="capitalize text-xs items-center font-normal"
        >
          <StatusIconComponent className="mr-1.5 h-3.5 w-3.5 opacity-80" />
          {stateInfo.label}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id)), // Faceted filter needs this
    size: 130,
  },
  {
    accessorKey: "basePrice",
    header: ({ column }) => (
      <DataTableColumnHeader
        column={column}
        title="Price"
        className="justify-end"
      />
    ),
    cell: ({ row }) => {
      /* ... same as before ... */
      const amount = row.original.basePrice;
      if (amount === undefined || amount === null)
        return (
          <div className="text-right text-sm text-muted-foreground italic">
            N/A
          </div>
        );
      const formatted = new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
      }).format(amount);
      return <div className="text-right font-medium text-sm">{formatted}</div>;
    },
    sortingFn: "alphanumeric",
    size: 100,
  },
  {
    id: "actions",
    cell: ({ row }) => (
      <CustomerProductRowActions
        product={row.original}
        onViewDetails={actionHandlers.onViewDetails}
        onReserve={actionHandlers.onReserve}
      />
    ),
    enableSorting: false,
    enableHiding: false, // Typically keep actions visible for customers
    size: 150,
  },
];
// END OF FILE: components/customer/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/customer/CustomerProductCard.tsx

"use client";

import React from "react";
import Image from "next/image";
import { ProductListItemData } from "@/types/product";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { DollarSign, ShoppingCart, Info, Package, Combine } from "lucide-react"; // Removed UserCircle
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
// import { cn } from "@/lib/utils";
import { ImagePlaceholder } from "@/components/ui/image-placeholder"; // Import placeholder

interface CustomerProductCardProps {
  product: ProductListItemData;
  onViewDetailsClick: (product: ProductListItemData) => void;
  onReserveClick: (product: ProductListItemData) => void;
}

export function CustomerProductCard({ product, onViewDetailsClick, onReserveClick }: CustomerProductCardProps) {
  const ProductIcon = product.productType === "RESOURCE" ? Package : Combine;
  const baNameInitial = product.baInfo?.name ? product.baInfo.name.charAt(0).toUpperCase() : "B";

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-all duration-300 ease-in-out transform hover:-translate-y-1 group">
      <div className="relative w-full aspect-[16/10] overflow-hidden rounded-t-lg bg-muted"> {/* Added bg-muted as fallback */}
        {product.imageUrl ? (
          <Image
            src={product.imageUrl}
            alt={product.name}
            fill
            sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
            className="object-cover transition-transform duration-500 group-hover:scale-105"
          />
        ) : (
          <ImagePlaceholder iconType={product.productType === 'RESOURCE' ? 'resource' : 'service'} className="h-full w-full rounded-t-lg" iconClassName="h-16 w-16" />
        )}
        <Badge
          variant={product.productType === "RESOURCE" ? "outline" : "secondary"}
          className="absolute top-2.5 right-2.5 capitalize text-xs items-center backdrop-blur-sm bg-background/80 dark:bg-card/80 px-2.5 py-1 shadow"
        >
          <ProductIcon className="mr-1.5 h-3.5 w-3.5 opacity-90" />
          {product.productType.toLowerCase()}
        </Badge>
      </div>

      <CardHeader className="pb-2 pt-4">
        <CardTitle
          className="text-base sm:text-lg font-semibold leading-tight line-clamp-2 hover:text-primary cursor-pointer"
          onClick={() => onViewDetailsClick(product)}
          title={product.name}
        >
          {product.name}
        </CardTitle>
        {product.baInfo && (
          <CardDescription className="text-xs mt-1 flex items-center group-hover:text-foreground/90 transition-colors">
            <Avatar className="h-5 w-5 mr-1.5 border">
              <AvatarImage src={product.baInfo.logoUrl} alt={product.baInfo.name} />
              <AvatarFallback className="text-[9px] bg-secondary text-secondary-foreground">
                {baNameInitial}
              </AvatarFallback>
            </Avatar>
            By <span className="font-medium text-foreground/80 group-hover:text-foreground">{product.baInfo.name}</span>
          </CardDescription>
        )}
      </CardHeader>

      <CardContent className="flex-grow space-y-2 text-sm py-2">
        {product.description && (
          <p className="text-muted-foreground line-clamp-3 text-xs leading-relaxed min-h-[48px]">
            {product.description}
          </p>
        )}
        <div className="flex items-baseline text-xl font-bold text-primary pt-1">
          {product.basePrice != null ? (
            <>
              <DollarSign className="h-5 w-5 mr-0.5 opacity-90" />
              {product.basePrice.toFixed(2)}
              <span className="text-xs font-normal text-muted-foreground ml-1">
                {product.productType === 'SERVICE' ? '/session' : '/item'}
              </span>
            </>
          ) : (
            <span className="italic text-base text-muted-foreground">Price on enquiry</span>
          )}
        </div>
      </CardContent>

      <CardFooter className="pt-3 pb-4 flex flex-col sm:flex-row gap-2.5 items-stretch sm:items-center">
        <Button variant="outline" size="sm" onClick={() => onViewDetailsClick(product)} className="w-full sm:w-auto flex-1 group/button hover:border-primary/70">
          <Info className="mr-2 h-4 w-4 text-primary/80 group-hover/button:text-primary" /> Details
        </Button>
        <Button size="sm" onClick={() => onReserveClick(product)} className="w-full sm:w-auto flex-1 group/button">
          <ShoppingCart className="mr-2 h-4 w-4" /> Reserve
        </Button>
      </CardFooter>
    </Card>
  );
}// END OF FILE: components/customer/CustomerProductCard.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/customer/CustomerProductDataTableToolbar.tsx

"use client";

import { Table } from "@tanstack/react-table";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { ProductListItemData } from "@/types/product";
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  SlidersHorizontal,
  X,
  Package,
  Combine,
  Search,
  PlayCircle, // For ONGOING/IN_USE
  CheckCircle2, // For PUBLISHED/AVAILABLE/FINISHED
  InfoIcon, // For generic states
} from "lucide-react";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";
import { cn } from "@/lib/utils";

export const customerProductTypeOptions: DataTableFilterOption[] = [
  { label: "Resource", value: "RESOURCE", icon: Package },
  { label: "Service", value: "SERVICE", icon: Combine },
];

// Customer-facing product states - ensure these values match your data
export const customerProductStateOptions: DataTableFilterOption[] = [
  { label: "Published", value: "PUBLISHED", icon: CheckCircle2 }, // For Services
  { label: "Available", value: "AVAILABLE", icon: CheckCircle2 }, // For Resources
  { label: "Ongoing", value: "ONGOING", icon: PlayCircle },       // For Services
  // { label: "In Use", value: "IN_USE", icon: PlayCircle },      // For Resources (maybe less relevant as a filter *for* customers)
  // { label: "Finished", value: "FINISHED", icon: CheckCircle2 }, // For Services (maybe less relevant as primary filter)
  // Add other states if applicable, e.g., "PLANNED" if you show upcoming services
];


interface CustomerProductDataTableToolbarProps<TData extends ProductListItemData> {
  table: Table<TData>;
  globalFilter: string;
  setGlobalFilterAction: (value: string) => void;
}

export function CustomerProductDataTableToolbar<TData extends ProductListItemData>({
  table,
  globalFilter,
  setGlobalFilterAction,
}: CustomerProductDataTableToolbarProps<TData>) {
  const isFiltered = table.getState().columnFilters.length > 0 || !!globalFilter;

  const resetAllFilters = () => {
    table.resetColumnFilters();
    setGlobalFilterAction("");
  };

  return (
    <div className="flex flex-col sm:flex-row items-center justify-between gap-x-4 gap-y-2 py-4">
      <div className="flex flex-1 flex-col sm:flex-row items-center gap-2 w-full sm:w-auto">
        <div className="relative w-full sm:w-auto">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none" />
          <Input
            placeholder="Search all..."
            value={globalFilter ?? ""}
            onChange={(event) => setGlobalFilterAction(event.target.value)}
            className="h-10 w-full sm:w-[180px] lg:w-[250px] pl-10" // Adjusted width
          />
        </div>
        {table.getColumn("productType") && (
          <DataTableFacetedFilter
            column={table.getColumn("productType")}
            title="Type"
            options={customerProductTypeOptions}
          />
        )}
        {/* Add State Filter */}
        {table.getColumn("currentState") && (
          <DataTableFacetedFilter
            column={table.getColumn("currentState")}
            title="Status"
            options={customerProductStateOptions}
          />
        )}
      </div>

      <div className="flex items-center gap-x-2 w-full sm:w-auto justify-between sm:justify-end">
        {isFiltered && (
          <Button
            variant="ghost"
            onClick={resetAllFilters}
            className="h-10 px-2 lg:px-3 text-sm"

          >
            Reset Filters
            <X className="ml-2 h-4 w-4" />
          </Button>
        )}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" size="sm" className="h-10">
              <SlidersHorizontal className="mr-2 h-4 w-4" />
              View Columns
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-[180px]">
            <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>
            <DropdownMenuSeparator />
            {table
              .getAllColumns()
              .filter(
                (column) =>
                  typeof column.accessorFn !== "undefined" && column.getCanHide()
              )
              .map((column) => {
                const formatColumnId = (id: string) => {
                  return id
                    .replace(/([A-Z](?=[a-z]))|([A-Z]+(?=[A-Z][a-z]|$))/g, ' $1$2')
                    .replace(/_/g, " ")
                    .trim()
                    .replace(/\b\w/g, char => char.toUpperCase());
                };
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    className="capitalize"
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) => column.toggleVisibility(!!value)}
                  >
                    {formatColumnId(column.id)}
                  </DropdownMenuCheckboxItem>
                );
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </div>
  );
}// END OF FILE: components/customer/CustomerProductDataTableToolbar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/customer/ReservationModal.tsx

"use client";

import React, { useState } from "react";
import { ProductListItemData } from "@/types/product";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
import { CalendarIcon, Loader2 } from "lucide-react";
import { format, isValid } from "date-fns";
import { toast } from "sonner";
import { cn } from "@/lib/utils";
// Assume an API function for creating reservations will exist in apiClient.ts
// import { reservationApi } from "@/lib/apiClient";

interface ReservationModalProps {
  product?: ProductListItemData | null;
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  onReservationSuccess: () => void; // Callback after successful reservation
}

interface ReservationFormData {
  preferredDate?: Date;
  notes?: string;
}

export function ReservationModal({ product, isOpen, onOpenChange, onReservationSuccess }: ReservationModalProps) {
  const [formData, setFormData] = useState<ReservationFormData>({});
  const [isLoading, setIsLoading] = useState(false);

  const handleDateSelect = (date?: Date) => {
    setFormData(prev => ({ ...prev, preferredDate: date }));
  };

  const handleNotesChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setFormData(prev => ({ ...prev, notes: e.target.value }));
  };

  const handleSubmitReservation = async () => {
    if (!product) return;
    setIsLoading(true);

    // Basic validation (can be expanded with Zod)
    if (product.productType === "SERVICE" && !formData.preferredDate) {
      toast.error("Please select a preferred date for the service.");
      setIsLoading(false);
      return;
    }

    console.log("Submitting reservation for:", product.id, "with data:", formData);

    // SIMULATE API CALL
    try {
      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay
      // const reservationPayload = {
      //   productId: product.id,
      //   productType: product.productType,
      //   preferredDate: formData.preferredDate?.toISOString(),
      //   notes: formData.notes,
      //   // customerId would be added on the backend from the session/token
      // };
      // await reservationApi.create(reservationPayload); // Example API call

      toast.success(`Reservation request for "${product.name}" submitted!`);
      onReservationSuccess();
      onOpenChange(false); // Close modal
      setFormData({}); // Reset form
    } catch (error)  {
      console.error("Reservation submission error:", error);
      toast.error(error.message || "Failed to submit reservation. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  if (!product) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>Reserve: {product.name}</DialogTitle>
          <DialogDescription>
            Confirm your interest or select preferences for this {product.productType.toLowerCase()}.
            {product.basePrice && <span className="block mt-1">Price: ${product.basePrice.toFixed(2)}</span>}
          </DialogDescription>
        </DialogHeader>

        <div className="py-4 space-y-4">
          {product.productType === "SERVICE" && ( // Date picker typically for services
            <div className="space-y-1.5">
              <Label htmlFor="preferredDate">Preferred Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant={"outline"}
                    className={cn(
                      "w-full justify-start text-left font-normal h-10",
                      !formData.preferredDate && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {formData.preferredDate && isValid(formData.preferredDate) ? format(formData.preferredDate, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={formData.preferredDate}
                    onSelect={handleDateSelect}
                    disabled={(date) => date < new Date(new Date().setDate(new Date().getDate() - 1))} // Disable past dates
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
          )}

          <div className="space-y-1.5">
            <Label htmlFor="notes">Additional Notes or Questions</Label>
            <Textarea
              id="notes"
              placeholder={`Any specific requests for ${product.name}? (Optional)`}
              value={formData.notes || ""}
              onChange={handleNotesChange}
              rows={3}
            />
          </div>
        </div>

        <DialogFooter className="gap-2 sm:gap-0">
          <DialogClose asChild>
            <Button type="button" variant="outline">Cancel</Button>
          </DialogClose>
          <Button type="button" onClick={handleSubmitReservation} disabled={isLoading}>
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isLoading ? "Submitting..." : (product.productType === "RESOURCE" ? "Express Interest" : "Submit Request")}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}// END OF FILE: components/customer/ReservationModal.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dashboard/agency/team-roster.tsx

"use client";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { EmployeeDto } from "@/types/organization";

interface TeamRosterProps {
  employees: EmployeeDto[];
}

export function TeamRoster({ employees }: TeamRosterProps) {
  return (
    <Card className="col-span-4 md:col-span-3">
      <CardHeader>
        <CardTitle>Team Roster</CardTitle>
        <CardDescription>Employees assigned to this agency.</CardDescription>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[350px]">
          {employees.length > 0 ? (
            <div className="space-y-6">
              {employees.map((employee) => (
                <div key={employee.employee_id} className="flex items-center">
                  <Avatar className="h-9 w-9">
                    <AvatarImage src={employee.logo} alt="Avatar" />
                    <AvatarFallback>{employee.first_name?.charAt(0)}{employee.last_name?.charAt(0)}</AvatarFallback>
                  </Avatar>
                  <div className="ml-4 space-y-1">
                    <p className="text-sm font-medium leading-none">{employee.first_name} {employee.last_name}</p>
                    <p className="text-sm text-muted-foreground capitalize">{employee.employee_role?.replace(/_/g, " ").toLowerCase() || "Member"}</p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="flex h-[300px] items-center justify-center text-center text-sm text-muted-foreground">
              <p>No employees assigned to this agency yet.</p>
            </div>
          )}
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/dashboard/agency/team-roster.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dashboard/dashboard-card.tsx

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { cn } from "@/lib/utils";
import React from "react";

interface DashboardCardProps {
  title: string;
  description?: string;
  icon: React.ElementType;
  className?: string;
  children: React.ReactNode;
}

export function DashboardCard({ title, description, icon: Icon, className, children }: DashboardCardProps) {
  return (
    <Card className={cn("flex flex-col", className)}>
      <CardHeader>
        <div className="flex items-start justify-between">
          <div className="space-y-1">
            <CardTitle className="text-lg flex items-center gap-2">
              <Icon className="h-5 w-5 text-muted-foreground" />
              {title}
            </CardTitle>
            {description && <CardDescription>{description}</CardDescription>}
          </div>
        </div>
      </CardHeader>
      <CardContent className="flex-grow">
        {children}
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/dashboard/dashboard-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dashboard/organization/recent-activity.tsx

"use client";

import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { formatDistanceToNow } from 'date-fns';
import { Users, Building, Briefcase, Truck } from 'lucide-react';
import React from "react";

export interface ActivityItem {
  id: string;
  type: 'Employee' | 'Agency' | 'Customer' | 'Supplier';
  action: 'created' | 'updated';
  timestamp: string;
  targetName: string;
}

const typeConfig = {
    Employee: { icon: Users, color: 'bg-sky-100 dark:bg-sky-900/40', textColor: 'text-sky-600 dark:text-sky-400' },
    Agency: { icon: Building, color: 'bg-amber-100 dark:bg-amber-900/40', textColor: 'text-amber-600 dark:text-amber-400' },
    Customer: { icon: Briefcase, color: 'bg-green-100 dark:bg-green-900/40', textColor: 'text-green-600 dark:text-green-400' },
    Supplier: { icon: Truck, color: 'bg-slate-100 dark:bg-slate-800/60', textColor: 'text-slate-600 dark:text-slate-400' },
};


export function RecentActivity({ activities }: { activities: ActivityItem[] }) {
  return (
    <Card className="col-span-4 md:col-span-3">
      <CardHeader>
        <CardTitle>Recent Activity</CardTitle>
        <CardDescription>An overview of the latest actions within your organization.</CardDescription>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[350px]">
            {activities.length > 0 ? (
                <div className="space-y-6">
                    {activities.map((activity) => {
                        const config = typeConfig[activity.type];
                        const Icon = config.icon;
                        return (
                        <div key={activity.id} className="flex items-center">
                            <Avatar className={`h-9 w-9 flex items-center justify-center ${config.color}`}>
                                <Icon className={`h-5 w-5 ${config.textColor}`} />
                            </Avatar>
                            <div className="ml-4 space-y-1">
                                <p className="text-sm font-medium leading-none">
                                    <span className="font-semibold text-primary">{activity.targetName}</span>
                                </p>
                                <p className="text-sm text-muted-foreground">
                                    {activity.type} {activity.action} • {formatDistanceToNow(new Date(activity.timestamp), { addSuffix: true })}
                                </p>
                            </div>
                        </div>
                        )
                    })}
                </div>
            ) : (
                <div className="flex h-[300px] items-center justify-center text-center text-sm text-muted-foreground">
                    <p>No recent activity to display.</p>
                </div>
            )}
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/dashboard/organization/recent-activity.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dashboard/organization/sales-chart.tsx

"use client";

import {
  Bar,
  BarChart,
  ResponsiveContainer,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  CartesianGrid,
} from "recharts";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

const data = [
  { month: "Jan", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Feb", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Mar", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Apr", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "May", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Jun", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Jul", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Aug", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Sep", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Oct", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Nov", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Dec", total: Math.floor(Math.random() * 5000) + 1000 },
];

export function SalesChart() {
  return (
    <Card className="col-span-4">
      <CardHeader>
        <CardTitle>Revenue Overview</CardTitle>
        <CardDescription>
          A summary of revenue generated per month this year.
        </CardDescription>
      </CardHeader>
      <CardContent className="pl-2">
        <ResponsiveContainer width="100%" height={350}>
          <BarChart data={data}>
            <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="hsl(var(--border))" />
            <XAxis
              dataKey="month"
              stroke="hsl(var(--muted-foreground))"
              fontSize={12}
              tickLine={false}
              axisLine={false}
            />
            <YAxis
              stroke="hsl(var(--muted-foreground))"
              fontSize={12}
              tickLine={false}
              axisLine={false}
              tickFormatter={(value) => `$${value / 1000}K`}
            />
            <Tooltip
              cursor={{ fill: "hsl(var(--muted))" }}
              contentStyle={{
                backgroundColor: "hsl(var(--background))",
                border: "1px solid hsl(var(--border))",
                color: "hsl(var(--foreground))",
              }}
            />
            <Legend iconType="circle" wrapperStyle={{ color: "hsl(var(--foreground))" }} />
            <Bar
              dataKey="total"
              fill="hsl(var(--primary))"
              radius={[4, 4, 0, 0]}
              name="Monthly Revenue"
            />
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/dashboard/organization/sales-chart.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dashboard/organization/stat-card.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { cn } from "@/lib/utils";
import React from "react";

interface StatCardProps {
  title: string;
  value: string;
  description?: string;
  icon: React.ElementType;
  className?: string;
}

export function StatCard({ title, value, description, icon: Icon, className }: StatCardProps) {
  return (
    <Card className={cn("hover:shadow-md transition-shadow", className)}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <Icon className="h-4 w-4 text-muted-foreground" />
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
        {description && (
          <p className="text-xs text-muted-foreground">{description}</p>
        )}
      </CardContent>
    </Card>
  );
}

export function StatCardSkeleton() {
    return <Skeleton className="h-[126px] w-full" />;
}
// END OF FILE: components/dashboard/organization/stat-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/date-range-picker.tsx

"use client"

import * as React from "react"
import { CalendarIcon } from "@radix-ui/react-icons"
import { addDays, format } from "date-fns"
import type { DateRange } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"

export function DateRangePicker({ className }: React.HTMLAttributes<HTMLDivElement>) {
  const [date, setDate] = React.useState<DateRange | undefined>({
    from: new Date(2023, 0, 20),
    to: addDays(new Date(2023, 0, 20), 20),
  })

  return (
    <div className={cn("grid gap-2", className)}>
      <Popover>
        <PopoverTrigger asChild>
          <Button
            id="date"
            variant={"outline"}
            className={cn("w-[300px] justify-start text-left font-normal", !date && "text-muted-foreground")}
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {date?.from ? (
              date.to ? (
                <>
                  {format(date.from, "LLL dd, y")} - {format(date.to, "LLL dd, y")}
                </>
              ) : (
                format(date.from, "LLL dd, y")
              )
            ) : (
              <span>Pick a date</span>
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0" align="start">
          <Calendar
            initialFocus
            mode="range"
            defaultMonth={date?.from}
            selected={date}
            onSelect={setDate}
            numberOfMonths={2}
          />
        </PopoverContent>
      </Popover>
    </div>
  )
}

// END OF FILE: components/date-range-picker.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dev/role-switcher.tsx

"use client";

import * as React from "react";
import { useRouter, usePathname } from "next/navigation";
import { User, ShieldAlert } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { cn } from "@/lib/utils";

type Role = "user" | "super-admin";

interface DevRoleSwitcherProps {
  className?: string;
}

export function DevRoleSwitcher({ className }: DevRoleSwitcherProps) {
  const router = useRouter();
  const pathname = usePathname();

  const currentRole: Role = pathname.startsWith('/super-admin') ? 'super-admin' : 'user';

  const handleRoleChange = (newRole: Role) => {
    if (newRole === 'super-admin') {
      router.push(`/super-admin/dashboard`);
    } else {
      router.push(`/dashboard`);
    }
  };

  // This component will only render in the development environment
  if (process.env.NODE_ENV !== 'development') {
    return null;
  }

  return (
    <div className={cn("flex items-center gap-2", className)}>
      <Select value={currentRole} onValueChange={handleRoleChange}>
        <SelectTrigger className="w-auto h-9 text-xs sm:text-sm focus:ring-0 focus:ring-offset-0 focus-visible:ring-offset-0 focus-visible:ring-0 shadow-sm border-dashed border-amber-500/50">
          <SelectValue placeholder="Switch Role..." />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="user" className="text-xs sm:text-sm">
            <div className="flex items-center gap-2"><User className="h-4 w-4 text-muted-foreground" /><span>User View</span></div>
          </SelectItem>
          <SelectItem value="super-admin" className="text-xs sm:text-sm">
            <div className="flex items-center gap-2"><ShieldAlert className="h-4 w-4 text-muted-foreground" /><span>Super Admin View</span></div>
          </SelectItem>
        </SelectContent>
      </Select>
    </div>
  );
}
// END OF FILE: components/dev/role-switcher.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/map/map-component.tsx

"use client";

import React, { useEffect } from "react";
import {
  MapContainer,
  TileLayer,
  Marker,
  Popup,
  useMapEvents,
  useMap,
} from "react-leaflet";
import L, { LatLngExpression, Icon } from "leaflet";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Expand, Shrink } from "lucide-react";

import "leaflet/dist/leaflet.css";
import markerIcon2x from "leaflet/dist/images/marker-icon-2x.png";
import markerIcon from "leaflet/dist/images/marker-icon.png";
import markerShadow from "leaflet/dist/images/marker-shadow.png";

L.Icon.Default.mergeOptions({
  iconUrl: markerIcon.src,
  iconRetinaUrl: markerIcon2x.src,
  shadowUrl: markerShadow.src,
});

export interface MapMarker {
  id: string | number;
  position: LatLngExpression;
  popupContent?: React.ReactNode;
  icon?: Icon;
}

export interface MapComponentProps {
  center: LatLngExpression;
  zoom: number;
  markers?: MapMarker[];
  onLocationSelectAction?: (lat: number, lng: number) => void;
  className?: string;
  isLocationPicker?: boolean;
  isFullscreen?: boolean;
  onToggleFullscreenAction?: () => void;
}

function LocationPicker({
  onLocationSelectAction,
}: {
  onLocationSelectAction: (lat: number, lng: number) => void;
}) {
  useMapEvents({
    click(e)  {
      onLocationSelectAction(e.latlng.lat, e.latlng.lng);
    },
  });
  return null;
}

function ChangeView({
  center,
  zoom,
}: {
  center: LatLngExpression;
  zoom: number;
}) {
  const map = useMap();
  useEffect(() => {
    map.flyTo(center, zoom, {
      animate: true,
      duration: 1.5,
    });
    setTimeout(() => {
      map.invalidateSize();
    }, 400);
  }, [center, zoom, map]);
  return null;
}

export function MapComponent({
  center,
  zoom,
  markers = [],
  onLocationSelectAction,
  className,
  isLocationPicker = false,
  isFullscreen = false,
  onToggleFullscreenAction,
}: MapComponentProps) {
  const handleToggleFullscreen = (e: React.MouseEvent) => {
    // CRITICAL: Stop the event from bubbling up to the map click listener
    e.stopPropagation();
    if (onToggleFullscreenAction) {
      onToggleFullscreenAction();
    }
  };
  const icon = new L.Icon({
    iconUrl: "/maps/marker-icon.png",
    shadowUrl: "/maps/marker-shadow.png",
    iconSize: [22, 32],
    shadowSize: [41, 41], // size of the shadow
    iconAnchor: [22, 64], // point of the icon which will correspond to marker location
    shadowAnchor: [24, 72], // the same for the shadow
    popupAnchor: [-11, -62], // point from which the popup should open relative to the iconAnchor
  });

  return (
    // The new wrapper div that enables overlaying
    <div className={cn("relative h-full w-full", className)}>
      <MapContainer
        center={center}
        zoom={zoom}
        scrollWheelZoom={true}
        // The MapContainer itself should always fill its relative parent
        className="h-full w-full z-0"
      >
        <ChangeView center={center} zoom={zoom} />
        <TileLayer
          attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />

        {markers.map((marker) => (
          <Marker key={marker.id} position={marker.position} icon={icon}>
            {marker.popupContent && <Popup>{marker.popupContent}</Popup>}
          </Marker>
        ))}

        {isLocationPicker && onLocationSelectAction && (
          <LocationPicker onLocationSelectAction={onLocationSelectAction} />
        )}
      </MapContainer>

      {/* The button is now a sibling to the map, overlaid with absolute positioning */}
      {onToggleFullscreenAction && (
        <div className="absolute top-3 right-3 z-[1000]">
          <Button
            variant="secondary"
            size="icon"
            onClick={handleToggleFullscreen}
            className=" h-9 w-9"
            title={isFullscreen ? "Exit Fullscreen" : "Enter Fullscreen"}
          >
            {isFullscreen ? (
              <Shrink className="h-4 w-4" />
            ) : (
              <Expand className="h-4 w-4" />
            )}
          </Button>
        </div>
      )}
    </div>
  );
}
// END OF FILE: components/map/map-component.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/map/map-skeleton.tsx

import { Skeleton } from "@/components/ui/skeleton";
import { MapPin } from "lucide-react";
import { cn } from "@/lib/utils";

export function MapSkeleton({ className }: { className?: string }) {
  return (
    <div
      className={cn(
        "relative w-full h-full min-h-[300px] bg-muted rounded-md flex items-center justify-center overflow-hidden",
        className
      )}
    >
      <div className="absolute inset-0 bg-grid-pattern opacity-5"></div>
      <div className="flex flex-col items-center text-muted-foreground z-10">
        <MapPin className="h-10 w-10 animate-bounce" />
        <p className="mt-2 text-sm font-medium">Loading Map...</p>
      </div>
      <Skeleton className="absolute inset-0 w-full h-full" />
    </div>
  );
}
// END OF FILE: components/map/map-skeleton.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/map/map-view.tsx

import dynamic from "next/dynamic";
import { MapSkeleton } from "./map-skeleton";
import { MapComponentProps } from "./map-component";

const DynamicMapComponent = dynamic(
  () => import("./map-component").then((mod) => mod.MapComponent),
  {
    ssr: false,
    loading: () => <MapSkeleton />,
  }
);

// The props type is now correctly imported from the implementation file.
export function MapView(props: MapComponentProps) {
  return <DynamicMapComponent {...props} />;
}
// END OF FILE: components/map/map-view.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/mode-toggle.tsx

"use client"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>Light</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>Dark</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>System</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

// END OF FILE: components/mode-toggle.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/not-found-buttons.tsx

// FILE: components/not-found-buttons.tsx
"use client"; // <-- Mark as Client Component

import Link from 'next/link';
import { useRouter } from 'next/navigation'; // Use App Router router
import { ArrowLeft } from 'lucide-react'; // Add ArrowLeft icon

import { Button } from '@/components/ui/button';
import { DashboardIcon } from '@radix-ui/react-icons';

interface NotFoundButtonsProps {
  isAuthenticated: boolean;
  primaryLinkHref: string;
  primaryLinkText: string;
}

export function NotFoundButtons({
  primaryLinkHref,
  primaryLinkText,
}: NotFoundButtonsProps) {
  const router = useRouter();

  const handleGoBack = () => {
    router.back(); // Use router.back() for navigation
  };

  return (
    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
      {/* Go Back Button */}
      <Button
        variant="outline" // Style as secondary action
        size="lg"
        onClick={handleGoBack}
        className="transition-transform hover:scale-105"
      >
        <ArrowLeft className="mr-2 h-5 w-5" />
        Go Back
      </Button>

      {/* Primary Action Button (Dashboard/Homepage) */}
      <Button asChild size="lg" className="transition-transform hover:scale-105">
        <Link href={primaryLinkHref} className="inline-flex items-center gap-2">
          <DashboardIcon className="h-5 w-5" />
          {primaryLinkText}
        </Link>
      </Button>
    </div>
  );
}// END OF FILE: components/not-found-buttons.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/notifications.tsx

"use client"

import { useState } from "react"
import { Bell, X, Info, AlertTriangle, CreditCard, TrendingUp, Gift } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"

const notifications = [
  {
    id: 1,
    title: "New Feature",
    message: "Check out our new budget tracking tool!",
    date: "2023-07-15",
    icon: Info,
    color: "text-blue-500",
  },
  {
    id: 2,
    title: "Account Alert",
    message: "Unusual activity detected on your account.",
    date: "2023-07-14",
    icon: AlertTriangle,
    color: "text-yellow-500",
  },
  {
    id: 3,
    title: "Payment Due",
    message: "Your credit card payment is due in 3 days.",
    date: "2023-07-13",
    icon: CreditCard,
    color: "text-red-500",
  },
  {
    id: 4,
    title: "Investment Update",
    message: "Your investment portfolio has grown by 5% this month.",
    date: "2023-07-12",
    icon: TrendingUp,
    color: "text-green-500",
  },
  {
    id: 5,
    title: "New Offer",
    message: "Youe eligible for a new savings account with higher interest!",
    date: "2023-07-11",
    icon: Gift,
    color: "text-purple-500",
  },
]

export function Notifications() {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <div className="relative">
      <Button
        variant="ghost"
        size="icon"
        className="relative"
        onClick={() => setIsOpen(!isOpen)}
        aria-label="Notifications"
      >
        <Bell className="h-5 w-5" />
        <span className="absolute top-0 right-0 h-2 w-2 bg-red-500 rounded-full" />
      </Button>
      {isOpen && (
        <Card className="absolute right-0 mt-2 w-96 z-50">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Notifications</CardTitle>
            <Button variant="ghost" size="icon" onClick={() => setIsOpen(false)} aria-label="Close notifications">
              <X className="h-4 w-4" />
            </Button>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-[400px] pr-4">
              {notifications.map((notification) => (
                <Card key={notification.id} className="mb-4 last:mb-0 border shadow-sm">
                  <CardContent className="p-4">
                    <div className="flex items-start space-x-4">
                      <div className={`${notification.color} p-2 rounded-full bg-opacity-10`}>
                        <notification.icon className={`h-5 w-5 ${notification.color}`} />
                      </div>
                      <div className="flex-1 space-y-1">
                        <p className="text-sm font-medium leading-none">{notification.title}</p>
                        <p className="text-sm text-muted-foreground">{notification.message}</p>
                        <p className="text-xs text-muted-foreground">{notification.date}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </ScrollArea>
          </CardContent>
        </Card>
      )}
    </div>
  )
}

// END OF FILE: components/notifications.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/address-list.tsx

"use client";

import React, { useState, useEffect, useCallback } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  AddressDto,
  AddressableType,
  CreateAddressRequest,
} from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { OrgAddressForm, addressSchema } from "./forms/org-address-form";
import {
  PlusCircle,
  Edit2,
  Trash2,
  Star,
  MapPin,
  Loader2,
  Eye,
} from "lucide-react";
import { toast } from "sonner";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import { MapView } from "../map/map-view";
import { Form } from "@/components/ui/form";

interface AddressListProps {
  organizationId: string;
  addressableType: AddressableType;
}

export function AddressList({
  organizationId,
  addressableType,
}: AddressListProps) {
  const [addresses, setAddresses] = useState<AddressDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isMapViewOpen, setIsMapViewOpen] = useState(false);
  const [editingAddress, setEditingAddress] = useState<AddressDto | undefined>(
    undefined
  );
  const [addressToView, setAddressToView] = useState<AddressDto | null>(null);

  const form = useForm<z.infer<typeof addressSchema>>({
    resolver: zodResolver(addressSchema),
    defaultValues: {
      address_line_1: "",
      city: "",
      state: "",
      zip_code: "",
      country: "",
    },
  });

  const fetchAddresses = useCallback(async () => {
    setIsLoading(true);
    try {
      const data = await organizationRepository.getAddresses(
        addressableType,
        organizationId
      );
      setAddresses(data || []);
    } catch (error) {
      toast.error("Failed to load addresses.");
    } finally {
      setIsLoading(false);
    }
  }, [organizationId, addressableType]);

  useEffect(() => {
    fetchAddresses();
  }, [fetchAddresses]);

  const handleFormSubmit = async (data: z.infer<typeof addressSchema>) => {
    const payload = { ...data, country_id: data.country };
    if (editingAddress && editingAddress.address_id) {
      await organizationRepository.updateAddress(
        addressableType,
        organizationId,
        editingAddress.address_id,
        payload
      );
      toast.success("Address updated successfully!");
    } else {
      await organizationRepository.createAddress(
        addressableType,
        organizationId,
        payload as CreateAddressRequest
      );
      toast.success("Address added successfully!");
    }
    await fetchAddresses();
    setIsFormOpen(false);
    setEditingAddress(undefined);
  };

  const handleEdit = (address: AddressDto) => {
    form.reset({
      address_line_1: address.address_line_1 || "",
      address_line_2: address.address_line_2 || "",
      city: address.city || "",
      state: address.state || "",
      zip_code: address.zip_code || "",
      country: address.country_id || "",
      latitude: address.latitude,
      longitude: address.longitude,
    });
    setEditingAddress(address);
    setIsFormOpen(true);
  };

  const handleCreate = () => {
    form.reset({
      address_line_1: "",
      city: "",
      state: "",
      zip_code: "",
      country: "",
    });
    setEditingAddress(undefined);
    setIsFormOpen(true);
  };

  const handleDelete = async (addressId?: string) => {
    if (!addressId || !confirm("Are you sure?")) return;
    try {
      await organizationRepository.deleteAddressById(
        addressableType,
        organizationId,
        addressId
      );
      toast.success("Address deleted.");
      fetchAddresses();
    } catch (error)  {
      toast.error(error.message || "Failed to delete address.");
    }
  };

  const handleSetDefault = async (addressId?: string) => {
    if (!addressId) return;
    try {
      await organizationRepository.markAddressAsFavorite(
        addressableType,
        organizationId,
        addressId
      );
      toast.success("Default address updated.");
      await fetchAddresses();
    } catch (error)  {
      toast.error(error.message || "Failed to set default address.");
    }
  };

  const handleViewOnMap = (address: AddressDto) => {
    setAddressToView(address);
    setIsMapViewOpen(true);
  };

  if (isLoading)
    return (
      <div className="space-y-3">
        <Skeleton className="h-20 w-full rounded-md" />
        <Skeleton className="h-20 w-full rounded-md" />
      </div>
    );

  return (
    <div className="space-y-4">
      <Button size="sm" variant="outline" onClick={handleCreate}>
        <PlusCircle className="mr-2 h-4 w-4" /> Add Address
      </Button>

      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
        {/* THE FIX: Increased max-width for the address form dialog */}
        <DialogContent className="sm:max-w-4xl">
          <DialogHeader>
            <DialogTitle>
              {editingAddress ? "Edit Address" : "Add New Address"}
            </DialogTitle>
          </DialogHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleFormSubmit)}>
              {/* Note: The OrgAddressForm doesnapper here */}
              <OrgAddressForm form={form} title="" description="" />
              <DialogFooter className="mt-6 pt-4 border-t sm:justify-end">
                <DialogClose asChild>
                  <Button type="button" variant="outline">
                    Cancel
                  </Button>
                </DialogClose>
                <Button type="submit" disabled={form.formState.isSubmitting}>
                  {form.formState.isSubmitting && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}{" "}
                  Save
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      <Dialog open={isMapViewOpen} onOpenChange={setIsMapViewOpen}>
        <DialogContent className="max-w-3xl h-[70vh] flex flex-col p-2">
          <DialogHeader className="p-4 pb-2">
            <DialogTitle>Address Location</DialogTitle>
            <DialogDescription>
              {addressToView?.address_line_1}, {addressToView?.city}
            </DialogDescription>
          </DialogHeader>
          <div className="flex-grow w-full h-full rounded-md overflow-hidden">
            {addressToView?.latitude && addressToView?.longitude && (
              <MapView
                center={[addressToView.latitude, addressToView.longitude]}
                zoom={16}
                markers={[
                  {
                    id: addressToView.address_id!,
                    position: [addressToView.latitude, addressToView.longitude],
                  },
                ]}
              />
            )}
          </div>
        </DialogContent>
      </Dialog>

      {addresses.length === 0 ? (
        <p className="text-sm text-muted-foreground text-center py-6">
          No addresses found.
        </p>
      ) : (
        <div className="space-y-3">
          {addresses.map((addr) => (
            <div
              key={addr.address_id}
              className="p-4 border rounded-lg flex justify-between items-start text-sm"
            >
              <div>
                <p className="font-semibold text-foreground flex items-center">
                  <MapPin className="h-4 w-4 mr-2 text-muted-foreground" />
                  {addr.address_line_1}
                  {addr.address_line_2 && `, ${addr.address_line_2}`}
                </p>
                <p className="text-muted-foreground pl-6">
                  {addr.city}, {addr.state} {addr.zip_code}
                </p>
                {addr.is_default && (
                  <Badge
                    variant="secondary"
                    className="mt-2 ml-6 text-xs font-normal"
                  >
                    Default Address
                  </Badge>
                )}
              </div>
              <div className="flex items-center gap-1 flex-shrink-0 ml-2">
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8"
                  onClick={() => handleViewOnMap(addr)}
                  title="View on map"
                  disabled={!addr.latitude || !addr.longitude}
                >
                  <Eye className="h-4 w-4" />
                </Button>
                {!addr.is_default && (
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-8 w-8"
                    onClick={() => handleSetDefault(addr.address_id)}
                    title="Set as default"
                  >
                    <Star className="h-4 w-4" />
                  </Button>
                )}
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8"
                  onClick={() => handleEdit(addr)}
                  title="Edit address"
                >
                  <Edit2 className="h-4 w-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-destructive hover:text-destructive"
                  onClick={() => handleDelete(addr.address_id)}
                  title="Delete address"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
// END OF FILE: components/organization/address-list.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-basic-info-form.tsx

"use client";

import { useFormContext } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { CardContent } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { BusinessDomainSearchPicker } from "../forms/business-domain-search-picker";

export function AgencyBasicInfoForm() {
  const { control } = useFormContext();
  return (
    <CardContent className="space-y-4">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <FormField
          control={control}
          name="long_name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Official Name *</FormLabel>
              <FormControl>
                <Input
                  placeholder="e.g., Yowyob West Coast Division"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="short_name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Short Name / Branch Name *</FormLabel>
              <FormControl>
                <Input placeholder="e.g., Yowyob West" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>
      <FormField
        control={control}
        name="location"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Location *</FormLabel>
            <FormControl>
              <Input placeholder="e.g., San Francisco, CA" {...field} />
            </FormControl>
            <FormDescription>
              A general location identifier (e.g., city, state).
            </FormDescription>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        control={control}
        name="description"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Description</FormLabel>
            <FormControl>
              <Textarea
                rows={4}
                placeholder="Describe the agency purpose or specialty."
                {...field}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <BusinessDomainSearchPicker
        name="business_domains"
        label="Business Domains *"
      />
      <FormField
        control={control}
        name="transferable"
        render={({ field }) => (
          <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm">
            <div className="space-y-0.5">
              <FormLabel>Transferable</FormLabel>
              <FormDescription>
                Can resources/personnel be transferred from this agency?
              </FormDescription>
            </div>
            <FormControl>
              <Switch checked={field.value} onCheckedChange={field.onChange} />
            </FormControl>
          </FormItem>
        )}
      />
    </CardContent>
  );
}
// END OF FILE: components/organization/agencies/agency-basic-info-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-branding-form.tsx

"use client";

import { useFormContext, useFieldArray, UseFormReturn } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { PlusCircle, Trash2 } from "lucide-react";

// THE FIX: Define the props interface
interface AgencyBrandingFormProps {
  form: UseFormReturn<any>;
}

export function AgencyBrandingForm({ form }: AgencyBrandingFormProps) {
  // THE FIX: Destructure props
  const { control } = form; // THE FIX: Get control from the passed form prop

  const { fields, append, remove } = useFieldArray({
    control,
    name: "images",
  });

  return (
    <Card className="ml-2 mr-2">
      <CardContent className="space-y-4">
        <FormField
          control={control}
          name="logo"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Logo URL</FormLabel>
              <FormControl>
                <Input
                  type="url"
                  placeholder="https://example.com/logo.png"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="greeting_message"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Greeting Message</FormLabel>
              <FormControl>
                <Textarea placeholder="Welcome to our branch!" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="social_network"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Social Network URL</FormLabel>
              <FormControl>
                <Input
                  type="url"
                  placeholder="https://linkedin.com/company/yowyob-west"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        {/* <FormField
          control={control}
          name="keywords"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Keywords</FormLabel>
              <FormControl>
                <Input placeholder="tech, west-coast, innovation" {...field} />
              </FormControl>
              <FormDescription>
                Comma-separated keywords for searchability.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        /> */}
        <div className="space-y-3">
          <FormLabel>Image Gallery URLs</FormLabel>
          <FormDescription>
            Add URLs for images showcasing the agency.
          </FormDescription>
          {fields.map((field, index) => (
            <FormField
              key={field.id}
              control={control}
              name={`images.${index}`}
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center gap-2">
                    <FormControl>
                      <Input
                        placeholder="https://example.com/image.png"
                        {...field}
                      />
                    </FormControl>
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      onClick={() => remove(index)}
                      className="text-destructive hover:text-destructive h-9 w-9 flex-shrink-0"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          ))}
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() => append({ value: "" })}
          >
            <PlusCircle className="mr-2 h-4 w-4" /> Add Image URL
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/organization/agencies/agency-branding-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-card.tsx

"use client";

import React from "react";
import { AgencyDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  LogIn,
  Building,
  MapPin,
  CheckCircle,
  XCircle,
} from "lucide-react";
import { cn } from "@/lib/utils";
import Image from "next/image";

interface AgencyCardProps {
  agency: AgencyDto;
  onEnterAction: (agency: AgencyDto) => void;
  onEditAction: (agencyId: string) => void;
  onDeleteAction: (agency: AgencyDto) => void;
}

export function AgencyCard({
  agency,
  onEnterAction,
  onEditAction,
  onDeleteAction,
}: AgencyCardProps) {
  const statusInfo = agency.is_active
    ? { icon: CheckCircle, color: "text-green-500", label: "Active" }
    : { icon: XCircle, color: "text-destructive", label: "Inactive" };

  return (
    // [FIX] Added flex, flex-col, and h-full to ensure consistent card height in a grid
    <Card className="flex flex-col h-full shadow-md hover:shadow-xl transition-all duration-300 ease-in-out transform hover:-translate-y-1 group">
      <CardHeader>
        <div className="flex justify-between items-start gap-3">
          <div className="flex items-center gap-4">
            {agency.logo ? (
              <Image
                src={agency.logo}
                alt={agency.long_name || ""}
                width={48}
                height={48}
                className="h-12 w-12 rounded-lg object-cover border"
              />
            ) : (
              <div className="h-12 w-12 rounded-lg bg-muted flex items-center justify-center border">
                <Building className="h-6 w-6 text-muted-foreground" />
              </div>
            )}
            <div>
              <CardTitle
                className="text-md font-bold leading-tight line-clamp-2"
                title={agency.long_name}
              >
                {agency.long_name}
              </CardTitle>
              <CardDescription className="text-xs">
                {agency.short_name}
              </CardDescription>
            </div>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 flex-shrink-0"
              >
                <MoreHorizontal className="h-4 w-4" />
                <span className="sr-only">Agency actions</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onEditAction(agency.agency_id!)}>
                <Edit3 className="mr-2 h-4 w-4" /> Edit Details
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => onDeleteAction(agency)}
                className="text-destructive focus:text-destructive"
              >
                <Trash2 className="mr-2 h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      {/* [FIX] Added flex-grow to make this section expand and push the footer down */}
      <CardContent className="flex-grow space-y-3 text-sm py-2">
        <div className="flex items-center text-muted-foreground text-xs">
          <MapPin className="h-3.5 w-3.5 mr-1.5 flex-shrink-0" />
          <span>{agency.location || "Location not set"}</span>
        </div>
        <p className="text-muted-foreground line-clamp-3 text-xs leading-relaxed min-h-[48px]">
          {agency.description || "No description provided."}
        </p>
        <div className="flex flex-wrap gap-1">
          {agency.business_domains?.slice(0, 2).map((domain, index) => (
            <Badge key={index} variant="secondary" className="font-normal">
              {domain}
            </Badge>
          ))}
          {(agency.business_domains?.length ?? 0) > 2 && (
            <Badge variant="outline">
              +{(agency.business_domains?.length ?? 0) - 2} more
            </Badge>
          )}
        </div>
      </CardContent>
      <CardFooter className="pt-3 pb-4 flex justify-between items-center">
        <Badge
          variant={agency.is_active ? "default" : "destructive"}
          className={cn(
            "capitalize text-xs items-center px-2 py-0.5",
            agency.is_active
              ? "bg-green-100 text-green-800 border-green-200 dark:bg-green-900/30 dark:text-green-300 dark:border-green-700"
              : ""
          )}
        >
          <statusInfo.icon className="mr-1.5 h-3.5 w-3.5" />
          {statusInfo.label}
        </Badge>
        <Button size="sm" onClick={() => onEnterAction(agency)}>
          <LogIn className="mr-2 h-4 w-4" /> Enter
        </Button>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/agencies/agency-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  CreateAgencyRequest,
  AgencyDto,
  UpdateAgencyRequest,
} from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { toast } from "sonner";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Info, FileText, Building } from "lucide-react";
import { AgencyBasicInfoForm } from "./agency-basic-info-form";
import { AgencyLegalForm } from "./agency-legal-form";
import { AgencyBrandingForm } from "./agency-branding-form";
import { isValid } from "date-fns";

const basicInfoSchema = z.object({
  long_name: z.string().min(3, "Official name is required.").max(100),
  short_name: z.string().min(2, "Short name is required.").max(50),
  location: z.string().min(2, "Location is required."),
  description: z.string().max(500).optional(),
  business_domains: z
    .array(z.string())
    .min(1, "At least one business domain is required."),
  transferable: z.boolean().default(false),
});
const legalSchema = z.object({
  registration_number: z.string().optional(),
  tax_number: z.string().optional(),
  capital_share: z.coerce.number().positive().optional().nullable(),
  average_revenue: z.coerce.number().positive().optional().nullable(),
  registration_date: z.date().optional().nullable(),
});
const brandingSchema = z.object({
  logo: z.string().url("Invalid URL").optional().or(z.literal("")),
  greeting_message: z.string().optional(),
  social_network: z.string().url("Invalid URL").optional().or(z.literal("")),
  images: z.array(z.string().url()).optional(),
});
const fullAgencySchema = basicInfoSchema
  .merge(legalSchema)
  .merge(brandingSchema);
type AgencyFormData = z.infer<typeof fullAgencySchema>;

interface AgencyFormProps {
  organizationId: string;
  mode: "create" | "edit";
  initialData?: Partial<AgencyDto>;
  onSuccessAction: (data: AgencyDto) => void;
}

const formSteps = [
  {
    id: "basic",
    name: "Basic Info",
    icon: Info,
    fields: Object.keys(basicInfoSchema.shape),
  },
  {
    id: "legal",
    name: "Legal",
    icon: FileText,
    fields: Object.keys(legalSchema.shape),
  },
  {
    id: "branding",
    name: "Branding",
    icon: Building,
    fields: Object.keys(brandingSchema.shape),
  },
];

export function AgencyForm({
  organizationId,
  mode,
  initialData,
  onSuccessAction,
}: AgencyFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<AgencyFormData>({
    resolver: zodResolver(fullAgencySchema),
    mode: "onChange",
    defaultValues: {
      long_name: initialData?.long_name || "",
      short_name: initialData?.short_name || "",
      location: initialData?.location || "",
      description: initialData?.description || "",
      business_domains: initialData?.business_domains || [],
      transferable: initialData?.transferable || false,
      registration_number: initialData?.registration_number || "",
      tax_number: initialData?.tax_number || "",
      capital_share: initialData?.capital_share || null,
      average_revenue: initialData?.average_revenue || null,
      registration_date:
        initialData?.registration_date &&
        isValid(new Date(initialData.registration_date))
          ? new Date(initialData.registration_date)
          : undefined,
      logo: initialData?.logo || "",
      greeting_message: initialData?.greeting_message || "",
      social_network: initialData?.social_network || "",
      images: initialData?.images || [],
    },
  });

  const onSubmit = async (data: AgencyFormData) => {
    setIsLoading(true);
    const payload: CreateAgencyRequest | UpdateAgencyRequest = {
      ...data,
      short_name: data.short_name!, // assert it's present when updating
      long_name: data.long_name,
      location: data.location,
      description: data.description || undefined,
      business_domains: data.business_domains,
      capital_share: data.capital_share ?? undefined,
      registration_date: data.registration_date?.toISOString(),
      average_revenue: data.average_revenue ?? undefined,
    };
    try {
      if (mode === "edit" && initialData?.agency_id) {
        const updatedAgency = await organizationRepository.updateAgency(
          organizationId,
          initialData.agency_id,
          payload
        );
        onSuccessAction(updatedAgency);
      } else {
        const newAgency = await organizationRepository.createAgency(
          organizationId,
          payload as CreateAgencyRequest
        );
        onSuccessAction(newAgency);
      }
    } catch (error: any) {
      toast.error(error.message || `Failed to ${mode} agency.`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={onSubmit}
      isLoading={isLoading}
      title={
        mode === "create"
          ? "Create New Agency"
          : `Edit Agency: ${initialData?.short_name}`
      }
      description="Fill in the agency's details across all sections."
      steps={formSteps}
      submitButtonText={mode === "create" ? "Create Agency" : "Save Changes"}
    >
      {(currentStep) => (
        <div className="min-h-[400px]">
          {currentStep === 0 && <AgencyBasicInfoForm />}
          {currentStep === 1 && <AgencyLegalForm form={form} />}
          {currentStep === 2 && <AgencyBrandingForm form={form} />}
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/agencies/agency-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-legal-form.tsx

"use client";

import { UseFormReturn } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { CalendarDays } from "lucide-react";

// THE FIX: Define the props interface
interface AgencyLegalFormProps {
  form: UseFormReturn<any>; // Use UseFormReturn<any> for simplicity or the specific form type
}

export function AgencyLegalForm({ form }: AgencyLegalFormProps) {
  // THE FIX: Destructure props
  const { control } = form; // THE FIX: Get control from the passed form prop

  return (
    <Card className="ml-2 mr-2">
      <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <FormField
          control={control}
          name="registration_number"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Registration Number</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="tax_number"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Tax ID / VAT Number</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="capital_share"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Capital Share (USD)</FormLabel>
              <FormControl>
                <Input type="number" {...field} value={field.value ?? ""} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="average_revenue"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Average Revenue (USD)</FormLabel>
              <FormControl>
                <Input type="number" {...field} value={field.value ?? ""} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="registration_date"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>Registration Date</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "h-10 w-full justify-start font-normal",
                        !field.value && "text-muted-foreground"
                      )}
                    >
                      <CalendarDays className="mr-2 h-4 w-4" />
                      {field.value ? (
                        format(field.value, "PPP")
                      ) : (
                        <span>Pick a date</span>
                      )}
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent
                  className="w-auto p-0"
                  onInteractOutside={(e) => e.preventDefault()}
                >
                  <Calendar
                    mode="single"
                    selected={field.value || undefined}
                    onSelect={field.onChange}
                    captionLayout="dropdown-buttons"
                    fromYear={1900}
                    toYear={new Date().getFullYear()}
                  />
                </PopoverContent>
              </Popover>
              <FormMessage />
            </FormItem>
          )}
        />
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/organization/agencies/agency-legal-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-selector-dialog.tsx

"use client";

import React, { useState, useMemo } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { AgencyDto } from "@/types/organization";
import { cn } from "@/lib/utils";
import {
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Search,
  Building,
  Check,
  PlusCircle,
  Loader2,
  LayoutGrid,
  List,
} from "lucide-react";
import Image from "next/image";

interface AgencySelectorDialogProps {
  onCloseAction: () => void;
}

export function AgencySelectorDialog({
  onCloseAction,
}: AgencySelectorDialogProps) {
  const router = useRouter();
  const {
    agenciesForCurrentOrg,
    activeAgencyId,
    setActiveAgency,
    isLoadingAgencies,
  } = useActiveOrganization();

  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [searchQuery, setSearchQuery] = useState("");

  const filteredAgencies = useMemo(() => {
    if (!searchQuery) return agenciesForCurrentOrg;
    const lowercasedQuery = searchQuery.toLowerCase();
    return agenciesForCurrentOrg.filter(
      (agency) =>
        agency.long_name?.toLowerCase().includes(lowercasedQuery) ||
        agency.short_name?.toLowerCase().includes(lowercasedQuery)
    );
  }, [agenciesForCurrentOrg, searchQuery]);

  const handleSelectAndClose = (agency: AgencyDto) => {
    if (!agency.agency_id) return;
    setActiveAgency(agency.agency_id, agency);
    onCloseAction();
  };

  const handleCreateNew = () => {
    router.push("/business-actor/org/agencies/create");
    onCloseAction();
  };

  return (
    <div className="flex flex-col h-full">
      <DialogHeader className="px-6 pt-6 flex-shrink-0">
        <DialogTitle className="text-xl">Switch Agency</DialogTitle>
        <DialogDescription>
          Select an agency to manage within this organization.
        </DialogDescription>
      </DialogHeader>

      <div className="px-6 pt-4 pb-2 border-b flex-shrink-0 flex items-center justify-between gap-2">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search agencies..."
            value={searchQuery}
            onChange={(e: any)  => setSearchQuery(e.target.value)}
            className="pl-10 h-10"
          />
        </div>
        <div className="flex items-center p-1 bg-muted rounded-lg">
          <Button
            variant={viewMode === "grid" ? "default" : "ghost"}
            size="sm"
            onClick={() => setViewMode("grid")}
          >
            <LayoutGrid className="h-4 w-4" />
          </Button>
          <Button
            variant={viewMode === "list" ? "default" : "ghost"}
            size="sm"
            onClick={() => setViewMode("list")}
          >
            <List className="h-4 w-4" />
          </Button>
        </div>
      </div>

      <ScrollArea className="flex-grow overflow-auto">
        <div className="p-6">
          {isLoadingAgencies ? (
            <div className="flex items-center justify-center h-full">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
            </div>
          ) : viewMode === "grid" ? (
            <div className="grid grid-cols-2 gap-4">
              {filteredAgencies.map((agency) => (
                <Card
                  key={agency.agency_id}
                  onClick={() => handleSelectAndClose(agency)}
                  className={cn(
                    "cursor-pointer hover:shadow-md transition-shadow relative group",
                    activeAgencyId === agency.agency_id &&
                      "border-2 border-primary"
                  )}
                >
                  <CardHeader className="p-4 flex flex-col items-center text-center">
                    {agency.logo ? (
                      <Image
                        src={agency.logo}
                        alt="Logo"
                        width={40}
                        height={40}
                        className="h-10 w-10 rounded-lg object-cover mb-2"
                      />
                    ) : (
                      <div className="h-10 w-10 rounded-lg bg-muted flex items-center justify-center mb-2">
                        <Building className="h-5 w-5 text-muted-foreground" />
                      </div>
                    )}
                    <CardTitle className="text-sm font-semibold line-clamp-1">
                      {agency.short_name}
                    </CardTitle>
                    <CardDescription className="text-xs line-clamp-1">
                      {agency.location}
                    </CardDescription>
                  </CardHeader>
                  {activeAgencyId === agency.agency_id && (
                    <div className="absolute top-1 right-1 p-0.5 bg-primary text-primary-foreground rounded-full">
                      <Check className="h-3 w-3" />
                    </div>
                  )}
                </Card>
              ))}
            </div>
          ) : (
            <div className="space-y-2">
              {filteredAgencies.map((agency) => (
                <div
                  key={agency.agency_id}
                  onClick={() => handleSelectAndClose(agency)}
                  className={cn(
                    "flex items-center p-3 rounded-lg border hover:bg-accent cursor-pointer",
                    activeAgencyId === agency.agency_id &&
                      "bg-accent border-primary/50"
                  )}
                >
                  <div className="flex items-center gap-4 flex-1 min-w-0">
                    {agency.logo ? (
                      <Image
                        src={agency.logo}
                        alt="Logo"
                        width={32}
                        height={32}
                        className="h-8 w-8 rounded-md object-cover"
                      />
                    ) : (
                      <div className="h-8 w-8 rounded-md bg-muted flex-shrink-0 flex items-center justify-center">
                        <Building className="h-4 w-4 text-muted-foreground" />
                      </div>
                    )}
                    <div className="min-w-0">
                      <p className="font-medium text-sm truncate">
                        {agency.long_name}
                      </p>
                      <p className="text-xs text-muted-foreground truncate">
                        {agency.location}
                      </p>
                    </div>
                  </div>
                  {activeAgencyId === agency.agency_id && (
                    <Check className="ml-4 h-5 w-5 text-primary flex-shrink-0" />
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </ScrollArea>

      <DialogFooter className="px-6 py-4 border-t flex-shrink-0 flex sm:justify-between">
        <DialogClose asChild>
          <Button
            type="button"
            variant="secondary"
            className="w-full sm:w-auto"
          >
            Cancel
          </Button>
        </DialogClose>
        <Button onClick={handleCreateNew} className="w-full sm:w-auto">
          <PlusCircle className="mr-2 h-4 w-4" /> Create Agency
        </Button>
      </DialogFooter>
    </div>
  );
}
// END OF FILE: components/organization/agencies/agency-selector-dialog.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-switcher.tsx

"use client";

import React, { useState } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { ChevronsUpDown, Building } from "lucide-react";
import Image from "next/image";
import { AgencySelectorDialog } from "./agency-selector-dialog";

interface AgencySwitcherProps {
  isCollapsed: boolean;
}

export function AgencySwitcher({ isCollapsed }: AgencySwitcherProps) {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const { activeAgencyDetails } = useActiveOrganization();

  if (isCollapsed) {
    return (
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <TooltipProvider>
          <Tooltip delayDuration={0}>
            <TooltipTrigger asChild>
              <DialogTrigger asChild>
                {/* [FIX] Add w-full and justify-center */}
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-14 w-full flex justify-center items-center"
                >
                  {activeAgencyDetails?.logo ? (
                    <Image
                      src={activeAgencyDetails.logo}
                      alt="Agency Logo"
                      width={28}
                      height={28}
                      className="h-7 w-7 rounded-md object-cover"
                    />
                  ) : (
                    <Building className="h-6 w-6" />
                  )}
                  <span className="sr-only">Switch Agency</span>
                </Button>
              </DialogTrigger>
            </TooltipTrigger>
            <TooltipContent side="right">
              {activeAgencyDetails?.short_name || "Switch Agency"}
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        {/* ... DialogContent ... */}
      </Dialog>
    );
  }
  return (
    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
      <DialogTrigger asChild>
        <div className="px-2 py-2">
          <Button
            variant="outline"
            role="combobox"
            aria-expanded={isDialogOpen}
            className="w-full h-14 justify-between text-left hover:bg-muted/50 focus:ring-1 focus:ring-primary"
          >
            <div className="flex items-center gap-3 min-w-0">
              {activeAgencyDetails?.logo ? (
                <Image
                  src={activeAgencyDetails.logo}
                  alt="Agency Logo"
                  width={32}
                  height={32}
                  className="h-8 w-8 rounded-md object-cover"
                />
              ) : (
                <div className="h-8 w-8 rounded-md bg-muted flex items-center justify-center">
                  <Building className="h-5 w-5 text-muted-foreground" />
                </div>
              )}
              <div className="flex flex-col items-start min-w-0">
                <span className="truncate font-semibold text-sm">
                  {activeAgencyDetails?.short_name || "Select Agency"}
                </span>
                <span className="truncate text-xs text-muted-foreground">
                  Switch agency
                </span>
              </div>
            </div>
            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </div>
      </DialogTrigger>
      <DialogContent className="p-0 gap-0 w-[95vw] max-w-md h-[70vh] flex flex-col">
        <AgencySelectorDialog onCloseAction={() => setIsDialogOpen(false)} />
      </DialogContent>
    </Dialog>
  );
}
// END OF FILE: components/organization/agencies/agency-switcher.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { AgencyDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  LogIn,
  Building,
  CheckCircle,
  XCircle,
} from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface AgencyRowActionsProps {
  agency: AgencyDto;
  onEnterAction: (agency: AgencyDto) => void;
  onEditAction: (agencyId: string) => void;
  onDeleteAction: (agency: AgencyDto) => void;
}

const AgencyRowActions: React.FC<AgencyRowActionsProps> = ({
  agency,
  onEnterAction,
  onEditAction,
  onDeleteAction,
}) => {
  return (
    <div className="flex items-center justify-end gap-2">
      <Button
        variant="outline"
        size="sm"
        className="h-8 px-2"
        onClick={() => onEnterAction(agency)}
      >
        <LogIn className="mr-1.5 h-3.5 w-3.5" /> Enter
      </Button>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            className="h-8 w-8 p-0 data-[state=open]:bg-muted"
          >
            <span className="sr-only">Open menu</span>
            <MoreHorizontal className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="w-[160px]">
          <DropdownMenuItem onClick={() => onEditAction(agency.agency_id!)}>
            <Edit3 className="mr-2 h-4 w-4" /> Edit
          </DropdownMenuItem>
          <DropdownMenuItem
            onClick={() => onDeleteAction(agency)}
            className="text-destructive focus:text-destructive"
          >
            <Trash2 className="mr-2 h-4 w-4" /> Delete
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
};

export const getAgencyColumns = (
  actionHandlers: Omit<AgencyRowActionsProps, "agency">
): ColumnDef<AgencyDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
    <Checkbox checked={table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false} onCheckedChange={v => table.toggleAllPageRowsSelected(!!v)} aria-label="Select all" />

    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
    size: 40,
  },
  {
    accessorKey: "long_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Agency Name" />
    ),
    cell: ({ row }) => {
      const agency = row.original;
      const fallback = agency.long_name
        ? agency.long_name.charAt(0).toUpperCase()
        : "A";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border">
            <AvatarImage src={agency.logo} alt={agency.long_name} />
            <AvatarFallback>{fallback}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{agency.long_name}</div>
            <div className="text-xs text-muted-foreground">
              {agency.short_name}
            </div>
          </div>
        </div>
      );
    },
    size: 300,
  },
  {
    accessorKey: "location",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Location" />
    ),
  },
  {
    accessorKey: "is_active",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Status" />
    ),
    cell: ({ row }) => {
      const isActive = row.getValue("is_active");
      const StatusIcon = isActive ? CheckCircle : XCircle;
      return (
        <Badge
          variant={isActive ? "default" : "destructive"}
          className="capitalize text-xs items-center font-normal"
        >
          <StatusIcon className="mr-1.5 h-3.5 w-3.5" />
          {isActive ? "Active" : "Inactive"}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(String(row.getValue(id))),
  },
  {
    accessorKey: "manager_name",
    header: "Manager",
  },
  {
    accessorKey: "total_affiliated_customers",
    header: ({ column }) => (
      <DataTableColumnHeader
        column={column}
        title="Customers"
        className="justify-end"
      />
    ),
    cell: ({ row }) => (
      <div className="text-right">
        {row.getValue("total_affiliated_customers") || 0}
      </div>
    ),
  },
  {
    id: "actions",
    cell: ({ row }) => (
      <AgencyRowActions agency={row.original} {...actionHandlers} />
    ),
  },
];
// END OF FILE: components/organization/agencies/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/certifications/certification-card.tsx

"use client";

import React from "react";
import { CertificationDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  Award,
  CalendarCheck2,
} from "lucide-react";
import { format, parseISO, isValid } from "date-fns";
import { cn } from "@/lib/utils";

interface CertificationCardProps {
  item: CertificationDto;
  onEditAction: (item: CertificationDto) => void;
  onDeleteAction: (item: CertificationDto) => void;
  className?: string;
}

export function CertificationCard({
  item,
  onEditAction,
  onDeleteAction,
  className,
}: CertificationCardProps) {
  return (
    <Card
      className={cn(
        "flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow duration-200 ease-in-out group",
        className
      )}
    >
      <CardHeader>
        <div className="flex justify-between items-start gap-2">
          <CardTitle className="text-base sm:text-md font-semibold leading-tight line-clamp-2 flex items-center">
            <Award className="h-5 w-5 mr-2 text-primary opacity-80 flex-shrink-0" />
            <span className="truncate" title={item.name}>
              {item.name || "Untitled Certification"}
            </span>
          </CardTitle>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-7 w-7 flex-shrink-0 opacity-70 group-hover:opacity-100"
              >
                <MoreHorizontal className="h-4 w-4" />
                <span className="sr-only">Actions</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-[160px]">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => onEditAction(item)}>
                <Edit3 className="mr-2 h-4 w-4" /> Edit
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => onDeleteAction(item)}
                className="text-destructive focus:text-destructive"
              >
                <Trash2 className="mr-2 h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
        <CardDescription className="text-xs pt-1 truncate">
          Type: {item.type || "N/A"}
        </CardDescription>
      </CardHeader>
      <CardContent className="flex-grow space-y-1.5 text-sm py-2">
        <p className="text-foreground whitespace-pre-wrap break-words line-clamp-3 min-h-[4.5em]">
          {item.description || (
            <span className="italic text-muted-foreground">
              No description provided.
            </span>
          )}
        </p>
      </CardContent>
      <CardFooter className="pt-2 pb-3 text-xs text-muted-foreground justify-end flex items-center gap-1.5">
        <CalendarCheck2 className="h-3 w-3" />
        Obtained:{" "}
        {item.obtainment_date && isValid(parseISO(item.obtainment_date))
          ? format(parseISO(item.obtainment_date), "PP")
          : "-"}
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/certifications/certification-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/certifications/certification-form.tsx

"use client";

import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  CreateCertificationRequest,
  UpdateCertificationRequest,
  CertificationDto,
} from "@/types/organization";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { cn } from "@/lib/utils";
import { format, isValid } from "date-fns";
import { CalendarIcon } from "lucide-react";
import { FormWrapper } from "@/components/ui/form-wrapper";

const certificationFormSchema = z.object({
  name: z
    .string()
    .min(3, "Name must be at least 3 characters.")
    .max(150, "Name is too long."),
  type: z
    .string()
    .min(3, "Type must be at least 3 characters.")
    .max(100, "Type is too long."),
  description: z
    .string()
    .max(500, "Description is too long.")
    .optional()
    .or(z.literal("")),
  obtainment_date: z.date().optional().nullable(),
});

export type CertificationFormData = z.infer<typeof certificationFormSchema>;

interface CertificationFormProps {
  initialData?: Partial<CertificationDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: CertificationFormData) => Promise<boolean>;
}

export function CertificationForm({
  initialData,
  mode,
  onSubmitAction,
}: CertificationFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<CertificationFormData>({
    resolver: zodResolver(certificationFormSchema),
    defaultValues: {
      name: initialData?.name || "",
      type: initialData?.type || "",
      description: initialData?.description || "",
      obtainment_date:
        initialData?.obtainment_date &&
        isValid(new Date(initialData.obtainment_date))
          ? new Date(initialData.obtainment_date)
          : null,
    },
  });

  useEffect(() => {
    form.reset({
      name: initialData?.name || "",
      type: initialData?.type || "",
      description: initialData?.description || "",
      obtainment_date:
        initialData?.obtainment_date &&
        isValid(new Date(initialData.obtainment_date))
          ? new Date(initialData.obtainment_date)
          : null,
    });
  }, [initialData, form.reset]);

  const handleSubmit = async (data: CertificationFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === "create" ? "Add New Certification" : "Edit Certification"}
      description={
        mode === "create"
          ? "Provide details for the new certification."
          : `Update details for "${initialData?.name}"`
      }
      submitButtonText={
        mode === "create" ? "Add Certification" : "Save Changes"
      }
    >
      {() => (
        <div className="space-y-6 p-1">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Certification Name *</FormLabel>
                <FormControl>
                  <Input
                    placeholder="e.g., Certified Scrum Master"
                    {...field}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Certification Type/Body *</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., Scrum Alliance, ISO" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="obtainment_date"
            render={({ field }) => (
              <FormItem className="flex flex-col">
                <FormLabel>Obtainment Date</FormLabel>
                <Popover>
                  <PopoverTrigger asChild>
                    <FormControl>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-[240px] pl-3 text-left font-normal",
                          !field.value && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                        {field.value ? (
                          format(field.value, "PPP")
                        ) : (
                          <span>Pick a date</span>
                        )}
                      </Button>
                    </FormControl>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={field.value ?? undefined}
                      onSelect={field.onChange}
                      disabled={(date) => date > new Date()}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="description"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Description (Optional)</FormLabel>
                <FormControl>
                  <Textarea
                    placeholder="Any relevant details..."
                    {...field}
                    rows={4}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/certifications/certification-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/certifications/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { CertificationDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Award } from "lucide-react";
import { format, parseISO, isValid } from "date-fns";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

export interface CertificationRowActionsProps {
  item: CertificationDto;
  onEditAction: (item: CertificationDto) => void;
  onDeleteAction: (item: CertificationDto) => void;
}

const CertificationRowActions: React.FC<CertificationRowActionsProps> = ({
  item,
  onEditAction,
  onDeleteAction,
}) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className="h-8 w-8 p-0 data-[state=open]:bg-muted"
        >
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuLabel>Actions</DropdownMenuLabel>
        <DropdownMenuItem onClick={() => onEditAction(item)}>
          <Edit3 className="mr-2 h-4 w-4" /> Edit
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          onClick={() => onDeleteAction(item)}
          className="text-destructive focus:text-destructive"
        >
          <Trash2 className="mr-2 h-4 w-4" /> Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getCertificationColumns = (
  actionHandlers: Omit<CertificationRowActionsProps, "item">
): ColumnDef<CertificationDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
     <Checkbox checked={table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false} onCheckedChange={v => table.toggleAllPageRowsSelected(!!v)} aria-label="Select all" />

    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
        className="translate-y-[2px]"
      />
    ),
    enableSorting: false,
    enableHiding: false,
    size: 40,
  },
  {
    accessorKey: "name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Certification Name" />
    ),
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        <Award className="h-4 w-4 text-muted-foreground flex-shrink-0" />
        <span className="font-medium truncate max-w-xs">
          {row.getValue("name")}
        </span>
      </div>
    ),
    size: 300,
  },
  {
    accessorKey: "type",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Type" />
    ),
    cell: ({ row }) => (
      <div className="text-sm text-muted-foreground truncate max-w-sm">
        {row.getValue("type")}
      </div>
    ),
    size: 250,
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "obtainment_date",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Obtainment Date" />
    ),
    cell: ({ row }) => {
      const date = row.getValue("obtainment_date") as string;
      return (
        <div className="text-sm text-muted-foreground whitespace-nowrap">
          {isValid(parseISO(date || "")) ? format(parseISO(date), "PP") : "-"}
        </div>
      );
    },
    size: 180,
  },
  {
    id: "actions",
    cell: ({ row }) => (
      <div className="text-right">
        <CertificationRowActions
          item={row.original}
          onEditAction={actionHandlers.onEditAction}
          onDeleteAction={actionHandlers.onDeleteAction}
        />
      </div>
    ),
    size: 80,
  },
];
// END OF FILE: components/organization/certifications/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/contact-list.tsx

"use client";

import React, { useState, useEffect, useCallback } from "react";
import {
  ContactDto,
  ContactableType,
  CreateContactRequest,
  UpdateContactRequest,
} from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { ContactForm } from "./forms/contact-form";
import {
  PlusCircle,
  Edit2,
  Trash2,
  Star,
  Mail,
  Phone,
} from "lucide-react";
import { toast } from "sonner";
import { Skeleton } from "@/components/ui/skeleton";

interface ContactListProps {
  organizationId: string;
  contactableType: ContactableType;
}

export function ContactList({
  organizationId,
  contactableType,
}: ContactListProps) {
  const [contacts, setContacts] = useState<ContactDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingContact, setEditingContact] = useState<ContactDto | undefined>(
    undefined
  );

  const fetchContacts = useCallback(async () => {
    setIsLoading(true);
    try {
      const data = await organizationRepository.getContacts(
        contactableType,
        organizationId
      );
      setContacts(data || []);
    } catch (_error: any) {
      toast.error("Failed to load contacts.");
    } finally {
      setIsLoading(false);
    }
  }, [organizationId, contactableType]);

  useEffect(() => {
    fetchContacts();
  }, [fetchContacts]);

  const handleFormSubmit = async (
    data: CreateContactRequest | UpdateContactRequest
  ) => {
    if (editingContact && editingContact.contact_id) {
      await organizationRepository.updateContact(
        contactableType,
        organizationId,
        editingContact.contact_id,
        data
      );
      toast.success("Contact updated successfully!");
    } else {
      await organizationRepository.createContact(
        contactableType,
        organizationId,
        data
      );
      toast.success("Contact added successfully!");
    }
    await fetchContacts();
    setIsFormOpen(false);
    setEditingContact(undefined);
  };

  const handleEdit = (contact: ContactDto) => {
    setEditingContact(contact);
    setIsFormOpen(true);
  };

  const handleDelete = async (contactId?: string) => {
    if (!contactId || !confirm("Are you sure you want to delete this contact?"))
      return;
    try {
      await organizationRepository.deleteContactById(
        contactableType,
        organizationId,
        contactId
      );
      toast.success("Contact deleted.");
      fetchContacts();
    } catch (error)  {
      toast.error(error.message || "Failed to delete contact.");
    }
  };

  // const handleToggleFavorite = async (contact: ContactDto) => {
  //   if (!contact.contact_id) return;
  //   toast.info(`Favorite toggle for ${contact.first_name} TBD.`);
  // };

  if (isLoading) {
    return (
      <div className="space-y-3">
        {Array.from({ length: 2 }).map((_, i) => (
          <Skeleton key={i} className="h-20 w-full rounded-md" />
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
        <DialogTrigger asChild>
          <Button
            size="sm"
            variant="outline"
            onClick={() => setEditingContact(undefined)}
          >
            <PlusCircle className="mr-2 h-4 w-4" /> Add Contact
          </Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-lg">
          <DialogHeader>
            <DialogTitle>
              {editingContact ? "Edit Contact" : "Add New Contact"}
            </DialogTitle>
            <DialogDescription>
              {editingContact
                ? "Update the details of this contact."
                : "Enter details for the new contact."}
            </DialogDescription>
          </DialogHeader>
          <ContactForm
            initialData={editingContact}
            mode={editingContact ? "edit" : "create"}
            onSubmitAction={handleFormSubmit}
            onCancelAction={() => setIsFormOpen(false)}
          />
        </DialogContent>
      </Dialog>

      {contacts.length === 0 ? (
        <p className="text-sm text-muted-foreground text-center py-6">
          No contacts found.
        </p>
      ) : (
        <div className="space-y-3">
          {contacts.map((contact) => (
            <div
              key={contact.contact_id}
              className="p-4 border rounded-lg flex justify-between items-start text-sm"
            >
              <div>
                <p className="font-semibold text-foreground flex items-center">
                  {contact.first_name} {contact.last_name}
                  {contact.is_favorite && (
                    <Star className="inline ml-2 h-4 w-4 text-yellow-500 fill-yellow-400" />
                  )}
                </p>
                {contact.title && (
                  <p className="text-xs text-muted-foreground">
                    {contact.title}
                  </p>
                )}
                <div className="space-y-1 mt-2">
                  {contact.email && (
                    <div className="flex items-center text-xs text-muted-foreground">
                      <Mail className="h-3 w-3 mr-1.5" />
                      {contact.email}
                    </div>
                  )}
                  {contact.phone_number && (
                    <div className="flex items-center text-xs text-muted-foreground">
                      <Phone className="h-3 w-3 mr-1.5" />
                      {contact.phone_number}
                    </div>
                  )}
                </div>
              </div>
              <div className="flex items-center gap-1 flex-shrink-0 ml-2">
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8"
                  onClick={() => handleEdit(contact)}
                  title="Edit contact"
                >
                  <Edit2 className="h-4 w-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-destructive hover:text-destructive"
                  onClick={() => handleDelete(contact.contact_id)}
                  title="Delete contact"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
// END OF FILE: components/organization/contact-list.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/customers/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { AgencyDto, CustomerDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2 } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface CustomerRowActionsProps {
  customer: CustomerDto;
  onEditAction: (customer: CustomerDto) => void;
  onDeleteAction: (customer: CustomerDto) => void;
}

const CustomerRowActions: React.FC<CustomerRowActionsProps> = ({ customer, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(customer)}>
          <Edit3 className="mr-2 h-4 w-4" /> Edit
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(customer)} className="text-destructive focus:text-destructive">
          <Trash2 className="mr-2 h-4 w-4" /> Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getCustomerColumns = (
  actionHandlers: Omit<CustomerRowActionsProps, "customer">, agencies: AgencyDto[] 
): ColumnDef<CustomerDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected()
            ? true
            : table.getIsSomePageRowsSelected()
            ? "indeterminate"
            : false
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "first_name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => {
      const customer = row.original;
      const fullName = `${customer.first_name || ""} ${customer.last_name || ""}`.trim();
      const fallback = fullName ? fullName.charAt(0).toUpperCase() : "C";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border">
            <AvatarImage src={customer.logo} alt={fullName} />
            <AvatarFallback>{fallback}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{fullName}</div>
            <div className="text-xs text-muted-foreground">{customer.short_description}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "payment_method",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Last Payment Method" />,
    cell: ({ row }) => <div className="text-sm text-muted-foreground">{row.getValue("payment_method") || "N/A"}</div>,
  },
  {
    accessorKey: "amount_paid",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Last Amount Paid" className="justify-end" />,
    cell: ({ row }) => {
      const amount = parseFloat(row.getValue("amount_paid"));
      const formatted = isNaN(amount) ? "N/A" : new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(amount);
      return <div className="text-right font-medium text-sm">{formatted}</div>;
    },
  },
   {
    accessorKey: "agency_id",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Assignment" />,
    cell: ({ row }) => {
      const agencyId = row.getValue("agency_id");
      if (!agencyId) {
        return <div className="text-sm text-muted-foreground">Headquarters</div>;
      }
      const agency = agencies.find(a => a.agency_id === agencyId);
      return (
        <div className="text-sm font-medium flex items-center gap-2">
          <Building2 className="h-4 w-4 text-muted-foreground" />
          <span className="truncate">{agency ? agency.short_name : "Unknown Agency"}</span>
        </div>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id) || "headquarters"),},
  {
    id: "actions",
    cell: ({ row }) => <CustomerRowActions customer={row.original} {...actionHandlers} />,
  },
];// END OF FILE: components/organization/customers/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/customers/customer-card.tsx

"use client";

import React from "react";
import { AgencyDto, CustomerDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  DollarSign,
  CreditCard,
  Building2,
} from "lucide-react";

interface CustomerCardProps {
  customer: CustomerDto;
  agencies: AgencyDto[]; // [ADD] Pass agencies list
  onEditAction: (customer: CustomerDto) => void;
  onDeleteAction: (customer: CustomerDto) => void;
}

export function CustomerCard({
  customer,
  agencies,
  onEditAction,
  onDeleteAction,
}: CustomerCardProps) {
  const fullName = `${customer.first_name || ""} ${
    customer.last_name || ""
  }`.trim();
  const fallback = fullName ? fullName.charAt(0).toUpperCase() : "C";
  const agency = agencies.find((a) => a.agency_id === customer.agency_id);

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border">
            <AvatarImage src={customer.logo} alt={fullName} />
            <AvatarFallback className="text-lg">{fallback}</AvatarFallback>
          </Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">
              {fullName}
            </CardTitle>
            <p className="text-xs text-muted-foreground">
              {customer.short_description || "Customer"}
            </p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8 flex-shrink-0"
            >
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(customer)}>
              <Edit3 className="mr-2 h-4 w-4" /> Edit
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() => onDeleteAction(customer)}
              className="text-destructive focus:text-destructive"
            >
              <Trash2 className="mr-2 h-4 w-4" /> Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow space-y-2 text-sm">
        <div className="flex items-center text-muted-foreground">
          <CreditCard className="mr-2 h-4 w-4" />
          <span>Last Payment: {customer.payment_method || "N/A"}</span>
        </div>
        <div className="flex items-center text-muted-foreground">
          <DollarSign className="mr-2 h-4 w-4" />
          <span>Last Amount: {customer.amount_paid || "N/A"}</span>
        </div>
        <div className="flex items-center text-muted-foreground pt-2">
          <Building2 className="mr-2 h-4 w-4" />
          <span>{agency ? agency.short_name : "Headquarters"}</span>
        </div>
      </CardContent>
      <CardFooter>
        <Button
          variant="outline"
          className="w-full"
          onClick={() => onEditAction(customer)}
        >
          View Details
        </Button>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/customers/customer-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/customers/customer-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { CustomerDto, AgencyDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const customerFormSchema = z.object({
  first_name: z.string().min(2, "First name is required."),
  last_name: z.string().min(2, "Last name is required."),
  short_description: z.string().optional(),
  long_description: z.string().optional(),
  payment_method: z.string().optional(),
  amount_paid: z.string().optional(),
  // [ADD] Add agency_id to the form schema
  agency_id: z.string().nullable().optional(),
});

export type CustomerFormData = z.infer<typeof customerFormSchema>;

interface CustomerFormProps {
  initialData?: Partial<CustomerDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: CustomerFormData) => Promise<boolean>;
  // [ADD] Pass agencies for the assignment dropdown
  agencies: AgencyDto[];
  // [ADD] Prop to hide the selector when in agency context
  hideAgencySelector?: boolean;
}

export function CustomerForm({ initialData, mode, onSubmitAction, agencies, hideAgencySelector = false }: CustomerFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<CustomerFormData>({
    resolver: zodResolver(customerFormSchema),
    defaultValues: {
      first_name: initialData?.first_name || "",
      last_name: initialData?.last_name || "",
      short_description: initialData?.short_description || "",
      long_description: initialData?.long_description || "",
      payment_method: initialData?.payment_method || "",
      amount_paid: initialData?.amount_paid || "",
      agency_id: initialData?.agency_id || null,
    },
  });

  const handleSubmit = async (data: CustomerFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) {
      setIsLoading(false);
    }
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Add New Customer" : "Edit Customer"}
      description="Manage customer information for your organization."
      submitButtonText={mode === 'create' ? "Add Customer" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <FormField control={form.control} name="first_name" render={({ field }) => (<FormItem><FormLabel>First Name *</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
            <FormField control={form.control} name="last_name" render={({ field }) => (<FormItem><FormLabel>Last Name *</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
          </div>
          <FormField control={form.control} name="short_description" render={({ field }) => (<FormItem><FormLabel>Title / Tagline</FormLabel><FormControl><Input placeholder="e.g., VIP Client" {...field} /></FormControl><FormMessage /></FormItem>)} />
          
          {/* [ADD] Conditionally render the agency selector */}
          {!hideAgencySelector && (
            <FormField
              control={form.control}
              name="agency_id"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Agency Assignment</FormLabel>
                  <Select onValueChange={(value) => field.onChange(value === "headquarters" ? null : value)} defaultValue={field.value || "headquarters"}>
                    <FormControl><SelectTrigger><SelectValue placeholder="Assign to an agency..." /></SelectTrigger></FormControl>
                    <SelectContent>
                      <SelectItem value="headquarters">Headquarters (No Agency)</SelectItem>
                      {agencies.map((agency) => (
                        <SelectItem key={agency.agency_id} value={agency.agency_id!}>{agency.long_name}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}

          <FormField control={form.control} name="long_description" render={({ field }) => (<FormItem><FormLabel>Notes</FormLabel><FormControl><Textarea placeholder="Add any relevant notes about this customer..." {...field} /></FormControl><FormMessage /></FormItem>)} />
        </div>
      )}
    </FormWrapper>
  );
}// END OF FILE: components/organization/customers/customer-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/employees/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { EmployeeDto, AgencyDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2 } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { Badge } from "@/components/ui/badge";

interface EmployeeRowActionsProps {
  employee: EmployeeDto;
  onEditAction: (employeeId: string) => void;
  onDeleteAction: (employee: EmployeeDto) => void;
}

const RowActions: React.FC<EmployeeRowActionsProps> = ({ employee, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(employee.employee_id!)}><Edit3 className="mr-2 h-4 w-4" /> Edit Details</DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(employee)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getEmployeeColumns = (
  actionHandlers: Omit<EmployeeRowActionsProps, "employee">,
  agencies: AgencyDto[]
): ColumnDef<EmployeeDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false} onCheckedChange={v => table.toggleAllPageRowsSelected(!!v)} aria-label="Select all" />
,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "first_name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => {
      const employee = row.original;
      const fullName = `${employee.first_name || ""} ${employee.last_name || ""}`.trim();
      const fallback = fullName ? fullName.charAt(0).toUpperCase() : "E";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border"><AvatarImage src={employee.logo} alt={fullName} /><AvatarFallback>{fallback}</AvatarFallback></Avatar>
          <div>
            <div className="font-medium">{fullName}</div>
            <div className="text-xs text-muted-foreground">{employee.short_description || "No title"}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "employee_role",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Role" />,
    cell: ({ row }) => <Badge variant="outline" className="capitalize">{row.getValue("employee_role")?.toString().replace(/_/g, ' ').toLowerCase() || "N/A"}</Badge>,
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "department",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Department" />,
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "agency_id",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Assignment" />,
    cell: ({ row }) => {
      const agencyId = row.getValue("agency_id");
      if (!agencyId) return <div className="text-sm text-muted-foreground">Headquarters</div>;
      const agency = agencies.find(a => a.agency_id === agencyId);
      return (
        <div className="text-sm text-muted-foreground flex items-center gap-2">
          <Building2 className="h-4 w-4 flex-shrink-0" />
          <span className="truncate">{agency ? agency.short_name : "Unknown Agency"}</span>
        </div>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id) || "headquarters"),
  },
  {
    id: "actions",
    cell: ({ row }) => <RowActions employee={row.original} {...actionHandlers} />,
  },
];
// END OF FILE: components/organization/employees/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/employees/employee-card.tsx

"use client";

import React from "react";
import { EmployeeDto, AgencyDto } from "@/types/organization";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2, Briefcase } from "lucide-react";

interface EmployeeCardProps {
  employee: EmployeeDto;
  agency?: AgencyDto | null;
  onEditAction: (employeeId: string) => void;
  onDeleteAction: (employee: EmployeeDto) => void;
}

export function EmployeeCard({ employee, agency, onEditAction, onDeleteAction }: EmployeeCardProps) {
  const fullName = `${employee.first_name || ""} ${employee.last_name || ""}`.trim();
  const fallback = fullName ? fullName.charAt(0).toUpperCase() : "E";
  const roleDisplay = employee.employee_role?.replace(/_/g, " ").toLowerCase() || "N/A";

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow group">
      <CardHeader className="flex-row items-center justify-between">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border-2 border-background ring-1 ring-ring"><AvatarImage src={employee.logo} alt={fullName} /><AvatarFallback className="text-lg bg-muted">{fallback}</AvatarFallback></Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">{fullName}</CardTitle>
            <p className="text-xs text-muted-foreground line-clamp-1">{employee.short_description || "No job title"}</p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(employee.employee_id!)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onDeleteAction(employee)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow space-y-3 pt-0">
        <div className="flex flex-wrap gap-2">
          <Badge variant="secondary" className="capitalize text-xs items-center font-normal"><Briefcase className="mr-1.5 h-3 w-3" />{roleDisplay}</Badge>
          {employee.department && <Badge variant="outline" className="capitalize text-xs items-center font-normal">{employee.department}</Badge>}
        </div>
        <div className="text-sm text-muted-foreground flex items-center gap-2 pt-2">
          <Building2 className="h-4 w-4 flex-shrink-0" />
          <span>{agency ? agency.short_name : "Headquarters"}</span>
        </div>
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/organization/employees/employee-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/employees/employee-form.tsx

"use client";

import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  AgencyDto,
  EmployeeDto,
  EmployeeRoleValues,
} from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ImageUploader } from "@/components/ui/image-uploader";
import { User, Building2 } from "lucide-react";

const employeeDetailsSchema = z.object({
  first_name: z.string().min(2, "First name is required."),
  last_name: z.string().min(2, "Last name is required."),
  employee_role: z.enum(EmployeeRoleValues, {
    required_error: "Employee role is required.",
  }),
  department: z
    .string()
    .min(2, "Department is required.")
    .optional()
    .or(z.literal("")),
  short_description: z.string().max(100, "Title is too long.").optional(),
  long_description: z.string().max(500, "Description is too long.").optional(),
  logo: z.string().url("Invalid URL").optional().or(z.literal("")),
  logoFile: z.any().optional(),
});

const assignmentSchema = z.object({
  agency_id: z.string().nullable().optional(),
});

const fullEmployeeSchema = employeeDetailsSchema.merge(assignmentSchema);
export type EmployeeFormData = z.infer<typeof fullEmployeeSchema>;

const formSteps = [
  {
    id: "details",
    name: "Employee Details",
    icon: User,
    fields: Object.keys(employeeDetailsSchema.shape),
  },
  {
    id: "assignment",
    name: "Agency Assignment",
    icon: Building2,
    fields: Object.keys(assignmentSchema.shape),
  },
];

interface EmployeeFormProps {
  agencies: AgencyDto[];
  mode: "create" | "edit";
  onSubmitAction: (data: EmployeeFormData) => Promise<boolean>;
  initialData?: Partial<EmployeeDto>;
  // [ADD] Prop to lock the form to a specific agency
  scopedAgencyId?: string | null;
}

export function EmployeeForm({
  initialData,
  agencies,
  mode,
  onSubmitAction,
  scopedAgencyId,
}: EmployeeFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<EmployeeFormData>({
    resolver: zodResolver(fullEmployeeSchema),
    defaultValues: {
      first_name: initialData?.first_name || "",
      last_name: initialData?.last_name || "",
      employee_role: initialData?.employee_role || undefined,
      department: initialData?.department || "",
      short_description: initialData?.short_description || "",
      long_description: initialData?.long_description || "",
      logo: initialData?.logo || "",
      // [CHANGE] If scoped to an agency, use that ID, otherwise use initial data.
      agency_id:
        scopedAgencyId !== undefined
          ? scopedAgencyId
          : initialData?.agency_id || null,
    },
  });

  const handleSubmit = async (data: EmployeeFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={
        mode === "create"
          ? "Add New Employee"
          : `Edit Employee: ${initialData?.first_name} ${initialData?.last_name}`
      }
      description="Provide the employee's details and assign them to an agency."
      steps={formSteps}
      submitButtonText={mode === "create" ? "Create Employee" : "Save Changes"}
    >
      {(currentStep) => (
        <div className="min-h-[450px] p-1">
          {currentStep === 0 && (
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="first_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>First Name *</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="last_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Last Name *</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <FormField
                control={form.control}
                name="logoFile"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Profile Photo</FormLabel>
                    <FormControl>
                      <ImageUploader
                        currentImageUrl={form.getValues("logo")}
                        onImageSelectedAction={(file, url) => {
                          field.onChange(file);
                          form.setValue("logo", url || "");
                        }}
                        label=""
                        fallbackName={`${form.getValues(
                          "first_name"
                        )} ${form.getValues("last_name")}`}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="employee_role"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Role *</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select a role" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {EmployeeRoleValues.map((role) => (
                          <SelectItem key={role} value={role}>
                            {role.replace(/_/g, " ").charAt(0).toUpperCase() +
                              role.replace(/_/g, " ").slice(1).toLowerCase()}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="department"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Department</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="short_description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Job Title</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., Senior Software Engineer"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="long_description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Responsibilities</FormLabel>
                    <FormControl>
                      <Textarea rows={4} {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
          )}
          {currentStep === 1 && (
            <div className="space-y-4">
              <FormField
                control={form.control}
                name="agency_id"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Agency Assignment</FormLabel>
                    <Select
                      onValueChange={(value) =>
                        field.onChange(value === "headquarters" ? null : value)
                      }
                      defaultValue={field.value || "headquarters"}
                      // [CHANGE] Disable the select if we are scoped to a specific agency
                      disabled={scopedAgencyId !== undefined}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select an agency" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="headquarters">
                          Headquarters
                        </SelectItem>
                        {agencies.map((agency) => (
                          <SelectItem
                            key={agency.agency_id}
                            value={agency.agency_id!}
                          >
                            {agency.long_name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
          )}
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/employees/employee-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/forms/business-domain-search-picker.tsx

"use client";

import React, { useState, useEffect, useMemo } from "react";
import { useFormContext } from "react-hook-form";
import { BusinessDomainDto } from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Checkbox } from "@/components/ui/checkbox";
import { Skeleton } from "@/components/ui/skeleton";

interface BusinessDomainSearchPickerProps {
  name: string;
  label: string;
}

export function BusinessDomainSearchPicker({
  name,
  label,
}: BusinessDomainSearchPickerProps) {
  const { control } = useFormContext();
  const [availableDomains, setAvailableDomains] = useState<BusinessDomainDto[]>(
    []
  );
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    setIsLoading(true);
    organizationRepository
      .getAllBusinessDomains()
      .then((data) => setAvailableDomains(data || []))
      .catch(() => setAvailableDomains([]))
      .finally(() => setIsLoading(false));
  }, []);

  const filteredDomains = useMemo(() => {
    if (!searchTerm) return availableDomains;
    return availableDomains.filter((d) =>
      d.name?.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [searchTerm, availableDomains]);

  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <div className="border rounded-md p-2">
            <Input
              placeholder="Search domains..."
              className="mb-2 h-9"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <ScrollArea className="h-40">
              {isLoading ? (
                <div className="space-y-2 p-1">
                  <Skeleton className="h-5 w-3/4" />
                  <Skeleton className="h-5 w-2/3" />
                  <Skeleton className="h-5 w-4/5" />
                </div>
              ) : (
                <div className="space-y-2 p-1">
                  {filteredDomains.map((domain) => (
                    <FormItem
                      key={domain.id}
                      className="flex flex-row items-center space-x-3 space-y-0"
                    >
                      <FormControl>
                        <Checkbox
                          checked={field.value?.includes(domain.id!)}
                          onCheckedChange={(checked) => {
                            const currentValues = field.value || [];
                            return checked
                              ? field.onChange([...currentValues, domain.id!])
                              : field.onChange(
                                  currentValues.filter(
                                    (value: string) => value !== domain.id!
                                  )
                                );
                          }}
                        />
                      </FormControl>
                      <FormLabel className="font-normal text-sm cursor-pointer">
                        {domain.name}
                      </FormLabel>
                    </FormItem>
                  ))}
                </div>
              )}
            </ScrollArea>
          </div>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}
// END OF FILE: components/organization/forms/business-domain-search-picker.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/forms/contact-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { ContactDto } from "@/types/organization";
import { Input } from "@/components/ui/input";
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { toast } from "sonner";
import { FormWrapper } from "@/components/ui/form-wrapper"; // [ADD] Import the wrapper

const contactFormSchema = z.object({
  first_name: z.string().min(2, "First name is required."),
  last_name: z.string().min(2, "Last name is required."),
  title: z.string().optional().or(z.literal("")),
  email: z
    .string()
    .email("Invalid email address.")
    .optional()
    .or(z.literal("")),
  phone_number: z.string().optional().or(z.literal("")),
  secondary_email: z
    .string()
    .email("Invalid secondary email.")
    .optional()
    .or(z.literal("")),
  secondary_phone_number: z.string().optional().or(z.literal("")),
  fax_number: z.string().optional().or(z.literal("")),
});

type ContactFormData = z.infer<typeof contactFormSchema>;

interface ContactFormProps {
  initialData?: Partial<ContactDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: ContactFormData) => Promise<void>;
  onCancelAction: () => void;
}

export function ContactForm({
  initialData,
  mode,
  onSubmitAction,
  onCancelAction,
}: ContactFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<ContactFormData>({
    resolver: zodResolver(contactFormSchema),
    defaultValues: {
      /* ... same default values ... */
    },
  });

  const handleSubmit = async (data: ContactFormData) => {
    setIsLoading(true);
    try {
      await onSubmitAction(data);
    } catch (error) {
      toast.error(error.message || `Failed to ${mode} contact.`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    // [CHANGE] Wrap the entire form content with FormWrapper
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === "create" ? "Add New Contact" : "Edit Contact"}
      description="Fill in the contact's details below."
      submitButtonText={mode === "create" ? "Add Contact" : "Save Changes"}
    >
      {() => (
        // The children function simply returns the form fields
        <div className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="first_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>First Name *</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="last_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Last Name *</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="title"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Title/Position</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Primary Email</FormLabel>
                  <FormControl>
                    <Input type="email" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="phone_number"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Primary Phone</FormLabel>
                  <FormControl>
                    <Input type="tel" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="secondary_email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Secondary Email</FormLabel>
                  <FormControl>
                    <Input type="email" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="secondary_phone_number"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Secondary Phone</FormLabel>
                  <FormControl>
                    <Input type="tel" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/forms/contact-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/forms/org-address-form.tsx

"use client";

import React, { useState, useEffect } from "react";
import * as z from "zod";
import { LatLngExpression } from "leaflet";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,

} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { MapView } from "@/components/map/map-view";
import { mapRepository } from "@/lib/data-repo/map";
import { toast } from "sonner";
import { Loader2, Search } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

export const addressSchema = z.object({
  address_line_1: z.string().min(3, "Address line 1 is required."),
  address_line_2: z.string().optional().or(z.literal("")),
  city: z.string().min(2, "City is required."),
  state: z.string().min(2, "State/Province is required."),
  zip_code: z.string().min(3, "Zip/Postal code is required."),
  country: z.string().min(2, "Country is required."),
  latitude: z.coerce
    .number()
    .min(-90, "Invalid Latitude")
    .max(90, "Invalid Latitude")
    .optional(),
  longitude: z.coerce
    .number()
    .min(-180, "Invalid Longitude")
    .max(180, "Invalid Longitude")
    .optional(),
});

export type AddressFormData = z.infer<typeof addressSchema>;

interface OrgAddressFormProps {
  form: any;
  title?: string;
  description?: string;
}

const DEFAULT_CENTER: LatLngExpression = [51.505, -0.09];
const DEFAULT_ZOOM = 4;

export function OrgAddressForm({
  form,
  title = "Headquarters Address",
  description = "Provide the primary address. Click the map or enter coordinates to pinpoint the location.",
}: OrgAddressFormProps) {
  const [markerPosition, setMarkerPosition] = useState<LatLngExpression | null>(
    null
  );
  const [mapCenter, setMapCenter] = useState<LatLngExpression>(DEFAULT_CENTER);
  const [mapZoom, setMapZoom] = useState(DEFAULT_ZOOM);
  const [isGeocoding, setIsGeocoding] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);

  const { watch, getValues, setValue } = form;

  // REFINED LOGIC: Separate watch for coordinates to drive the map marker directly.
  const watchedCoords = watch(["latitude", "longitude"]);

  // Effect to initialize or update map from coordinate fields
  useEffect(() => {
    const [lat, lon] = watchedCoords;
    if (typeof lat === "number" && typeof lon === "number") {
      const newPos: LatLngExpression = [lat, lon];
      // Check if marker needs updating to avoid unnecessary re-renders
      const currentMarker = markerPosition as [number, number] | null;
      if (currentMarker?.[0] !== lat || currentMarker?.[1] !== lon) {
        setMarkerPosition(newPos);
        setMapCenter(newPos);
        setMapZoom(16);
      }
    }
  }, [watchedCoords, markerPosition]); // Reruns when lat/lon fields change

  const handleLocationSelectAction = async (lat: number, lng: number) => {
    setIsGeocoding(true);
    toast.loading("Fetching address from coordinates...");
    try {
      setValue("latitude", parseFloat(lat.toFixed(6)), {
        shouldValidate: true,
      });
      setValue("longitude", parseFloat(lng.toFixed(6)), {
        shouldValidate: true,
      });
      // The useEffect above will handle setting the marker position

      const data = await mapRepository.reverseGeocode(lat, lng);
      if (data?.address) {
        const addressLine1 = [data.address.house_number, data.address.road]
          .filter(Boolean)
          .join(" ");
        setValue("address_line_1", addressLine1, { shouldValidate: true });
        setValue("city", data.address.city || data.address.municipality || "", {
          shouldValidate: true,
        });
        setValue(
          "state",
          data.address.state || data.address.state_district || "",
          { shouldValidate: true }
        );
        setValue("zip_code", data.address.postcode || "", {
          shouldValidate: true,
        });
        setValue("country", data.address.country || "", {
          shouldValidate: true,
        });
        toast.success("Address updated from map!");
      } else {
        toast.warning("Could not find a specific address for this location.");
      }
    } catch (error) {
      toast.error("Failed to fetch address.");
    } finally {
      setIsGeocoding(false);
      toast.dismiss();
    }
  };

  // This logic for searching based on address text remains separate and tied to the search button.
  const handleSearchAddressAction = async () => {
    const addressParts = [
      getValues("address_line_1"),
      getValues("city"),
      getValues("state"),
      getValues("country"),
    ];
    const fullAddress = addressParts.filter(Boolean).join(", ");
    if (fullAddress.length < 5) {
      toast.info("Please enter an address to search.");
      return;
    }

    setIsGeocoding(true);
    toast.loading("Searching for address...");
    try {
      const results = await mapRepository.geocodeAddress(fullAddress);
      if (results && results.length > 0) {
        const { lat, lon } = results[0];
        setValue("latitude", parseFloat(lat), { shouldValidate: true });
        setValue("longitude", parseFloat(lon), { shouldValidate: true });
        toast.success("Address found on map!");
      } else {
        toast.warning("Could not find this address.");
      }
    } catch (error) {
      toast.error("Failed to search address.");
    } finally {
      toast.dismiss();
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div className="space-y-4">
            <div className="flex items-end gap-2">
              <FormField
                name="address_line_1"
                control={form.control}
                render={({ field }) => (
                  <FormItem className="flex-grow">
                    <FormLabel>Address Line 1 *</FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        placeholder="e.g., 1600 Amphitheatre Pkwy"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button
                type="button"
                variant="outline"
                size="icon"
                onClick={handleSearchAddressAction}
                disabled={isGeocoding}
                title="Search Address on Map"
              >
                <Search className="h-4 w-4" />
              </Button>
            </div>
            <FormField
              name="address_line_2"
              control={form.control}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Address Line 2</FormLabel>
                  <FormControl>
                    <Input {...field} placeholder="e.g., Suite 100" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="grid grid-cols-2 gap-4">
              <FormField
                name="city"
                control={form.control}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>City *</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                name="state"
                control={form.control}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>State/Province *</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <FormField
                name="zip_code"
                control={form.control}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Zip/Postal Code *</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                name="country"
                control={form.control}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Country *</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <div className="grid grid-cols-2 gap-4 pt-2">
              <FormField
                name="latitude"
                control={form.control}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Latitude</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        step="any"
                        {...field}
                        value={field.value ?? ""}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                name="longitude"
                control={form.control}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Longitude</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        step="any"
                        {...field}
                        value={field.value ?? ""}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
          </div>
          <div
            className={cn(
              "relative rounded-md overflow-hidden min-h-[400px] transition-all duration-300",
              isFullscreen && "fixed inset-0 z-50"
            )}
          >
            {isGeocoding && !isFullscreen && (
              <div className="absolute inset-0 bg-background/50 z-20 flex items-center justify-center">
                <Loader2 className="h-6 w-6 animate-spin" />
              </div>
            )}
            <MapView
              center={mapCenter}
              zoom={mapZoom}
              markers={
                markerPosition
                  ? [{ id: "selected", position: markerPosition }]
                  : []
              }
              onLocationSelectAction={handleLocationSelectAction}
              isLocationPicker={true}
              className="h-full w-full"
              isFullscreen={isFullscreen}
              onToggleFullscreenAction={() => setIsFullscreen(!isFullscreen)}
            />
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/organization/forms/org-address-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/forms/org-basic-info-form.tsx

"use client";

import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { CardContent } from "@/components/ui/card";
import { BusinessDomainSearchPicker } from "./business-domain-search-picker";

export function OrgBasicInfoForm({ form }: { form: any }) {
  return (
    <CardContent className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <FormField
          name="long_name"
          control={form.control}
          render={({ field }) => (
            <FormItem>
              <FormLabel>Official Name *</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          name="short_name"
          control={form.control}
          render={({ field }) => (
            <FormItem>
              <FormLabel>Short Name / Acronym *</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>
      <FormField
        name="email"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Contact Email *</FormLabel>
            <FormControl>
              <Input type="email" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="description"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Description *</FormLabel>
            <FormControl>
              <Textarea rows={4} {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <BusinessDomainSearchPicker
        name="business_domains"
        label="Business Domains *"
      />
    </CardContent>
  );
}
// END OF FILE: components/organization/forms/org-basic-info-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/forms/org-branding-form.tsx

"use client";

import { useFieldArray } from "react-hook-form";
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { CardContent } from "@/components/ui/card";
import { ImageUploader } from "@/components/ui/image-uploader";
import { Link as LinkIcon, Trash2, PlusCircle } from "lucide-react";

export function OrgBrandingForm({ form }: { form: any }) {
  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "social_networks",
  });

  return (
    <CardContent className="space-y-6">
      <FormField
        name="logoFile"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Organization Logo</FormLabel>
            <FormControl>
              <ImageUploader
                currentImageUrl={form.getValues("logo_url")}
                onImageSelectedAction={(file, url) => {
                  field.onChange(file);
                  form.setValue("logo_url", url);
                }}
                label=""
                aspectRatio="square"
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="web_site_url"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Website URL</FormLabel>
            <FormControl>
              <Input type="url" {...field} value={field.value || ""} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <div className="space-y-3">
        <FormLabel>Social Media Links</FormLabel>
        {fields.map((field, index) => (
          <FormField
            key={field.id}
            control={form.control}
            name={`social_networks.${index}.url`}
            render={({ field }) => (
              <FormItem>
                <div className="flex items-center gap-2">
                  <LinkIcon className="h-4 w-4 text-muted-foreground" />
                  <FormControl>
                    <Input
                      placeholder="https://facebook.com/your-page"
                      {...field}
                    />
                  </FormControl>
                  {fields.length > 1 && (
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      onClick={() => remove(index)}
                      className="text-destructive hover:text-destructive h-9 w-9 flex-shrink-0"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  )}
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        ))}
        <Button
          type="button"
          variant="outline"
          size="sm"
          onClick={() => append({ url: "" })}
        >
          <PlusCircle className="mr-2 h-4 w-4" /> Add Social Link
        </Button>
      </div>
      <FormField
        name="keywords"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Keywords</FormLabel>
            <FormControl>
              <Input {...field} />
            </FormControl>
            <FormDescription>
              Comma-separated values (e.g., tech, saas).
            </FormDescription>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="number_of_employees"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Number of Employees</FormLabel>
            <FormControl>
              <Input type="number" {...field} value={field.value ?? ""} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
    </CardContent>
  );
}
// END OF FILE: components/organization/forms/org-branding-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/forms/org-legal-form.tsx

"use client";

import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { CardContent } from "@/components/ui/card";
import { OrganizationLegalForm as OrgLegalFormEnum } from "@/types/organization";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { CalendarDays } from "lucide-react";

const legalFormOptions: { value: OrgLegalFormEnum; label: string }[] = [
  { value: "11", label: "Sole Proprietorship" },
  { value: "31", label: "Private Limited Company (Ltd)" },
  { value: "32", label: "Public Limited Company (PLC)" },
  { value: "51", label: "Cooperative" },
];

export function OrgLegalForm({ form }: { form: any }) {
  return (
    <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-6">
      <FormField
        name="legal_form"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Legal Form *</FormLabel>
            <Select onValueChange={field.onChange} defaultValue={field.value}>
              <FormControl>
                <SelectTrigger>
                  <SelectValue placeholder="Select..." />
                </SelectTrigger>
              </FormControl>
              <SelectContent>
                {legalFormOptions.map((opt) => (
                  <SelectItem key={opt.value} value={opt.value}>
                    {opt.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="business_registration_number"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Business Registration No.</FormLabel>
            <FormControl>
              <Input {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="tax_number"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Tax ID / VAT Number</FormLabel>
            <FormControl>
              <Input {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="capital_share"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Capital Share (USD)</FormLabel>
            <FormControl>
              <Input type="number" {...field} value={field.value ?? ""} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="registration_date"
        control={form.control}
        render={({ field }) => (
          <FormItem className="flex flex-col">
            <FormLabel>Registration Date</FormLabel>
            <Popover>
              <PopoverTrigger asChild>
                <FormControl>
                  <Button
                    variant={"outline"}
                    className={cn(
                      "h-10 w-full justify-start font-normal",
                      !field.value && "text-muted-foreground"
                    )}
                  >
                    <CalendarDays className="mr-2 h-4 w-4" />
                    {field.value ? (
                      format(field.value, "PPP")
                    ) : (
                      <span>Pick a date</span>
                    )}
                  </Button>
                </FormControl>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={field.value || undefined}
                  onSelect={field.onChange}
                  fromYear={1900}
                  toYear={new Date().getFullYear()}
                />
              </PopoverContent>
            </Popover>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="year_founded"
        control={form.control}
        render={({ field }) => (
          <FormItem className="flex flex-col">
            <FormLabel>Year Founded</FormLabel>
            <Popover>
              <PopoverTrigger asChild>
                <FormControl>
                  <Button
                    variant={"outline"}
                    className={cn(
                      "h-10 w-full justify-start font-normal",
                      !field.value && "text-muted-foreground"
                    )}
                  >
                    <CalendarDays className="mr-2 h-4 w-4" />
                    {field.value ? (
                      format(field.value, "yyyy")
                    ) : (
                      <span>Pick year</span>
                    )}
                  </Button>
                </FormControl>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={field.value || undefined}
                  onSelect={field.onChange}
                  captionLayout="dropdown-buttons"
                  fromYear={1900}
                  toYear={new Date().getFullYear()}
                />
              </PopoverContent>
            </Popover>
            <FormMessage />
          </FormItem>
        )}
      />
    </CardContent>
  );
}
// END OF FILE: components/organization/forms/org-legal-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/organization-card.tsx

"use client";

import React from "react";
import { OrganizationDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  LogIn,
  Building,
  CheckCircle,
  XCircle,
  Clock,
} from "lucide-react";
import { cn } from "@/lib/utils";
import Image from "next/image";

interface OrganizationCardProps {
  organization: OrganizationDto;
  onEnterAction: (organization: OrganizationDto) => void;
  onEditAction: (organizationId: string) => void;
  onDeleteAction: (organization: OrganizationDto) => void;
}

const getStatusInfo = (status: OrganizationDto["status"]) => {
  switch (status) {
    case "ACTIVE":
      return { icon: CheckCircle, color: "text-green-600", label: "Active" };
    case "INACTIVE":
      return { icon: XCircle, color: "text-slate-500", label: "Inactive" };
    case "PENDING_APPROVAL":
      return { icon: Clock, color: "text-amber-600", label: "Pending" };
    default:
      return {
        icon: XCircle,
        color: "text-destructive",
        label: status || "Unknown",
      };
  }
};

export function OrganizationCard({
  organization,
  onEnterAction,
  onEditAction,
  onDeleteAction,
}: OrganizationCardProps) {
  const statusInfo = getStatusInfo(organization.status);

  return (
    <Card className="flex flex-col h-full shadow-md hover:shadow-xl transition-all duration-300 ease-in-out transform hover:-translate-y-1 group">
      <CardHeader>
        <div className="flex justify-between items-start gap-3">
          <div className="flex items-center gap-4">
            {organization.logo_url ? (
              <Image
                src={organization.logo_url}
                alt={organization.long_name || ""}
                width={48}
                height={48}
                className="h-12 w-12 rounded-lg object-cover border"
              />
            ) : (
              <div className="h-12 w-12 rounded-lg bg-muted flex items-center justify-center border">
                <Building className="h-6 w-6 text-muted-foreground" />
              </div>
            )}
            <div>
              <CardTitle
                className="text-md font-bold leading-tight line-clamp-2"
                title={organization.long_name}
              >
                {organization.long_name}
              </CardTitle>
              <CardDescription className="text-xs">
                {organization.short_name}
              </CardDescription>
            </div>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 flex-shrink-0"
              >
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem
                onClick={() => onEditAction(organization.organization_id!)}
              >
                <Edit3 className="mr-2 h-4 w-4" /> Edit Details
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => onDeleteAction(organization)}
                className="text-destructive focus:text-destructive"
              >
                <Trash2 className="mr-2 h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent className="flex-grow">
        <p className="text-muted-foreground line-clamp-3 text-sm leading-relaxed min-h-[60px]">
          {organization.description || "No description provided."}
        </p>
      </CardContent>
      <CardFooter className="pt-3 pb-4 flex justify-between items-center">
        <Badge
          variant="outline"
          className={cn(
            "capitalize text-xs items-center font-normal",
            statusInfo.color
          )}
        >
          <statusInfo.icon className="mr-1.5 h-3.5 w-3.5" />
          {statusInfo.label}
        </Badge>
        <Button size="sm" onClick={() => onEnterAction(organization)}>
          <LogIn className="mr-2 h-4 w-4" /> Enter
        </Button>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/organization-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/organization-columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { OrganizationDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  LogIn,
  Building,
  CheckCircle,
  XCircle,
  Clock,
} from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

const getStatusInfo = (status: OrganizationDto["status"]) => {
  switch (status) {
    case "ACTIVE":
      return { icon: CheckCircle, color: "text-green-600", label: "Active" };
    case "INACTIVE":
      return { icon: XCircle, color: "text-slate-500", label: "Inactive" };
    case "PENDING_APPROVAL":
      return { icon: Clock, color: "text-amber-600", label: "Pending" };
    default:
      return {
        icon: XCircle,
        color: "text-destructive",
        label: status || "Unknown",
      };
  }
};

interface OrganizationRowActionsProps {
  organization: OrganizationDto;
  onEnterAction: (organization: OrganizationDto) => void;
  onEditAction: (organizationId: string) => void;
  onDeleteAction: (organization: OrganizationDto) => void;
}

const OrganizationRowActions: React.FC<OrganizationRowActionsProps> = ({
  organization,
  onEnterAction,
  onEditAction,
  onDeleteAction,
}) => {
  return (
    <div className="flex items-center justify-end gap-2">
      <Button
        variant="outline"
        size="sm"
        className="h-8 px-2"
        onClick={() => onEnterAction(organization)}
      >
        <LogIn className="mr-1.5 h-3.5 w-3.5" /> Enter
      </Button>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            className="h-8 w-8 p-0 data-[state=open]:bg-muted"
          >
            <MoreHorizontal className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="w-[160px]">
          <DropdownMenuItem
            onClick={() => onEditAction(organization.organization_id!)}
          >
            <Edit3 className="mr-2 h-4 w-4" /> Edit
          </DropdownMenuItem>
          <DropdownMenuItem
            onClick={() => onDeleteAction(organization)}
            className="text-destructive focus:text-destructive"
          >
            <Trash2 className="mr-2 h-4 w-4" /> Delete
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
};

export const getOrganizationColumns = (
  actionHandlers: Omit<OrganizationRowActionsProps, "organization">
): ColumnDef<OrganizationDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
    <Checkbox checked={table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false} onCheckedChange={v => table.toggleAllPageRowsSelected(!!v)} aria-label="Select all" />

    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "long_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Organization" />
    ),
    cell: ({ row }) => {
      const org = row.original;
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border">
            <AvatarImage src={org.logo_url} alt={org.long_name} />
            <AvatarFallback>{org.short_name?.charAt(0) || "O"}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{org.long_name}</div>
            <div className="text-xs text-muted-foreground">
              {org.short_name}
            </div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "status",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Status" />
    ),
    cell: ({ row }) => {
      const statusInfo = getStatusInfo(row.getValue("status"));
      return (
        <Badge variant="outline" className={`capitalize ${statusInfo.color}`}>
          <statusInfo.icon className="mr-1.5 h-3.5 w-3.5" />
          {statusInfo.label}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "email",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Contact Email" />
    ),
  },
  {
    id: "actions",
    cell: ({ row }) => (
      <OrganizationRowActions organization={row.original} {...actionHandlers} />
    ),
  },
];
// END OF FILE: components/organization/organization-columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/organization-form.tsx

"use client";

import React, { useState, useMemo } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  CreateOrganizationRequest,
  UpdateOrganizationRequest,
  OrganizationDto,
  AddressDto,
  OrganizationLegalForm,
} from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { mediaRepository } from "@/lib/data-repo/media";
import { toast } from "sonner";
import { useSession } from "next-auth/react";
import { FormWrapper } from "../ui/form-wrapper";
import { Info, FileText, Building, MapPin } from "lucide-react";
import { OrgBasicInfoForm } from "./forms/org-basic-info-form";
import { OrgLegalForm } from "./forms/org-legal-form";
import { OrgBrandingForm } from "./forms/org-branding-form";
import { OrgAddressForm, addressSchema } from "./forms/org-address-form";
import { isValid } from "date-fns";

const basicInfoSchema = z.object({
  long_name: z.string().min(3, "Official name is required.").max(100),
  short_name: z.string().min(2, "Short name is required.").max(50),
  email: z.string().email("A valid contact email is required."),
  description: z
    .string()
    .min(10, "Description must be at least 10 characters.")
    .max(500),
  business_domains: z
    .array(z.string())
    .min(1, "At least one business domain is required."),
});
const legalFormSchema = z.object({
  legal_form: z.string().min(1, "Legal form is required."),
  business_registration_number: z.string().optional().or(z.literal("")),
  tax_number: z.string().optional().or(z.literal("")),
  capital_share: z.coerce
    .number()
    .positive("Capital share must be positive.")
    .optional()
    .nullable(),
  registration_date: z.date().optional().nullable(),
  year_founded: z.date().optional().nullable(),
  ceo_name: z.string().optional().or(z.literal("")),
});
const brandingSchema = z.object({
  logoFile: z.any().optional(),
  logo_url: z.string().url("Invalid URL").optional().or(z.literal("")),
  web_site_url: z
    .string()
    .url("Invalid website URL.")
    .optional()
    .or(z.literal("")),
  social_network: z
    .string()
    .url("Invalid social network URL.")
    .optional()
    .or(z.literal("")),
  keywords: z.string().optional().or(z.literal("")),
  number_of_employees: z.coerce.number().int().min(0).optional().nullable(),
});
const fullOrganizationSchema = basicInfoSchema
  .merge(legalFormSchema)
  .merge(brandingSchema)
  .merge(addressSchema);
type OrganizationFormData = z.infer<typeof fullOrganizationSchema>;

const formSteps = [
  {
    id: "basic",
    name: "Basic Info",
    icon: Info,
    fields: Object.keys(basicInfoSchema.shape),
  },
  {
    id: "legal",
    name: "Legal & Financial",
    icon: FileText,
    fields: Object.keys(legalFormSchema.shape),
  },
  {
    id: "branding",
    name: "Branding & Details",
    icon: Building,
    fields: Object.keys(brandingSchema.shape),
  },
  {
    id: "address",
    name: "Headquarters",
    icon: MapPin,
    fields: Object.keys(addressSchema.shape),
  },
];

interface OrganizationFormProps {
  mode: "create" | "edit";
  initialData?: Partial<OrganizationDto>;
  defaultAddress?: AddressDto | null;
  onSuccessAction: (data: OrganizationDto) => void;
}

export function OrganizationForm({
  mode,
  initialData,
  defaultAddress,
  onSuccessAction,
}: OrganizationFormProps) {
  const { data: session } = useSession();
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<OrganizationFormData>({
    resolver: zodResolver(fullOrganizationSchema),
    mode: "onChange",
    defaultValues: useMemo(
      () => ({
        long_name: initialData?.long_name || "",
        short_name: initialData?.short_name || "",
        email: initialData?.email || "",
        description: initialData?.description || "",
        business_domains: initialData?.business_domains || [],
        legal_form: initialData?.legal_form || "",
        business_registration_number:
          initialData?.business_registration_number || "",
        tax_number: initialData?.tax_number || "",
        capital_share: initialData?.capital_share || null,
        registration_date:
          initialData?.registration_date &&
          isValid(new Date(initialData.registration_date))
            ? new Date(initialData.registration_date)
            : undefined,
        year_founded:
          initialData?.year_founded &&
          isValid(new Date(initialData.year_founded))
            ? new Date(initialData.year_founded)
            : undefined,
        ceo_name: initialData?.ceo_name || "",
        logo_url: initialData?.logo_url || "",
        web_site_url: initialData?.website_url || "",
        social_network: initialData?.social_network || "",
        keywords: Array.isArray(initialData?.keywords)
          ? initialData.keywords.join(", ")
          : "",
        number_of_employees: (initialData as any)?.number_of_employees || null,
        address_line_1: defaultAddress?.address_line_1 || "",
        address_line_2: defaultAddress?.address_line_2 || "",
        city: defaultAddress?.city || "",
        state: defaultAddress?.state || "",
        zip_code: defaultAddress?.zip_code || "",
        country: defaultAddress?.country_id || "",
        latitude: defaultAddress?.latitude,
        longitude: defaultAddress?.longitude,
      }),
      [initialData, defaultAddress]
    ),
  });

  const onSubmit = async (data: OrganizationFormData) => {
    setIsLoading(true);
    try {
      let logoUrl = data.logo_url || undefined;
      if (data.logoFile instanceof File) {
        const response = await mediaRepository.uploadFile(
          "organization",
          "image",
          "logos",
          session!.user.id,
          data.logoFile,
          true
        );
        logoUrl = response.url;
      }

      const orgPayload: CreateOrganizationRequest | UpdateOrganizationRequest =
        {
          long_name: data.long_name,
          short_name: data.short_name,
          email: data.email,
          description: data.description,
          business_domains: data.business_domains,
          legal_form: data.legal_form as OrganizationLegalForm,
          logo_url: logoUrl,
          web_site_url: data.web_site_url,
          social_network: data.social_network,
          keywords: data.keywords
            ? data.keywords
                .split(",")
                .map((k) => k.trim())
                .filter(Boolean)
            : [],
          business_registration_number: data.business_registration_number,
          tax_number: data.tax_number,
          capital_share: data.capital_share ?? undefined,
          registration_date: data.registration_date?.toISOString(),
          year_founded: data.year_founded?.toISOString(),
          ceo_name: data.ceo_name,
          number_of_employees: data.number_of_employees ?? undefined,
        };

      const addressPayload = {
        address_line_1: data.address_line_1,
        address_line_2: data.address_line_2,
        city: data.city,
        state: data.state,
        zip_code: data.zip_code,
        country_id: data.country,
        latitude: data.latitude,
        longitude: data.longitude,
      };

      if (mode === "create") {
        const orgResponse = await organizationRepository.createOrganization(
          orgPayload as CreateOrganizationRequest
        );
        if (orgResponse?.organization_id) {
          await organizationRepository.createAddress(
            "ORGANIZATION",
            orgResponse.organization_id,
            addressPayload
          );
        }
        onSuccessAction(orgResponse);
      } else if (mode === "edit" && initialData?.organization_id) {
        const updatedOrg = await organizationRepository.updateOrganization(
          initialData.organization_id,
          orgPayload as UpdateOrganizationRequest
        );
        if (defaultAddress?.address_id) {
          await organizationRepository.updateAddress(
            "ORGANIZATION",
            initialData.organization_id,
            defaultAddress.address_id,
            addressPayload
          );
        } else {
          await organizationRepository.createAddress(
            "ORGANIZATION",
            initialData.organization_id,
            addressPayload
          );
        }
        onSuccessAction(updatedOrg);
      }
    } catch (error: any) {
      toast.error(error.message || `Failed to ${mode} organization.`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={onSubmit}
      isLoading={isLoading}
      title={
        mode === "create"
          ? "Create New Organization"
          : `Editing: ${initialData?.long_name}`
      }
      description="Complete all steps to save your organization's profile."
      steps={formSteps}
      submitButtonText={
        mode === "create" ? "Create Organization" : "Save All Changes"
      }
    >
      {(currentStep) => (
        <div className="min-h-[450px]">
          {currentStep === 0 && <OrgBasicInfoForm form={form} />}
          {currentStep === 1 && <OrgLegalForm form={form} />}
          {currentStep === 2 && <OrgBrandingForm form={form} />}
          {currentStep === 3 && <OrgAddressForm form={form} />}
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/organization-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/organization-selector-dialog.tsx

"use client";

import React, { useState, useMemo } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import {OrganizationDto } from "@/types/organization";
import { cn } from "@/lib/utils";
import {
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  LayoutGrid,
  List,
  Search,
  Building,
  Check,
  PlusCircle,
  Loader2,
  Briefcase,
} from "lucide-react";
import Image from "next/image";

interface OrganizationSelectorDialogProps {
  onCloseAction: () => void;
}

export function OrganizationSelectorDialog({
  onCloseAction,
}: OrganizationSelectorDialogProps) {
  const router = useRouter();
  const {
    userOrganizations,
    activeOrganizationId,
    setActiveOrganization,
    isLoadingUserOrgs,
  } = useActiveOrganization();

  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [searchQuery, setSearchQuery] = useState("");

  const filteredOrganizations = useMemo(() => {
    if (!searchQuery) return userOrganizations;
    const lowercasedQuery = searchQuery.toLowerCase();
    return userOrganizations.filter(
      (org) =>
        org.long_name?.toLowerCase().includes(lowercasedQuery) ||
        org.short_name?.toLowerCase().includes(lowercasedQuery) ||
        org.email?.toLowerCase().includes(lowercasedQuery)
    );
  }, [userOrganizations, searchQuery]);

  const handleSelectAndClose = (org: OrganizationDto) => {
    if (!org.organization_id) return;
    setActiveOrganization(org.organization_id, org as OrganizationDto).then(
      () => {
        router.push(`/business-actor/dashboard`);
        onCloseAction();
      }
    );
  };

  const handleCreateNew = () => {
    router.push("/business-actor/organization/create");
    onCloseAction();
  };

  const NoOrganizationsPrompt = () => (
    <div className="flex flex-col items-center justify-center h-full text-center p-10 bg-muted/50 rounded-lg">
      <Briefcase className="h-16 w-16 text-muted-foreground mb-4" />
      <h3 className="text-xl font-semibold">No Organizations Yet</h3>
      <p className="text-muted-foreground mt-2 mb-6 max-w-sm">
        It looks like you have not created or joined an organization. Get started
        by creating your first one.
      </p>
      <Button onClick={handleCreateNew}>
        <PlusCircle className="mr-2 h-4 w-4" />
        Create Your First Organization
      </Button>
    </div>
  );

  return (
    <div className="flex flex-col h-full">
      <DialogHeader className="px-6 pt-6 flex-shrink-0">
        <DialogTitle className="text-xl">Switch Organization</DialogTitle>
        <DialogDescription>
          Select an organization to manage or create a new one.
        </DialogDescription>
      </DialogHeader>

      <div className="px-6 pt-4 pb-2 border-b flex-shrink-0">
        <div className="flex flex-col sm:flex-row gap-2 justify-between">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search organizations..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 h-10"
            />
          </div>
          <div className="flex items-center p-1 bg-muted rounded-lg w-full sm:w-auto">
            <Button
              variant={viewMode === "grid" ? "default" : "ghost"}
              size="sm"
              onClick={() => setViewMode("grid")}
              className="flex-1 sm:flex-initial"
            >
              <LayoutGrid className="h-4 w-4" />
              <span className="ml-2 hidden sm:inline">Grid</span>
            </Button>
            <Button
              variant={viewMode === "list" ? "default" : "ghost"}
              size="sm"
              onClick={() => setViewMode("list")}
              className="flex-1 sm:flex-initial"
            >
              <List className="h-4 w-4" />
              <span className="ml-2 hidden sm:inline">List</span>
            </Button>
          </div>
        </div>
      </div>

      <ScrollArea className="flex-grow overflow-auto">
        <div className="p-6">
          {isLoadingUserOrgs ? (
            <div className="flex items-center justify-center h-full">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
            </div>
          ) : filteredOrganizations.length === 0 && !searchQuery ? (
            <NoOrganizationsPrompt />
          ) : (
            <>
              {viewMode === "grid" && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {filteredOrganizations.map((org) => (
                    <Card
                      key={org.organization_id}
                      onClick={() => handleSelectAndClose(org)}
                      className={cn(
                        "cursor-pointer hover:shadow-lg transition-shadow hover:border-primary/50 relative group",
                        activeOrganizationId === org.organization_id &&
                        "border-2 border-primary shadow-lg"
                      )}
                    >
                      <CardHeader>
                        <div className="flex items-center gap-3">
                          {org.logo_url ? (
                            <Image
                              src={org.logo_url}
                              alt="Logo"
                              width={40}
                              height={40}
                              className="h-10 w-10 rounded-md object-cover"
                            />
                          ) : (
                            <div className="h-10 w-10 rounded-md bg-muted flex items-center justify-center">
                              <Building className="h-5 w-5 text-muted-foreground" />
                            </div>
                          )}
                          <CardTitle className="text-base line-clamp-2">
                            {org.long_name}
                          </CardTitle>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <CardDescription className="text-xs line-clamp-2 min-h-[32px]">
                          {org.description}
                        </CardDescription>
                      </CardContent>
                      {activeOrganizationId === org.organization_id && (
                        <div className="absolute top-2 right-2 p-1 bg-primary text-primary-foreground rounded-full">
                          <Check className="h-3 w-3" />
                        </div>
                      )}
                    </Card>
                  ))}
                </div>
              )}
              {viewMode === "list" && (
                <div className="space-y-2">
                  {filteredOrganizations.length > 0 ? (
                    filteredOrganizations.map((org) => (
                      <div
                        key={org.organization_id}
                        onClick={() => handleSelectAndClose(org)}
                        className={cn(
                          "flex items-center p-3 rounded-lg border hover:bg-accent cursor-pointer",
                          activeOrganizationId === org.organization_id &&
                          "bg-accent border-primary/50"
                        )}
                      >
                        <div className="flex items-center gap-4 flex-1 min-w-0">
                          {org.logo_url ? (
                            <Image
                              src={org.logo_url}
                              alt="Logo"
                              width={32}
                              height={32}
                              className="h-8 w-8 rounded-md object-cover"
                            />
                          ) : (
                            <div className="h-8 w-8 rounded-md bg-muted flex-shrink-0 flex items-center justify-center">
                              <Building className="h-4 w-4 text-muted-foreground" />
                            </div>
                          )}
                          <div className="min-w-0">
                            <p className="font-medium text-sm truncate">
                              {org.long_name}
                            </p>
                            <p className="text-xs text-muted-foreground truncate">
                              {org.email}
                            </p>
                          </div>
                        </div>
                        {activeOrganizationId === org.organization_id && (
                          <Check className="ml-4 h-5 w-5 text-primary flex-shrink-0" />
                        )}
                      </div>
                    ))
                  ) : (
                    <p className="text-center text-sm text-muted-foreground py-10">
                      No organizations match your search.
                    </p>
                  )}
                </div>
              )}
            </>
          )}
        </div>
      </ScrollArea>

      <DialogFooter className="px-6 py-4 border-t flex-shrink-0 flex sm:justify-between">
        <DialogClose asChild>
          <Button
            type="button"
            variant="secondary"
            className="w-full sm:w-auto"
          >
            Cancel
          </Button>
        </DialogClose>
        <Button onClick={handleCreateNew} className="w-full sm:w-auto">
          <PlusCircle className="mr-2 h-4 w-4" />
          Create Organization
        </Button>
      </DialogFooter>
    </div>
  );
}
// END OF FILE: components/organization/organization-selector-dialog.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/organization-switcher.tsx

"use client";

import React, { useState } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { ChevronsUpDown, Building } from "lucide-react";
import Image from "next/image";
import { Skeleton } from "@/components/ui/skeleton";
import { OrganizationSelectorDialog } from "./organization-selector-dialog";

interface OrganizationSwitcherProps {
  isCollapsed: boolean;
}

export function OrganizationSwitcher({
  isCollapsed,
}: OrganizationSwitcherProps) {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const {
    userOrganizations,
    activeOrganizationId,
    activeOrganizationDetails,
    isLoadingUserOrgs,
  } = useActiveOrganization();

  if (isLoadingUserOrgs) {
    return (
      <div className="px-2 py-2">
        <Skeleton className="h-14 w-full" />
      </div>
    );
  }

  const activeOrg =
    activeOrganizationDetails ||
    userOrganizations.find(
      (org) => org.organization_id === activeOrganizationId
    );

  if (isCollapsed) {
    return (
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <TooltipProvider>
          <Tooltip delayDuration={0}>
            <TooltipTrigger asChild>
              <DialogTrigger asChild>
                {/* [FIX] Add w-full and justify-center */}
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-14 w-full flex justify-center items-center"
                >
                  {activeOrg?.logo_url ? (
                    <Image
                      src={activeOrg.logo_url}
                      alt="Org Logo"
                      width={28}
                      height={28}
                      className="h-7 w-7 rounded-md object-cover"
                    />
                  ) : (
                    <Building className="h-6 w-6" />
                  )}
                  <span className="sr-only">Switch Organization</span>
                </Button>
              </DialogTrigger>
            </TooltipTrigger>
            <TooltipContent side="right">
              {activeOrg?.short_name || "Switch Organization"}
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        {/* ... DialogContent ... */}
      </Dialog>
    );
  }
  return (
    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
      <DialogTrigger asChild>
        <div className="px-2 py-2">
          <Button
            variant="outline"
            role="combobox"
            aria-expanded={isDialogOpen}
            className="w-full h-14 justify-between text-left hover:bg-muted/50 focus:ring-1 focus:ring-primary"
          >
            <div className="flex items-center gap-3 min-w-0">
              {activeOrg?.logo_url ? (
                <Image
                  src={activeOrg.logo_url}
                  alt="Org Logo"
                  width={32}
                  height={32}
                  className="h-8 w-8 rounded-md object-cover"
                />
              ) : (
                <div className="h-8 w-8 rounded-md bg-muted flex items-center justify-center">
                  <Building className="h-5 w-5 text-muted-foreground" />
                </div>
              )}
              <div className="flex flex-col items-start min-w-0">
                <span className="truncate font-semibold text-sm">
                  {activeOrg?.short_name || "Select Organization"}
                </span>
                <span className="truncate text-xs text-muted-foreground">
                  {activeOrg
                    ? "Switch organization"
                    : "No organization selected"}
                </span>
              </div>
            </div>
            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </div>
      </DialogTrigger>
      <DialogContent className="p-0 gap-0 w-[95vw] max-w-md h-[70vh] flex flex-col">
        <OrganizationSelectorDialog
          onCloseAction={() => setIsDialogOpen(false)}
        />
      </DialogContent>
    </Dialog>
  );
}
// END OF FILE: components/organization/organization-switcher.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/practical-info/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { PracticalInformationDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, FileText } from "lucide-react"; // Using FileText as a generic icon for info type
import { format, parseISO, isValid } from "date-fns";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

export interface PracticalInfoRowActionsProps {
  item: PracticalInformationDto;
  onEditAction: (item: PracticalInformationDto) => void;
  onDeleteAction: (item: PracticalInformationDto) => void;
  // No onViewDetails for this simple DTO, edit serves that purpose
}

const PracticalInfoRowActions: React.FC<PracticalInfoRowActionsProps> = ({
  item,
  onEditAction,
  onDeleteAction,
}) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className="h-8 w-8 p-0 data-[state=open]:bg-muted"
        >
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuLabel>Actions</DropdownMenuLabel>
        <DropdownMenuItem onClick={() => onEditAction(item)}>
          <Edit3 className="mr-2 h-4 w-4" /> Edit
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          onClick={() => onDeleteAction(item)}
          className="text-destructive focus:text-destructive"
        >
          <Trash2 className="mr-2 h-4 w-4" /> Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getPracticalInfoColumns = (
  actionHandlers: Omit<PracticalInfoRowActionsProps, "item">
): ColumnDef<PracticalInformationDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
     <Checkbox checked={table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false} onCheckedChange={v => table.toggleAllPageRowsSelected(!!v)} aria-label="Select all" />

    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
        className="translate-y-[2px]"
      />
    ),
    enableSorting: false,
    enableHiding: false,
    size: 40,
  },
  {
    accessorKey: "type",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Type" />
    ),
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        <FileText className="h-4 w-4 text-muted-foreground flex-shrink-0" />
        <span className="font-medium truncate max-w-xs">
          {row.getValue("type")}
        </span>
      </div>
    ),
    size: 250,
    filterFn: (row, id, value) => value.includes(row.getValue(id)), // For faceted filter
  },
  {
    accessorKey: "value",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Value" />
    ),
    cell: ({ row }) => (
      <div className="truncate max-w-md text-sm text-muted-foreground">
        {row.getValue("value")}
      </div>
    ),
    size: 400,
  },
  {
    accessorKey: "notes",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Notes" />
    ),
    cell: ({ row }) => (
      <div className="text-xs text-muted-foreground/80 truncate max-w-sm">
        {row.getValue("notes") || ""}
      </div>
    ),
  },
  {
    accessorKey: "updated_at",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Last Updated" />
    ),
    cell: ({ row }) => {
      const date = row.getValue("updated_at") as string;
      return (
        <div className="text-xs text-muted-foreground whitespace-nowrap">
          {isValid(parseISO(date)) ? format(parseISO(date), "PPp") : "-"}
        </div>
      );
    },
    size: 170,
  },
  {
    id: "actions",
    cell: ({ row }) => (
      <div className="text-right">
        <PracticalInfoRowActions
          item={row.original}
          onEditAction={actionHandlers.onEditAction}
          onDeleteAction={actionHandlers.onDeleteAction}
        />
      </div>
    ),
    size: 80,
  },
];
// END OF FILE: components/organization/practical-info/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/practical-info/practical-info-card.tsx

"use client";

import React from "react";
import { PracticalInformationDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  StickyNote,
} from "lucide-react"; // Use specific icon
import { format, parseISO, isValid } from "date-fns";
import { cn } from "@/lib/utils";

interface PracticalInfoCardProps {
  item: PracticalInformationDto;
  onEditAction: (item: PracticalInformationDto) => void;
  onDeleteAction: (item: PracticalInformationDto) => void;
  className?: string;
}

export function PracticalInfoCard({
  item,
  onEditAction,
  onDeleteAction,
  className,
}: PracticalInfoCardProps) {
  return (
    <Card
      className={cn(
        "flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow duration-200 ease-in-out group",
        className
      )}
    >
      <CardHeader>
        <div className="flex justify-between items-start gap-2">
          <CardTitle className="text-base sm:text-md font-semibold leading-tight line-clamp-2 flex items-center">
            <StickyNote className="h-4 w-4 mr-2 text-primary opacity-80 flex-shrink-0" />
            <span className="truncate" title={item.type}>
              {item.type || "Untitled Information"}
            </span>
          </CardTitle>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-7 w-7 flex-shrink-0 opacity-70 group-hover:opacity-100"
              >
                <MoreHorizontal className="h-4 w-4" />{" "}
                <span className="sr-only">Actions</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-[160px]">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => onEditAction(item)}>
                <Edit3 className="mr-2 h-4 w-4" /> Edit
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => onDeleteAction(item)}
                className="text-destructive focus:text-destructive"
              >
                <Trash2 className="mr-2 h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent className="flex-grow space-y-1.5 text-sm py-2">
        <p className="text-foreground whitespace-pre-wrap break-words line-clamp-3 min-h-[4.5em]">
          {item.value || (
            <span className="italic text-muted-foreground">
              No value provided.
            </span>
          )}
        </p>
        {item.notes && (
          <p className="text-xs text-muted-foreground pt-1 line-clamp-2">
            <strong>Notes:</strong> {item.notes}
          </p>
        )}
      </CardContent>
      <CardFooter className="pt-2 pb-3 text-xs text-muted-foreground justify-end">
        Updated:{" "}
        {isValid(parseISO(item.updated_at!))
          ? format(parseISO(item.updated_at!), "PP")
          : "-"}
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/practical-info/practical-info-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/practical-info/practical-info-form.tsx

"use client";

import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { PracticalInformationDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

const practicalInfoFormSchema = z.object({
  type: z.string().min(3, "Type must be at least 3 characters long.").max(100, "Type is too long."),
  value: z.string().min(1, "Value cannot be empty.").max(1000, "Value is too long."),
  notes: z.string().max(500, "Notes are too long.").optional().or(z.literal("")),
});

export type PracticalInfoFormData = z.infer<typeof practicalInfoFormSchema>;

interface PracticalInfoFormProps {
  initialData?: Partial<PracticalInformationDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: PracticalInfoFormData) => Promise<boolean>;
}

export function PracticalInfoForm({ initialData, mode, onSubmitAction }: PracticalInfoFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<PracticalInfoFormData>({
    resolver: zodResolver(practicalInfoFormSchema),
    defaultValues: {
      type: initialData?.type || "",
      value: initialData?.value || "",
      notes: initialData?.notes || "",
    },
  });

  useEffect(() => {
    form.reset({
      type: initialData?.type || "",
      value: initialData?.value || "",
      notes: initialData?.notes || "",
    });
  }, [initialData, form.reset]);

  const handleSubmit = async (data: PracticalInfoFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Add New Information" : "Edit Information"}
      description={mode === 'create' ? "Provide a new piece of practical information." : `Update details for "${initialData?.type}"`}
      submitButtonText={mode === 'create' ? "Add Information" : "Save Changes"}
    >
      {() => (
        <div className="space-y-6 p-1">
          <FormField control={form.control} name="type" render={({ field }) => (<FormItem><FormLabel>Information Type *</FormLabel><FormControl><Input placeholder="e.g., Opening Hours, WiFi Password" {...field} /></FormControl><FormDescription>A clear category for this piece of information.</FormDescription><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="value" render={({ field }) => (<FormItem><FormLabel>Value / Content *</FormLabel><FormControl><Textarea placeholder="Enter the detailed information here..." {...field} rows={5} /></FormControl><FormDescription>The actual piece of information (e.g., Mon-Fri: 9 AM - 5 PM).</FormDescription><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="notes" render={({ field }) => (<FormItem><FormLabel>Additional Notes (Optional)</FormLabel><FormControl><Textarea placeholder="Any relevant context or extra details..." {...field} rows={3} /></FormControl><FormMessage /></FormItem>)} />
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/practical-info/practical-info-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/profile-nav.tsx

"use client";

import Link from "next/link";
import { cn } from "@/lib/utils";
import { Building, BookUser, MapPinned } from "lucide-react";

const navLinks = [
  {
    name: "Edit Profile",
    href: "/business-actor/org/profile",
    tab: "edit_profile",
    icon: Building,
  },
  {
    name: "Contacts",
    href: "/business-actor/org/profile?tab=contacts",
    tab: "contacts",
    icon: BookUser,
  },
  {
    name: "Addresses",
    href: "/business-actor/org/profile?tab=addresses",
    tab: "addresses",
    icon: MapPinned,
  },
];

interface ProfileNavProps {
  activeTab: string;
}

export function ProfileNav({ activeTab }: ProfileNavProps) {
  return (
    <nav className="flex flex-col space-y-1" aria-label="Profile Sections">
      {navLinks.map((link) => (
        <Link
          key={link.name}
          href={link.href}
          scroll={false}
          className={cn(
            "group flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors",
            activeTab === link.tab
              ? "bg-muted text-primary font-semibold"
              : "hover:bg-muted/50 hover:text-foreground"
          )}
        >
          <link.icon className="mr-3 h-5 w-5 flex-shrink-0 text-muted-foreground group-hover:text-primary transition-colors" />
          <span>{link.name}</span>
        </Link>
      ))}
    </nav>
  );
}
// END OF FILE: components/organization/profile-nav.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/proposed-activities/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ProposedActivityDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Activity } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface RowActionsProps {
  activity: ProposedActivityDto;
  onEditAction: (activity: ProposedActivityDto) => void;
  onDeleteAction: (activity: ProposedActivityDto) => void;
}

const RowActions: React.FC<RowActionsProps> = ({ activity, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(activity)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(activity)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getProposedActivityColumns = (
  actionHandlers: Omit<RowActionsProps, "activity">
): ColumnDef<ProposedActivityDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false} onCheckedChange={v => table.toggleAllPageRowsSelected(!!v)} aria-label="Select all" />
,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Activity Name" />,
    cell: ({ row }) => {
      return (
        <div className="flex items-center gap-3">
          <Activity className="h-4 w-4 text-muted-foreground" />
          <span className="font-medium">{row.getValue("name")}</span>
        </div>
      );
    },
  },
  {
    accessorKey: "type",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Type" />,
    cell: ({ row }) => <div className="text-sm text-muted-foreground">{row.getValue("type")}</div>,
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "rate",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Rate" className="justify-end" />,
    cell: ({ row }) => {
      const rate = parseFloat(row.getValue("rate"));
      const formatted = isNaN(rate) ? "N/A" : new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(rate);
      return <div className="text-right font-medium text-sm">{formatted}</div>;
    },
  },
  {
    id: "actions",
    cell: ({ row }) => <RowActions activity={row.original} {...actionHandlers} />,
  },
];
// END OF FILE: components/organization/proposed-activities/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/proposed-activities/proposed-activity-card.tsx

"use client";

import React from "react";
import { ProposedActivityDto } from "@/types/organization";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Activity, DollarSign } from "lucide-react";

interface ProposedActivityCardProps {
  activity: ProposedActivityDto;
  onEditAction: (activity: ProposedActivityDto) => void;
  onDeleteAction: (activity: ProposedActivityDto) => void;
}

export function ProposedActivityCard({ activity, onEditAction, onDeleteAction }: ProposedActivityCardProps) {
  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-muted border">
            <Activity className="h-5 w-5 text-muted-foreground" />
          </div>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">{activity.name}</CardTitle>
            <p className="text-xs text-muted-foreground">{activity.type}</p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(activity)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onDeleteAction(activity)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow text-sm text-muted-foreground">
        <p className="line-clamp-2">{activity.description || "No description provided."}</p>
      </CardContent>
      <CardFooter className="flex justify-end items-center">
        <div className="font-semibold text-lg flex items-center">
          <DollarSign className="h-4 w-4 mr-1 text-muted-foreground" />
          {activity.rate?.toFixed(2) || "N/A"}
        </div>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/proposed-activities/proposed-activity-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/proposed-activities/proposed-activity-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { ProposedActivityDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

const formSchema = z.object({
  name: z.string().min(3, "Activity name is required."),
  type: z.string().min(3, "Activity type is required."),
  rate: z.coerce.number().min(0, "Rate must be a positive number.").optional(),
  description: z.string().optional(),
});

export type ProposedActivityFormData = z.infer<typeof formSchema>;

interface ProposedActivityFormProps {
  initialData?: Partial<ProposedActivityDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: ProposedActivityFormData) => Promise<boolean>;
}

export function ProposedActivityForm({ initialData, mode, onSubmitAction }: ProposedActivityFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<ProposedActivityFormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: initialData?.name || "",
      type: initialData?.type || "",
      rate: initialData?.rate || 0,
      description: initialData?.description || "",
    },
  });

  const handleSubmit = async (data: ProposedActivityFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Propose New Activity" : "Edit Activity"}
      description="Define a service or activity your organization offers."
      submitButtonText={mode === 'create' ? "Add Activity" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <FormField control={form.control} name="name" render={({ field }) => (<FormItem><FormLabel>Activity Name *</FormLabel><FormControl><Input placeholder="e.g., Business Consultation" {...field} /></FormControl><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="type" render={({ field }) => (<FormItem><FormLabel>Type *</FormLabel><FormControl><Input placeholder="e.g., Consulting, Workshop" {...field} /></FormControl><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="rate" render={({ field }) => (<FormItem><FormLabel>Rate (USD)</FormLabel><FormControl><Input type="number" placeholder="e.g., 150.00" {...field} /></FormControl><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="description" render={({ field }) => (<FormItem><FormLabel>Description</FormLabel><FormControl><Textarea placeholder="Describe the activity..." {...field} /></FormControl><FormMessage /></FormItem>)} />
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/proposed-activities/proposed-activity-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/prospects/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ProspectDto, AgencyDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2 } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface ProspectRowActionsProps {
  prospect: ProspectDto;
  onEditAction: (prospect: ProspectDto) => void;
  onDeleteAction: (prospect: ProspectDto) => void;
}

const ProspectRowActions: React.FC<ProspectRowActionsProps> = ({ prospect, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(prospect)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(prospect)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getProspectColumns = (
  actionHandlers: Omit<ProspectRowActionsProps, "prospect">,
  agencies: AgencyDto[]
): ColumnDef<ProspectDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false} onCheckedChange={v => table.toggleAllPageRowsSelected(!!v)} aria-label="Select all" />
,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "first_name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => {
      const prospect = row.original;
      const fullName = `${prospect.first_name || ""} ${prospect.last_name || ""}`.trim();
      const fallback = fullName ? fullName.charAt(0).toUpperCase() : "P";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border"><AvatarImage src={prospect.logo} alt={fullName} /><AvatarFallback>{fallback}</AvatarFallback></Avatar>
          <div>
            <div className="font-medium">{fullName}</div>
            <div className="text-xs text-muted-foreground">{prospect.short_description}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "interest_level",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Interest Level" />,
    cell: ({ row }) => <div className="text-sm text-muted-foreground">{row.getValue("interest_level") || "N/A"}</div>,
  },
  {
    accessorKey: "agency_id",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Assignment" />,
    cell: ({ row }) => {
      const agencyId = row.getValue("agency_id");
      if (!agencyId) return <div className="text-sm text-muted-foreground">Headquarters</div>;
      const agency = agencies.find(a => a.agency_id === agencyId);
      return (
        <div className="text-sm font-medium flex items-center gap-2">
          <Building2 className="h-4 w-4 text-muted-foreground" />
          <span className="truncate">{agency ? agency.short_name : "Unknown Agency"}</span>
        </div>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id) || "headquarters"),
  },
  {
    id: "actions",
    cell: ({ row }) => <ProspectRowActions prospect={row.original} {...actionHandlers} />,
  },
];
// END OF FILE: components/organization/prospects/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/prospects/prospect-card.tsx

"use client";

import React from "react";
import { ProspectDto, AgencyDto } from "@/types/organization";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2, Thermometer } from "lucide-react";

interface ProspectCardProps {
  prospect: ProspectDto;
  agencies: AgencyDto[];
  onEditAction: (prospect: ProspectDto) => void;
  onDeleteAction: (prospect: ProspectDto) => void;
}

export function ProspectCard({ prospect, agencies, onEditAction, onDeleteAction }: ProspectCardProps) {
  const fullName = `${prospect.first_name || ""} ${prospect.last_name || ""}`.trim();
  const fallback = fullName ? fullName.charAt(0).toUpperCase() : "P";
  const agency = agencies.find(a => a.agency_id === prospect.agency_id);

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border"><AvatarImage src={prospect.logo} alt={fullName} /><AvatarFallback className="text-lg">{fallback}</AvatarFallback></Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">{fullName}</CardTitle>
            <p className="text-xs text-muted-foreground">{prospect.short_description || "Prospect"}</p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(prospect)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onDeleteAction(prospect)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow space-y-2 text-sm">
        <div className="flex items-center text-muted-foreground">
          <Thermometer className="mr-2 h-4 w-4" />
          <span>Interest: {prospect.interest_level || "Not set"}</span>
        </div>
        <div className="flex items-center text-muted-foreground">
          <Building2 className="mr-2 h-4 w-4" />
          <span>{agency ? agency.short_name : "Headquarters"}</span>
        </div>
      </CardContent>
      <CardFooter>
        <Button variant="outline" className="w-full" onClick={() => onEditAction(prospect)}>View Details</Button>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/prospects/prospect-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/prospects/prospect-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { ProspectDto, AgencyDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const prospectFormSchema = z.object({
  first_name: z.string().min(2, "First name is required."),
  last_name: z.string().min(2, "Last name is required."),
  short_description: z.string().optional(),
  long_description: z.string().optional(),
  interest_level: z.string().optional(),
  agency_id: z.string().nullable().optional(),
});

export type ProspectFormData = z.infer<typeof prospectFormSchema>;

interface ProspectFormProps {
  initialData?: Partial<ProspectDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: ProspectFormData) => Promise<boolean>;
  agencies: AgencyDto[];
  hideAgencySelector?: boolean;
}

export function ProspectForm({ initialData, mode, onSubmitAction, agencies, hideAgencySelector = false }: ProspectFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<ProspectFormData>({
    resolver: zodResolver(prospectFormSchema),
    defaultValues: {
      first_name: initialData?.first_name || "",
      last_name: initialData?.last_name || "",
      short_description: initialData?.short_description || "",
      long_description: initialData?.long_description || "",
      interest_level: initialData?.interest_level || "",
      agency_id: initialData?.agency_id || null,
    },
  });

  const handleSubmit = async (data: ProspectFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Add New Prospect" : "Edit Prospect"}
      description="Manage potential customer information and their assignments."
      submitButtonText={mode === 'create' ? "Add Prospect" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <FormField control={form.control} name="first_name" render={({ field }) => (<FormItem><FormLabel>First Name *</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
            <FormField control={form.control} name="last_name" render={({ field }) => (<FormItem><FormLabel>Last Name *</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
          </div>
          <FormField control={form.control} name="interest_level" render={({ field }) => (<FormItem><FormLabel>Interest Level</FormLabel><FormControl><Input placeholder="e.g., High, Warm, Cold" {...field} /></FormControl><FormMessage /></FormItem>)} />
          {!hideAgencySelector && (
            <FormField control={form.control} name="agency_id" render={({ field }) => (<FormItem><FormLabel>Agency Assignment</FormLabel><Select onValueChange={(value) => field.onChange(value === "headquarters" ? null : value)} defaultValue={field.value || "headquarters"}><FormControl><SelectTrigger><SelectValue placeholder="Assign to an agency..." /></SelectTrigger></FormControl><SelectContent><SelectItem value="headquarters">Headquarters</SelectItem>{agencies.map((agency) => (<SelectItem key={agency.agency_id} value={agency.agency_id!}>{agency.long_name}</SelectItem>))}</SelectContent></Select><FormMessage /></FormItem>)} />
          )}
          <FormField control={form.control} name="long_description" render={({ field }) => (<FormItem><FormLabel>Notes</FormLabel><FormControl><Textarea placeholder="Add any relevant notes about this prospect..." {...field} /></FormControl><FormMessage /></FormItem>)} />
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/prospects/prospect-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/sales-people/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { SalesPersonDto, AgencyDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2, UserCheck } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface SalesPersonRowActionsProps {
  salesPerson: SalesPersonDto;
  onEditAction: (salesPerson: SalesPersonDto) => void;
  onDeleteAction: (salesPerson: SalesPersonDto) => void;
}

const SalesPersonRowActions: React.FC<SalesPersonRowActionsProps> = ({ salesPerson, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(salesPerson)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(salesPerson)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getSalesPersonColumns = (
  actionHandlers: Omit<SalesPersonRowActionsProps, "salesPerson">,
  agencies: AgencyDto[]
): ColumnDef<SalesPersonDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false} onCheckedChange={v => table.toggleAllPageRowsSelected(!!v)} aria-label="Select all" />
,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => {
      const salesPerson = row.original;
      const name = salesPerson.name || `${salesPerson.first_name || ""} ${salesPerson.last_name || ""}`.trim();
      const fallback = name ? name.charAt(0).toUpperCase() : "S";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border"><AvatarImage src={salesPerson.logo} alt={name} /><AvatarFallback>{fallback}</AvatarFallback></Avatar>
          <div>
            <div className="font-medium">{name}</div>
            <div className="text-xs text-muted-foreground">{salesPerson.short_description}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "commission_rate",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Commission Rate" className="justify-end" />,
    cell: ({ row }) => <div className="text-right font-medium text-sm">{row.getValue("commission_rate") ? `${row.getValue("commission_rate")}%` : "N/A"}</div>,
  },
  {
    accessorKey: "agency_id",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Assignment" />,
    cell: ({ row }) => {
      const agencyId = row.getValue("agency_id");
      if (!agencyId) return <div className="text-sm text-muted-foreground">Headquarters</div>;
      const agency = agencies.find(a => a.agency_id === agencyId);
      return (
        <div className="text-sm font-medium flex items-center gap-2">
          <Building2 className="h-4 w-4 text-muted-foreground" />
          <span className="truncate">{agency ? agency.short_name : "Unknown Agency"}</span>
        </div>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id) || "headquarters"),
  },
  {
    id: "actions",
    cell: ({ row }) => <SalesPersonRowActions salesPerson={row.original} {...actionHandlers} />,
  },
]// END OF FILE: components/organization/sales-people/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/sales-people/sales-person-card.tsx

"use client";

import React from "react";
import { SalesPersonDto, AgencyDto } from "@/types/organization";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2, Percent } from "lucide-react";

interface SalesPersonCardProps {
  salesPerson: SalesPersonDto;
  agencies: AgencyDto[];
  onEditAction: (salesPerson: SalesPersonDto) => void;
  onDeleteAction: (salesPerson: SalesPersonDto) => void;
}

export function SalesPersonCard({ salesPerson, agencies, onEditAction, onDeleteAction }: SalesPersonCardProps) {
  const name = salesPerson.name || `${salesPerson.first_name || ""} ${salesPerson.last_name || ""}`.trim();
  const fallback = name ? name.charAt(0).toUpperCase() : "S";
  const agency = agencies.find(a => a.agency_id === salesPerson.agency_id);

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border"><AvatarImage src={salesPerson.logo} alt={name} /><AvatarFallback className="text-lg">{fallback}</AvatarFallback></Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">{name}</CardTitle>
            <p className="text-xs text-muted-foreground">{salesPerson.short_description || "Sales Representative"}</p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(salesPerson)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onDeleteAction(salesPerson)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow space-y-2 text-sm">
        <div className="flex items-center text-muted-foreground">
          <Percent className="mr-2 h-4 w-4" />
          <span>Commission: {salesPerson.commission_rate ? `${salesPerson.commission_rate}%` : "Not set"}</span>
        </div>
        <div className="flex items-center text-muted-foreground">
          <Building2 className="mr-2 h-4 w-4" />
          <span>{agency ? agency.short_name : "Headquarters"}</span>
        </div>
      </CardContent>
      <CardFooter>
        <Button variant="outline" className="w-full" onClick={() => onEditAction(salesPerson)}>View Details</Button>
      </CardFooter>
    </Card>
  );
}// END OF FILE: components/organization/sales-people/sales-person-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/sales-people/sales-person-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { SalesPersonDto, AgencyDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const salesPersonFormSchema = z.object({
  name: z.string().min(2, "Name is required."),
  commission_rate: z.coerce.number().min(0, "Commission rate cannot be negative.").optional(),
  agency_id: z.string().nullable().optional(),
});

export type SalesPersonFormData = z.infer<typeof salesPersonFormSchema>;

interface SalesPersonFormProps {
  initialData?: Partial<SalesPersonDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: SalesPersonFormData) => Promise<boolean>;
  agencies: AgencyDto[];
  hideAgencySelector?: boolean;
}

export function SalesPersonForm({ initialData, mode, onSubmitAction, agencies, hideAgencySelector = false }: SalesPersonFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<SalesPersonFormData>({
    resolver: zodResolver(salesPersonFormSchema),
    defaultValues: {
      name: initialData?.name || "",
      commission_rate: initialData?.commission_rate || 0,
      agency_id: initialData?.agency_id || null,
    },
  });

  const handleSubmit = async (data: SalesPersonFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Add New Sales Person" : "Edit Sales Person"}
      description="Manage sales team members and their assignments."
      submitButtonText={mode === 'create' ? "Add Sales Person" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <FormField control={form.control} name="name" render={({ field }) => (<FormItem><FormLabel>Full Name *</FormLabel><FormControl><Input placeholder="e.g., Jane Smith" {...field} /></FormControl><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="commission_rate" render={({ field }) => (<FormItem><FormLabel>Commission Rate (%)</FormLabel><FormControl><Input type="number" placeholder="e.g., 5" {...field} /></FormControl><FormMessage /></FormItem>)} />
          {!hideAgencySelector && (
            <FormField control={form.control} name="agency_id" render={({ field }) => (<FormItem><FormLabel>Agency Assignment</FormLabel><Select onValueChange={(value) => field.onChange(value === "headquarters" ? null : value)} defaultValue={field.value || "headquarters"}><FormControl><SelectTrigger><SelectValue placeholder="Assign to an agency..." /></SelectTrigger></FormControl><SelectContent><SelectItem value="headquarters">Headquarters</SelectItem>{agencies.map((agency) => (<SelectItem key={agency.agency_id} value={agency.agency_id!}>{agency.long_name}</SelectItem>))}</SelectContent></Select><FormMessage /></FormItem>)} />
          )}
        </div>
      )}
    </FormWrapper>
  );
}// END OF FILE: components/organization/sales-people/sales-person-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/suppliers/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ProviderDto, AgencyDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2, Truck } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface SupplierRowActionsProps {
  supplier: ProviderDto;
  onEditAction: (supplier: ProviderDto) => void;
  onDeleteAction: (supplier: ProviderDto) => void;
}

const SupplierRowActions: React.FC<SupplierRowActionsProps> = ({ supplier, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(supplier)}>
          <Edit3 className="mr-2 h-4 w-4" /> Edit
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(supplier)} className="text-destructive focus:text-destructive">
          <Trash2 className="mr-2 h-4 w-4" /> Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getSupplierColumns = (
  actionHandlers: Omit<SupplierRowActionsProps, "supplier">,
  agencies: AgencyDto[]
): ColumnDef<ProviderDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false} onCheckedChange={v => table.toggleAllPageRowsSelected(!!v)} aria-label="Select all" />
,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "first_name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Supplier Name" />,
    cell: ({ row }) => {
      const supplier = row.original;
      const fullName = `${supplier.first_name || ""} ${supplier.last_name || ""}`.trim();
      const fallback = fullName ? fullName.charAt(0).toUpperCase() : "S";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border">
            <AvatarImage src={supplier.logo} alt={fullName} />
            <AvatarFallback>{fallback}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{fullName}</div>
            <div className="text-xs text-muted-foreground">{supplier.short_description}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "product_service_type",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Service Type" />,
    cell: ({ row }) => <div className="text-sm text-muted-foreground">{row.getValue("product_service_type") || "N/A"}</div>,
  },
  {
    accessorKey: "agency_id",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Assignment" />,
    cell: ({ row }) => {
      const agencyId = row.getValue("agency_id");
      if (!agencyId) return <div className="text-sm text-muted-foreground">Headquarters</div>;
      const agency = agencies.find(a => a.agency_id === agencyId);
      return (
        <div className="text-sm font-medium flex items-center gap-2">
          <Building2 className="h-4 w-4 text-muted-foreground" />
          <span className="truncate">{agency ? agency.short_name : "Unknown Agency"}</span>
        </div>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id) || "headquarters"),
  },
  {
    id: "actions",
    cell: ({ row }) => <SupplierRowActions supplier={row.original} {...actionHandlers} />,
  },
];// END OF FILE: components/organization/suppliers/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/suppliers/supplier-card.tsx

"use client";

import React from "react";
import { ProviderDto, AgencyDto } from "@/types/organization";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2, Truck } from "lucide-react";

interface SupplierCardProps {
  supplier: ProviderDto;
  agencies: AgencyDto[];
  onEditAction: (supplier: ProviderDto) => void;
  onDeleteAction: (supplier: ProviderDto) => void;
}

export function SupplierCard({ supplier, agencies, onEditAction, onDeleteAction }: SupplierCardProps) {
  const fullName = `${supplier.first_name || ""} ${supplier.last_name || ""}`.trim();
  const fallback = fullName ? fullName.charAt(0).toUpperCase() : "S";
  const agency = agencies.find(a => a.agency_id === supplier.agency_id);

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border">
            <AvatarImage src={supplier.logo} alt={fullName} />
            <AvatarFallback className="text-lg">{fallback}</AvatarFallback>
          </Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">{fullName}</CardTitle>
            <p className="text-xs text-muted-foreground">{supplier.short_description || "Supplier"}</p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(supplier)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onDeleteAction(supplier)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow space-y-2 text-sm">
        <div className="flex items-center text-muted-foreground">
          <Truck className="mr-2 h-4 w-4" />
          <span>Service: {supplier.product_service_type || "Not specified"}</span>
        </div>
        <div className="flex items-center text-muted-foreground">
          <Building2 className="mr-2 h-4 w-4" />
          <span>{agency ? agency.short_name : "Headquarters"}</span>
        </div>
      </CardContent>
      <CardFooter>
        <Button variant="outline" className="w-full" onClick={() => onEditAction(supplier)}>View Details</Button>
      </CardFooter>
    </Card>
  );
}// END OF FILE: components/organization/suppliers/supplier-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/suppliers/supplier-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { ProviderDto, AgencyDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const supplierFormSchema = z.object({
  first_name: z.string().min(2, "First name is required."),
  last_name: z.string().min(2, "Last name is required."),
  short_description: z.string().optional(),
  long_description: z.string().optional(),
  product_service_type: z.string().min(3, "Service type is required."),
  agency_id: z.string().nullable().optional(),
});

export type SupplierFormData = z.infer<typeof supplierFormSchema>;

interface SupplierFormProps {
  initialData?: Partial<ProviderDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: SupplierFormData) => Promise<boolean>;
  agencies: AgencyDto[];
  hideAgencySelector?: boolean;
}

export function SupplierForm({ initialData, mode, onSubmitAction, agencies, hideAgencySelector = false }: SupplierFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<SupplierFormData>({
    resolver: zodResolver(supplierFormSchema),
    defaultValues: {
      first_name: initialData?.first_name || "",
      last_name: initialData?.last_name || "",
      short_description: initialData?.short_description || "",
      long_description: initialData?.long_description || "",
      product_service_type: initialData?.product_service_type || "",
      agency_id: initialData?.agency_id || null,
    },
  });

  const handleSubmit = async (data: SupplierFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Add New Supplier" : "Edit Supplier"}
      description="Manage supplier information and their assignments."
      submitButtonText={mode === 'create' ? "Add Supplier" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <FormField control={form.control} name="first_name" render={({ field }) => (<FormItem><FormLabel>First Name *</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
            <FormField control={form.control} name="last_name" render={({ field }) => (<FormItem><FormLabel>Last Name *</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
          </div>
          <FormField control={form.control} name="product_service_type" render={({ field }) => (<FormItem><FormLabel>Primary Service/Product Type *</FormLabel><FormControl><Input placeholder="e.g., Raw Materials, Logistics" {...field} /></FormControl><FormMessage /></FormItem>)} />
          {!hideAgencySelector && (
            <FormField control={form.control} name="agency_id" render={({ field }) => (<FormItem><FormLabel>Agency Assignment</FormLabel><Select onValueChange={(value) => field.onChange(value === "headquarters" ? null : value)} defaultValue={field.value || "headquarters"}><FormControl><SelectTrigger><SelectValue placeholder="Assign to an agency..." /></SelectTrigger></FormControl><SelectContent><SelectItem value="headquarters">Headquarters (No Agency)</SelectItem>{agencies.map((agency) => (<SelectItem key={agency.agency_id} value={agency.agency_id!}>{agency.long_name}</SelectItem>))}</SelectContent></Select><FormMessage /></FormItem>)} />
          )}
          <FormField control={form.control} name="long_description" render={({ field }) => (<FormItem><FormLabel>Notes</FormLabel><FormControl><Textarea placeholder="Add any relevant notes about this supplier..." {...field} /></FormControl><FormMessage /></FormItem>)} />
        </div>
      )}
    </FormWrapper>
  );
}// END OF FILE: components/organization/suppliers/supplier-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/third-parties/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ThirdPartyDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Briefcase, CheckCircle, XCircle } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { Badge } from "@/components/ui/badge";

interface ThirdPartyRowActionsProps {
  thirdParty: ThirdPartyDto;
  onEditAction: (thirdParty: ThirdPartyDto) => void;
  onDeleteAction: (thirdParty: ThirdPartyDto) => void;
}

const ThirdPartyRowActions: React.FC<ThirdPartyRowActionsProps> = ({ thirdParty, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(thirdParty)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(thirdParty)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getThirdPartyColumns = (
  actionHandlers: Omit<ThirdPartyRowActionsProps, "thirdParty">
): ColumnDef<ThirdPartyDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? "indeterminate" : false} onCheckedChange={v => table.toggleAllPageRowsSelected(!!v)} aria-label="Select all" />
,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => {
      const thirdParty = row.original;
      const name = thirdParty.name || "Unnamed Party";
      const fallback = name.charAt(0).toUpperCase();
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border"><AvatarImage src={thirdParty.logo} alt={name} /><AvatarFallback>{fallback}</AvatarFallback></Avatar>
          <div>
            <div className="font-medium">{name}</div>
            <div className="text-xs text-muted-foreground">{thirdParty.acronym}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "type",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Type" />,
    cell: ({ row }) => <div className="text-sm text-muted-foreground">{row.getValue("type") || "N/A"}</div>,
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "is_active",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Status" />,
    cell: ({ row }) => {
      const isActive = true;
      const StatusIcon = isActive ? CheckCircle : XCircle;
      return (
        <Badge variant={isActive ? "default" : "destructive"} className="capitalize text-xs items-center font-normal">
          <StatusIcon className="mr-1.5 h-3.5 w-3.5" />
          {isActive ? "Active" : "Inactive"}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(String(row.getValue(id))),
  },
  {
    id: "actions",
    cell: ({ row }) => <ThirdPartyRowActions thirdParty={row.original} {...actionHandlers} />,
  },
];
// END OF FILE: components/organization/third-parties/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/third-parties/third-party-card.tsx

"use client";

import React from "react";
import { ThirdPartyDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  Briefcase,
  CheckCircle,
  XCircle,
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";

interface ThirdPartyCardProps {
  thirdParty: ThirdPartyDto;
  onEditAction: (thirdParty: ThirdPartyDto) => void;
  onDeleteAction: (thirdParty: ThirdPartyDto) => void;
}

export function ThirdPartyCard({
  thirdParty,
  onEditAction,
  onDeleteAction,
}: ThirdPartyCardProps) {
  const name = thirdParty.name || "Unnamed Party";
  const fallback = name.charAt(0).toUpperCase();
  const statusInfo = {
    icon: CheckCircle,
    color: "text-green-600",
    label: "Active",
  };

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border">
            <AvatarImage src={thirdParty.logo} alt={name} />
            <AvatarFallback className="text-lg">{fallback}</AvatarFallback>
          </Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">
              {name}
            </CardTitle>
            <p className="text-xs text-muted-foreground">
              {thirdParty.acronym}
            </p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8 flex-shrink-0"
            >
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(thirdParty)}>
              <Edit3 className="mr-2 h-4 w-4" /> Edit
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() => onDeleteAction(thirdParty)}
              className="text-destructive focus:text-destructive"
            >
              <Trash2 className="mr-2 h-4 w-4" /> Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow space-y-2 text-sm">
        <div className="flex items-center text-muted-foreground">
          <Briefcase className="mr-2 h-4 w-4" />
          <span>Type: {thirdParty.type || "N/A"}</span>
        </div>
      </CardContent>
      <CardFooter className="flex justify-between items-center">
        <Badge
          variant={"default"}
          className={cn(
            "capitalize text-xs items-center font-normal",
            statusInfo.color
          )}
        >
          <statusInfo.icon className="mr-1.5 h-3.5 w-3.5" />
          {statusInfo.label}
        </Badge>
        <Button
          variant="outline"
          size="sm"
          onClick={() => onEditAction(thirdParty)}
        >
          View Details
        </Button>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/third-parties/third-party-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/third-parties/third-party-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  ThirdPartyDto,
  ThirdPartyType,
  ThirdPartyTypeValues,
} from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  
} from "@/components/ui/select";
import { SelectPortal } from "@radix-ui/react-select";

const thirdPartyFormSchema = z.object({
  name: z.string().min(2, "Name is required."),
  acronym: z.string().optional(),
  long_name: z.string().optional(),
  type: z.enum(ThirdPartyTypeValues, {
    required_error: "Third-party type is required.",
  }),
  tax_number: z.string().optional(),
});

export type ThirdPartyFormData = z.infer<typeof thirdPartyFormSchema>;

interface ThirdPartyFormProps {
  initialData?: Partial<ThirdPartyDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: ThirdPartyFormData) => Promise<boolean>;
}

export function ThirdPartyForm({
  initialData,
  mode,
  onSubmitAction,
}: ThirdPartyFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<ThirdPartyFormData>({
    resolver: zodResolver(thirdPartyFormSchema),
    defaultValues: {
      name: initialData?.name || "",
      acronym: initialData?.acronym || "",
      long_name: initialData?.long_name || "",
      type: initialData?.type || undefined,
      tax_number: initialData?.tax_number || "",
    },
  });

  const handleSubmit = async (data: ThirdPartyFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === "create" ? "Add New Third-Party" : "Edit Third-Party"}
      description="Manage information for your external partners and entities."
      submitButtonText={mode === "create" ? "Add Third-Party" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Name *</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., Global Logistics" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Type *</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  disabled={mode === "edit"}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a type..." />
                    </SelectTrigger>
                  </FormControl>
                  {/* [CHANGE] Wrap SelectContent in SelectPortal */}
                  <SelectPortal>
                    <SelectContent>
                      {ThirdPartyTypeValues.map((type) => (
                        <SelectItem key={type} value={type}>
                          {type}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </SelectPortal>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="acronym"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Acronym</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., GL" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="tax_number"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Tax / VAT Number</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/third-parties/third-party-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/providers/session-provider.tsx

// FILE: components/providers/session-provider.tsx
"use client";

import { SessionProvider as NextAuthSessionProvider } from "next-auth/react";
import React from "react";

interface SessionProviderProps {
  children: React.ReactNode;
  // session?: any; // Optional: Pass initial session if needed (usually not for App Router)
}

export const SessionProvider = ({ children }: SessionProviderProps) => {
  return <NextAuthSessionProvider>{children}</NextAuthSessionProvider>;
};// END OF FILE: components/providers/session-provider.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/resource-management/assignment-dialog.tsx

"use client";

import React, { useState, useMemo } from "react";
import { Command, CommandDialog, CommandInput, CommandEmpty, CommandGroup, CommandItem, CommandList } from "@/components/ui/command";
import { DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Check, PlusCircle } from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { cn } from "@/lib/utils";

export interface AssignableItem {
  id: string;
  name: string;
  description?: string;
  avatarUrl?: string;
}

interface AssignmentDialogProps {
  title: string;
  description: string;
  itemsToAssign: AssignableItem[];
  alreadyAssignedIds: string[];
  onAssignAction: (selectedIds: string[]) => void;
  isLoading: boolean;
}

export function AssignmentDialog({ title, description, itemsToAssign, alreadyAssignedIds, onAssignAction, isLoading }: AssignmentDialogProps) {
  const [selectedIds, setSelectedIds] = useState<Set<string>>(new Set());

  const availableItems = useMemo(() => {
    const assignedSet = new Set(alreadyAssignedIds);
    return itemsToAssign.filter(item => !assignedSet.has(item.id));
  }, [itemsToAssign, alreadyAssignedIds]);

  const handleSelect = (id: string) => {
    setSelectedIds(prev => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  const handleConfirmAssignment = () => {
    onAssignAction(Array.from(selectedIds));
  };

  return (
    <>
      <DialogHeader>
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <Command className="rounded-lg border shadow-md">
        <CommandInput placeholder="Search by name..." />
        <ScrollArea className="h-[300px]">
          <CommandList>
            <CommandEmpty>No unassigned items found.</CommandEmpty>
            <CommandGroup>
              {availableItems.map((item) => (
                <CommandItem
                  key={item.id}
                  value={`${item.name} ${item.description}`}
                  onSelect={() => handleSelect(item.id)}
                  className="cursor-pointer"
                >
                  <div className={cn("mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary", selectedIds.has(item.id) ? "bg-primary text-primary-foreground" : "opacity-50 [&_svg]:invisible")}>
                    <Check className="h-4 w-4" />
                  </div>
                  <div className="flex flex-col">
                    <span className="font-medium">{item.name}</span>
                    {item.description && <span className="text-xs text-muted-foreground">{item.description}</span>}
                  </div>
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </ScrollArea>
      </Command>
      <DialogFooter>
        <Button
          onClick={handleConfirmAssignment}
          disabled={selectedIds.size === 0 || isLoading}
        >
          <PlusCircle className="mr-2 h-4 w-4" />
          Assign Selected ({selectedIds.size})
        </Button>
      </DialogFooter>
    </>
  );
}// END OF FILE: components/resource-management/assignment-dialog.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/resource-management/resource-data-table.tsx

"use client";

import React, { useState, useMemo } from "react";
import {
  ColumnDef,
  SortingState,
  ColumnFiltersState,
  VisibilityState,
  PaginationState,
  RowSelectionState,
  useReactTable,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  getFacetedRowModel,
  getFacetedUniqueValues,
  Table,
} from "@tanstack/react-table";
import { Card, CardContent } from "@/components/ui/card";
import { DataTable } from "@/components/ui/data-table";
import { DataGrid } from "@/components/ui/data-grid";
import { DataTableToolbar } from "@/components/ui/data-table-toolbar";
import { DataTablePagination } from "@/components/ui/data-table-pagination";
import { ListViewSkeleton } from "@/components/ui/list-view-skeleton";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { AlertTriangle, Trash2, Search as SearchIcon } from "lucide-react";
import { Button } from "@/components/ui/button";
import { fuzzyGlobalFilterFn } from "@/lib/utils";
import { ViewMode } from "@/types/common";
import { useLocalStorage } from "@/hooks/use-local-storage"; // [ADD] Import the new hook
import { exportToCsv } from "@/lib/export"; // [ADD] Import the export utility

interface ResourceDataTableProps<TData extends Record<string, any>, TValue> {
  data: TData[];
  columns: ColumnDef<TData, TValue>[];
  isLoading: boolean;
  error: string | null;
  onRefreshAction: () => void;
  pageHeader: React.ReactNode;
  filterControls?: (table: Table<TData>) => React.ReactNode;
  searchPlaceholder: string;
  emptyState: React.ReactNode;
  // [ADD] New prop for when filters result in no data
  filteredEmptyState?: React.ReactNode;
  renderGridItemAction: (item: TData) => React.ReactNode;
  onDeleteItemsAction: (items: TData[]) => void;
  // [ADD] Unique key for storing view mode preference
  viewModeStorageKey: string;
  // [ADD] Filename for the CSV export
  exportFileName: string;
}

export function ResourceDataTable<TData extends Record<string, any>, TValue>({
  data,
  columns,
  isLoading,
  error,
  onRefreshAction,
  pageHeader,
  filterControls,
  searchPlaceholder,
  emptyState,
  filteredEmptyState,
  renderGridItemAction,
  onDeleteItemsAction,
  viewModeStorageKey,
  exportFileName,
}: ResourceDataTableProps<TData, TValue>) {
  // [CHANGE] Use the local storage hook for viewMode
  const [viewMode, setViewMode] = useLocalStorage<ViewMode>(
    viewModeStorageKey,
    "list"
  );

  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [globalFilter, setGlobalFilter] = useState<string>("");
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [pagination, setPagination] = useState<PaginationState>({
    pageIndex: 0,
    pageSize: 10,
  });

  const table = useReactTable({
    data,
    columns,
    state: {
      sorting,
      columnFilters,
      globalFilter,
      columnVisibility,
      rowSelection,
      pagination,
    },
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onGlobalFilterChange: setGlobalFilter,
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    onPaginationChange: setPagination,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getFacetedRowModel: getFacetedRowModel(),
    getFacetedUniqueValues: getFacetedUniqueValues(),
    globalFilterFn: fuzzyGlobalFilterFn,
    enableRowSelection: true,
  });

  const handleExport = () => {
    exportToCsv(data, exportFileName);
  };

  const renderContent = () => {
    if (isLoading) return <ListViewSkeleton viewMode={viewMode} />;
    if (error) {
      return (
        <FeedbackCard
          variant="destructive"
          icon={AlertTriangle}
          title="Failed to Load Data"
          description={error}
          actionButton={<Button onClick={onRefreshAction}>Try Again</Button>}
        />
      );
    }
    // [CHANGE] Context-aware empty state logic
    const isFiltered = globalFilter || columnFilters.length > 0;
    if (table.getRowModel().rows.length === 0) {
      if (isFiltered && filteredEmptyState) {
        return filteredEmptyState;
      }
      return emptyState;
    }

    return viewMode === "grid" ? (
      <DataGrid
        table={table}
        renderCardAction={({ row }) => renderGridItemAction(row.original)}
      />
    ) : (
      <DataTable tableInstance={table} columns={columns} data={data} />
    );
  };

  return (
    <div className="space-y-6">
      {pageHeader}
      <Card>
        <CardContent className="pt-6">
          <DataTableToolbar
            table={table}
            viewMode={viewMode}
            onViewModeChange={setViewMode}
            globalFilter={globalFilter}
            onGlobalFilterChangeAction={setGlobalFilter}
            searchPlaceholder={searchPlaceholder}
            filterControls={filterControls ? filterControls(table) : null}
            onExportAction={handleExport} // Pass the export handler
            bulkActions={
              <Button
                variant="destructive"
                size="sm"
                onClick={() =>
                  onDeleteItemsAction(
                    table
                      .getFilteredSelectedRowModel()
                      .rows.map((r) => r.original)
                  )
                }
                className="h-9"
              >
                <Trash2 className="mr-2 h-4 w-4" />
                Delete ({table.getFilteredSelectedRowModel().rows.length})
              </Button>
            }
          />
          <main className="mt-4">{renderContent()}</main>
        </CardContent>
      </Card>
      {!isLoading && !error && table.getPageCount() > 0 && (
        <DataTablePagination table={table} viewMode={viewMode} />
      )}
    </div>
  );
}
// END OF FILE: components/resource-management/resource-data-table.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/sidebar.old.tsx.txt

"use client"

import { useState } from "react"
import Link from "next/link"
import Image from "next/image";
import { usePathname } from "next/navigation"
import {
  Home, BarChart2, Building2, Users2, Briefcase, Folder, Wallet, Receipt,
  CreditCard, ShoppingCart, Calendar, Send, Star, Bell, Shield, Settings,
  MessagesSquare, Gift, HelpCircle, LogOut, Menu, SidebarClose, Users, Server,
  FileText, // Added for Invoices
  LifeBuoy, // Added for Help
  UserCog, // Added for Profile/Settings link clearer icon
  Webhook, // Added for Webhooks clearer icon
  Ticket, // Added for Reservations clearer icon
  Tag, // Added for Products clearer icon
  UsersRound, // Added for Personnel clearer icon
  Share2, // Added for Invite/Referrals clearer icon
  LayoutGrid, // Added for general Dashboard clearer icon
  FolderHeart, // Added for Favorites clearer icon
  ListChecks, // Added for Wishlist clearer icon
  CalendarClock, // Added for Planning clearer icon
  Newspaper, // Added for Posts clearer icon
  HandCoins,
  Package, // Added for Bonus clearer icon
} from "lucide-react"
import { signOut } from "next-auth/react"; // Import signOut

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from "@/components/ui/tooltip"
import { Separator } from "@/components/ui/separator"; // Import Separator

// --- Navigation Arrays (Updated based on file structure & spec) ---
const baNavigation = [
  { name: "Dashboard", href: "/business-actor/dashboard", icon: LayoutGrid },
  {
    name: "Organization", href: "/business-actor/organization", icon: Building2,
    subItems: [ // Example: Add sub-items if needed later for better organization
      { name: "Analytics", href: "/business-actor/organization?tab=analytics", icon: BarChart2 },
      { name: "Headquarter", href: "/business-actor/organization?tab=headquarter", icon: Building2 },
      { name: "Personnel", href: "/business-actor/organization?tab=personnel", icon: UsersRound },
      { name: "Agencies", href: "/business-actor/organization?tab=agencies", icon: Users2 },
      { name: "Products", href: "/business-actor/organization?tab=products", icon: Tag },
    ]
  },
  { name: "Products", href: "/business-actor/products", icon: Package }, // Product ma
  { name: "Business", href: "/business-actor/business", icon: Briefcase }, // General Business Ops
  { name: "Transactions", href: "/business-actor/transactions", icon: Receipt }, // Sales focused
  { name: "Invoices", href: "/business-actor/invoices", icon: FileText },
  { name: "Reservations", href: "/business-actor/reservations", icon: Ticket },
  { name: "Payments", href: "/business-actor/payments", icon: CreditCard },
  { name: "Subscription", href: "/business-actor/subscription", icon: Star }, // Pricing Plan/Usage/Limits
  { name: "Wallet", href: "/business-actor/wallet", icon: Wallet }, // Portefeuille
  { name: "Bonus Config", href: "/business-actor/bonus", icon: HandCoins },
  { name: "Webhooks", href: "/business-actor/webhooks", icon: Webhook },
  { name: "Wishlist", href: "/business-actor/wishlist", icon: ListChecks },
  { name: "Planning", href: "/business-actor/planning", icon: CalendarClock },
  { name: "Posts", href: "/business-actor/posts", icon: Newspaper },
  { name: "Chat", href: "/business-actor/chat", icon: MessagesSquare },
  { name: "Referrals", href: "/business-actor/referrals", icon: Share2 },
  { name: "Reviews", href: "/business-actor/reviews", icon: Star },
];

const customerNavigation = [
  { name: "Dashboard", href: "/customer/dashboard", icon: LayoutGrid },
  { name: "Services", href: "/customer/services", icon: Briefcase }, // Announcements/Offers & Transactions/Wishlist
  { name: "Invoices", href: "/customer/invoices", icon: FileText },
  { name: "My Bonus", href: "/customer/bonus", icon: HandCoins },
  { name: "Favorites", href: "/customer/favorites", icon: FolderHeart },
  { name: "Invite Friends", href: "/customer/invite", icon: Share2 }, // Referrals page
  { name: "Chat", href: "/customer/chat", icon: MessagesSquare },
];

const superAdminNavigation = [
  { name: "Dashboard", href: "/super-admin/dashboard", icon: LayoutGrid },
  { name: "Platforms", href: "/super-admin/platforms", icon: Server },
  { name: "Business Actors", href: "/super-admin/business-actors", icon: Building2 }, // Changed icon
  { name: "Customers", href: "/super-admin/customers", icon: Users },
  { name: "Webhooks Config", href: "/super-admin/webhooks", icon: Webhook },
  { name: "Bonus Overview", href: "/super-admin/bonus", icon: HandCoins },
  { name: "Admin Comm.", href: "/super-admin/chat", icon: MessagesSquare }, // Renamed for clarity
  // Super Admin Profile/Settings handled by bottom nav
];

// --- Bottom Navigation (Common) ---
const bottomNavigation = [
  { name: "Help & Support", href: "/help", icon: LifeBuoy }, // Example: Shared help page
  { name: "Settings", href: "/settings", icon: Settings }, // Shared settings page link
];

export function Sidebar() {
  const pathname = usePathname();
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isMobileOpen, setIsMobileOpen] = useState(false);

  // --- Role Determination Logic ---
  let userRole = 'business-actor'; // Default assumption
  let sidebarTitle = "BA Workspace";
  let logoSrc = "/logo.svg"; // Consider making this dynamic based on role/org if needed
  let currentNavigation = baNavigation;
  let settingsHrefPrefix = "/business-actor"; // Base path for role-specific pages

  if (pathname.startsWith('/customer')) {
    userRole = 'customer';
    sidebarTitle = "My Account";
    currentNavigation = customerNavigation;
    settingsHrefPrefix = "/customer";
  } else if (pathname.startsWith('/super-admin')) {
    userRole = 'super-admin';
    sidebarTitle = "Platform Admin";
    currentNavigation = superAdminNavigation;
    settingsHrefPrefix = "/super-admin";
  } else if (pathname.startsWith('/business-actor')) {
    userRole = 'business-actor';
    sidebarTitle = "BA Workspace";
    currentNavigation = baNavigation;
    settingsHrefPrefix = "/business-actor";
  } else {
    // Handle cases like /settings, /help, or unexpected paths
    // Try to infer from the last known good path or use a default
    // This part might need refinement based on how shared pages are handled
    const segments = pathname.split('/').filter(Boolean);
    if (segments.length > 0 && ['settings', 'help'].includes(segments[0])) {
      // If on a shared page, try to guess the role from referer or session? Or keep previous role?
      // For now, let's default to BA if path is ambiguous but not auth/landing
      userRole = 'business-actor';
      sidebarTitle = "BA Workspace";
      currentNavigation = baNavigation;
      settingsHrefPrefix = "/business-actor";
      console.warn("Sidebar: Ambiguous path, defaulting role display to Business Actor.");
    }
  }
  // --- End Role Determination ---

  // --- Logout Handler ---
  const handleLogout = async () => {
    await signOut({ callbackUrl: '/login' }); // Redirect to login after sign out
  };
  // --- End Logout Handler ---


  // --- NavItem Component ---
  type NavItemProps = {
    item: {
      name: string;
      href: string;
      icon: React.ComponentType<{ className?: string }>;
    };
    isBottom?: boolean;
  };

  const NavItem = ({ item, isBottom = false }: NavItemProps) => {
    let href = item.href;

    // Adjust href based on context (bottom nav vs main nav)
    // Assumption: Settings is now a shared page at /settings
    // Assumption: Help is now a shared page at /help
    if (isBottom && (item.name === "Settings" || item.name === "Help & Support")) {
      // Keep the direct path for shared pages
      href = item.href;
    } else if (!isBottom) {
      // Main navigation items use the auto-detected prefix from their definition
      href = item.href; // Href should already include the role prefix
    }
    // else: Handle potential future role-specific bottom links if needed

    const isActive = pathname === href || pathname.startsWith(href + '/') || (item.href !== '/' && pathname.startsWith(item.href + '?')); // Improved active check

    return (
      <Tooltip delayDuration={0}>
        <TooltipTrigger asChild>
          <Link
            href={href}
            className={cn(
              "flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors h-9", // Consistent height
              isActive
                ? "bg-sidebar-accent text-sidebar-accent-foreground"
                : "text-sidebar-foreground hover:bg-sidebar-accent/80 hover:text-sidebar-accent-foreground", // Subtle hover
              isCollapsed && "justify-center px-2",
            )}
            onClick={() => isMobileOpen && setIsMobileOpen(false)}
          >
            <item.icon className={cn("h-[18px] w-[18px] shrink-0", !isCollapsed && "mr-3")} /> {/* Slightly adjusted icon size */}
            {!isCollapsed && <span className="truncate">{item.name}</span>}
          </Link>
        </TooltipTrigger>
        {isCollapsed && (
          <TooltipContent side="right" className="flex items-center gap-4">
            {item.name}
          </TooltipContent>
        )}
      </Tooltip>
    );
  };
  // --- End NavItem Component ---

  return (
    <TooltipProvider>
      <>
        {/* Mobile Menu Toggle */}
        <Button
          variant="outline"
          size="icon"
          className="lg:hidden fixed top-4 left-4 z-[60] rounded-md shadow-md bg-background/80 backdrop-blur-sm" // Ensure high z-index
          onClick={() => setIsMobileOpen(!isMobileOpen)}
          aria-label="Toggle sidebar"
        >
          <Menu className="h-5 w-5" />
        </Button>

        {/* Sidebar Container */}
        <div
          className={cn(
            "fixed inset-y-0 left-0 z-50 flex h-full flex-col border-r border-sidebar-border bg-sidebar text-sidebar-foreground transition-all duration-300 ease-in-out lg:sticky lg:top-0 lg:h-screen",
            isCollapsed ? "w-[72px]" : "w-64", // Slightly narrower width when expanded
            isMobileOpen ? "translate-x-0 shadow-xl" : "-translate-x-full lg:translate-x-0",
          )}
          data-collapsed={isCollapsed}
        >
          {/* Sidebar Header */}
          <div className={cn(
            "flex h-16 shrink-0 items-center border-b border-sidebar-border",
            isCollapsed ? "justify-center px-2" : "justify-between px-4"
          )}>
            <Link
              href={`${settingsHrefPrefix}/dashboard`} // Links to role-specific dashboard
              className={cn("flex items-center gap-2 font-semibold")}
              onClick={() => isMobileOpen && setIsMobileOpen(false)}
              aria-label={sidebarTitle}
            >
              <Image
                src={logoSrc}
                alt={`${sidebarTitle} Logo`}
                width={32}
                height={32}
                className="h-8 w-8 shrink-0"
                priority
              />
              {!isCollapsed && (
                <span className="text-lg truncate">{sidebarTitle}</span>
              )}
            </Link>

            {/* Desktop Collapse/Expand Button */}
            <Button
              variant="ghost"
              size="icon"
              className={cn("hidden h-8 w-8 lg:flex", isCollapsed ? "" : "ml-auto")}
              onClick={() => setIsCollapsed(!isCollapsed)}
              aria-label={isCollapsed ? "Expand Sidebar" : "Collapse Sidebar"}
            >
              <SidebarClose className={cn("h-4 w-4 transition-transform", isCollapsed && "rotate-180")} />
            </Button>

            {/* Mobile Close Button */}
            {isMobileOpen && (
              <Button
                variant="ghost"
                size="icon"
                className="ml-auto h-8 w-8 lg:hidden"
                onClick={() => setIsMobileOpen(false)}
                aria-label="Close Sidebar"
              >
                <SidebarClose className="h-4 w-4" />
              </Button>
            )}
          </div>

          {/* Main Navigation Area */}
          <div className="flex flex-1 flex-col overflow-y-auto overflow-x-hidden">
            <nav className={cn("flex-1 space-y-1 py-4", isCollapsed ? "px-2" : "px-4")}>
              {currentNavigation.map((item) => (
                <NavItem key={item.name} item={item} />
              ))}
            </nav>

            {/* Bottom Navigation Area */}
            <div className={cn("mt-auto border-t border-sidebar-border", isCollapsed ? "px-2" : "px-4")}>
              {/* <Separator className={cn("my-2", isCollapsed ? "-mx-2" : "-mx-4")} /> Visual separator */}
              <div className="space-y-1 py-4">
                {bottomNavigation.map((item) => (
                  // Use the correct settingsHrefPrefix for Settings link
                  <NavItem key={item.name} item={{ ...item, href: item.name === 'Settings' ? `${settingsHrefPrefix}/settings` : item.href }} isBottom />
                ))}
                {/* Logout Button */}
                <Tooltip delayDuration={0}>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost" // Use ghost variant for less emphasis
                      className={cn(
                        "flex items-center w-full rounded-md px-3 py-2 text-sm font-medium transition-colors h-9",
                        "text-sidebar-foreground hover:bg-destructive/10 hover:text-destructive", // Destructive hover
                        isCollapsed ? "justify-center px-2" : "justify-start",
                      )}
                      onClick={() => {
                        handleLogout();
                        if (isMobileOpen) setIsMobileOpen(false);
                      }}
                    >
                      <LogOut className={cn("h-[18px] w-[18px] shrink-0", !isCollapsed && "mr-3")} />
                      {!isCollapsed && <span className="truncate">Logout</span>}
                    </Button>
                  </TooltipTrigger>
                  {isCollapsed && (
                    <TooltipContent side="right" className="flex items-center gap-4">
                      Logout
                    </TooltipContent>
                  )}
                </Tooltip>
              </div>
            </div>
          </div>
        </div>

        {/* Overlay for mobile */}
        {isMobileOpen && (
          <div
            className="fixed inset-0 z-40 bg-black/50 lg:hidden" // Ensure z-index is below sidebar but above content
            aria-hidden="true"
            onClick={() => setIsMobileOpen(false)}
          />
        )}
      </>
    </TooltipProvider>
  );
}// END OF FILE: components/sidebar.old.tsx.txt

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/sidebar.tsx

"use client";

import React, { useState, useMemo, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { usePathname, useRouter } from "next/navigation";
import { useSession, signOut } from "next-auth/react";
import {
  Award,
  Briefcase,
  Building,
  Combine,
  FileText,
  FolderHeart,
  HandCoins,
  HelpCircle,
  LayoutGrid,
  Lightbulb,
  LogOut,
  Landmark,
  Menu,
  MessagesSquare,
  Package,
  Server,
  Settings,
  Share2,
  SidebarClose,
  Truck,
  UserCheck,
  Users,
  Users2,
  UsersRound,
  Wallet,
  Webhook,
  ArrowLeft,
  UserCog,
  Power,
  Shield,
  Info,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { OrganizationSwitcher } from "@/components/organization/organization-switcher";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Separator } from "./ui/separator";
import { AgencySwitcher } from "./organization/agencies/agency-switcher";
import { toast } from "sonner";

// --- Navigation Definitions ---

const userNavigation = [
  { name: "Dashboard", href: "/dashboard", icon: LayoutGrid },
  { name: "My Bonus", href: "/bonus", icon: HandCoins },
  { name: "Favorites", href: "/favorites", icon: FolderHeart },
];

const baOrgNavigation = [
  {
    name: "Org. Dashboard",
    href: "/business-actor/dashboard",
    icon: LayoutGrid,
    isOrgSpecific: true,
  },
  {
    name: "Org. Profile",
    href: "/business-actor/org/profile",
    icon: Landmark,
    isOrgSpecific: true,
  },
  {
    name: "Agencies",
    href: "/business-actor/org/agencies",
    icon: Users2,
    isOrgSpecific: true,
  },
  {
    name: "Employees",
    href: "/business-actor/org/employees",
    icon: Users,
    isOrgSpecific: true,
  },
  {
    name: "Certifications",
    href: "/business-actor/org/certifications",
    icon: Award,
    isOrgSpecific: true,
  },
  {
    name: "Practical Info",
    href: "/business-actor/org/practical-info",
    icon: Info,
    isOrgSpecific: true,
  },
];

const agencyNavigation = [
  {
    name: "Agency Dashboard",
    href: "/business-actor/agency/dashboard",
    icon: LayoutGrid,
  },
  {
    name: "Agency Profile",
    href: "/business-actor/agency/profile",
    icon: Landmark,
  },
  {
    name: "Agency Employees",
    href: "/business-actor/agency/employees",
    icon: Users,
  },
  {
    name: "Agency Customers",
    href: "/business-actor/agency/customers",
    icon: UsersRound,
  },
];

const baGlobalNavigation = [
  {
    name: "Organizations Hub",
    href: "/business-actor/organizations",
    icon: Building,
  },
  { name: "My BA Profile", href: "/business-actor/profile", icon: UserCog },
  { name: "API & Webhooks", href: "/business-actor/webhooks", icon: Webhook },
];

const superAdminNavigation = [
  { name: "Dashboard", href: "/super-admin/dashboard", icon: LayoutGrid },
  { name: "User Management", href: "/super-admin/users", icon: Users },
  { name: "Roles & Permissions", href: "/super-admin/roles", icon: Shield },
  {
    name: "Organization Mgmt",
    href: "/super-admin/organizations",
    icon: Building,
  },
  { name: "Global Agencies", href: "/super-admin/agencies", icon: Users2 },
  {
    name: "Global Customers",
    href: "/super-admin/customers",
    icon: UsersRound,
  },
  { name: "Global Suppliers", href: "/super-admin/suppliers", icon: Truck },
  {
    name: "Global Certifications",
    href: "/super-admin/certifications",
    icon: Award,
  },
  {
    name: "Business Domains",
    href: "/super-admin/business-domains",
    icon: Server,
  },
];

const bottomNavigation = [
  { name: "Help & Support", href: "/help", icon: HelpCircle },
  { name: "Settings", href: "/settings", icon: Settings },
];

export function Sidebar() {
  const pathname = usePathname();
  const router = useRouter();
  const { data: session } = useSession();
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isMobileOpen, setIsMobileOpen] = useState(false);
  const {
    activeOrganizationId,
    activeAgencyDetails,
    clearActiveAgency,
    clearActiveOrganization,
  } = useActiveOrganization();

  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth < 1024) {
        setIsCollapsed(false);
      }
    };
    window.addEventListener("resize", handleResize);
    handleResize();
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const { isBusinessActor, isSuperAdmin } = useMemo(
    () => ({
      isBusinessActor: !!session?.user.businessActorId,
      isSuperAdmin: true,
    }),
    [session]
  );

  const isAgencyContext = pathname.startsWith("/business-actor/agency");

  let mainNav: any[] = userNavigation;
  let globalNav: any[] = [];
  let sidebarTitle = "My Account";
  let homeLink = "/dashboard";
  let ContextSwitcher = null;

  if (isSuperAdmin && pathname.startsWith("/super-admin/") ) {
    mainNav = superAdminNavigation;
    sidebarTitle = "Platform Admin";
    homeLink = "/super-admin/dashboard";
  } else if (isBusinessActor) {
    if (isAgencyContext) {
      mainNav = agencyNavigation;
      sidebarTitle = activeAgencyDetails?.short_name || "Agency";
      homeLink = "/business-actor/agency/dashboard";
      ContextSwitcher = () => <AgencySwitcher isCollapsed={isCollapsed} />;
    } else {
      mainNav = baOrgNavigation;
      globalNav = baGlobalNavigation;
      sidebarTitle = "BA Workspace";
      homeLink = "/business-actor/organizations";
      ContextSwitcher = () => (
        <OrganizationSwitcher isCollapsed={isCollapsed} />
      );
    }
  }

  const ExitButton = () => {
    if (isAgencyContext) {
      return (
        <Tooltip delayDuration={0}>
          <TooltipTrigger asChild>
            <Button
              onClick={() => {
                clearActiveAgency();
                router.push("/business-actor/dashboard");
              }}
              variant="ghost"
              className="w-full justify-start h-9 px-3 text-destructive hover:text-destructive hover:bg-destructive/10"
            >
              <ArrowLeft
                className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")}
              />
              {!isCollapsed && "Exit Agency"}
            </Button>
          </TooltipTrigger>
          {isCollapsed && (
            <TooltipContent side="right">Exit Agency</TooltipContent>
          )}
        </Tooltip>
      );
    }
    if (isBusinessActor) {
      return (
        <Tooltip delayDuration={0}>
          <TooltipTrigger asChild>
            <Button
              onClick={() => {
                clearActiveOrganization();
                router.push("/dashboard");
                toast.info("Exited Business Workspace.");
              }}
              variant="ghost"
              className="flex items-center w-full justify-start h-9 px-3 text-sidebar-foreground hover:bg-amber-500/10 hover:text-amber-600"
            >
              <Power
                className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")}
              />
              {!isCollapsed && "Exit Workspace"}
            </Button>
          </TooltipTrigger>
          {isCollapsed && (
            <TooltipContent side="right">Exit Workspace</TooltipContent>
          )}
        </Tooltip>
      );
    }
    return null;
  };

  const NavItem = ({
    item,
  }: {
    item: {
      name: string;
      href: string;
      icon: React.ElementType;
      isOrgSpecific?: boolean;
    };
  }) => {
    const isDisabled = item.isOrgSpecific && !activeOrganizationId;
    const isActive = !isDisabled && pathname.startsWith(item.href);

    return (
      <Tooltip delayDuration={0}>
        <TooltipTrigger asChild>
          <Link
            href={isDisabled ? "#" : item.href}
            className={cn(
              "flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors h-9",
              isActive && "bg-sidebar-accent text-sidebar-accent-foreground",
              !isDisabled &&
                !isActive &&
                "text-sidebar-foreground hover:bg-sidebar-accent/80",
              isDisabled && "cursor-not-allowed text-muted-foreground/50",
              isCollapsed && "justify-center px-2"
            )}
            onClick={() =>
              isMobileOpen && !isDisabled && setIsMobileOpen(false)
            }
          >
            <item.icon
              className={cn(
                "h-[18px] w-[18px] shrink-0",
                !isCollapsed && "mr-3"
              )}
            />
            {!isCollapsed && <span className="truncate">{item.name}</span>}
          </Link>
        </TooltipTrigger>
        {isCollapsed && (
          <TooltipContent side="right">{item.name}</TooltipContent>
        )}
      </Tooltip>
    );
  };

  return (
    <TooltipProvider>
      <Button
        variant="outline"
        size="icon"
        className="lg:hidden fixed top-4 left-4 z-[60]"
        onClick={() => setIsMobileOpen((v) => !v)}
      >
        <Menu className="h-5 w-5" />
      </Button>
      <div
        className={cn(
          "fixed inset-y-0 left-0 z-50 flex h-full flex-col border-r bg-sidebar text-sidebar-foreground transition-all duration-300 ease-in-out lg:sticky lg:top-0 lg:h-screen",
          isCollapsed ? "w-[72px]" : "w-64",
          isMobileOpen
            ? "translate-x-0 shadow-xl"
            : "-translate-x-full lg:translate-x-0"
        )}
      >
        <div
          className={cn(
            "flex h-16 shrink-0 items-center border-b px-4",
            isCollapsed && "justify-center px-2"
          )}
        >
          <Link
            href={homeLink}
            className="flex items-center gap-2 font-semibold"
          >
            <Image
              src="/logo.svg"
              alt="Logo"
              width={32}
              height={32}
              priority
              className="shrink-0"
            />
            {!isCollapsed && (
              <span className="text-lg truncate">{sidebarTitle}</span>
            )}
          </Link>
          <Button
            variant="ghost"
            size="icon"
            className={cn("h-8 w-8 ml-auto hidden lg:flex")}
            onClick={() => setIsCollapsed(!isCollapsed)}
          >
            <SidebarClose
              className={cn(
                "h-4 w-4 transition-transform",
                isCollapsed && "rotate-180"
              )}
            />
          </Button>
          {isMobileOpen && (
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8 ml-auto lg:hidden"
              onClick={() => setIsMobileOpen(false)}
            >
              <SidebarClose className="h-4 w-4" />
            </Button>
          )}
        </div>
        {ContextSwitcher && <ContextSwitcher />}
        <div className="flex flex-1 flex-col overflow-y-auto overflow-x-hidden">
          <nav
            className={cn(
              "flex-1 space-y-1 py-4",
              isCollapsed ? "px-2" : "px-4"
            )}
          >
            {globalNav.length > 0 && (
              <>
                {globalNav.map((item) => (
                  <NavItem key={item.name} item={item} />
                ))}
                <Separator className="my-3" />
              </>
            )}
            {mainNav.map((item) => (
              <NavItem key={item.name} item={item} />
            ))}
          </nav>
          <div
            className={cn("mt-auto border-t", isCollapsed ? "px-2" : "px-4")}
          >
            <div className="space-y-1 py-4">
              <ExitButton />
              {bottomNavigation.map((item) => (
                <NavItem key={item.name} item={item} />
              ))}
              <Tooltip delayDuration={0}>
                <TooltipTrigger asChild>
                  <Button
                    onClick={() => signOut({ callbackUrl: "/login" })}
                    variant="ghost"
                    className="flex items-center w-full justify-start h-9 px-3 text-sidebar-foreground hover:bg-destructive/10 hover:text-destructive"
                  >
                    <LogOut
                      className={cn(
                        "h-[18px] w-[18px]",
                        !isCollapsed && "mr-3"
                      )}
                    />
                    {!isCollapsed && "Logout"}
                  </Button>
                </TooltipTrigger>
                {isCollapsed && (
                  <TooltipContent side="right">Logout</TooltipContent>
                )}
              </Tooltip>
            </div>
          </div>
        </div>
      </div>
      {isMobileOpen && (
        <div
          className="fixed inset-0 z-40 bg-black/50 lg:hidden"
          onClick={() => setIsMobileOpen(false)}
        />
      )}
    </TooltipProvider>
  );
}
// END OF FILE: components/sidebar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/theme-toggle.tsx

"use client"

import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { useState, useEffect } from "react"

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()
  const [mounted, setMounted] = useState(false)

  // Ensure component only renders after mounting on client
  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null // or a placeholder
  }

  return (
    <button
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      className="p-2 rounded-md bg-gray-200 dark:bg-gray-700 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
    >
      {theme === "dark" ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
    </button>
  )
}// END OF FILE: components/theme-toggle.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/top-nav.tsx

"use client";

import React from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { Home, Search } from "lucide-react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { UserNav } from "./user-nav";
import { ModeToggle } from "./mode-toggle";
import { Button } from "./ui/button";
import { signOut } from "next-auth/react";
import { DevRoleSwitcher } from "./dev/role-switcher";

interface TopNavProps {
  onOpenCommandPalette: () => void;
}

export function TopNav({ onOpenCommandPalette }: TopNavProps) {
  const pathname = usePathname();
  const { activeOrganizationDetails, activeAgencyDetails } = useActiveOrganization();

  const getBreadcrumbs = () => {
    const pathSegments = pathname.split("/").filter(Boolean);
    if (pathSegments.length === 0) return null;

    const breadcrumbs: React.ReactNode[] = [];
    let currentPath = "";

    pathSegments.forEach((segment, index) => {
      currentPath += `/${segment}`;
      let text = segment.replace(/-/g, " ");

      // Replace IDs with names from context
      if (segment === activeOrganizationDetails?.organization_id) {
        text = activeOrganizationDetails.short_name || "Organization";
      } else if (segment === activeAgencyDetails?.agency_id) {
        text = activeAgencyDetails.short_name || "Agency";
      }

      // Don't link the very last segment (the current page)
      const isLast = index === pathSegments.length - 1;

      breadcrumbs.push(
        <React.Fragment key={currentPath}>
          <span className="text-muted-foreground mx-1">/</span>
          {isLast ? (
            <span className="font-medium text-foreground capitalize">{text}</span>
          ) : (
            <Link href={currentPath} className="capitalize text-muted-foreground hover:text-foreground">
              {text}
            </Link>
          )}
        </React.Fragment>
      );
    });

    return (
      <>
        <Link href="/dashboard" className="flex items-center gap-1.5 text-muted-foreground hover:text-foreground">
          <Home className="h-4 w-4" />
        </Link>
        {breadcrumbs}
      </>
    );
  };

  return (
    <header className="sticky top-0 z-30 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="flex h-16 items-center justify-between px-4 sm:px-6 lg:px-8">
        <div className="hidden items-center gap-1.5 text-sm md:flex flex-wrap mr-4">
          {getBreadcrumbs()}
        </div>
        <div className="flex items-center gap-x-2">
          <DevRoleSwitcher />
          <Button variant="outline" size="sm" className="h-9 gap-2" onClick={onOpenCommandPalette}>
            <Search className="h-4 w-4" />
            <span className="hidden lg:inline-block">Search...</span>
            <kbd className="hidden lg:inline-block pointer-events-none select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium opacity-100">
              <span className="text-xs">⌘</span>K
            </kbd>
          </Button>
          <ModeToggle />
          <UserNav onLogoutAction={() => signOut({ callbackUrl: "/login" })} />
        </div>
      </div>
    </header>
  );
}
// END OF FILE: components/top-nav.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/accordion.tsx

"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />
}

function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props}
    />
  )
}

function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180",
          className
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
}

function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn("pt-0 pb-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
// END OF FILE: components/ui/accordion.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/alert-dialog.tsx

"use client";

import * as React from "react";
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
);
AlertDialogHeader.displayName = "AlertDialogHeader";

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
);
AlertDialogFooter.displayName = "AlertDialogFooter";

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};
// END OF FILE: components/ui/alert-dialog.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/alert.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }
// END OF FILE: components/ui/alert.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/avatar.tsx

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }
// END OF FILE: components/ui/avatar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/badge.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }
// END OF FILE: components/ui/badge.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/button.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
// END OF FILE: components/ui/button.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/calendar.tsx

"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: React.ComponentProps<typeof DayPicker>) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row gap-2",
        month: "flex flex-col gap-4",
        caption: "flex justify-center pt-1 relative items-center w-full",
        caption_label: "text-sm font-medium",
        nav: "flex items-center gap-1",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "size-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-x-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "size-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start:
          "day-range-start aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_range_end:
          "day-range-end aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("size-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("size-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}

export { Calendar }
// END OF FILE: components/ui/calendar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/card.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
// END OF FILE: components/ui/card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/checkbox.tsx

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }
// END OF FILE: components/ui/checkbox.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/command.tsx

"use client"

import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props}
    />
  )
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  )
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
// END OF FILE: components/ui/command.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-grid.tsx

"use client";

import React from "react";
import { Table, Row } from "@tanstack/react-table";
import { cn } from "@/lib/utils";

interface DataGridProps<TData> {
  /** The TanStack Table instance which manages state (selection, pagination, etc.). */
  table: Table<TData>;
  /** A function that takes a table row and returns the React component to render for that item. */
  renderCardAction: (props: { row: Row<TData> }) => React.ReactNode;
  /** Optional class name for the grid container. */
  className?: string;
}

/**
 * A generic, reusable grid component for displaying data from a TanStack Table instance.
 * It uses a render prop (`renderCard`) to display a custom component for each item,
 * making it adaptable to any data type.
 */
export function DataGrid<TData>({
  table,
  renderCardAction,
  className,
}: DataGridProps<TData>) {
  const { rows } = table.getRowModel();

  return (
    <div
      className={cn(
        "grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3 sm:gap-6",
        className
      )}
    >
      {rows.map((row) => (
        <div key={row.id}>{renderCardAction({ row })}</div>
      ))}
    </div>
  );
}
// END OF FILE: components/ui/data-grid.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table-column-header.tsx

"use client";

import { Column } from "@tanstack/react-table";
import { ArrowDownIcon, ArrowUpIcon, ChevronsUpDownIcon, EyeOffIcon } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface DataTableColumnHeaderProps<TData, TValue>
  extends React.HTMLAttributes<HTMLDivElement> {
  column: Column<TData, TValue>;
  title: string;
}

export function DataTableColumnHeader<TData, TValue>({
  column,
  title,
  className,
}: DataTableColumnHeaderProps<TData, TValue>) {
  if (!column.getCanSort() && !column.getCanHide()) {
    return <div className={cn(className)}>{title}</div>;
  }

  return (
    <div className={cn("flex items-center space-x-2", className)}>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            size="sm"
            className="-ml-3 h-8 data-[state=open]:bg-accent"
          >
            <span>{title}</span>
            {column.getCanSort() && column.getIsSorted() === "desc" ? (
              <ArrowDownIcon className="ml-2 h-4 w-4" />
            ) : column.getCanSort() && column.getIsSorted() === "asc" ? (
              <ArrowUpIcon className="ml-2 h-4 w-4" />
            ) : column.getCanSort() ? (
              <ChevronsUpDownIcon className="ml-2 h-4 w-4" />
            ) : null}
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="start">
          {column.getCanSort() && (
            <>
              <DropdownMenuItem onClick={() => column.toggleSorting(false)}>
                <ArrowUpIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Asc
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => column.toggleSorting(true)}>
                <ArrowDownIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Desc
              </DropdownMenuItem>
            </>
          )}
          {column.getCanSort() && column.getCanHide() && <DropdownMenuSeparator />}
          {column.getCanHide() && (
            <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>
              <EyeOffIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
              Hide
            </DropdownMenuItem>
          )}
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
}// END OF FILE: components/ui/data-table-column-header.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table-faceted-filter.tsx

"use client";

import * as React from "react";
import { Column } from "@tanstack/react-table";
import { CheckIcon, PlusCircledIcon } from "@radix-ui/react-icons"; // Or use Lucide icons

import { cn } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Separator } from "@/components/ui/separator";

interface DataTableFacetedFilterProps<TData, TValue> {
  column?: Column<TData, TValue>;
  title?: string;
  options: {
    label: string;
    value: string;
    icon?: React.ComponentType<{ className?: string }>;
  }[];
}

export function DataTableFacetedFilter<TData, TValue>({
  column,
  title,
  options,
}: DataTableFacetedFilterProps<TData, TValue>) {
  const facets = column?.getFacetedUniqueValues();
  const selectedValues = new Set(column?.getFilterValue() as string[]);

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="sm" className="h-9 border-dashed">
          <PlusCircledIcon className="mr-2 h-4 w-4" /> {/* Lucide: FilterIcon or ListFilter */}
          {title}
          {selectedValues?.size > 0 && (
            <>
              <Separator orientation="vertical" className="mx-2 h-4" />
              <Badge
                variant="secondary"
                className="rounded-sm px-1 font-normal lg:hidden"
              >
                {selectedValues.size}
              </Badge>
              <div className="hidden space-x-1 lg:flex">
                {selectedValues.size > 2 ? (
                  <Badge
                    variant="secondary"
                    className="rounded-sm px-1 font-normal"
                  >
                    {selectedValues.size} selected
                  </Badge>
                ) : (
                  options
                    .filter((option) => selectedValues.has(option.value))
                    .map((option) => (
                      <Badge
                        variant="secondary"
                        key={option.value}
                        className="rounded-sm px-1 font-normal"
                      >
                        {option.label}
                      </Badge>
                    ))
                )}
              </div>
            </>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[200px] p-0" align="start">
        <Command>
          <CommandInput placeholder={title} />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>
            <CommandGroup>
              {options.map((option) => {
                const isSelected = selectedValues.has(option.value);
                return (
                  <CommandItem
                    key={option.value}
                    onSelect={() => {
                      if (isSelected) {
                        selectedValues.delete(option.value);
                      } else {
                        selectedValues.add(option.value);
                      }
                      const filterValues = Array.from(selectedValues);
                      column?.setFilterValue(
                        filterValues.length ? filterValues : undefined
                      );
                    }}
                  >
                    <div
                      className={cn(
                        "mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary",
                        isSelected
                          ? "bg-primary text-primary-foreground"
                          : "opacity-50 [&_svg]:invisible"
                      )}
                    >
                      <CheckIcon className={cn("h-4 w-4")} />
                    </div>
                    {option.icon && (
                      <option.icon className="mr-2 h-4 w-4 text-muted-foreground" />
                    )}
                    <span>{option.label}</span>
                    {facets?.get(option.value) && (
                      <span className="ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs">
                        {facets.get(option.value)}
                      </span>
                    )}
                  </CommandItem>
                );
              })}
            </CommandGroup>
            {selectedValues.size > 0 && (
              <>
                <CommandSeparator />
                <CommandGroup>
                  <CommandItem
                    onSelect={() => column?.setFilterValue(undefined)}
                    className="justify-center text-center"
                  >
                    Clear filters
                  </CommandItem>
                </CommandGroup>
              </>
            )}
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}// END OF FILE: components/ui/data-table-faceted-filter.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table-pagination.tsx

"use client";

import {
  ChevronLeftIcon,
  ChevronRightIcon,
  DoubleArrowLeftIcon,
  DoubleArrowRightIcon,
} from "@radix-ui/react-icons"; // Using Radix icons as per shadcn example
import { Table } from "@tanstack/react-table";

import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ViewMode } from "@/types/common";

interface DataTablePaginationProps<TData> {
  table: Table<TData>;
  viewMode: ViewMode;
}

export function DataTablePagination<TData>({
  table,
  viewMode,
}: DataTablePaginationProps<TData>) {
  return (
    <div className="flex items-center justify-between px-2 py-4 border-t">
      <div className="flex-1 text-sm text-muted-foreground">
        {table.getFilteredSelectedRowModel().rows.length} of{" "}
        {table.getFilteredRowModel().rows.length}{" "}
        {viewMode === "list" ? "row(s) selected" : "item(s) selected"} .
      </div>
      <div className="flex items-center space-x-6 lg:space-x-8">
        <div className="flex items-center space-x-2">
          <p className="text-sm font-medium">
            {viewMode === "list" ? "Rows per page" : "Items per page"}
          </p>
          <Select
            value={`${table.getState().pagination.pageSize}`}
            onValueChange={(value) => {
              table.setPageSize(Number(value));
            }}
          >
            <SelectTrigger className="h-8 w-[70px]">
              <SelectValue placeholder={table.getState().pagination.pageSize} />
            </SelectTrigger>
            <SelectContent side="top">
              {[10, 20, 30, 40, 50].map((pageSize) => (
                <SelectItem key={pageSize} value={`${pageSize}`}>
                  {pageSize}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="flex w-[100px] items-center justify-center text-sm font-medium">
          Page {table.getState().pagination.pageIndex + 1} of{" "}
          {table.getPageCount()}
        </div>
        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(0)}
            disabled={!table.getCanPreviousPage()}
          >
            <span className="sr-only">Go to first page</span>
            <DoubleArrowLeftIcon className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            className="h-8 w-8 p-0"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            <span className="sr-only">Go to previous page</span>
            <ChevronLeftIcon className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            className="h-8 w-8 p-0"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            <span className="sr-only">Go to next page</span>
            <ChevronRightIcon className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(table.getPageCount() - 1)}
            disabled={!table.getCanNextPage()}
          >
            <span className="sr-only">Go to last page</span>
            <DoubleArrowRightIcon className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}
// END OF FILE: components/ui/data-table-pagination.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table-toolbar.tsx

"use client";

import React from "react";
import { Table } from "@tanstack/react-table";
import { SlidersHorizontal, X, Search, LayoutGrid, LayoutList, Download } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent,
  DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { ViewMode } from "@/types/common";
import { cn } from "@/lib/utils";

const formatColumnIdForDisplay = (id: string) => {
  return id
    .replace(/_/g, " ")
    .replace(/([a-z])([A-Z])/g, "$1 $2")
    .replace(/\b\w/g, (char) => char.toUpperCase());
};

interface DataTableToolbarProps<TData> {
  table: Table<TData>;
  globalFilter: string;
  onGlobalFilterChangeAction: (value: string) => void;
  searchPlaceholder?: string;
  filterControls?: React.ReactNode;
  bulkActions?: React.ReactNode;
  viewMode: ViewMode;
  onViewModeChange: (mode: ViewMode) => void;
  onExportAction?: () => void;
}

export function DataTableToolbar<TData>({
  table,
  globalFilter,
  onGlobalFilterChangeAction,
  searchPlaceholder = "Search...",
  filterControls,
  bulkActions,
  viewMode,
  onViewModeChange,
  onExportAction,
}: DataTableToolbarProps<TData>) {
  const isFiltered = table.getState().columnFilters.length > 0 || !!globalFilter;
  const numSelected = table.getFilteredSelectedRowModel().rows.length;

  if (numSelected > 0 && bulkActions) {
    return (
      <div className="flex w-full items-center justify-between gap-4 rounded-md border border-dashed bg-muted/50 p-2.5 transition-all">
        <div className="flex-1 text-sm font-medium text-muted-foreground">
          {numSelected} {numSelected === 1 ? "item" : "items"} selected
        </div>
        <div className="flex items-center gap-2">
          {bulkActions}
          <Button variant="ghost" size="sm" onClick={() => table.resetRowSelection()} className="h-9" aria-label="Clear selection">
            <X className="mr-2 h-4 w-4" /> Clear
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
      <div className="flex flex-1 flex-col items-stretch gap-2 sm:flex-row sm:items-center">
        <div className="relative w-full sm:w-auto">
          <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
          <Input
            placeholder={searchPlaceholder}
            value={globalFilter ?? ""}
            onChange={(event) => onGlobalFilterChangeAction(event.target.value)}
            className="h-10 w-full pl-10 sm:w-[200px] lg:w-[280px]"
          />
        </div>
        {filterControls}
        {isFiltered && (
          <Button variant="ghost" onClick={() => { table.resetColumnFilters(); onGlobalFilterChangeAction(""); }} className="h-10 px-3">
            Reset <X className="ml-2 h-4 w-4" />
          </Button>
        )}
      </div>

      <div className="flex items-center gap-2">
        {/* [START OF CHANGE] */}
        <div className="flex items-center p-0.5 bg-muted rounded-md">
          <Button variant={viewMode === "grid" ? "default" : "ghost"} size="sm" onClick={() => onViewModeChange("grid")} className={cn("h-9 px-3", viewMode === "grid" && "bg-background text-foreground shadow-sm")}>
            <LayoutGrid className="h-4 w-4" />
            <span className="ml-1.5 hidden sm:inline">Grid</span>
          </Button>
          <Button variant={viewMode === "list" ? "default" : "ghost"} size="sm" onClick={() => onViewModeChange("list")} className={cn("h-9 px-3", viewMode === "list" && "bg-background text-foreground shadow-sm")}>
            <LayoutList className="h-4 w-4" />
            <span className="ml-1.5 hidden sm:inline">List</span>
          </Button>
        </div>
        {/* [END OF CHANGE] */}

        {onExportAction && (
          <Button variant="outline" size="sm" className="h-10" onClick={onExportAction}>
            <Download className="mr-2 h-4 w-4" />
            <span className="hidden sm:inline">Export</span>
          </Button>
        )}

        {viewMode === "list" && (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="h-10 w-full sm:w-auto">
                <SlidersHorizontal className="mr-2 h-4 w-4" />
                <span className="hidden sm:inline">Columns</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-[180px]">
              <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>
              <DropdownMenuSeparator />
              {table.getAllColumns().filter((col) => typeof col.accessorFn !== "undefined" && col.getCanHide()).map((column) => (
                <DropdownMenuCheckboxItem key={column.id} checked={column.getIsVisible()} onCheckedChange={(value) => column.toggleVisibility(!!value)}>
                  {formatColumnIdForDisplay(column.id)}
                </DropdownMenuCheckboxItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>
        )}
      </div>
    </div>
  );
}
// END OF FILE: components/ui/data-table-toolbar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table.tsx

"use client";

import * as React from "react";
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFacetedRowModel,
  getFacetedUniqueValues,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  Table as TanstackTableInstance,
  PaginationState,
  RowSelectionState,
} from "@tanstack/react-table";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

// Extend props to accept an optional, pre-configured table instance
export interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[];
  data: TData[];
  pageCount?: number; // For server-side pagination, if tableInstance is not provided

  // Props for controlled state if tableInstance is NOT provided
  sorting?: SortingState;
  onSortingChange?: React.Dispatch<React.SetStateAction<SortingState>>;
  columnFilters?: ColumnFiltersState;
  onColumnFiltersChange?: React.Dispatch<
    React.SetStateAction<ColumnFiltersState>
  >;
  globalFilter?: string;
  onGlobalFilterChangeAction?: React.Dispatch<React.SetStateAction<string>>;
  columnVisibility?: VisibilityState;
  onColumnVisibilityChange?: React.Dispatch<
    React.SetStateAction<VisibilityState>
  >;
  rowSelection?: RowSelectionState;
  onRowSelectionChange?: React.Dispatch<
    React.SetStateAction<RowSelectionState>
  >;
  pagination?: PaginationState;
  onPaginationChange?: React.Dispatch<React.SetStateAction<PaginationState>>;

  manualPagination?: boolean;
  manualSorting?: boolean;
  manualFiltering?: boolean;

  tableInstance?: TanstackTableInstance<TData>; // Optional pre-configured table instance
}

export function DataTable<TData, TValue>({
  columns,
  data,
  pageCount: parentPageCount,
  sorting: controlledSorting,
  onSortingChange,
  columnFilters: controlledColumnFilters,
  onColumnFiltersChange,
  globalFilter: controlledGlobalFilter,
  onGlobalFilterChangeAction,
  columnVisibility: controlledColumnVisibility,
  onColumnVisibilityChange,
  rowSelection: controlledRowSelection,
  onRowSelectionChange,
  pagination: controlledPagination,
  onPaginationChange,
  manualPagination = false,
  manualSorting = false,
  manualFiltering = false,
  tableInstance, // Use this if provided
}: DataTableProps<TData, TValue>) {
  // Use the provided table instance, or create one if not provided
  const internalTable = useReactTable({
    data,
    columns,
    pageCount: parentPageCount ?? -1, // Use parentPageCount or default for internal calculation
    state: {
      sorting: controlledSorting,
      columnFilters: controlledColumnFilters,
      globalFilter: controlledGlobalFilter,
      columnVisibility: controlledColumnVisibility,
      rowSelection: controlledRowSelection,
      pagination: controlledPagination,
    },
    enableRowSelection: true,
    onRowSelectionChange: onRowSelectionChange,
    onSortingChange: onSortingChange,
    onColumnFiltersChange: onColumnFiltersChange,
    onGlobalFilterChange: onGlobalFilterChangeAction,
    onColumnVisibilityChange: onColumnVisibilityChange,
    onPaginationChange: onPaginationChange,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFacetedRowModel: getFacetedRowModel(),
    getFacetedUniqueValues: getFacetedUniqueValues(),
    manualPagination,
    manualSorting,
    manualFiltering,
  });

  const table = tableInstance || internalTable; // Prioritize passed instance

  return (
    <div className="w-full space-y-0">
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead
                    key={header.id}
                    colSpan={header.colSpan}
                    style={{
                      width:
                        header.getSize() !== 150 ? header.getSize() : undefined,
                    }} // Default size in tanstack table v8
                  >
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell
                      key={cell.id}
                      style={{
                        width:
                          cell.column.getSize() !== 150
                            ? cell.column.getSize()
                            : undefined,
                      }}
                    >
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={table.getAllColumns().length}
                  className="h-24 text-center"
                >
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}
// END OF FILE: components/ui/data-table.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/dialog.tsx

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
// END OF FILE: components/ui/dialog.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/dropdown-menu.tsx

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}
// END OF FILE: components/ui/dropdown-menu.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/feedback-card.tsx

import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface FeedbackCardProps {
  icon: React.ElementType;
  title: string;
  description: string;
  actionButton?: React.ReactNode;
  variant?: "default" | "destructive";
  className?: string;
}

export function FeedbackCard({
  icon: Icon,
  title,
  description,
  actionButton,
  variant = "default",
  className,
}: FeedbackCardProps) {
  return (
    <Card
      className={cn(
        "w-full",
        variant === "destructive" && "border-destructive/50 bg-destructive/10",
        className
      )}
    >
      <CardContent className="flex min-h-[300px] flex-col items-center justify-center p-6 text-center">
        <div
          className={cn(
            "mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-muted",
            variant === "destructive" && "bg-destructive/20"
          )}
        >
          <Icon
            className={cn(
              "h-8 w-8 text-muted-foreground",
              variant === "destructive" && "text-destructive"
            )}
          />
        </div>
        <h3 className="text-xl font-semibold text-foreground">{title}</h3>
        <p className="mt-2 max-w-sm text-sm text-muted-foreground">
          {description}
        </p>
        {actionButton && <div className="mt-6">{actionButton}</div>}
      </CardContent>
    </Card>
  );
}// END OF FILE: components/ui/feedback-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/form.tsx

"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form";

import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState } = useFormContext();
  const formState = useFormState({ name: fieldContext.name });
  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
);

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  );
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField();

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField();

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message ?? "") : props.children;

  if (!body) {
    return null;
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  );
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
// END OF FILE: components/ui/form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/form-wizard.tsx

"use client";

import { cn } from "@/lib/utils";
import { Check } from "lucide-react";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

interface Step {
  id: string;
  name: string;
  icon: React.ElementType;
}

interface FormWizardProps {
  steps: Step[];
  currentStepIndex: number;
  onStepClick: (stepIndex: number) => void;
  mode: "create" | "edit";
  className?: string;
}

export function FormWizard({
  steps,
  currentStepIndex,
  onStepClick,
  mode,
  className,
}: FormWizardProps) {
  const stepCount = steps.length;
  if (mode === "edit") {
    return (
      <Tabs
        value={steps[currentStepIndex].id}
        onValueChange={(value) => {
          const newIndex = steps.findIndex((step) => step.id === value);
          if (newIndex !== -1) {
            onStepClick(newIndex);
          }
        }}
        className={cn("w-full", className)}
      >
        <TabsList className={`grid w-full grid-cols-${stepCount}`}>
          {steps.map((step) => (
            <TabsTrigger key={step.id} value={step.id}>
              <step.icon className="mr-2 h-4 w-4" />
              {step.name}
            </TabsTrigger>
          ))}
        </TabsList>
      </Tabs>
    );
  }

  // --- CREATE MODE: Use the sequential wizard layout ---
  return (
    <nav aria-label="Progress" className={cn("pb-4", className)}>
      <ol
        role="list"
        className="flex flex-col space-y-4 md:flex-row md:space-y-0 md:space-x-8"
      >
        {steps.map((step, index) => {
          const isCurrent = index === currentStepIndex;
          const isCompleted = index < currentStepIndex;
          const isClickable = index < currentStepIndex; // Only completed steps are clickable in create mode

          return (
            <li key={step.name} className="md:flex-1">
              <div
                onClick={() => isClickable && onStepClick(index)}
                className={cn(
                  "group flex w-full flex-col border-l-4 py-2 pl-4 transition-colors md:border-l-0 md:border-t-4 md:pb-0 md:pl-0 md:pt-4",
                  isClickable ? "cursor-pointer" : "cursor-default",
                  isCurrent && "border-primary",
                  isCompleted
                    ? "border-primary/50 hover:border-primary"
                    : "border-border"
                )}
                aria-current={isCurrent ? "step" : undefined}
              >
                <div className="flex items-center gap-3">
                  <div
                    className={cn(
                      "flex h-7 w-7 shrink-0 items-center justify-center rounded-full text-sm font-bold transition-all duration-300",
                      isCurrent &&
                        "scale-110 ring-4 ring-primary/20 bg-primary text-primary-foreground",
                      isCompleted
                        ? "bg-primary text-primary-foreground"
                        : "bg-muted text-muted-foreground group-hover:bg-accent"
                    )}
                  >
                    {isCompleted ? (
                      <Check className="h-5 w-5" />
                    ) : (
                      <span>{index + 1}</span>
                    )}
                  </div>
                  <div>
                    <span
                      className={cn(
                        "text-sm font-semibold transition-colors",
                        isCurrent ? "text-primary" : "text-muted-foreground",
                        isClickable && "group-hover:text-foreground"
                      )}
                    >
                      {step.name}
                    </span>
                  </div>
                </div>
              </div>
            </li>
          );
        })}
      </ol>
    </nav>
  );
}
// END OF FILE: components/ui/form-wizard.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/form-wrapper.tsx

"use client";

import React, { useState } from "react";
import { UseFormReturn, FieldValues, Path } from "react-hook-form";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Form } from "@/components/ui/form";
import { ChevronLeft, ChevronRight, Loader2 } from "lucide-react";
import { FormWizard } from "./form-wizard"; // We will use the stepper version

interface Step {
  id: string;
  name: string;
  icon: React.ElementType;
  fields?: string[];
}

interface FormWrapperProps<T extends FieldValues> {
  form: UseFormReturn<T>;
  onFormSubmit: (data: T) => void;
  isLoading: boolean;
  title: string;
  description: string;
  steps?: Step[];
  children: (currentStep: number) => React.ReactNode;
  submitButtonText?: string;
  className?: string;
}

export function FormWrapper<T extends FieldValues>({
  form,
  onFormSubmit,
  isLoading,
  title,
  description,
  steps,
  children,
  submitButtonText = "Submit",
  className,
}: FormWrapperProps<T>) {
  const [currentStep, setCurrentStep] = useState(0);
  const isMultiStep = steps && steps.length > 1;

  const handleNextStep = async () => {
    // Import Path from react-hook-form
    // import { UseFormReturn, FieldValues, Path } from "react-hook-form";
    const fieldsToValidate = steps?.[currentStep]?.fields as
      | import("react-hook-form").Path<T>[]
      | undefined;
    const isStepValid = fieldsToValidate
      ? await form.trigger(fieldsToValidate)
      : true;

    if (isStepValid && isMultiStep && currentStep < steps.length - 1) {
      setCurrentStep((prev) => prev + 1);
    }
  };

  const handleFinalSubmit = form.handleSubmit(onFormSubmit);

  const handleKeyDown = (e: React.KeyboardEvent<HTMLFormElement>) => {
    if (e.key === "Enter") {
      // Prevents accidental submission from any input field
      e.preventDefault();
    }
  };

  return (
    <Form {...form}>
      <form
        onSubmit={(e) => e.preventDefault()} // Prevent default form submission
        onKeyDown={handleKeyDown}
        className={cn("w-full", className)}
      >
        <Card className="shadow-lg border">
          <CardHeader>
            <CardTitle>{title}</CardTitle>
            <CardDescription>{description}</CardDescription>
          </CardHeader>

          {isMultiStep && (
            <div className="px-6 pb-4 border-b">
              <FormWizard
                steps={steps}
                currentStepIndex={currentStep}
                onStepClick={setCurrentStep}
                mode="create" // Always use stepper visual for clarity
              />
            </div>
          )}

          <CardContent className="pt-6">{children(currentStep)}</CardContent>

          <CardFooter className="flex justify-between border-t pt-6">
            <div>
              {isMultiStep && (
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setCurrentStep((p) => p - 1)}
                  disabled={currentStep === 0 || isLoading}
                >
                  <ChevronLeft className="mr-2 h-4 w-4" />
                  Back
                </Button>
              )}
            </div>

            <div>
              {isMultiStep && currentStep < steps.length - 1 ? (
                <Button type="button" onClick={handleNextStep}>
                  Next
                  <ChevronRight className="ml-2 h-4 w-4" />
                </Button>
              ) : (
                <Button
                  type="button"
                  onClick={handleFinalSubmit}
                  disabled={isLoading}
                >
                  {isLoading && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  {submitButtonText}
                </Button>
              )}
            </div>
          </CardFooter>
        </Card>
      </form>
    </Form>
  );
}
// END OF FILE: components/ui/form-wrapper.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/image-placeholder.tsx

import React from 'react';
import { Image as ImageIcon, Package, Combine } from 'lucide-react'; // Or any other generic icon
import { cn } from '@/lib/utils';

interface ImagePlaceholderProps {
  iconType?: 'resource' | 'service' | 'generic';
  className?: string;
  iconClassName?: string;
}

export function ImagePlaceholder({
  iconType = 'generic',
  className,
  iconClassName,
}: ImagePlaceholderProps) {
  let IconComponent;
  switch (iconType) {
    case 'resource':
      IconComponent = Package;
      break;
    case 'service':
      IconComponent = Combine;
      break;
    default:
      IconComponent = ImageIcon;
  }

  return (
    <div
      className={cn(
        "flex h-full w-full items-center justify-center rounded-md bg-muted aspect-square",
        className
      )}
    >
      <IconComponent
        className={cn("h-1/2 w-1/2 text-muted-foreground/50", iconClassName)}
        strokeWidth={1.5}
      />
    </div>
  );
}// END OF FILE: components/ui/image-placeholder.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/image-uploader.tsx

"use client";
import imageCompression from "browser-image-compression";
import React, {
  useState,
  useCallback,
  ChangeEvent,
  useEffect,
  useRef,
} from "react";
import { Label } from "@/components/ui/label";
import Image from "next/image";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { UploadCloud, XCircle, Maximize } from "lucide-react"; // Removed zoom/pan icons
import { toast } from "sonner";
import { cn } from "@/lib/utils";
import {
  Dialog,
  DialogContent,
  DialogTrigger,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";

interface ImageUploaderProps {
  currentImageUrl?: string | null;
  onImageSelectedAction: (file: File | null, previewUrl: string | null) => void;
  label?: string;
  aspectRatio?: "square" | "portrait" | "landscape" | "auto";
  fallbackName?: string;
  className?: string;
  imagePreviewContainerClassName?: string;
  dropzoneClassName?: string;
}

export function ImageUploader({
  currentImageUrl,
  onImageSelectedAction,
  label = "",
  aspectRatio = "square",
  fallbackName = "User",
  className,
  imagePreviewContainerClassName,
  dropzoneClassName,
}: ImageUploaderProps) {
  const [preview, setPreview] = useState<string | null>(
    currentImageUrl || null
  );
  const [fileName, setFileName] = useState<string | null>(null);
  const [isFullViewOpen, setIsFullViewOpen] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    setPreview(currentImageUrl || null);
    if (!currentImageUrl) setFileName(null);
  }, [currentImageUrl]);

  const handleFileChange = useCallback(
    async (event: ChangeEvent<HTMLInputElement>) => {
      const file = event.target.files?.[0];
      if (!file) return;

      if (file.size > 5 * 1024 * 1024) {
        toast.error("Max file size is 5MB.");
        return;
      }
      if (
        !["image/jpeg", "image/png", "image/webp", "image/gif"].includes(
          file.type
        )
      ) {
        toast.error("Invalid file type. Please use JPG, PNG, WEBP, or GIF.");
        return;
      }

      const compressionToast = toast.loading("Compressing image...");

      try {
        // [ADD] Compression logic
        const options = {
          maxSizeMB: 1,
          maxWidthOrHeight: 1920,
          useWebWorker: true,
        };
        const compressedFile = await imageCompression(file, options);
        toast.success("Image compressed successfully!", {
          id: compressionToast,
        });

        const reader = new FileReader();
        reader.onloadend = () => {
          setPreview(reader.result as string);
          setFileName(compressedFile.name);
          onImageSelectedAction(compressedFile, reader.result as string);
        };
        reader.readAsDataURL(compressedFile);
      } catch (error) {
        toast.error("Failed to compress image.", { id: compressionToast });
        console.error(error);
      } finally {
        if (event.target) event.target.value = "";
      }
    },
    [onImageSelectedAction]
  );

  const handleClearImage = (e?: React.MouseEvent<HTMLButtonElement>) => {
    if (e) e.stopPropagation();
    setPreview(null);
    setFileName(null);
    onImageSelectedAction(null, null);
    if (fileInputRef.current) fileInputRef.current.value = "";
  };

  const getFallbackInitial = () => {
    if (!fallbackName) return "U";
    const parts = fallbackName.split(" ");
    if (parts.length === 1 && fallbackName.length > 0)
      return fallbackName.substring(0, 2).toUpperCase();
    if (parts.length > 1 && parts[0] && parts[parts.length - 1])
      return `${parts[0][0]}${parts[parts.length - 1][0]}`.toUpperCase();
    return fallbackName.substring(0, 2).toUpperCase() || "P";
  };

  const handleDropzoneClick = () => {
    if (!preview && fileInputRef.current) fileInputRef.current.click();
  };

  const imageToDisplayInDialog = preview || currentImageUrl;

  return (
    <div className={cn("space-y-2", className)}>
      {label && (
        <Label
          htmlFor="image-upload-input-trigger"
          className="text-base font-medium"
        >
          {label}
        </Label>
      )}
      <div
        className={cn(
          "relative group w-full border-2 border-dashed border-muted-foreground/30 rounded-lg p-1 flex flex-col items-center justify-center text-center transition-colors",
          "data-[has-preview=false]:hover:border-primary/70 data-[has-preview=false]:cursor-pointer",
          aspectRatio === "square" && "aspect-square max-w-xs mx-auto",
          aspectRatio === "portrait" && "aspect-[3/4] max-w-sm mx-auto",
          aspectRatio === "landscape" && "aspect-video max-w-md mx-auto",
          aspectRatio === "auto" && "min-h-[150px] max-w-md mx-auto",
          preview && "border-solid border-primary/30 p-0",
          dropzoneClassName
        )}
        onClick={handleDropzoneClick}
        data-has-preview={!!preview}
        id="image-upload-input-trigger"
      >
        <Input
          type="file"
          id="image-upload-file-input"
          accept="image/jpeg,image/png,image/webp,image/gif"
          onChange={handleFileChange}
          className="hidden"
          ref={fileInputRef}
          aria-label={`Upload ${label}`}
        />
        {preview ? (
          <div
            className={cn(
              "relative w-full h-full",
              imagePreviewContainerClassName
            )}
          >
            <Image
              src={preview}
              alt={fileName || label || "Selected preview"}
              layout="fill"
              objectFit="contain"
              className="rounded-md"
              unoptimized
            />
            <div className="absolute top-1.5 right-1.5 z-20 flex gap-1.5">
              <Dialog open={isFullViewOpen} onOpenChange={setIsFullViewOpen}>
                <DialogTrigger asChild>
                  <Button
                    variant="secondary"
                    size="icon"
                    className="h-7 w-7 opacity-80 group-hover:opacity-100 transition-opacity bg-background/70 hover:bg-background/90"
                    aria-label="View full image"
                    onClick={(e) => {
                      e.stopPropagation();
                      setIsFullViewOpen(true);
                    }}
                  >
                    <Maximize className="h-4 w-4" />
                  </Button>
                </DialogTrigger>
                <DialogContent className="w-[calc(100vw-4rem)] h-[calc(100vh-4rem)] max-w-[1200px] max-h-[900px] p-2 sm:p-4 flex items-center justify-center bg-background/95 dark:bg-background/80 backdrop-blur-md border-border shadow-2xl rounded-lg">
                  <DialogHeader className="sr-only">
                    <DialogTitle>
                      {fileName || label || "Image Preview"}
                    </DialogTitle>
                    <DialogDescription>
                      Full size preview of the selected image.
                    </DialogDescription>
                  </DialogHeader>
                  {/* <DialogClose className="absolute right-3 top-3 z-50 rounded-full bg-background/50 hover:bg-accent p-1.5 text-muted-foreground hover:text-accent-foreground transition-colors">
                    <XCircle className="h-5 w-5" />
                    <span className="sr-only">Close</span>
                  </DialogClose> */}
                  <div className="relative w-full h-full">
                    {imageToDisplayInDialog && (
                      <Image
                        src={imageToDisplayInDialog}
                        alt={fileName || label || "Full view"}
                        layout="fill"
                        objectFit="contain" // Key for fitting image within bounds
                        className="rounded"
                        unoptimized
                        priority
                      />
                    )}
                    {!imageToDisplayInDialog && (
                      <p className="text-muted-foreground text-center">
                        Image not available.
                      </p>
                    )}
                  </div>
                  {/* Footer with controls removed */}
                </DialogContent>
              </Dialog>
              <Button
                variant="destructive"
                size="icon"
                onClick={handleClearImage}
                className="h-7 w-7 opacity-80 group-hover:opacity-100 transition-opacity"
                aria-label="Clear image"
              >
                <XCircle className="h-4 w-4" />
              </Button>
            </div>
          </div>
        ) : (
          <label
            htmlFor="image-upload-file-input"
            className="flex flex-col items-center justify-center text-muted-foreground cursor-pointer p-4 w-full h-full"
          >
            {currentImageUrl && currentImageUrl !== "/placeholder.svg" ? (
              <Avatar
                className={cn(
                  "h-20 w-20 mb-2 border",
                  imagePreviewContainerClassName,
                  aspectRatio !== "square" && "h-24 w-24"
                )}
              >
                <AvatarImage
                  src={currentImageUrl}
                  alt={fallbackName || "Current Profile"}
                />
                <AvatarFallback className="text-3xl bg-muted">
                  {getFallbackInitial()}
                </AvatarFallback>
              </Avatar>
            ) : (
              <UploadCloud
                className={cn(
                  "h-10 w-10 mb-2",
                  aspectRatio !== "square" && "h-12 w-12"
                )}
              />
            )}
            <p className="text-sm mt-1">
              <span className="font-semibold text-primary">
                Click to upload
              </span>{" "}
              or drag & drop
            </p>
            <p className="text-xs mt-1">PNG, JPG, GIF, WEBP (MAX. 5MB)</p>
          </label>
        )}
      </div>
      {fileName && (
        <p className="text-xs text-muted-foreground text-center mt-1">
          File: {fileName}
        </p>
      )}
    </div>
  );
}
// END OF FILE: components/ui/image-uploader.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/input.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }
// END OF FILE: components/ui/input.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/label.tsx

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }
// END OF FILE: components/ui/label.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/list-view-skeleton.tsx

"use client";

import React from "react";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
} from "@/components/ui/card";
import { cn } from "@/lib/utils";
import { ViewMode } from "@/types/common";

interface ListViewSkeletonProps {
  viewMode: ViewMode;
  className?: string;
  gridItemCount?: number;
  listItemCount?: number;
}

export function ListViewSkeleton({
  viewMode,
  className,
  gridItemCount = 6,
  listItemCount = 5,
}: ListViewSkeletonProps) {
  if (viewMode === "grid") {
    return (
      <div
        className={cn(
          "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4",
          className
        )}
      >
        {Array.from({ length: gridItemCount }).map((_, i) => (
          <Card key={i} className="h-[220px]">
            <CardHeader className="flex flex-row items-center gap-4">
              <Skeleton className="h-12 w-12 rounded-lg" />
              <div className="space-y-2">
                <Skeleton className="h-4 w-[150px]" />
                <Skeleton className="h-3 w-[100px]" />
              </div>
            </CardHeader>
            <CardContent className="space-y-2">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-4/5" />
            </CardContent>
            <CardFooter>
              <Skeleton className="h-8 w-20 ml-auto" />
            </CardFooter>
          </Card>
        ))}
      </div>
    );
  }

  // Default to list view skeleton
  return (
    <div className={cn("rounded-md border", className)}>
      <div className="divide-y">
        {Array.from({ length: listItemCount }).map((_, i) => (
          <div key={i} className="flex items-center gap-4 p-4">
            <Skeleton className="h-10 w-10 rounded-md" />
            <div className="space-y-2 flex-1">
              <Skeleton className="h-4 w-3/5" />
              <Skeleton className="h-3 w-4/5" />
            </div>
            <Skeleton className="h-8 w-24" />
          </div>
        ))}
      </div>
    </div>
  );
}
// END OF FILE: components/ui/list-view-skeleton.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/multi-select.tsx

"use client";

import * as React from "react";
import { X } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Command, CommandGroup, CommandItem, CommandInput } from "@/components/ui/command";
import { cn } from "@/lib/utils";

export type MultiSelectOption = {
  value: string;
  label: string;
};

interface MultiSelectProps {
  options: MultiSelectOption[];
  selected: string[];
  onChange: (selected: string[]) => void;
  placeholder?: string;
  isLoading?: boolean;
  className?: string;
}

export function MultiSelect({ options, selected, onChange, placeholder = "Select...", isLoading, className }: MultiSelectProps) {
  const [open, setOpen] = React.useState(false);
  const selectedSet = new Set(selected);

  const handleUnselect = (value: string) => {
    onChange(selected.filter((s) => s !== value));
  };

  return (
    <Command className={cn("overflow-visible bg-transparent", className)}>
      <div className="group rounded-md border border-input px-3 py-2 text-sm ring-offset-background focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2">
        <div className="flex flex-wrap gap-1">
          {selected.map((value) => {
            const option = options.find((opt) => opt.value === value);
            return (
              <Badge key={value} variant="secondary">
                {option?.label || value}
                <button
                  className="ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2"
                  onKeyDown={(e) => { if (e.key === "Enter") handleUnselect(value); }}
                  onMouseDown={(e) => { e.preventDefault(); e.stopPropagation(); }}
                  onClick={() => handleUnselect(value)}
                >
                  <X className="h-3 w-3 text-muted-foreground hover:text-foreground" />
                </button>
              </Badge>
            );
          })}
          <CommandInput
            placeholder={placeholder}
            onFocus={() => setOpen(true)}
            onBlur={() => setOpen(false)}
            className="flex-1 border-0 p-0 shadow-none focus-visible:ring-0"
          />
        </div>
      </div>
      <div className="relative mt-2">
        {open && (
          <div className="absolute top-0 z-10 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none animate-in">
            <CommandGroup className="h-full overflow-auto">
              {isLoading ? (
                <CommandItem disabled>Loading...</CommandItem>
              ) : (
                options.map((option) => (
                  <CommandItem
                    key={option.value}
                    onMouseDown={(e) => { e.preventDefault(); e.stopPropagation(); }}
                    onSelect={() => {
                      onChange(selectedSet.has(option.value)
                        ? selected.filter((s) => s !== option.value)
                        : [...selected, option.value]
                      );
                      setOpen(true);
                    }}
                    className={"cursor-pointer"}
                  >
                    {option.label}
                  </CommandItem>
                ))
              )}
            </CommandGroup>
          </div>
        )}
      </div>
    </Command>
  );
}// END OF FILE: components/ui/multi-select.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/page-header.tsx

import React from 'react';
import { cn } from '@/lib/utils';

interface PageHeaderProps {
  title: string;
  description?: string;
  action?: React.ReactNode;
  className?: string;
}

export function PageHeader({ title, description, action, className }: PageHeaderProps) {
  return (
    <header className={cn("flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4", className)}>
      <div>
        <h1 className="text-2xl font-bold tracking-tight">{title}</h1>
        {description && (
          <p className="text-muted-foreground mt-1">{description}</p>
        )}
      </div>
      {action && <div className="flex-shrink-0">{action}</div>}
    </header>
  );
}// END OF FILE: components/ui/page-header.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/popover.tsx

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
// END OF FILE: components/ui/popover.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/progress.tsx

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }
// END OF FILE: components/ui/progress.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/radio-group.tsx

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn("grid gap-3", className)}
      {...props}
    />
  )
}

function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        "border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <CircleIcon className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
}

export { RadioGroup, RadioGroupItem }
// END OF FILE: components/ui/radio-group.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/scroll-area.tsx

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }
// END OF FILE: components/ui/scroll-area.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/select.tsx

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
// END OF FILE: components/ui/select.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/separator.tsx

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }
// END OF FILE: components/ui/separator.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/skeleton.tsx

import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }
// END OF FILE: components/ui/skeleton.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/slider.tsx

"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }
// END OF FILE: components/ui/slider.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/sonner.tsx

"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  )
}

export { Toaster }
// END OF FILE: components/ui/sonner.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/switch.tsx

"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }
// END OF FILE: components/ui/switch.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/table.tsx

"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
// END OF FILE: components/ui/table.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/tabs.tsx

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }
// END OF FILE: components/ui/tabs.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/textarea.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }
// END OF FILE: components/ui/textarea.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/tooltip.tsx

"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
// END OF FILE: components/ui/tooltip.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/user-nav.tsx

"use client";

import { LogOut } from "lucide-react"; // Removed Link and other icons for simplicity
import { useSettings } from "@/contexts/settings-context";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import Link from "next/link"; // Added Link back for explicit settings link
import { Settings as SettingsIcon, User as UserIcon } from "lucide-react"; // Added UserIcon

interface UserNavProps {
  onLogoutAction: () => void;
}

export function UserNav({ onLogoutAction }: UserNavProps) {
  const { settings } = useSettings();

  const avatarFallback = settings.fullName
    ? settings.fullName
        .split(" ")
        .map((n) => n[0])
        .join("")
        .toUpperCase()
    : settings.username
    ? settings.username.charAt(0).toUpperCase()
    : "U";

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-9 w-9 rounded-full">
          <Avatar className="h-8 w-8">
            <AvatarImage
              src={settings.avatar}
              alt={settings.fullName || "User Avatar"}
            />
            <AvatarFallback>{avatarFallback}</AvatarFallback>
          </Avatar>
          <span className="sr-only">Open user menu</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">
              {settings.fullName || settings.username || "User"}
            </p>
            <p className="text-xs leading-none text-muted-foreground">
              {settings.email || "No email provided"}
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        {/* Link to the "Account" tab of the unified settings page */}
        <DropdownMenuItem asChild>
          <Link href="/settings?tab=account">
            <UserIcon className="mr-2 h-4 w-4" />
            <span>My Account</span>
          </Link>
        </DropdownMenuItem>
        <DropdownMenuItem asChild>
          <Link href="/settings">
            <SettingsIcon className="mr-2 h-4 w-4" />
            <span>All Settings</span>
          </Link>
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          onClick={onLogoutAction}
          className="cursor-pointer text-destructive focus:bg-destructive/10 focus:text-destructive"
        >
          <LogOut className="mr-2 h-4 w-4" />
          <span>Log out</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
// END OF FILE: components/user-nav.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/contexts/active-agency-context.tsx

"use client";

import React, {
  createContext,
  useContext,
  useState,
  useCallback,
  ReactNode,
  useEffect,
} from "react";
import { AgencyDto } from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { useActiveOrganization } from "./active-organization-context";
import { toast } from "sonner";
import { useRouter } from "next/navigation";

interface ActiveAgencyContextType {
  activeAgencyId: string | null;
  setActiveAgency: (
    agencyId: string | null,
    agencyDetails?: AgencyDto
  ) => Promise<void>;
  activeAgencyDetails: AgencyDto | null;
  agenciesForCurrentOrg: AgencyDto[];
  isLoadingAgencies: boolean;
  isLoadingAgencyDetails: boolean;
  isAgencyContextInitialized: boolean;
  fetchAgenciesForCurrentOrg: () => Promise<void>;
  clearActiveAgency: () => void;
}

const ActiveAgencyContext = createContext<ActiveAgencyContextType | undefined>(
  undefined
);

export const ActiveAgencyProvider = ({ children }: { children: ReactNode }) => {
  const { activeOrganizationId, isOrgContextInitialized } =
    useActiveOrganization();
  const router = useRouter();

  const [activeAgencyId, setActiveAgencyIdState] = useState<string | null>(
    null
  );
  const [activeAgencyDetails, setActiveAgencyDetailsState] =
    useState<AgencyDto | null>(null);
  const [agenciesForCurrentOrg, setAgenciesForCurrentOrg] = useState<
    AgencyDto[]
  >([]);

  const [isLoadingAgencies, setIsLoadingAgencies] = useState(true);
  const [isLoadingAgencyDetails, setIsLoadingAgencyDetails] = useState(false);
  const [isAgencyContextInitialized, setIsAgencyContextInitialized] =
    useState(false);

  const fetchAgenciesForCurrentOrg = useCallback(async () => {
    if (!activeOrganizationId) {
      setAgenciesForCurrentOrg([]);
      setIsLoadingAgencies(false);
      return;
    }
    setIsLoadingAgencies(true);
    try {
      const agencies = await organizationRepository.getAgencies(
        activeOrganizationId
      );
      setAgenciesForCurrentOrg(agencies || []);
    } catch (error) {
      toast.error("Could not load agencies for the organization.");
      setAgenciesForCurrentOrg([]);
    } finally {
      setIsLoadingAgencies(false);
      setIsAgencyContextInitialized(true);
    }
  }, [activeOrganizationId]);

  const fetchAndSetAgencyDetails = useCallback(
    async (agencyId: string) => {
      if (!activeOrganizationId) return;
      setIsLoadingAgencyDetails(true);
      try {
        const details = await organizationRepository.getAgencyById(
          activeOrganizationId,
          agencyId
        );
        setActiveAgencyDetailsState(details);
        if (!details) {
          toast.error(`Could not load details for agency ID: ${agencyId}.`);
          setActiveAgencyIdState(null); // Clear ID if details fail
        }
      } catch (error) {
        toast.error("Failed to fetch agency details.");
        setActiveAgencyDetailsState(null);
        setActiveAgencyIdState(null);
      } finally {
        setIsLoadingAgencyDetails(false);
      }
    },
    [activeOrganizationId]
  );

  const setActiveAgency = useCallback(
    async (agencyId: string | null, agencyDetails?: AgencyDto) => {
      setActiveAgencyIdState(agencyId);
      if (agencyDetails && agencyId === agencyDetails.agency_id) {
        setActiveAgencyDetailsState(agencyDetails);
      } else if (agencyId) {
        await fetchAndSetAgencyDetails(agencyId);
      } else {
        setActiveAgencyDetailsState(null);
      }
    },
    [fetchAndSetAgencyDetails]
  );

  const clearActiveAgency = useCallback(() => {
    setActiveAgencyIdState(null);
    setActiveAgencyDetailsState(null);
  }, []);

  useEffect(() => {
    // When the parent organization context is ready, fetch the list of its agencies.
    if (isOrgContextInitialized) {
      fetchAgenciesForCurrentOrg();
    }
  }, [isOrgContextInitialized, fetchAgenciesForCurrentOrg]);

  return (
    <ActiveAgencyContext.Provider
      value={{
        activeAgencyId,
        setActiveAgency,
        activeAgencyDetails,
        agenciesForCurrentOrg,
        isLoadingAgencies,
        isLoadingAgencyDetails,
        isAgencyContextInitialized,
        fetchAgenciesForCurrentOrg,
        clearActiveAgency,
      }}
    >
      {children}
    </ActiveAgencyContext.Provider>
  );
};

export const useActiveAgency = (): ActiveAgencyContextType => {
  const context = useContext(ActiveAgencyContext);
  if (context === undefined) {
    throw new Error(
      "useActiveAgency must be used within an ActiveAgencyProvider"
    );
  }
  return context;
};
// END OF FILE: contexts/active-agency-context.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/contexts/active-organization-context.tsx

"use client";

import React, {
  createContext,
  useContext,
  useState,
  useCallback,
  ReactNode,
  useEffect,
} from "react";
import { AgencyDto, OrganizationDto } from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { useSession } from "next-auth/react";
import { toast } from "sonner";
import { useLocalStorage } from "@/hooks/use-local-storage";
import { useRouter, usePathname } from "next/navigation";

interface ActiveOrganizationContextType {
  activeOrganizationId: string | null;
  activeOrganizationDetails: OrganizationDto | null;
  isLoadingOrgDetails: boolean;
  userOrganizations: OrganizationDto[];
  isLoadingUserOrgs: boolean;
  isOrgContextInitialized: boolean;
  setActiveOrganization: (
    orgId: string | null,
    orgDetails?: OrganizationDto
  ) => Promise<void>;
  fetchUserOrganizationsList: () => Promise<void>;
  fetchAgenciesForCurrentOrg: () => Promise<void>;
  fetchAndSetOrganizationDetails: (
    id: string
  ) => Promise<OrganizationDto | null>;
  activeAgencyId: string | null;
  activeAgencyDetails: AgencyDto | null;
  isLoadingAgencyDetails: boolean;
  setActiveAgency: (
    agencyId: string | null,
    agencyDetails?: AgencyDto
  ) => Promise<void>;
  agenciesForCurrentOrg: AgencyDto[];
  isLoadingAgencies: boolean;
  clearActiveOrganization: () => void;
  clearActiveAgency: () => void;
}

const ActiveOrganizationContext = createContext<
  ActiveOrganizationContextType | undefined
>(undefined);

export const ActiveOrganizationProvider = ({
  children,
}: {
  children: ReactNode;
}) => {
  const {
    data: session,
    status: sessionStatus,
    update: updateSession,
  } = useSession();
  const router = useRouter();
  const pathname = usePathname();

  const [activeOrganizationId, setActiveOrganizationIdState] = useLocalStorage<
    string | null
  >("activeOrgId", null);
  const [activeOrganizationDetails, setActiveOrganizationDetailsState] =
    useLocalStorage<OrganizationDto | null>("activeOrgDetails", null);
  const [activeAgencyId, setActiveAgencyIdState] = useLocalStorage<
    string | null
  >("activeAgencyId", null);
  const [activeAgencyDetails, setActiveAgencyDetailsState] =
    useLocalStorage<AgencyDto | null>("activeAgencyDetails", null);

  const [isLoadingOrgDetails, setIsLoadingOrgDetails] =
    useState<boolean>(false);
  const [userOrganizations, setUserOrganizations] = useState<OrganizationDto[]>(
    []
  );
  const [isLoadingUserOrgs, setIsLoadingUserOrgs] = useState<boolean>(true);
  const [isOrgContextInitialized, setIsOrgContextInitialized] =
    useState<boolean>(false);
  const [agenciesForCurrentOrg, setAgenciesForCurrentOrg] = useState<
    AgencyDto[]
  >([]);
  const [isLoadingAgencies, setIsLoadingAgencies] = useState(false);
  const [isLoadingAgencyDetails, setIsLoadingAgencyDetails] = useState(false);

  const clearActiveOrganization = useCallback(() => {
    setActiveOrganizationIdState(null);
    setActiveOrganizationDetailsState(null);
    setActiveAgencyIdState(null);
    setActiveAgencyDetailsState(null);
    setAgenciesForCurrentOrg([]);
  }, [
    setActiveOrganizationIdState,
    setActiveOrganizationDetailsState,
    setActiveAgencyIdState,
    setActiveAgencyDetailsState,
  ]);

  const clearActiveAgency = useCallback(() => {
    setActiveAgencyIdState(null);
    setActiveAgencyDetailsState(null);
  }, [setActiveAgencyIdState, setActiveAgencyDetailsState]);

  const fetchAndSetOrganizationDetails = useCallback(
    async (id: string): Promise<OrganizationDto | null> => {
      setIsLoadingOrgDetails(true);
      try {
        const details = await organizationRepository.getOrganizationById(id);
        setActiveOrganizationDetailsState(details);
        return details;
      } catch (error) {
        toast.error("Could not load organization details. Clearing selection.");
        clearActiveOrganization();
        return null;
      } finally {
        setIsLoadingOrgDetails(false);
      }
    },
    [setActiveOrganizationDetailsState, clearActiveOrganization]
  );

  const setActiveOrganization = useCallback(
    async (orgId: string | null, orgDetails?: OrganizationDto) => {
      clearActiveAgency();
      setActiveOrganizationIdState(orgId);
      await updateSession({ activeOrganizationId: orgId });

      if (orgDetails && orgId === orgDetails.organization_id) {
        setActiveOrganizationDetailsState(orgDetails);
      } else if (orgId) {
        await fetchAndSetOrganizationDetails(orgId);
      } else {
        setActiveOrganizationDetailsState(null);
      }
    },
    [
      clearActiveAgency,
      fetchAndSetOrganizationDetails,
      setActiveOrganizationIdState,
      setActiveOrganizationDetailsState,
      updateSession,
    ]
  );

  const fetchUserOrganizationsList = useCallback(async () => {
    if (!session?.user.id) {
      setIsLoadingUserOrgs(false);
      setIsOrgContextInitialized(true);
      return;
    }
    setIsLoadingUserOrgs(true);
    try {
      const myOrgs = await organizationRepository.getMyOrganizations();
      setUserOrganizations(myOrgs || []);

      const hasOrgs = myOrgs && myOrgs.length > 0;
      const isCurrentlyBA = !!session.user.businessActorId;

      if (hasOrgs && !isCurrentlyBA) {
        await updateSession({ businessActorId: session.user.id });
        toast.info("Business workspace activated!");
      } else if (!hasOrgs && isCurrentlyBA) {
        await updateSession({ businessActorId: null });
        clearActiveOrganization();
      }

      if (hasOrgs) {
        const storedOrgId = localStorage
          .getItem("activeOrgId")
          ?.replace(/"/g, "");
        const orgExists = myOrgs.some(
          (org) => org.organization_id === storedOrgId
        );
        if (storedOrgId && orgExists) {
          if (!activeOrganizationId || activeOrganizationId !== storedOrgId) {
            await setActiveOrganization(storedOrgId);
          }
        } else {
          await setActiveOrganization(myOrgs[0].organization_id!, myOrgs[0]);
        }
      } else {
        clearActiveOrganization();
        if (pathname.startsWith("/business-actor") && !pathname.startsWith("/business-actor/organization/create")) {
          router.push("/dashboard");
          toast.error(
            "You must have atleast organization to access the business workspace."
          );
        }
      }
    } catch (error) {
      // toast.error("Could not load your organizations.");
      setUserOrganizations([]);
      clearActiveOrganization();
    } finally {
      setIsLoadingUserOrgs(false);
      setIsOrgContextInitialized(true);
    }
  }, [
    session,
    pathname,
    router,
    activeOrganizationId,
    setActiveOrganization,
    clearActiveOrganization,
    updateSession,
  ]);

  const fetchAgenciesForCurrentOrg = useCallback(async () => {
    if (!activeOrganizationId) return;
    setIsLoadingAgencies(true);
    try {
      const agencies = await organizationRepository.getAgencies(
        activeOrganizationId
      );
      setAgenciesForCurrentOrg(agencies || []);
    } catch (error) {
      toast.error("Could not load agencies for this organization.");
    } finally {
      setIsLoadingAgencies(false);
    }
  }, [activeOrganizationId]);

  const fetchAndSetAgencyDetails = useCallback(
    async (agencyId: string) => {
      if (!activeOrganizationId) return;
      setIsLoadingAgencyDetails(true);
      try {
        const details = await organizationRepository.getAgencyById(
          activeOrganizationId,
          agencyId
        );
        setActiveAgencyDetailsState(details);
      } catch (error) {
        toast.error("Failed to fetch agency details.");
      } finally {
        setIsLoadingAgencyDetails(false);
      }
    },
    [activeOrganizationId, setActiveAgencyDetailsState]
  );

  const setActiveAgency = useCallback(
    async (agencyId: string | null, agencyDetails?: AgencyDto) => {
      setActiveAgencyIdState(agencyId);
      if (agencyDetails && agencyId === agencyDetails.agency_id) {
        setActiveAgencyDetailsState(agencyDetails);
      } else if (agencyId) {
        await fetchAndSetAgencyDetails(agencyId);
      } else {
        setActiveAgencyDetailsState(null);
      }
    },
    [
      fetchAndSetAgencyDetails,
      setActiveAgencyIdState,
      setActiveAgencyDetailsState,
    ]
  );

  useEffect(() => {
    if (sessionStatus === "authenticated") {
      fetchUserOrganizationsList();
    } else if (sessionStatus === "unauthenticated") {
      clearActiveOrganization();
      setIsLoadingUserOrgs(false);
      setIsOrgContextInitialized(true);
    }
  }, [sessionStatus, fetchUserOrganizationsList, clearActiveOrganization]);

  useEffect(() => {
    if (activeOrganizationId) {
      fetchAgenciesForCurrentOrg();
    } else {
      setAgenciesForCurrentOrg([]);
    }
  }, [activeOrganizationId, fetchAgenciesForCurrentOrg]);

  return (
    <ActiveOrganizationContext.Provider
      value={{
        activeOrganizationId,
        activeOrganizationDetails,
        isLoadingOrgDetails,
        userOrganizations,
        isLoadingUserOrgs,
        isOrgContextInitialized,
        setActiveOrganization,
        fetchUserOrganizationsList,
        fetchAgenciesForCurrentOrg,
        fetchAndSetOrganizationDetails,
        activeAgencyId,
        activeAgencyDetails,
        isLoadingAgencyDetails,
        setActiveAgency,
        agenciesForCurrentOrg,
        isLoadingAgencies,
        clearActiveOrganization,
        clearActiveAgency,
      }}
    >
      {children}
    </ActiveOrganizationContext.Provider>
  );
};

export const useActiveOrganization = (): ActiveOrganizationContextType => {
  const context = useContext(ActiveOrganizationContext);
  if (context === undefined) {
    throw new Error(
      "useActiveOrganization must be used within an ActiveOrganizationProvider"
    );
  }
  return context;
};
// END OF FILE: contexts/active-organization-context.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/contexts/settings-context.tsx

"use client";

import React, {
  createContext,
  useContext,
  useEffect,
  useState,
  useCallback,
  ReactNode,
} from "react";
import { useSession } from "next-auth/react";
import { UserDto, UserInfo } from "@/types/auth";
import {
  UserPreferencesDto,
  UserDisplayPreferences,
  UserNotificationPreferences,
  UserPrivacyPreferences,
  UpdateUserPreferencesRequest,
} from "@/types/user-preferences";
import { authRepository } from "@/lib/data-repo/auth";
import { userPreferencesRepository } from "@/lib/data-repo/user-preferences";
import { toast } from "sonner";

// Combined state that the UI will consume
export interface CombinedUserSettings
  extends Omit<UserDisplayPreferences, "profilePhotoUrl"> {
  userId?: string;
  username?: string;
  fullName: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  avatar: string;
  emailVerified?: boolean;
  phoneVerified?: boolean;
  notifications: UserNotificationPreferences;
  privacy: UserPrivacyPreferences;
}

const defaultDisplayPrefs: UserDisplayPreferences = {
  language: "en", currency: "usd", dateFormat: "mm-dd-yyyy", fontSize: 16,
  theme: "system", layout: "default", timezone: "utc-8", profilePhotoUrl: "",
};

const defaultCombinedSettings: CombinedUserSettings = {
  userId: undefined, username: "Guest", fullName: "Guest User", firstName: "Guest", lastName: "User",
  email: "", phone: "", avatar: defaultDisplayPrefs.profilePhotoUrl!, emailVerified: false, phoneVerified: false,
  ...defaultDisplayPrefs,
  notifications: { email: true, push: true, sms: false, accountActivity: true, newFeatures: true, marketing: false, frequency: "daily", quietHoursStart: "22:00", quietHoursEnd: "07:00" },
  privacy: { analyticsSharing: true, personalizedAds: false, visibility: "private", dataRetention: "1-year" },
};

interface SettingsContextType {
  settings: CombinedUserSettings;
  isLoadingSettings: boolean;
  fetchAndSetInitialSettings: () => Promise<void>;
  updateUserProfile: (profileData: Partial<Pick<UserDto, "first_name" | "last_name" | "phone_number">>) => Promise<void>;
  updateDisplayPreferences: (prefs: Partial<UserDisplayPreferences>) => Promise<void>;
  updateNotificationPreferences: (prefs: Partial<UserNotificationPreferences>) => Promise<void>;
  updatePrivacyPreferences: (prefs: Partial<UserPrivacyPreferences>) => Promise<void>;
}

const SettingsContext = createContext<SettingsContextType | undefined>(undefined);

export function SettingsProvider({ children }: { children: ReactNode }) {
  const { data: session, status: sessionStatus } = useSession();
  const [settings, setSettings] = useState<CombinedUserSettings>(defaultCombinedSettings);
  const [isLoadingSettings, setIsLoadingSettings] = useState<boolean>(true);

  const fetchAndSetInitialSettings = useCallback(async () => {
    if (sessionStatus === "authenticated" && session?.user?.id) {
      setIsLoadingSettings(true);
      try {
        const userFromSession = session.user;
        const profileData: UserInfo = { // Construct UserInfo from our detailed session user
          id: userFromSession.id,
          username: userFromSession.username,
          first_name: userFromSession.first_name,
          last_name: userFromSession.last_name,
          email: userFromSession?.email || '',
          phone_number: userFromSession.phone_number,
          email_verified: userFromSession.email_verified,
          phone_number_verified: userFromSession.phone_number_verified,
        };

        // This part remains the same, it fetches preferences based on user ID
        let prefsDto = await userPreferencesRepository.getUserPreferences(userFromSession.id);
        if (!prefsDto) {
          const defaultPrefsPayload: UpdateUserPreferencesRequest = { display: defaultDisplayPrefs, notifications: defaultCombinedSettings.notifications, privacy: defaultCombinedSettings.privacy };
          prefsDto = await userPreferencesRepository.updateUserPreferences(userFromSession.id, defaultPrefsPayload);
        }

        // Combine the detailed profile data from session with fetched preferences
        setSettings({
          userId: profileData.id,
          username: profileData.username || "",
          fullName: `${profileData.first_name || ""} ${profileData.last_name || ""}`.trim() || userFromSession.name || "User",
          firstName: profileData.first_name || "",
          lastName: profileData.last_name || "",
          email: profileData.email || "",
          phone: profileData.phone_number || "",
          avatar: prefsDto.display.profilePhotoUrl || userFromSession.image || defaultDisplayPrefs.profilePhotoUrl!,
          emailVerified: profileData.email_verified,
          phoneVerified: profileData.phone_number_verified,
          ...prefsDto.display,
          notifications: prefsDto.notifications,
          privacy: prefsDto.privacy,
        });

      } catch (error) {
        toast.error("Could not load your settings.");
      } finally {
        setIsLoadingSettings(false);
      }
    } else if (sessionStatus === "unauthenticated") {
      setSettings(defaultCombinedSettings);
      setIsLoadingSettings(false);
    }
  }, [session, sessionStatus]);

  useEffect(() => {
    fetchAndSetInitialSettings();
  }, [fetchAndSetInitialSettings]);

  // The update functions remain the same as they operate on the backend, not the session directly.
  const updateUserProfile = async (profileData: Partial<Pick<UserDto, "first_name" | "last_name" | "phone_number">>) => {
    // ... implementation unchanged
    toast.info("Profile update simulation...");
  };
  const updatePreferencesSegment = async <K extends keyof UpdateUserPreferencesRequest>(segmentName: K, prefsDataToUpdate: UpdateUserPreferencesRequest[K]) => {
    // ... implementation unchanged
    if (!session?.user?.id) return;
    toast.info(`${String(segmentName)} preferences update simulation...`);
  };
  const updateDisplayPreferences = (prefs: Partial<UserDisplayPreferences>) => updatePreferencesSegment("display", prefs);
  const updateNotificationPreferences = (prefs: Partial<UserNotificationPreferences>) => updatePreferencesSegment("notifications", prefs);
  const updatePrivacyPreferences = (prefs: Partial<UserPrivacyPreferences>) => updatePreferencesSegment("privacy", prefs);

  return (
    <SettingsContext.Provider value={{ settings, isLoadingSettings, fetchAndSetInitialSettings, updateUserProfile, updateDisplayPreferences, updateNotificationPreferences, updatePrivacyPreferences }}>
      {children}
    </SettingsContext.Provider>
  );
}

export function useSettings() {
  const context = useContext(SettingsContext);
  if (context === undefined) throw new Error("useSettings must be used within a SettingsProvider");
  return context;
}
// END OF FILE: contexts/settings-context.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/.env

NEXTAUTH_SECRET=i7Cuf9Io7Y6p0gmI1l6FdUo/WDfrqKCFAq+iWhR2Jo=
# .env.local
NEXTAUTH_URL=http://localhost:3000
NEXT_PUBLIC_URL=http://localhost:3000

# Base URLs for REMOTE Yowyob APIs
NEXT_PUBLIC_YOWYOB_AUTH_SERVICE_BASE_URL=https://gateway.yowyob.com/auth-service
NEXT_PUBLIC_YOWYOB_ORGANIZATION_SERVICE_BASE_URL=https://gateway.yowyob.com/organization-service

NEXT_PUBLIC_YOWYOB_RESOURCE_SERVICE_BASE_URL=https://gateway.yowyob.com/resource-service
NEXT_PUBLIC_YOWYOB_PRODUCT_STATE_SERVICE_BASE_URL=https://gateway.yowyob.com/product-management-service
NEXT_PUBLIC_YOWYOB_MEDIA_SERVICE_BASE_URL=https://gateway.yowyob.com/media-service

# Client Credentials for Yowyob Auth Service (used by remote auth repository)
# NEXT_PUBLIC_AUTH_SERVICE_BEARER_TOKEN="eyJkZXYucmV4aWppZS5zaWduaW5nLmtleSI6IjgwOTE3Y2VjMzI4MmIzN2MzMTNjN2YzOSIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2IiwianRpIjoiTVRjMU1UY3lOemN6TlRVMk1qb3lPRGd3TVRkallUUmgiLCJraWQiOiIzODdjOWEyOC0zODBlLTRmZWUtYTVjOC0wYTEwMzE2ZTAwNGYifQ.eyJzdWIiOiJ0ZXN0LWNsaWVudCIsImF1ZCI6InRlc3QtY2xpZW50IiwibmJmIjoxNzUxNzI3NzM1LCJhdXRoX3RpbWUiOjE3NTE3Mjc3MzUsImlzcyI6Imh0dHA6Ly9hdXRoLXNlcnZpY2U6ODA4MC9vcGVuaWQiLCJzY29wZXMiOlsid3JpdGUiLCJyZWFkIiwibWFuYWdlX2FwaSJdLCJleHAiOjE3NTE3Mjg2MzUsImlhdCI6MTc1MTcyNzczNSwianRpIjoiTVRjMU1UY3lOemN6TlRVMk1qb3lPRGd3TVRkallUUmgifQ.t1UiFj5AFn_DU-lKNHGe8GzXLNV58Qk3FQgDkj6aWMbB67CjVAAxYaWFsJlBoFrU5b_9MnfUN7ffLMdLzg2cDIHrJ-9WCA6RA0WSVoGX0Nd6DUgrAPHBdrhxf29lNgFr4HwsL0mqCpBDiDM_OcK92KAu7zkBnCoO9gDWJAuXxCUH7z20YPrKZKsEDRyA6Smv1Isl5fdluvt3rNq-oMv1_Wa2j_nag9qHtbc3QIX3J7-qMH08FPPZi-cEG1CjwXQbXERPI3JfRLfnS568dfEkaUtGHWI5tNYD2BNz4WmaRUyR7420rUvinOTPnO8xtlxwcwkOn7pSN10oiqo8xSti6w"

NEXT_PUBLIC_YOWYOB_AUTH_CLIENT_ID="test-client"
NEXT_PUBLIC_YOWYOB_AUTH_CLIENT_SECRET="secret"


# Data Source Configuration
# 'local' = fetch JSON from /data/* and operate in memory
# 'remote' = use actual Yowyob APIs via apiClient.ts
NEXT_PUBLIC_DATA_SOURCE=remote
# NEXT_PUBLIC_DATA_SOURCE=remote

NEXT_PUBLIC_API_BASE_URL=https://gateway.yowyob.com
NEXT_PUBLIC_YOWYOB_APP_PUBLIC_KEY="api_1752399371114_be8f39f0.iExfpQc4nK9ZWcfX4TzXW9sz-_vx1mR_"


// END OF FILE: .env

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/env.example

NEXTAUTH_SECRET=i7Cuf9Io7Y6p0gmI1l6FdUo/WDfrqKCFAq+iWhR2Jo=
# .env.local
NEXTAUTH_URL=http://localhost:3000
NEXT_PUBLIC_URL=http://localhost:3000

# Base URLs for REMOTE Yowyob APIs
NEXT_PUBLIC_YOWYOB_AUTH_SERVICE_BASE_URL=https://gateway.yowyob.com/auth-service
NEXT_PUBLIC_YOWYOB_ORGANIZATION_SERVICE_BASE_URL=https://gateway.yowyob.com/organization-service

NEXT_PUBLIC_YOWYOB_RESOURCE_SERVICE_BASE_URL=https://gateway.yowyob.com/resource-service
NEXT_PUBLIC_YOWYOB_PRODUCT_STATE_SERVICE_BASE_URL=https://gateway.yowyob.com/product-management-service
NEXT_PUBLIC_YOWYOB_MEDIA_SERVICE_BASE_URL=https://gateway.yowyob.com/media-service

# Client Credentials for Yowyob Auth Service (used by remote auth repository)
# NEXT_PUBLIC_AUTH_SERVICE_CLIENT_ID=test-client
# NEXT_PUBLIC_AUTH_SERVICE_CLIENT_SECRET=secret
NEXT_PUBLIC_AUTH_SERVICE_BEARER_TOKEN=


# Data Source Configuration
# 'local' = fetch JSON from /data/* and operate in memory
# 'remote' = use actual Yowyob APIs via apiClient.ts
NEXT_PUBLIC_DATA_SOURCE=local

NEXT_PUBLIC_API_BASE_URL=https://gateway.yowyob.com
// END OF FILE: env.example

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/eslint.config.mjs

import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    rules: {
      "@typescript-eslint/no-unused-vars": "off",
      "@typescript-eslint/no-explicit-any": "off",
      "react/no-unescaped-entities": "off",
      "react/display-name": "off",
      "react-hooks/exhaustive-deps": "off",
      "react-hooks/rules-of-hooks" : "off"


    },
  },
];

export default eslintConfig;
// END OF FILE: eslint.config.mjs

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/.gitignore

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/
*.puml

# production
/build

!.env.example

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# Local JSON database files
lib/data-repo/local-store/json-data/// END OF FILE: .gitignore

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/hooks/use-command-palette.ts

import { useEffect, useState } from 'react';

export const useCommandPalette = () => {
  const [isOpen, setIsOpen] = useState(false);

  useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        setIsOpen((open) => !open);
      }
    };

    document.addEventListener('keydown', down);
    return () => document.removeEventListener('keydown', down);
  }, []);

  return { isOpen, setIsOpen };
};// END OF FILE: hooks/use-command-palette.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/hooks/use-debounce.ts

import { useState, useEffect } from 'react';

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}// END OF FILE: hooks/use-debounce.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/hooks/use-local-storage.ts

import { useState, useEffect } from 'react';

function getStorageValue<T>(key: string, defaultValue: T): T {
  // getting stored value
  if (typeof window !== 'undefined') {
    const saved = localStorage.getItem(key);
    if (saved) {
      try {
        return JSON.parse(saved);
      } catch (error) {
        console.error("Error parsing localStorage key:", key, error);
        return defaultValue;
      }
    }
  }
  return defaultValue;
}

export function useLocalStorage<T>(key: string, defaultValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {
  const [value, setValue] = useState<T>(() => {
    return getStorageValue(key, defaultValue);
  });

  useEffect(() => {
    // storing value
    localStorage.setItem(key, JSON.stringify(value));
  }, [key, value]);

  return [value, setValue];
}// END OF FILE: hooks/use-local-storage.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/hooks/use-mouse-position.ts

// hooks/use-mouse-position.ts
import { useState, useEffect } from 'react';

export function useMousePosition() {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

  useEffect(() => {
    const updateMousePosition = (ev: MouseEvent) => {
      setMousePosition({ x: ev.clientX, y: ev.clientY });
    };
    window.addEventListener('mousemove', updateMousePosition);
    return () => {
      window.removeEventListener('mousemove', updateMousePosition);
    };
  }, []);

  return mousePosition;
}// END OF FILE: hooks/use-mouse-position.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/apiClient.ts

import { getSession } from "next-auth/react";

import {
  AuthRequest, CreateUserRequest, LoginResponse, UserDto, UserInfo,
  RoleDto, CreateRoleRequest, UpdateRoleRequest,
  PermissionDto, CreatePermissionRequest, UpdatePermissionRequest,
  RolePermissionDto, RbacResource, ApiResponseBoolean
} from "@/types/auth";
import {
  CreateOrganizationRequest, UpdateOrganizationRequest, UpdateOrganizationStatusRequest,
  AddressDto, ContactDto, CreateAddressRequest, UpdateAddressRequest, ContactableType, AddressableType, CreateContactRequest, UpdateContactRequest, BusinessDomainDto, GetBusinessDomainRequest,
  AffectEmployeeRequest,
  AgencyDto,
  ApplicationDto,
  ApplicationKeyDto,
  BusinessActorDto,
  BusinessActorType,
  CertificationDto,
  CreateAgencyRequest,
  CreateApplicationRequest,
  CreateBusinessActorRequest,
  CreateBusinessDomainRequest,
  CreateCertificationRequest,
  CreateEmployeeRequest,
  CreatePracticalInformationRequest,
  CreateProviderRequest,
  EmployeeDto,
  ImageDto,
  PracticalInformationDto,
  ProviderDto,
  UpdateAgencyRequest,
  UpdateAgencyStatusRequest,
  UpdateBusinessActorRequest,
  UpdateBusinessDomainRequest,
  UpdateCertificationRequest,
  UpdateEmployeeRequest,
  UpdatePracticalInformationRequest,
  EmployeeResponse,
  AffectCustomerRequest,
  AffectProviderRequest,
  CreateCustomerRequest,
  CreateProposedActivityRequest,
  CreateProspectRequest,
  CreateSalesPersonRequest,
  CreateThirdPartyRequest,
  CustomerDto,
  GetThirdPartyRequest,
  ProposedActivityDto,
  ProspectDto,
  SalesPersonDto,
  ThirdPartyDto,
  ThirdPartyType,
  UpdateCustomerRequest,
  UpdateProposedActivityRequest,
  UpdateProspectRequest,
  UpdateProviderRequest,
  UpdateSalesPersonRequest,
  UpdateThirdPartyRequest,
  UpdateThirdPartyStatusRequest,
  OrganizationDto
} from "@/types/organization";
import { MediaDto, MediaType, ServiceType, UploadMediaResponse, UploadRequest } from "@/types/media";
import crypto from "crypto";
import { systemTokenManager } from "@/lib/auth/system-token-manager";

interface ApiErrorResponse {
  timestamp?: string; status?: number; error?: string; message?: string; path?: string; errors?: Record<string, string>;
}

const YOWYOB_AUTH_API_BASE_URL = process.env.NEXT_PUBLIC_YOWYOB_AUTH_SERVICE_BASE_URL;
const YOWYOB_ORGANIZATION_API_BASE_URL = process.env.NEXT_PUBLIC_YOWYOB_ORGANIZATION_SERVICE_BASE_URL;
const YOWYOB_MEDIA_API_BASE_URL = process.env.NEXT_PUBLIC_YOWYOB_MEDIA_SERVICE_BASE_URL;
const PROXY_PATH = "/api/proxy"; // All requests go through here
const NEXT_PUBLIC_YOWYOB_APP_PUBLIC_KEY = process.env.NEXT_PUBLIC_YOWYOB_APP_PUBLIC_KEY;

interface YowyobRequestOptions extends RequestInit {
  isFormData?: boolean;
  useClientBasicAuth?: boolean;
}

type AuthType = 'user' | 'system' | 'none';

interface YowyobRequestOptions extends RequestInit {
  isFormData?: boolean;
  authType?: AuthType;
}

async function yowyobApiRequest<T = any>(
  serviceBaseUrl: string | undefined,
  endpoint: string,
  options: YowyobRequestOptions = {}
): Promise<T> {
  const { authType = 'system', body, ...fetchOptions } = options;

  if (!serviceBaseUrl) {
    throw new Error(`Service URL is not configured for endpoint: ${endpoint}`);
  }
  const targetUrl = `${serviceBaseUrl}${endpoint}`;
  const headers = new Headers(fetchOptions.headers);

  // Layer 1: Determine the correct Bearer token (User vs. System)
  if (authType === 'user') {
    const session = await getSession();
    if (!session?.user?.accessToken) {
      throw new Error("User is not authenticated for this request.");
    }
    headers.set('Authorization', `Bearer ${session.user.accessToken}`);
  } else if (authType === 'system') {
    const systemToken = await systemTokenManager.getSystemToken();
    headers.set('Authorization', `Bearer ${systemToken}`);
  }

  // Layer 2: Add the Application Public Key for the Organization service
  if (serviceBaseUrl === YOWYOB_ORGANIZATION_API_BASE_URL) {
    if (!NEXT_PUBLIC_YOWYOB_APP_PUBLIC_KEY) {
      console.warn(`YOWYOB_APP_PUBLIC_KEY is not set. Requests to ${serviceBaseUrl} may fail.`);
    } else {
      headers.set('Public-Key', NEXT_PUBLIC_YOWYOB_APP_PUBLIC_KEY);
    }
  }

  // Set Content-Type for non-FormData requests
  if (body && !(body instanceof FormData)) {
    headers.set('Content-Type', 'application/json');
  }

  const config: RequestInit = {
    ...fetchOptions,
    headers,
    body: body,
    cache: 'no-store'
  };

  const proxyUrl = `${process.env.NEXT_PUBLIC_URL}${PROXY_PATH}/request`;
  headers.set('X-Target-URL', targetUrl);

  try {
    const response = await fetch(proxyUrl, config);

    // Check if the response is not successful (status >= 400)
    if (!response.ok) {
      let errorData: ApiErrorResponse = { message: `Request failed with status ${response.status}` };

      // Try parsing the response body as JSON
      try {
        errorData = await response.json();
      } catch (e) {
        // If parsing fails, we don't need to do anything additional.
      }

      // Prepare the error message, checking if there are field-specific errors
      const errorMessage = errorData.message || (errorData.errors ? Object.values(errorData.errors).join(', ') : 'An unknown API error occurred.');

      // Log the error with detailed information
      console.error(`API Error: ${errorMessage}`, { targetUrl: proxyUrl, status: response.status, responseData: errorData });

      // Create and throw an error with additional information
      const error = new Error(errorMessage) as Error & { status?: number; data?: any };
      error.status = response.status;
      error.data = errorData;
      throw error;
    }

    // If status is 204 (No Content) or the response body is empty, return null
    if (response.status === 204 || response.headers.get("content-length") === "0") return null;

    // Parse the response body as JSON
    const data = await response.json();

    // If the response has a "status" of "FAILED", handle the specific error case
    if (data.status === "FAILED") {
      let errorMessage = data.message || "An unknown API error occurred.";

      if (data.errors && typeof data.errors === "object") {
        const errorDetails = Object.entries(data.errors)
          .map(([field, message]) => `${field}: ${message}`)
          .join(", ");
        errorMessage += ` - ${errorDetails}`;
      }

      // Create and throw the error with specific details
      const error = new Error(errorMessage) as Error & { status?: number; data?: any };
      error.status = 400; // Assuming 400 for bad request errors
      error.data = data;
      throw error;
    }

    // If there is no error and the body is successfully parsed, return the data
    return data as T;

  } catch (error) {
    // Handle unexpected errors or network issues
    if (!(error instanceof Error && 'status' in error)) {
      console.error("A network or unexpected error occurred:", error);
    }
    // Rethrow the error to be handled further up the call stack
    throw error;
  }

}


// NEW: Media Service API object
export const yowyobMediaApi = {
  uploadFile: (
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string | null,
    file: File,
    uploadRequest?: UploadRequest
  ) => {
    const formData = new FormData();
    formData.append("file", file);
    if (uploadRequest) {
      formData.append("request", new Blob([JSON.stringify(uploadRequest)], { type: "application/json" }));
    }

    const endpoint = resourceId
      ? `/media/${service}/${type}/${path}/${resourceId}`
      : `/media/${service}/${type}/${path}`;

    return yowyobApiRequest<UploadMediaResponse>(YOWYOB_MEDIA_API_BASE_URL, endpoint, {
      method: "POST",
      body: formData,
      isFormData: true, // This is the key change for multipart requests
    });
  },

  updateFile: (
    service: ServiceType,
    type: MediaType,
    path: string,
    filename: string,
    file: File,
    uploadRequest?: UploadRequest
  ) => {
    const formData = new FormData();
    formData.append("file", file);
    if (uploadRequest) {
      formData.append("request", new Blob([JSON.stringify(uploadRequest)], { type: "application/json" }));
    }
    const endpoint = `/media/${service}/${type}/${path}/${filename}`;
    return yowyobApiRequest<UploadMediaResponse>(YOWYOB_MEDIA_API_BASE_URL, endpoint, {
      method: "PUT",
      body: formData,
      isFormData: true,
    });
  },

  deleteFile: (
    service: ServiceType,
    type: MediaType,
    path: string,
    filename: string
  ) => {
    const endpoint = `/media/${service}/${type}/${path}/${filename}`;
    return yowyobApiRequest<boolean>(YOWYOB_MEDIA_API_BASE_URL, endpoint, {
      method: "DELETE",
    });
  },

  getMediaForResource: (
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string
  ) => {
    const endpoint = `/media/infos/${service}/${type}/${path}/${resourceId}`;
    return yowyobApiRequest<MediaDto[]>(YOWYOB_MEDIA_API_BASE_URL, endpoint, { method: "GET" });
  },
};


export const yowyobAuthApi = {
  register: (data: CreateUserRequest) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, "/api/register", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" }, useClientBasicAuth: true, authType: 'system' }),
  getAllUsers: () => yowyobApiRequest<UserDto[]>(YOWYOB_AUTH_API_BASE_URL, "/api/users", { method: "GET" }),
  getUserByUsername: (username: string) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, `/api/user/username/${username}`, { method: "GET" }),
  getUserByPhoneNumber: (phoneNumber: string) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, `/api/user/phone-number/${phoneNumber}`, { method: "GET" }),
  getUserByEmail: (email: string) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, `/api/user/email/${email}`, { method: "GET" }),
  login: (data: AuthRequest) => yowyobApiRequest<LoginResponse>(YOWYOB_AUTH_API_BASE_URL, "/api/login", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" }, useClientBasicAuth: false, authType: 'system' }),
  getCurrentUser: () => yowyobApiRequest<UserInfo>(YOWYOB_AUTH_API_BASE_URL, "/api/user", { method: "GET" }),
  getRoles: () => yowyobApiRequest<RoleDto[]>(YOWYOB_AUTH_API_BASE_URL, "/api/roles", { method: "GET" }),
  createRole: (data: CreateRoleRequest) => yowyobApiRequest<RoleDto>(YOWYOB_AUTH_API_BASE_URL, "/api/roles", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  updateRole: (roleId: string, data: UpdateRoleRequest) => yowyobApiRequest<RoleDto>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteRole: (roleId: string) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}`, { method: "DELETE" }),
  getAllPermissions: () => yowyobApiRequest<PermissionDto[]>(YOWYOB_AUTH_API_BASE_URL, "/api/permissions", { method: "GET" }),
  getPermissionById: (permissionId: string) => yowyobApiRequest<PermissionDto>(YOWYOB_AUTH_API_BASE_URL, `/api/permissions/${permissionId}`, { method: "GET" }),
  createPermission: (data: CreatePermissionRequest) => yowyobApiRequest<PermissionDto>(YOWYOB_AUTH_API_BASE_URL, "/api/permissions", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  updatePermission: (permissionId: string, data: UpdatePermissionRequest) => yowyobApiRequest<PermissionDto>(YOWYOB_AUTH_API_BASE_URL, `/api/permissions/${permissionId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deletePermission: (permissionId: string) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/permissions/${permissionId}`, { method: "DELETE" }),
  assignPermissionsToRole: (roleId: string, permissionIds: string[]) => yowyobApiRequest<RolePermissionDto[]>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions`, { method: "POST", body: JSON.stringify(permissionIds), headers: { "Content-Type": "application/json" } }),
  removePermissionsFromRole: (roleId: string, permissionIds: string[]) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions`, { method: "DELETE", body: JSON.stringify(permissionIds), headers: { "Content-Type": "application/json" } }),
  assignPermissionToRole: (roleId: string, permissionId: string) => yowyobApiRequest<RolePermissionDto>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions/${permissionId}`, { method: "POST" }),
  removePermissionFromRole: (roleId: string, permissionId: string) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions/${permissionId}`, { method: "DELETE" }),
  createRbacResource: (data: RbacResource) => yowyobApiRequest<ApiResponseBoolean>(YOWYOB_AUTH_API_BASE_URL, "/api/resources/save", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getRolesHierarchy: () => yowyobApiRequest<string>(YOWYOB_AUTH_API_BASE_URL, "/api/roles/hierarchy", { method: "GET" }),
};

export const yowyobOrganizationApi = {
  getMyOrganizations: () => yowyobApiRequest<OrganizationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/organizations/user"),
  getAllOrganizations: () => yowyobApiRequest<OrganizationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/organizations"),
  getOrganizationsByDomain: (domainId: string) => yowyobApiRequest<OrganizationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/domains/${domainId}`),
  getOrganizationById: (orgId: string) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}`),
  createOrganization: (data: CreateOrganizationRequest) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, "/organizations", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  updateOrganization: (orgId: string, data: UpdateOrganizationRequest) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteOrganization: (orgId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}`, { method: "DELETE" }),
  updateOrganizationStatus: (orgId: string, data: UpdateOrganizationStatusRequest) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/status`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  addBusinessDomainToOrg: (orgId: string, businessDomainId: string) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/domains/${businessDomainId}`, { method: "PUT" }),
  removeBusinessDomainFromOrg: (orgId: string, businessDomainId: string) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/domains/${businessDomainId}`, { method: "DELETE" }),
  getContacts: (contactableType: ContactableType, contactableId: string) => yowyobApiRequest<ContactDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts`),
  getContactById: (contactableType: ContactableType, contactableId: string, contactId: string) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}`),
  createContact: (contactableType: ContactableType, contactableId: string, data: CreateContactRequest) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  updateContact: (contactableType: ContactableType, contactableId: string, contactId: string, data: UpdateContactRequest) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteContactById: (contactableType: ContactableType, contactableId: string, contactId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}`, { method: "DELETE" }),
  markContactAsFavorite: (contactableType: ContactableType, contactableId: string, contactId: string) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}/favorite`, { method: "GET" }),
  getAddresses: (addressableType: AddressableType, addressableId: string) => yowyobApiRequest<AddressDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses`),
  getAddressById: (addressableType: AddressableType, addressableId: string, addressId: string) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}`),
  createAddress: (addressableType: AddressableType, addressableId: string, data: CreateAddressRequest) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  updateAddress: (addressableType: AddressableType, addressableId: string, addressId: string, data: UpdateAddressRequest) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteAddressById: (addressableType: AddressableType, addressableId: string, addressId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}`, { method: "DELETE" }),
  markAddressAsFavorite: (addressableType: AddressableType, addressableId: string, addressId: string) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}/favorite`, { method: "GET" }),
  getPracticalInformation: (orgId: string, params?: { organizationId: string }) => yowyobApiRequest<PracticalInformationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos${params ? '?' + new URLSearchParams(params).toString() : ''}`),
  createPracticalInformation: (orgId: string, data: CreatePracticalInformationRequest) => yowyobApiRequest<PracticalInformationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getPracticalInformationById: (orgId: string, infoId: string) => yowyobApiRequest<PracticalInformationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos/${infoId}`),
  updatePracticalInformation: (orgId: string, infoId: string, data: UpdatePracticalInformationRequest) => yowyobApiRequest<PracticalInformationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos/${infoId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deletePracticalInformation: (orgId: string, infoId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos/${infoId}`, { method: "DELETE" }),
  getCertifications: (orgId: string) => yowyobApiRequest<CertificationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications`),
  createCertification: (orgId: string, data: CreateCertificationRequest) => yowyobApiRequest<CertificationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getCertificationById: (orgId: string, certId: string) => yowyobApiRequest<CertificationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications/${certId}`),
  updateCertification: (orgId: string, certId: string, data: UpdateCertificationRequest) => yowyobApiRequest<CertificationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications/${certId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteCertification: (orgId: string, certId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications/${certId}`, { method: "DELETE" }),
  getAllBusinessDomains: (params?: GetBusinessDomainRequest) => {
    const queryParams = params ? `?${new URLSearchParams(Object.entries(params).filter(([, v]) => v != null) as [string, string][]).toString()}` : "";
    return yowyobApiRequest<BusinessDomainDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains${queryParams}`);
  },
  getBusinessDomainById: (domainId: string) => yowyobApiRequest<BusinessDomainDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains/${domainId}`),
  createBusinessDomain: (data: CreateBusinessDomainRequest) => yowyobApiRequest<BusinessDomainDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  updateBusinessDomain: (domainId: string, data: UpdateBusinessDomainRequest) => yowyobApiRequest<BusinessDomainDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains/${domainId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteBusinessDomain: (domainId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains/${domainId}`, { method: "DELETE" }),
  getAgencies: (orgId: string, active?: boolean) => {
    let endpoint = `/organizations/${orgId}/agencies`;
    if (active !== undefined) endpoint += `?active=${active}`;
    return yowyobApiRequest<AgencyDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, endpoint);
  },
  createAgency: (orgId: string, data: CreateAgencyRequest) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getAgencyById: (orgId: string, agencyId: string) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}`),
  updateAgency: (orgId: string, agencyId: string, data: UpdateAgencyRequest) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteAgency: (orgId: string, agencyId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}`, { method: "DELETE" }),
  updateAgencyStatus: (orgId: string, agencyId: string, data: UpdateAgencyStatusRequest) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/status`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getOrgEmployees: (orgId: string) => yowyobApiRequest<EmployeeDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees`),
  createOrgEmployee: (orgId: string, data: CreateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getOrgEmployeeById: (orgId: string, employeeId: string) => yowyobApiRequest<EmployeeDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees/${employeeId}`),
  updateOrgEmployee: (orgId: string, employeeId: string, data: UpdateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees/${employeeId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteOrgEmployee: (orgId: string, employeeId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees/${employeeId}`, { method: "DELETE" }),
  getAgencyEmployees: (orgId: string, agencyId: string) => yowyobApiRequest<EmployeeDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees`),
  createAgencyEmployee: (orgId: string, agencyId: string, data: CreateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getAgencyEmployeeById: (orgId: string, agencyId: string, employeeId: string) => yowyobApiRequest<EmployeeDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/${employeeId}`),
  updateAgencyEmployee: (orgId: string, agencyId: string, employeeId: string, data: UpdateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/${employeeId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteAgencyEmployee: (orgId: string, agencyId: string, employeeId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/${employeeId}`, { method: "DELETE" }),
  affectEmployeeToAgency: (orgId: string, agencyId: string, data: AffectEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/add`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getOrgSalesPersons: (orgId: string) => yowyobApiRequest<SalesPersonDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people`),
  createOrgSalesPerson: (orgId: string, data: CreateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getOrgSalesPersonById: (orgId: string, salesPersonId: string) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people/${salesPersonId}`),
  updateOrgSalesPerson: (orgId: string, salesPersonId: string, data: UpdateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people/${salesPersonId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteOrgSalesPerson: (orgId: string, salesPersonId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people/${salesPersonId}`, { method: "DELETE" }),
  getAgencySalesPersons: (orgId: string, agencyId: string) => yowyobApiRequest<SalesPersonDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people`),
  createAgencySalesPerson: (orgId: string, agencyId: string, data: CreateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getAgencySalesPersonById: (orgId: string, agencyId: string, salesPersonId: string) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`),
  updateAgencySalesPerson: (orgId: string, agencyId: string, salesPersonId: string, data: UpdateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteAgencySalesPerson: (orgId: string, agencyId: string, salesPersonId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`, { method: "DELETE" }),
  getOrgCustomers: (orgId: string) => yowyobApiRequest<CustomerDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers`),
  createOrgCustomer: (orgId: string, data: CreateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getOrgCustomerById: (orgId: string, customerId: string) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers/${customerId}`),
  updateOrgCustomer: (orgId: string, customerId: string, data: UpdateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers/${customerId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteOrgCustomer: (orgId: string, customerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers/${customerId}`, { method: "DELETE" }),
  getAgencyCustomers: (orgId: string, agencyId: string) => yowyobApiRequest<CustomerDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers`),
  createAgencyCustomer: (orgId: string, agencyId: string, data: CreateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getAgencyCustomerById: (orgId: string, agencyId: string, customerId: string) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/${customerId}`),
  updateAgencyCustomer: (orgId: string, agencyId: string, customerId: string, data: UpdateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/${customerId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteAgencyCustomer: (orgId: string, agencyId: string, customerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/${customerId}`, { method: "DELETE" }),
  affectCustomerToAgency: (orgId: string, agencyId: string, data: AffectCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/add`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getOrgSuppliers: (orgId: string) => yowyobApiRequest<ProviderDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers`),
  createOrgSupplier: (orgId: string, data: CreateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getOrgSupplierById: (orgId: string, providerId: string) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers/${providerId}`),
  updateOrgSupplier: (orgId: string, providerId: string, data: UpdateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers/${providerId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteOrgSupplier: (orgId: string, providerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers/${providerId}`, { method: "DELETE" }),
  getAgencySuppliers: (orgId: string, agencyId: string) => yowyobApiRequest<ProviderDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers`),
  createAgencySupplier: (orgId: string, agencyId: string, data: CreateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getAgencySupplierById: (orgId: string, agencyId: string, providerId: string) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/${providerId}`),
  updateAgencySupplier: (orgId: string, agencyId: string, providerId: string, data: UpdateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/${providerId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteAgencySupplier: (orgId: string, agencyId: string, providerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/${providerId}`, { method: "DELETE" }),
  affectSupplierToAgency: (orgId: string, agencyId: string, data: AffectProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/add`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getOrgProspects: (orgId: string) => yowyobApiRequest<ProspectDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects`),
  createOrgProspect: (orgId: string, data: CreateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getOrgProspectById: (orgId: string, prospectId: string) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects/${prospectId}`),
  updateOrgProspect: (orgId: string, prospectId: string, data: UpdateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects/${prospectId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteOrgProspect: (orgId: string, prospectId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects/${prospectId}`, { method: "DELETE" }),
  getAgencyProspects: (orgId: string, agencyId: string) => yowyobApiRequest<ProspectDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects`),
  createAgencyProspect: (orgId: string, agencyId: string, data: CreateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getAgencyProspectById: (orgId: string, agencyId: string, prospectId: string) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects/${prospectId}`),
  updateAgencyProspect: (orgId: string, agencyId: string, prospectId: string, data: UpdateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects/${prospectId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteAgencyProspect: (orgId: string, agencyId: string, prospectId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects/${prospectId}`, { method: "DELETE" }),
  getAllBusinessActors: () => yowyobApiRequest<BusinessActorDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/business-actors"),
  createBusinessActor: (data: CreateBusinessActorRequest) => yowyobApiRequest<BusinessActorDto>(YOWYOB_ORGANIZATION_API_BASE_URL, "/business-actors", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getBusinessActorById: (baId: string) => yowyobApiRequest<BusinessActorDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/${baId}`),
  updateBusinessActor: (baId: string, data: UpdateBusinessActorRequest) => yowyobApiRequest<BusinessActorDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/${baId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteBusinessActor: (baId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/${baId}`, { method: "DELETE" }),
  getBusinessActorsByType: (type: BusinessActorType) => yowyobApiRequest<BusinessActorDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/types/${type}`),
  uploadOrganizationImages: (orgId: string, formData: FormData) => yowyobApiRequest<ImageDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/images/${orgId}/add`, { method: "PUT", body: formData, isFormData: true }),
  getOrganizationImageInfo: (imageId: string) => yowyobApiRequest<ImageDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/images/${imageId}`),
  getThirdParties: (orgId: string, params: GetThirdPartyRequest) => yowyobApiRequest<ThirdPartyDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties?${new URLSearchParams(params as Record<string, string>).toString()}`),
  createThirdParty: (orgId: string, type: ThirdPartyType, data: CreateThirdPartyRequest) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${type}`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getThirdPartyById: (orgId: string, thirdPartyId: string) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}`),
  updateThirdParty: (orgId: string, thirdPartyId: string, data: UpdateThirdPartyRequest) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteThirdParty: (orgId: string, thirdPartyId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}`, { method: "DELETE" }),
  updateThirdPartyStatus: (orgId: string, thirdPartyId: string, data: UpdateThirdPartyStatusRequest) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}/status`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getProposedActivities: (orgId: string, params: { organizationId: string }) => yowyobApiRequest<ProposedActivityDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities?${new URLSearchParams(params).toString()}`),
  createProposedActivity: (orgId: string, data: CreateProposedActivityRequest) => yowyobApiRequest<ProposedActivityDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities`, { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getProposedActivityById: (orgId: string, activityId: string) => yowyobApiRequest<ProposedActivityDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities/${activityId}`),
  updateProposedActivity: (orgId: string, activityId: string, data: UpdateProposedActivityRequest) => yowyobApiRequest<ProposedActivityDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities/${activityId}`, { method: "PUT", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  deleteProposedActivity: (orgId: string, activityId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities/${activityId}`, { method: "DELETE" }),
  getAllApplications: () => yowyobApiRequest<ApplicationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/applications"),
  createApplication: (data: CreateApplicationRequest) => yowyobApiRequest<ApplicationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, "/applications", { method: "POST", body: JSON.stringify(data), headers: { "Content-Type": "application/json" } }),
  getApplicationKeys: (applicationId: string) => yowyobApiRequest<ApplicationKeyDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/applications/${applicationId}/keys`),
  createApiKey: (applicationId: string) => yowyobApiRequest<ApplicationKeyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/applications/${applicationId}/keys/create`, { method: "POST" }),
};// END OF FILE: lib/apiClient.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/auth/system-token-manager.ts

import { OAuth2TokenResponse } from "@/types/auth";
// import { yowyobApiRequest } from "../apiClient"; // Import the core request function

interface SystemToken {
  accessToken: string;
  expiresAt: number;
}


class SystemTokenManager {
  private token: SystemToken | null = null;
  private clientId = process.env.NEXT_PUBLIC_YOWYOB_AUTH_CLIENT_ID;
  private clientSecret = process.env.NEXT_PUBLIC_YOWYOB_AUTH_CLIENT_SECRET;
  private authServiceUrl = process.env.NEXT_PUBLIC_YOWYOB_AUTH_SERVICE_BASE_URL;
  private appUrl = process.env.NEXT_PUBLIC_URL || 'http://localhost:3000';

  private isTokenExpired(): boolean {
    return true;
    // Refresh token if it expires in the next 60 seconds.
    // return Date.now() >= this.token.expiresAt - 60 * 1000;
  }

  private async fetchNewToken(): Promise<SystemToken> {
    if (!this.clientId || !this.clientSecret || !this.authServiceUrl) {
      throw new Error("SystemTokenManager: Missing required system-level auth environment variables.");
    }

    const params = new URLSearchParams();
    params.append('grant_type', 'client_credentials');
    params.append('scope', 'manage_api read write')

    const basicAuth = Buffer.from(`${this.clientId}:${this.clientSecret}`).toString('base64');
    const targetUrl = `${this.authServiceUrl}/oauth/token`;

    // This fetch goes through our app's proxy to handle CORS correctly.
    const response = await fetch(`${this.appUrl}/api/proxy/system`, {
      method: 'POST',
      headers: {
        'X-Target-URL': targetUrl,
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': `Basic ${basicAuth}`,
      },
      body: params,
      cache: 'no-store'
    });

    if (!response.ok) {
      const errorBody = await response.text();
      console.error("SystemTokenManager: Failed to fetch system token via proxy.", { status: response.status, body: errorBody });
      throw new Error(`Could not authenticate system client. Status: ${response.status}`);
    }

    const data: OAuth2TokenResponse = await response.json();

    const newToken: SystemToken = {
      accessToken: data.access_token,
      expiresAt: Date.now() + (data.expires_in * 1000),
    };

    this.token = newToken;
    console.log("SystemTokenManager: New system token fetched successfully.");
    return newToken;
  }

  public async getSystemToken(): Promise<string> {
    if (this.isTokenExpired()) {
      await this.fetchNewToken();
    }
    return this.token!.accessToken;
  }
}


export const systemTokenManager = new SystemTokenManager();// END OF FILE: lib/auth/system-token-manager.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/auth/auth-local-repository.ts

// lib/data-repo/auth/auth-local-repository.ts
import { IAuthRepository } from './auth-repository-interface';
import {
  AuthRequest, CreateUserRequest, LoginResponse, UserDto, UserInfo,
  RoleDto, CreateRoleRequest, UpdateRoleRequest,
  PermissionDto, CreatePermissionRequest, UpdatePermissionRequest,
  RolePermissionDto, RbacResource, ApiResponseBoolean
} from '@/types/auth';
import { toast } from 'sonner';

const APP_URL = typeof window !== 'undefined' ? window.location.origin : (process.env.NEXTAUTH_URL || process.env.VERCEL_URL || 'http://localhost:3000');
const MOCK_API_AUTH_BASE = `${APP_URL}/api/mock/auth`;

export class AuthLocalRepository implements IAuthRepository {
  private async fetchMockApi<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const response = await fetch(`${MOCK_API_AUTH_BASE}${endpoint}`, {
      ...options,
      headers: { 'Content-Type': 'application/json', ...options.headers },
    });
    const responseContentType = response.headers.get("content-type");
    let responseData;
    if (responseContentType && responseContentType.includes("application/json")) {
      responseData = await response.json();
    } else if (response.status !== 204) {
      responseData = { message: await response.text() || response.statusText };
    }
    if (!response.ok) {
      const errorPayload = responseData || { message: `Request to ${endpoint} failed` };
      console.error(`[AuthLocalRepo] Mock API Error: ${response.status}`, errorPayload);
      // toast.error(errorPayload.message || `Mock API request failed: ${response.status}`);
      throw { status: response.status, message: errorPayload.message, data: errorPayload };
    }
    return responseData as T;
  }

  // User Management
  async register(data: CreateUserRequest): Promise<UserDto> {
    return this.fetchMockApi<UserDto>("/register", { method: "POST", body: JSON.stringify(data) });
  }
  async getAllUsers(): Promise<UserDto[]> {
    return this.fetchMockApi<UserDto[]>("/users", { method: "GET" });
  }
  async getUserByUsername(username: string): Promise<UserDto | null> {
    return this.fetchMockApi<UserDto | null>(`/users/username/${username}`, { method: "GET" });
  }
  async getUserByPhoneNumber(phoneNumber: string): Promise<UserDto | null> {
    return this.fetchMockApi<UserDto | null>(`/users/phone/${phoneNumber}`, { method: "GET" });
  }
  async getUserByEmail(email: string): Promise<UserDto | null> {
    return this.fetchMockApi<UserDto | null>(`/users/email/${email}`, { method: "GET" });
  }

  // Login & Session
  async login(data: AuthRequest): Promise<LoginResponse> {
    return this.fetchMockApi<LoginResponse>("/login", { method: "POST", body: JSON.stringify(data) });
  }
  async getCurrentUser(): Promise<UserInfo | null> {
    return this.fetchMockApi<UserInfo | null>("/user", { method: "GET" });
  }

  // Role Management
  async getRoles(): Promise<RoleDto[]> {
    return this.fetchMockApi<RoleDto[]>("/roles", { method: "GET" });
  }
  async createRole(data: CreateRoleRequest): Promise<RoleDto> {
    return this.fetchMockApi<RoleDto>("/roles", { method: "POST", body: JSON.stringify(data) });
  }
  async updateRole(roleId: string, data: UpdateRoleRequest): Promise<RoleDto> {
    return this.fetchMockApi<RoleDto>(`/roles/${roleId}`, { method: "PUT", body: JSON.stringify(data) });
  }
  async deleteRole(roleId: string): Promise<void> {
    return this.fetchMockApi<void>(`/roles/${roleId}`, { method: "DELETE" });
  }

  // Permission Management
  async getAllPermissions(): Promise<PermissionDto[]> {
    return this.fetchMockApi<PermissionDto[]>("/permissions", { method: "GET" });
  }
  async getPermissionById(permissionId: string): Promise<PermissionDto | null> {
    return this.fetchMockApi<PermissionDto | null>(`/permissions/${permissionId}`, { method: "GET" });
  }
  async createPermission(data: CreatePermissionRequest): Promise<PermissionDto> {
    return this.fetchMockApi<PermissionDto>("/permissions", { method: "POST", body: JSON.stringify(data) });
  }
  async updatePermission(permissionId: string, data: UpdatePermissionRequest): Promise<PermissionDto> {
    return this.fetchMockApi<PermissionDto>(`/permissions/${permissionId}`, { method: "PUT", body: JSON.stringify(data) });
  }
  async deletePermission(permissionId: string): Promise<void> {
    return this.fetchMockApi<void>(`/permissions/${permissionId}`, { method: "DELETE" });
  }

  // Role-Permission Assignments
  async assignPermissionsToRole(roleId: string, permissionIds: string[]): Promise<RolePermissionDto[]> {
    return this.fetchMockApi<RolePermissionDto[]>(`/roles/${roleId}/permissions`, { method: "POST", body: JSON.stringify(permissionIds) });
  }
  async removePermissionsFromRole(roleId: string, permissionIds: string[]): Promise<void> {
    return this.fetchMockApi<void>(`/roles/${roleId}/permissions`, { method: "DELETE", body: JSON.stringify(permissionIds) });
  }
  async assignPermissionToRole(roleId: string, permissionId: string): Promise<RolePermissionDto> {
    return this.fetchMockApi<RolePermissionDto>(`/roles/${roleId}/permissions/${permissionId}`, { method: "POST" });
  }
  async removePermissionFromRole(roleId: string, permissionId: string): Promise<void> {
    return this.fetchMockApi<void>(`/roles/${roleId}/permissions/${permissionId}`, { method: "DELETE" });
  }

  // RBAC Resource
  async createRbacResource(data: RbacResource): Promise<ApiResponseBoolean> {
    return this.fetchMockApi<ApiResponseBoolean>("/resources/save", { method: "POST", body: JSON.stringify(data) });
  }

  // Roles Hierarchy
  async getRolesHierarchy(): Promise<string> {
    return this.fetchMockApi<string>("/roles/hierarchy", { method: "GET" });
  }
}// END OF FILE: lib/data-repo/auth/auth-local-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/auth/auth-remote-repository.ts

import { IAuthRepository } from './auth-repository-interface';
import {
  AuthRequest, CreateUserRequest, LoginResponse, UserDto, UserInfo,
  RoleDto, CreateRoleRequest, UpdateRoleRequest,
  PermissionDto, CreatePermissionRequest, UpdatePermissionRequest,
  RolePermissionDto, RbacResource, ApiResponseBoolean
} from '@/types/auth';
import { yowyobAuthApi } from '@/lib/apiClient'; // Uses the specific Yowyob API wrapper

export class AuthRemoteRepository implements IAuthRepository {
  async register(data: CreateUserRequest): Promise<UserDto> {
    return yowyobAuthApi.register(data);
  }
  async getAllUsers(): Promise<UserDto[]> {
    return yowyobAuthApi.getAllUsers();
  }
  async getUserByUsername(username: string): Promise<UserDto | null> {
    return yowyobAuthApi.getUserByUsername(username).catch(e => (e.status === 404 ? null : Promise.reject(e) ));
  }
  async getUserByPhoneNumber(phoneNumber: string): Promise<UserDto | null> {
    return yowyobAuthApi.getUserByPhoneNumber(phoneNumber).catch(e => (e.status === 404 ? null : Promise.reject(e) ));
  }
  async getUserByEmail(email: string): Promise<UserDto | null> {
    return yowyobAuthApi.getUserByEmail(email).catch(e => (e.status === 404 ? null : Promise.reject(e) ));
  }
  async login(data: AuthRequest): Promise<LoginResponse> {
    return yowyobAuthApi.login(data);
  }
  async getCurrentUser(): Promise<UserInfo | null> {
    try {
      return await yowyobAuthApi.getCurrentUser();
    } catch (error)  {
      if (error.status === 401 || error.status === 403) return null;
      throw error;
    }
  }
  async getRoles(): Promise<RoleDto[]> {
    return yowyobAuthApi.getRoles();
  }
  async createRole(data: CreateRoleRequest): Promise<RoleDto> {
    return yowyobAuthApi.createRole(data);
  }
  async updateRole(roleId: string, data: UpdateRoleRequest): Promise<RoleDto> {
    return yowyobAuthApi.updateRole(roleId, data);
  }
  async deleteRole(roleId: string): Promise<void> {
    return yowyobAuthApi.deleteRole(roleId);
  }
  async getAllPermissions(): Promise<PermissionDto[]> {
    return yowyobAuthApi.getAllPermissions();
  }
  async getPermissionById(permissionId: string): Promise<PermissionDto | null> {
    return yowyobAuthApi.getPermissionById(permissionId).catch(e => (e.status === 404 ? null : Promise.reject(e) ));
  }
  async createPermission(data: CreatePermissionRequest): Promise<PermissionDto> {
    return yowyobAuthApi.createPermission(data);
  }
  async updatePermission(permissionId: string, data: UpdatePermissionRequest): Promise<PermissionDto> {
    return yowyobAuthApi.updatePermission(permissionId, data);
  }
  async deletePermission(permissionId: string): Promise<void> {
    return yowyobAuthApi.deletePermission(permissionId);
  }
  async assignPermissionsToRole(roleId: string, permissionIds: string[]): Promise<RolePermissionDto[]> {
    return yowyobAuthApi.assignPermissionsToRole(roleId, permissionIds);
  }
  async removePermissionsFromRole(roleId: string, permissionIds: string[]): Promise<void> {
    return yowyobAuthApi.removePermissionsFromRole(roleId, permissionIds);
  }
  async assignPermissionToRole(roleId: string, permissionId: string): Promise<RolePermissionDto> {
    return yowyobAuthApi.assignPermissionToRole(roleId, permissionId);
  }
  async removePermissionFromRole(roleId: string, permissionId: string): Promise<void> {
    return yowyobAuthApi.removePermissionFromRole(roleId, permissionId);
  }
  async createRbacResource(data: RbacResource): Promise<ApiResponseBoolean> {
    return yowyobAuthApi.createRbacResource(data);
  }
  async getRolesHierarchy(): Promise<string> {
    return yowyobAuthApi.getRolesHierarchy();
  }
}// END OF FILE: lib/data-repo/auth/auth-remote-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/auth/auth-repository-interface.ts

// lib/data-repo/auth/auth-repository-interface.ts
import {
  AuthRequest, CreateUserRequest, LoginResponse, UserDto, UserInfo,
  RoleDto, CreateRoleRequest, UpdateRoleRequest,
  PermissionDto, CreatePermissionRequest, UpdatePermissionRequest,
  RolePermissionDto, RbacResource, ApiResponseBoolean
} from '@/types/auth';

export interface IAuthRepository {
  // User Management
  register(data: CreateUserRequest): Promise<UserDto>;
  getAllUsers(): Promise<UserDto[]>;
  getUserByUsername(username: string): Promise<UserDto | null>;
  getUserByPhoneNumber(phoneNumber: string): Promise<UserDto | null>;
  getUserByEmail(email: string): Promise<UserDto | null>;
  // (Update/Delete user methods might be via user own profile or admin panel elsewhere)

  // Login & Session
  login(data: AuthRequest): Promise<LoginResponse>;
  getCurrentUser(): Promise<UserInfo | null>; // To get info about the currently authenticated user

  // Role Management
  getRoles(): Promise<RoleDto[]>;
  createRole(data: CreateRoleRequest): Promise<RoleDto>;
  updateRole(roleId: string, data: UpdateRoleRequest): Promise<RoleDto>;
  deleteRole(roleId: string): Promise<void>; // 200 OK, no body

  // Permission Management
  getAllPermissions(): Promise<PermissionDto[]>;
  getPermissionById(permissionId: string): Promise<PermissionDto | null>;
  createPermission(data: CreatePermissionRequest): Promise<PermissionDto>;
  updatePermission(permissionId: string, data: UpdatePermissionRequest): Promise<PermissionDto>;
  deletePermission(permissionId: string): Promise<void>; // 200 OK, no body

  // Role-Permission Assignments
  assignPermissionsToRole(roleId: string, permissionIds: string[]): Promise<RolePermissionDto[]>;
  removePermissionsFromRole(roleId: string, permissionIds: string[]): Promise<void>;
  assignPermissionToRole(roleId: string, permissionId: string): Promise<RolePermissionDto>;
  removePermissionFromRole(roleId: string, permissionId: string): Promise<void>;

  // RBAC Resource (Conceptual - for RBAC setup)
  createRbacResource(data: RbacResource): Promise<ApiResponseBoolean>;

  // Roles Hierarchy
  getRolesHierarchy(): Promise<string>; // Returns a string representation
}// END OF FILE: lib/data-repo/auth/auth-repository-interface.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/auth/index.ts

import { IAuthRepository } from './auth-repository-interface';
import { AuthLocalRepository } from './auth-local-repository';
import { AuthRemoteRepository } from './auth-remote-repository';

let authRepositoryInstance: IAuthRepository;

const dataSource = process.env.NEXT_PUBLIC_DATA_SOURCE;

if (dataSource === 'local') {
  console.log("INFO: Using Local Auth Repository (fetches from /api/mock/*)");
  authRepositoryInstance = new AuthLocalRepository();
} else {
  console.log("INFO: Using Remote Auth Repository (Yowyob Auth API via Proxy)");
  authRepositoryInstance = new AuthRemoteRepository();
}

export const authRepository = authRepositoryInstance;// END OF FILE: lib/data-repo/auth/index.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/local-store/json-data/user-preferences

[
  {
    "user_id": "mock-auth-1750034426505-75",
    "display": {
      "language": "en",
      "currency": "USD",
      "dateFormat": "mm-dd-yyyy",
      "fontSize": 16,
      "theme": "system",
      "layout": "default",
      "timezone": "utc-8",
      "profilePhotoUrl": ""
    },
    "notifications": {
      "email": true,
      "push": true,
      "sms": false,
      "accountActivity": true,
      "newFeatures": true,
      "marketing": false,
      "frequency": "daily",
      "quietHoursStart": "22:00",
      "quietHoursEnd": "07:00"
    },
    "privacy": {
      "analyticsSharing": true,
      "personalizedAds": false,
      "visibility": "private",
      "dataRetention": "1-year"
    },
    "updated_at": "2025-06-18T15:39:08.058Z"
  }
]// END OF FILE: lib/data-repo/local-store/json-data/user-preferences

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/local-store/json-db-manager.ts

// lib/data-repo/local-store/json-db-manager.ts
import fs from "fs";
import path from "path";
import {
  UserDto, RoleDto, PermissionDto, RolePermissionDto, RbacResource,
} from "@/types/auth";
import {
  OrganizationDto, ContactDto, AddressDto, AgencyDto, EmployeeDto, BusinessDomainDto,
  ImageDto, ThirdPartyDto, ProposedActivityDto, SalesPersonDto, CustomerDto, ProviderDto, ProspectDto,
  PracticalInformationDto, CertificationDto, ApplicationDto, ApplicationKeyDto, BusinessActorDto,
} from "@/types/organization";
// import { ResourceDto, ServiceDto } from "@/types/resourceManagement";
import { UserPreferencesDto } from "@/types/user-preferences";
import { MediaDto } from "@/types/media";

export type CollectionName =
  | "authUsers"
  | "authRoles" | "authPermissions" | "authRolePermissions" | "authRbacResources"
  | "organizationsDetails" | "contacts" | "addresses"
  | "agencies" | "employees" | "salesPersons" | "orgCustomers" | "providers" | "userPreferences"
  | "prospects" | "practicalInformation" | "certifications" | "businessDomains"
  | "organizationImages" | "thirdParties" | "proposedActivities" | "businessActors"
  | "applicationsData" | "applicationKeysData" | "media"
// | "resources" 
// | "services";

export interface LocalJsonDBCollections {
  authUsers: UserDto[]; authRoles: RoleDto[]; authPermissions: PermissionDto[]; authRolePermissions: RolePermissionDto[]; authRbacResources: RbacResource[];
  organizationsDetails: OrganizationDto[]; contacts: ContactDto[]; addresses: AddressDto[];
  userPreferences: UserPreferencesDto[]; agencies: AgencyDto[]; employees: EmployeeDto[]; salesPersons: SalesPersonDto[];
  orgCustomers: CustomerDto[]; providers: ProviderDto[]; prospects: ProspectDto[]; practicalInformation: PracticalInformationDto[];
  certifications: CertificationDto[]; businessDomains: BusinessDomainDto[]; organizationImages: ImageDto[]; thirdParties: ThirdPartyDto[];
  proposedActivities: ProposedActivityDto[]; businessActors: BusinessActorDto[]; applicationsData: ApplicationDto[];
  applicationKeysData: ApplicationKeyDto[]; media: MediaDto[]
  // resources: ResourceDto[];
  //  services: ServiceDto[];
}

const collectionFileMap: Record<CollectionName, string> = {
  authUsers: "auth-users.json", authRoles: "auth-roles.json", authPermissions: "auth-permissions.json",
  authRolePermissions: "auth-role-permissions.json", authRbacResources: "auth-rbac-resources.json",
  organizationsDetails: "organizations-details.json",
  contacts: "contacts.json", addresses: "addresses.json", agencies: "agencies.json", employees: "employees.json",
  salesPersons: "sales-persons.json", orgCustomers: "org-customers.json", providers: "providers.json",
  userPreferences: "user-preferences.json", prospects: "prospects.json", practicalInformation: "practical-information.json",
  certifications: "certifications.json", businessDomains: "business-domains.json", organizationImages: "organization-images.json",
  thirdParties: "third-parties.json", proposedActivities: "proposed-activities.json", businessActors: "business-actors.json",
  applicationsData: "applications-data.json", applicationKeysData: "application-keys.json",
  media: "media.json"
};

// NEW: Explicit mapping of collection name to its primary ID field.
const collectionIdMap: Record<CollectionName, string> = {
  authUsers: "id",
  authRoles: "id",
  authPermissions: "id",
  authRolePermissions: "id", // Composite key, but we need one for the manager. 'id' will be auto-generated.
  authRbacResources: "id", // Auto-generated
  organizationsDetails: "organization_id",
  contacts: "contact_id",
  addresses: "address_id",
  agencies: "agency_id",
  employees: "employee_id",
  salesPersons: "sales_person_id",
  orgCustomers: "customer_id",
  providers: "provider_id",
  userPreferences: "user_id", // Specific key for this collection
  prospects: "prospect_id",
  practicalInformation: "information_id",
  certifications: "certification_id",
  businessDomains: "id",
  organizationImages: "id",
  thirdParties: "id",
  proposedActivities: "activity_id",
  businessActors: "business_actor_id",
  applicationsData: "id",
  applicationKeysData: "public_key",
  media: "id"
};


const dataDir = path.resolve(process.cwd(), "lib/data-repo/local-store/json-data");

function getCollectionFilePath(collectionName: CollectionName): string {
  if (!fs.existsSync(dataDir)) fs.mkdirSync(dataDir, { recursive: true });
  const filename = collectionFileMap[collectionName];
  if (!filename) throw new Error(`No filename mapping for collection: ${collectionName}`);
  const filePath = path.join(dataDir, filename);
  if (!fs.existsSync(filePath)) fs.writeFileSync(filePath, JSON.stringify([]), "utf-8");
  return filePath;
}

function readCollectionData<T>(collectionName: CollectionName): T[] {
  const filePath = getCollectionFilePath(collectionName);
  try {
    const fileContent = fs.readFileSync(filePath, "utf-8");
    return fileContent.trim() === "" ? [] : JSON.parse(fileContent) as T[];
  } catch (error) {
    console.error(`Error reading or parsing ${collectionFileMap[collectionName]}:`, error);
    try {
      fs.writeFileSync(filePath, JSON.stringify([]), "utf-8");
    } catch (writeError) {
      console.error(`CRITICAL: Could not write default empty array to ${collectionName}.json:`, writeError);
    }
    return [];
  }
}

function writeCollectionData<T>(collectionName: CollectionName, data: T[]): void {
  const filePath = getCollectionFilePath(collectionName);
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), "utf-8");
  } catch (error) {
    console.error(`Error writing to ${collectionFileMap[collectionName]}:`, error);
  }
}

type Identifiable = { id?: string;[key: string]: any };

// REFACTORED: Use the collectionIdMap for a direct lookup.
function getPrimaryKeyField(collectionName: CollectionName): string {
  return collectionIdMap[collectionName] || "id"; // Fallback to 'id' if not in map
}

export const dbManager = {
  getCollection: <C extends CollectionName>(collectionName: C): LocalJsonDBCollections[C] => {
    return readCollectionData<LocalJsonDBCollections[C][number]>(collectionName) as LocalJsonDBCollections[C];
  },
  saveCollection: <C extends CollectionName>(collectionName: C, data: LocalJsonDBCollections[C]): void => {
    writeCollectionData<LocalJsonDBCollections[C][number]>(collectionName, data);
  },
  addItem: <C extends CollectionName>(
    collectionName: C,
    itemData: Omit<LocalJsonDBCollections[C][number], "created_at" | "updated_at">
  ): LocalJsonDBCollections[C][number] => {
    const collection = dbManager.getCollection(collectionName);
    const idKey = getPrimaryKeyField(collectionName);
    const idPrefix = collectionName.toString().replace(/([A-Z])/g, "-$1").toLowerCase().split("-")[0].substring(0, 4);

    let generatedId = (itemData as Identifiable)[idKey];
    if (!generatedId) {
      generatedId = `mock-${idPrefix}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    }

    const newItem = {
      ...itemData,
      [idKey]: generatedId,
      ...(idKey !== "id" && !("id" in itemData) && { id: generatedId }),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    } as LocalJsonDBCollections[C][number];

    (collection as Array<LocalJsonDBCollections[C][number]>).push(newItem);
    dbManager.saveCollection(collectionName, collection);
    return newItem;
  },
  updateItem: <C extends CollectionName>(
    collectionName: C,
    id: string,
    updates: Partial<Omit<LocalJsonDBCollections[C][number], "created_at">>
  ): LocalJsonDBCollections[C][number] | null => {
    const collection = dbManager.getCollection(collectionName);
    const idKey = getPrimaryKeyField(collectionName);
    const itemIndex = (collection as Identifiable[]).findIndex(item => (item)[idKey] === id);

    if (itemIndex > -1) {
      (collection as Identifiable[])[itemIndex] = {
        ...(collection as Identifiable[])[itemIndex],
        ...updates,
        updated_at: new Date().toISOString(),
      };
      dbManager.saveCollection(collectionName, collection);
      return (collection as Identifiable[])[itemIndex] as LocalJsonDBCollections[C][number];
    }
    return null;
  },
  getItemById: <C extends CollectionName>(collectionName: C, id: string): LocalJsonDBCollections[C][number] | null => {
    const collection = dbManager.getCollection(collectionName);
    const idKey = getPrimaryKeyField(collectionName);
    return (collection as Identifiable[]).find(item => (item)[idKey] === id) as LocalJsonDBCollections[C][number] | null;
  },
  deleteItem: <C extends CollectionName>(collectionName: C, id: string): boolean => {
    const collection = dbManager.getCollection(collectionName);
    const initialLength = collection.length;
    const idKey = getPrimaryKeyField(collectionName);
    const newCollection = (collection as Identifiable[]).filter(item => (item)[idKey] !== id);
    if (newCollection.length < initialLength) {
      dbManager.saveCollection(collectionName, newCollection as LocalJsonDBCollections[C]);
      return true;
    }
    return false;
  },
};
// END OF FILE: lib/data-repo/local-store/json-db-manager.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/local-store/mock-auth-utils.ts

import { NextRequest } from 'next/server';
import { getToken } from 'next-auth/jwt';

/**
 * Gets the user ID for the current session in a mock environment.
 * It first tries to decode the NextAuth JWT from the request cookies, which is the most reliable method.
 * As a fallback, it attempts to decode a Bearer token if present.
 *
 * @param request The NextRequest object from the API route.
 * @returns The user ID string or null if not found.
 */
export async function getUserIdFromMockToken(request: NextRequest): Promise<string | null> {
  try {
    // Primary Method: Use next-auth's getToken to securely get the session token's content.
    // This is the most reliable way to get the user's session data on the server-side in a mock environment.
    const token = await getToken({ req: request, secret: process.env.NEXTAUTH_SECRET });

    if (token && token.sub) {
      // The 'sub' (subject) claim in the NextAuth token is the user's ID.
      return token.sub;
    }

    // Fallback Method: If getToken fails, try to decode a Bearer token manually.
    // This might be useful if you are testing with a hardcoded token from another source.
    const authHeader = request.headers.get('Authorization');
    if (authHeader?.startsWith('Bearer ')) {
      const bearerToken = authHeader.split(' ')[1];
      const payloadBase64 = bearerToken.split('.')[1];
      if (payloadBase64) {
        const decodedPayload = Buffer.from(payloadBase64, 'base64').toString('utf-8');
        const payloadJson = JSON.parse(decodedPayload);
        return payloadJson.sub || payloadJson.id || null;
      }
    }

    return null;
  } catch (error) {
    console.error("Error getting user ID from mock token:", error);
    return null;
  }
}// END OF FILE: lib/data-repo/local-store/mock-auth-utils.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/map/index.ts

// lib/data-repo/map/index.ts
import { IMapRepository } from './map-repository-interface';
import { MapLocalRepository } from './map-local-repository';
import { MapRemoteRepository } from './map-remote-repository';

// let mapRepositoryInstance: IMapRepository;

// We use the same global data source flag
const dataSource = process.env.NEXT_PUBLIC_DATA_SOURCE;

// if (dataSource == 'local') {
//   console.log("INFO: Using Local Map Repository (via Mock Geo API)");
//   mapRepositoryInstance = new MapLocalRepository();
// } else {
console.log("INFO: Using Remote Map Repository (Nominatim API)");
const mapRepositoryInstance = new MapRemoteRepository();
// }

export const mapRepository = mapRepositoryInstance;// END OF FILE: lib/data-repo/map/index.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/map/map-local-repository.ts

// lib/data-repo/map/map-local-repository.ts
import { IMapRepository } from './map-repository-interface';
import { GeocodeResponse, ReverseGeocodeResponse } from '@/types/map';
import { toast } from "sonner";

const APP_URL = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
const MOCK_GEO_API_BASE = `${APP_URL}/api/mock/geo`;

export class MapLocalRepository implements IMapRepository {
  private async fetchMockApi<T>(endpoint: string): Promise<T> {
    const response = await fetch(`${MOCK_GEO_API_BASE}${endpoint}`);
    if (!response.ok) {
      const error = new Error(`Mock Geo API Error: ${response.statusText}`);
      // toast.error("Mock map service failed.");
      throw error;
    }
    return response.json();
  }

  async reverseGeocode(lat: number, lon: number): Promise<ReverseGeocodeResponse | null> {
    return this.fetchMockApi<ReverseGeocodeResponse | null>(`/reverse?lat=${lat}&lon=${lon}`);
  }

  async geocodeAddress(query: string): Promise<GeocodeResponse[]> {
    return this.fetchMockApi<GeocodeResponse[]>(`/geocode?q=${encodeURIComponent(query)}`);
  }
}// END OF FILE: lib/data-repo/map/map-local-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/map/map-remote-repository.ts

// lib/data-repo/map/map-remote-repository.ts
import { IMapRepository } from './map-repository-interface';
import { GeocodeResponse, ReverseGeocodeResponse } from '@/types/map';
import { toast } from 'sonner';

const NOMINATIM_BASE_URL = "https://nominatim.openstreetmap.org";

export class MapRemoteRepository implements IMapRepository {

  private async fetchNominatim<T>(endpoint: string): Promise<T> {
    try {
      // IMPORTANT: Nominatim requires a valid User-Agent header for identification.
      const response = await fetch(`${NOMINATIM_BASE_URL}${endpoint}`, {
        headers: {
          "User-Agent": "Yowyob Dashboard Project - Development (contact@yowyob.com)",
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Nominatim API error: ${response.status} - ${errorText}`);
      }
      return await response.json() as T;
    } catch (error) {
      console.error("Nominatim API request failed:", error);
      // toast.error("Could not reach map service. Please check your connection.");
      throw error;
    }
  }

  async reverseGeocode(lat: number, lon: number): Promise<ReverseGeocodeResponse | null> {
    const endpoint = `/reverse?format=json&lat=${lat}&lon=${lon}`;
    return this.fetchNominatim<ReverseGeocodeResponse>(endpoint);
  }

  async geocodeAddress(query: string): Promise<GeocodeResponse[]> {
    const endpoint = `/search?q=${encodeURIComponent(query)}&format=json&addressdetails=1&limit=5`;
    return this.fetchNominatim<GeocodeResponse[]>(endpoint);
  }
}// END OF FILE: lib/data-repo/map/map-remote-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/map/map-repository-interface.ts

// lib/data-repo/map/map-repository-interface.ts
import { GeocodeResponse, ReverseGeocodeResponse } from '@/types/map';

export interface IMapRepository {
  /**
   * Converts a latitude and longitude into a structured address.
   */
  reverseGeocode(lat: number, lon: number): Promise<ReverseGeocodeResponse | null>;

  /**
   * Converts a search string into a list of possible locations with coordinates.
   */
  geocodeAddress(query: string): Promise<GeocodeResponse[]>;
}// END OF FILE: lib/data-repo/map/map-repository-interface.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/media/index.ts

import { IMediaRepository } from './media-repository-interface';
import { MediaLocalRepository } from './media-local-repository';
import { MediaRemoteRepository } from './media-remote-repository';

let mediaRepository: IMediaRepository;

const dataSource = process.env.NEXT_PUBLIC_DATA_SOURCE;

if (dataSource === 'local') {
  console.log("INFO: Using Local Media Repository");
  mediaRepository = new MediaLocalRepository();
} else {
  console.log("INFO: Using Remote Media Repository");
  mediaRepository = new MediaRemoteRepository();
}

export { mediaRepository };// END OF FILE: lib/data-repo/media/index.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/media/media-local-repository.ts

import { IMediaRepository } from "./media-repository-interface";
import { UploadMediaResponse, MediaDto, ServiceType, MediaType } from "@/types/media";

const APP_URL = process.env.NEXT_PUBLIC_URL || 'http://localhost:3000';
const MOCK_API_MEDIA_BASE = `${APP_URL}/api/mock/media`;

export class MediaLocalRepository implements IMediaRepository {
  private async fetchMockApi<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    // Since multipart/form-data is complex for a simple mock fetch,
    // we'll use JSON for the mock but the interface remains the same.
    const response = await fetch(`${MOCK_API_MEDIA_BASE}${endpoint}`, {
      ...options,
      headers: { 'Content-Type': 'application/json', ...options.headers },
    });
    const responseContentType = response.headers.get("content-type");
    let responseData;
    if (responseContentType && responseContentType.includes("application/json")) {
      responseData = await response.json();
    } else if (response.status !== 204) {
      responseData = { message: await response.text() || response.statusText };
    }
    if (!response.ok) {
      const errorPayload = responseData || { message: `Request to ${endpoint} failed` };
      throw { status: response.status, message: errorPayload.message, data: errorPayload };
    }
    return responseData as T;
  }

  async uploadFile(
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string | null,
    file: File,
    isPrimary?: boolean,
    description?: string
  ): Promise<UploadMediaResponse> {
    console.warn("Mock Upload: Not actually uploading file, returning dummy response.");

    // In a mock, we can't really upload, so we just pass metadata to a mock endpoint.
    const mockUploadPayload = {
      fileName: file.name,
      fileType: file.type,
      fileSize: file.size,
      isPrimary,
      description,
    };
    const endpoint = resourceId
      ? `/${service}/${type}/${path}/${resourceId}`
      : `/${service}/${type}/${path}`;

    return this.fetchMockApi<UploadMediaResponse>(endpoint, {
      method: "POST", // The mock route will handle this as a POST
      body: JSON.stringify(mockUploadPayload)
    });
  }

  async deleteFile(
    service: ServiceType,
    type: MediaType,
    path: string,
    filename: string
  ): Promise<boolean> {
    const endpoint = `/${service}/${type}/${path}/${filename}`;
    return this.fetchMockApi<boolean>(endpoint, { method: "DELETE" });
  }

  async getMediaForResource(
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string
  ): Promise<MediaDto[]> {
    const endpoint = `/${service}/${type}/${path}/${resourceId}`;
    return this.fetchMockApi<MediaDto[]>(endpoint, { method: "GET" });
  }
}// END OF FILE: lib/data-repo/media/media-local-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/media/media-remote-repository.ts

import { IMediaRepository } from "./media-repository-interface";
import { yowyobMediaApi } from "@/lib/apiClient";
import { UploadMediaResponse, MediaDto, ServiceType, MediaType } from "@/types/media";

export class MediaRemoteRepository implements IMediaRepository {
  async uploadFile(
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string | null,
    file: File,
    isPrimary?: boolean,
    description?: string
  ): Promise<UploadMediaResponse> {
    const uploadRequest = {
      ...(isPrimary !== undefined && { is_primary: isPrimary }),
      ...(description && { description }),
    };
    return yowyobMediaApi.uploadFile(service, type, path, resourceId, file, uploadRequest);
  }

  async deleteFile(
    service: ServiceType,
    type: MediaType,
    path: string,
    filename: string
  ): Promise<boolean> {
    return yowyobMediaApi.deleteFile(service, type, path, filename);
  }

  async getMediaForResource(
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string
  ): Promise<MediaDto[]> {
    const media = await yowyobMediaApi.getMediaForResource(service, type, path, resourceId);
    return media || []; // Ensure it returns an array even if the API returns null
  }
}// END OF FILE: lib/data-repo/media/media-remote-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/media/media-repository-interface.ts

import { UploadMediaResponse, MediaDto, ServiceType, MediaType } from "@/types/media";

export interface IMediaRepository {
  uploadFile(
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string | null,
    file: File,
    isPrimary?: boolean,
    description?: string
  ): Promise<UploadMediaResponse>;

  deleteFile(
    service: ServiceType,
    type: MediaType,
    path: string,
    filename: string
  ): Promise<boolean>;

  getMediaForResource(
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string
  ): Promise<MediaDto[]>;
}// END OF FILE: lib/data-repo/media/media-repository-interface.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/organization/index.ts

// lib/data-repo/organization/index.ts
import { IOrganizationRepository } from './organization-repository-interface';
import { OrganizationLocalRepository } from './organization-local-repository';
import { OrganizationRemoteRepository } from './organization-remote-repository';

let organizationRepositoryInstance: IOrganizationRepository;

const dataSource = process.env.NEXT_PUBLIC_DATA_SOURCE;

if (dataSource === 'local') {
  console.log("INFO: Using Local Organization Repository (via Next.js Mock API Routes)");
  organizationRepositoryInstance = new OrganizationLocalRepository();
} else {
  console.log("INFO: Using Remote Organization Repository (Yowyob Org API)");
  organizationRepositoryInstance = new OrganizationRemoteRepository();
}

export const organizationRepository = organizationRepositoryInstance;// END OF FILE: lib/data-repo/organization/index.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/organization/organization-local-repository.ts

// lib/data-repo/organization/organization-local-repository.ts
import { IOrganizationRepository } from "./organization-repository-interface";
import {
  OrganizationDto,
  CreateOrganizationRequest,
  UpdateOrganizationRequest,
  UpdateOrganizationStatusRequest,
  ContactDto,
  CreateContactRequest,
  UpdateContactRequest,
  ContactableType,
  AddressDto,
  CreateAddressRequest,
  UpdateAddressRequest,
  AddressableType,
  AgencyDto,
  CreateAgencyRequest,
  UpdateAgencyRequest,
  UpdateAgencyStatusRequest,
  EmployeeDto,
  CreateEmployeeRequest,
  UpdateEmployeeRequest,
  AffectEmployeeRequest,
  EmployeeResponse,
  SalesPersonDto,
  CreateSalesPersonRequest,
  UpdateSalesPersonRequest,
  CustomerDto,
  CreateCustomerRequest,
  UpdateCustomerRequest,
  AffectCustomerRequest,
  ProviderDto,
  CreateProviderRequest,
  UpdateProviderRequest,
  AffectProviderRequest,
  ProspectDto,
  CreateProspectRequest,
  UpdateProspectRequest,
  PracticalInformationDto,
  CreatePracticalInformationRequest,
  UpdatePracticalInformationRequest,
  CertificationDto,
  CreateCertificationRequest,
  UpdateCertificationRequest,
  BusinessDomainDto,
  CreateBusinessDomainRequest,
  UpdateBusinessDomainRequest,
  GetBusinessDomainRequest,
  ImageDto,
  ThirdPartyDto,
  CreateThirdPartyRequest,
  UpdateThirdPartyRequest,
  UpdateThirdPartyStatusRequest,
  GetThirdPartyRequest,
  ThirdPartyType,
  ProposedActivityDto,
  CreateProposedActivityRequest,
  UpdateProposedActivityRequest,
  BusinessActorDto,
  CreateBusinessActorRequest,
  UpdateBusinessActorRequest,
  BusinessActorType,
  ApplicationDto,
  CreateApplicationRequest,
  ApplicationKeyDto,
} from "@/types/organization";
import { toast } from "sonner";

const APP_URL =
  typeof window !== "undefined"
    ? window.location.origin
    : process.env.NEXTAUTH_URL ||
    process.env.VERCEL_URL ||
    "http://localhost:3000";
const MOCK_API_ORG_BASE = `${APP_URL}/api/mock/organization`; // For org-specific things
const MOCK_API_GLOBAL_ORG_ENTITIES_BASE = `${APP_URL}/api/mock`; // For global entities managed by OrgService (like BusinessDomain, BusinessActor, Applications)

export class OrganizationLocalRepository implements IOrganizationRepository {


  private async fetchMockApi<T>(
    endpoint: string,
    options: RequestInit = {},
    base = MOCK_API_ORG_BASE
  ): Promise<T> {
    const response = await fetch(`${base}${endpoint}`, {
      ...options,
      headers: { "Content-Type": "application/json", ...options.headers },
    });
    const responseContentType = response.headers.get("content-type");
    let responseData;
    if (responseContentType && responseContentType.includes("application/json")) {
      responseData = await response.json();
    }
    else if (response.status !== 204)
      responseData = {
        message: (await response.text()) || response.statusText,
      };
    if (!response.ok) {
      const errorPayload = responseData || {
        message: `Request to ${endpoint} failed`,
      };
      console.error(
        `[OrgLocalRepo] Mock API Error: ${response.status}`,
        errorPayload
      );

      throw {
        status: response.status,
        message: errorPayload.message,
        data: errorPayload,
      };
    }
    return responseData as T;
  }

  // Organizations
  async getMyOrganizations(): Promise<OrganizationDto[]> {
    return this.fetchMockApi<OrganizationDto[]>("/user-orgs");
  }
  async getAllOrganizations(): Promise<OrganizationDto[]> {
    return this.fetchMockApi<OrganizationDto[]>("/all");
  }
  async getOrganizationsByDomain(
    domainId: string
  ): Promise<OrganizationDto[]> {
    return this.fetchMockApi<OrganizationDto[]>(`/domain/${domainId}`);
  }
  async getOrganizationById(orgId: string): Promise<OrganizationDto | null> {
    return this.fetchMockApi<OrganizationDto | null>(`/${orgId}`, {}, MOCK_API_ORG_BASE);
  }
  async createOrganization(
    data: CreateOrganizationRequest
  ): Promise<OrganizationDto> {
    return this.fetchMockApi<OrganizationDto>("", {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async updateOrganization(
    orgId: string,
    data: UpdateOrganizationRequest
  ): Promise<OrganizationDto> {
    return this.fetchMockApi<OrganizationDto>(`/${orgId}`, {
      method: "PUT",
      body: JSON.stringify(data),
    });
  }
  async deleteOrganization(orgId: string): Promise<void> {
    return this.fetchMockApi<void>(`/${orgId}/delete`, { method: "DELETE" });
  }
  async updateOrganizationStatus(
    orgId: string,
    data: UpdateOrganizationStatusRequest
  ): Promise<OrganizationDto> {
    return this.fetchMockApi<OrganizationDto>(`/${orgId}/status`, {
      method: "PUT",
      body: JSON.stringify(data),
    });
  }
  async addBusinessDomainToOrg(
    orgId: string,
    businessDomainId: string
  ): Promise<OrganizationDto> {
    return this.fetchMockApi<OrganizationDto>(
      `/${orgId}/domains/${businessDomainId}/add`,
      { method: "PUT" }
    );
  }
  async removeBusinessDomainFromOrg(
    orgId: string,
    businessDomainId: string
  ): Promise<OrganizationDto> {
    return this.fetchMockApi<OrganizationDto>(
      `/${orgId}/domains/${businessDomainId}/remove`,
      { method: "DELETE" }
    );
  }

  // Contacts
  async getContacts(
    contactableType: ContactableType,
    contactableId: string
  ): Promise<ContactDto[]> {
    return this.fetchMockApi<ContactDto[]>(
      `/${contactableType}/${contactableId}/contacts`, {}, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async getContactById(
    contactableType: ContactableType,
    contactableId: string,
    contactId: string
  ): Promise<ContactDto | null> {
    return this.fetchMockApi<ContactDto | null>(
      `/${contactableType}/${contactableId}/contacts/${contactId}`, {}, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async createContact(
    contactableType: ContactableType,
    contactableId: string,
    data: CreateContactRequest
  ): Promise<ContactDto> {
    return this.fetchMockApi<ContactDto>(
      `/${contactableType}/${contactableId}/contacts`,
      { method: "POST", body: JSON.stringify(data) }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async updateContact(
    contactableType: ContactableType,
    contactableId: string,
    contactId: string,
    data: UpdateContactRequest
  ): Promise<ContactDto> {
    return this.fetchMockApi<ContactDto>(
      `/${contactableType}/${contactableId}/contacts/${contactId}`,
      { method: "PUT", body: JSON.stringify(data) }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async deleteContactById(
    contactableType: ContactableType,
    contactableId: string,
    contactId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${contactableType}/${contactableId}/contacts/${contactId}`,
      { method: "DELETE" }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async markContactAsFavorite(
    contactableType: ContactableType,
    contactableId: string,
    contactId: string
  ): Promise<ContactDto> {
    return this.fetchMockApi<ContactDto>(
      `/${contactableType}/${contactableId}/contacts/${contactId}/favorite`,
      { method: "PUT" }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }

  // Addresses
  async getAddresses(
    addressableType: AddressableType,
    addressableId: string
  ): Promise<AddressDto[]> {
    return this.fetchMockApi<AddressDto[]>(
      `/${addressableType}/${addressableId}/addresses`
      , {}, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async getAddressById(
    addressableType: AddressableType,
    addressableId: string,
    addressId: string
  ): Promise<AddressDto | null> {
    return this.fetchMockApi<AddressDto | null>(
      `/${addressableType}/${addressableId}/addresses/${addressId}`, {}, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async createAddress(
    addressableType: AddressableType,
    addressableId: string,
    data: CreateAddressRequest
  ): Promise<AddressDto> {
    return this.fetchMockApi<AddressDto>(
      `/${addressableType}/${addressableId}/addresses`,
      { method: "POST", body: JSON.stringify(data) }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async updateAddress(
    addressableType: AddressableType,
    addressableId: string,
    addressId: string,
    data: UpdateAddressRequest
  ): Promise<AddressDto> {
    return this.fetchMockApi<AddressDto>(
      `/${addressableType}/${addressableId}/addresses/${addressId}`,
      { method: "PUT", body: JSON.stringify(data) }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async deleteAddressById(
    addressableType: AddressableType,
    addressableId: string,
    addressId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${addressableType}/${addressableId}/addresses/${addressId}`,
      { method: "DELETE" }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async markAddressAsFavorite(
    addressableType: AddressableType,
    addressableId: string,
    addressId: string
  ): Promise<AddressDto> {
    return this.fetchMockApi<AddressDto>(
      `/${addressableType}/${addressableId}/addresses/${addressId}/favorite`,
      { method: "PUT" }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }

  // Practical Information
  async getPracticalInformation(
    orgId: string
  ): Promise<PracticalInformationDto[]> {
    return this.fetchMockApi<PracticalInformationDto[]>(
      `/${orgId}/practical-infos`
    );
  }
  async createPracticalInformation(
    orgId: string,
    data: CreatePracticalInformationRequest
  ): Promise<PracticalInformationDto> {
    return this.fetchMockApi<PracticalInformationDto>(
      `/${orgId}/practical-infos`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getPracticalInformationById(
    orgId: string,
    infoId: string
  ): Promise<PracticalInformationDto | null> {
    return this.fetchMockApi<PracticalInformationDto | null>(
      `/${orgId}/practical-infos/${infoId}`
    );
  }
  async updatePracticalInformation(
    orgId: string,
    infoId: string,
    data: UpdatePracticalInformationRequest
  ): Promise<PracticalInformationDto> {
    return this.fetchMockApi<PracticalInformationDto>(
      `/${orgId}/practical-infos/${infoId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deletePracticalInformation(
    orgId: string,
    infoId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/practical-infos/${infoId}`,
      { method: "DELETE" }
    );
  }

  // Certifications
  async getCertifications(orgId: string): Promise<CertificationDto[]> {
    return this.fetchMockApi<CertificationDto[]>(
      `/${orgId}/certifications`
    );
  }
  async createCertification(
    orgId: string,
    data: CreateCertificationRequest
  ): Promise<CertificationDto> {
    return this.fetchMockApi<CertificationDto>(
      `/${orgId}/certifications`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getCertificationById(
    orgId: string,
    certId: string
  ): Promise<CertificationDto | null> {
    return this.fetchMockApi<CertificationDto | null>(
      `/${orgId}/certifications/${certId}`
    );
  }
  async updateCertification(
    orgId: string,
    certId: string,
    data: UpdateCertificationRequest
  ): Promise<CertificationDto> {
    return this.fetchMockApi<CertificationDto>(
      `/${orgId}/certifications/${certId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteCertification(orgId: string, certId: string): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/certifications/${certId}`,
      { method: "DELETE" }
    );
  }

  // Business Domains
  async getAllBusinessDomains(
    params?: GetBusinessDomainRequest
  ): Promise<BusinessDomainDto[]> {
    const q = params ? `?${new URLSearchParams(params as Record<string, string>)}` : "";
    return this.fetchMockApi<BusinessDomainDto[]>(
      `${q}`,
      {},
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-domains"
    );
  }
  async getBusinessDomainById(
    domainId: string
  ): Promise<BusinessDomainDto | null> {
    return this.fetchMockApi<BusinessDomainDto | null>(
      `/${domainId}`,
      {},
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-domains"
    );
  }
  async createBusinessDomain(
    data: CreateBusinessDomainRequest
  ): Promise<BusinessDomainDto> {
    return this.fetchMockApi<BusinessDomainDto>(
      "",
      { method: "POST", body: JSON.stringify(data) },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-domains"
    );
  }
  async updateBusinessDomain(
    domainId: string,
    data: UpdateBusinessDomainRequest
  ): Promise<BusinessDomainDto> {
    return this.fetchMockApi<BusinessDomainDto>(
      `/${domainId}`,
      { method: "PUT", body: JSON.stringify(data) },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-domains"
    );
  }
  async deleteBusinessDomain(domainId: string): Promise<void> {
    return this.fetchMockApi<void>(
      `/${domainId}`,
      { method: "DELETE" },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-domains"
    );
  }

  // Agencies
  async getAgencies(orgId: string, active?: boolean): Promise<AgencyDto[]> {
    const q = active !== undefined ? `?active=${active}` : "";
    return this.fetchMockApi<AgencyDto[]>(`/${orgId}/agencies${q}`);
  }
  async createAgency(
    orgId: string,
    data: CreateAgencyRequest
  ): Promise<AgencyDto> {
    return this.fetchMockApi<AgencyDto>(`/${orgId}/agencies`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async getAgencyById(
    orgId: string,
    agencyId: string
  ): Promise<AgencyDto | null> {
    return this.fetchMockApi<AgencyDto | null>(
      `/${orgId}/agencies/${agencyId}`
    );
  }
  async updateAgency(
    orgId: string,
    agencyId: string,
    data: UpdateAgencyRequest
  ): Promise<AgencyDto> {
    return this.fetchMockApi<AgencyDto>(
      `/${orgId}/agencies/${agencyId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteAgency(orgId: string, agencyId: string): Promise<void> {
    return this.fetchMockApi<void>(`/${orgId}/agencies/${agencyId}`, {
      method: "DELETE",
    });
  }
  async updateAgencyStatus(
    orgId: string,
    agencyId: string,
    data: UpdateAgencyStatusRequest
  ): Promise<AgencyDto> {
    return this.fetchMockApi<AgencyDto>(
      `/${orgId}/agencies/${agencyId}/status`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }

  // Employees (Org-scoped)
  async getOrgEmployees(orgId: string): Promise<EmployeeDto[]> {
    return this.fetchMockApi<EmployeeDto[]>(`/${orgId}/employees`);
  }
  async createOrgEmployee(
    orgId: string,
    data: CreateEmployeeRequest
  ): Promise<EmployeeResponse> {
    return this.fetchMockApi<EmployeeResponse>(`/${orgId}/employees`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async getOrgEmployeeById(
    orgId: string,
    employeeId: string
  ): Promise<EmployeeDto | null> {
    return this.fetchMockApi<EmployeeDto | null>(
      `/${orgId}/employees/${employeeId}`
    );
  }
  async updateOrgEmployee(
    orgId: string,
    employeeId: string,
    data: UpdateEmployeeRequest
  ): Promise<EmployeeResponse> {
    return this.fetchMockApi<EmployeeResponse>(
      `/${orgId}/employees/${employeeId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteOrgEmployee(orgId: string, employeeId: string): Promise<void> {
    return this.fetchMockApi<void>(`/${orgId}/employees/${employeeId}`, {
      method: "DELETE",
    });
  }

  // Employees (Agency-scoped)
  async getAgencyEmployees(
    orgId: string,
    agencyId: string
  ): Promise<EmployeeDto[]> {
    return this.fetchMockApi<EmployeeDto[]>(
      `/${orgId}/agencies/${agencyId}/employees`,
    );
  }
  async createAgencyEmployee(
    orgId: string,
    agencyId: string,
    data: CreateEmployeeRequest
  ): Promise<EmployeeResponse> {
    return this.fetchMockApi<EmployeeResponse>(
      `/${orgId}/agencies/${agencyId}/employees`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getAgencyEmployeeById(
    orgId: string,
    agencyId: string,
    employeeId: string
  ): Promise<EmployeeDto | null> {
    return this.fetchMockApi<EmployeeDto | null>(
      `/${orgId}/agencies/${agencyId}/employees/${employeeId}`
    );
  }
  async updateAgencyEmployee(
    orgId: string,
    agencyId: string,
    employeeId: string,
    data: UpdateEmployeeRequest
  ): Promise<EmployeeResponse> {
    return this.fetchMockApi<EmployeeResponse>(
      `/${orgId}/agencies/${agencyId}/employees/${employeeId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteAgencyEmployee(
    orgId: string,
    agencyId: string,
    employeeId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/agencies/${agencyId}/employees/${employeeId}`,
      { method: "DELETE" }
    );
  }
  async affectEmployeeToAgency(
    orgId: string,
    agencyId: string,
    data: AffectEmployeeRequest
  ): Promise<EmployeeResponse> {
    return this.fetchMockApi<EmployeeResponse>(
      `/${orgId}/agencies/${agencyId}/employees/add`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }

  // SalesPersons (Org-scoped)
  async getOrgSalesPersons(orgId: string): Promise<SalesPersonDto[]> {
    return this.fetchMockApi<SalesPersonDto[]>(`/${orgId}/sales-people`);
  }
  async createOrgSalesPerson(
    orgId: string,
    data: CreateSalesPersonRequest
  ): Promise<SalesPersonDto> {
    return this.fetchMockApi<SalesPersonDto>(`/${orgId}/sales-people`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async getOrgSalesPersonById(
    orgId: string,
    salesPersonId: string
  ): Promise<SalesPersonDto | null> {
    return this.fetchMockApi<SalesPersonDto | null>(
      `/${orgId}/sales-people/${salesPersonId}`
    );
  }
  async updateOrgSalesPerson(
    orgId: string,
    salesPersonId: string,
    data: UpdateSalesPersonRequest
  ): Promise<SalesPersonDto> {
    return this.fetchMockApi<SalesPersonDto>(
      `/${orgId}/sales-people/${salesPersonId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteOrgSalesPerson(
    orgId: string,
    salesPersonId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/sales-people/${salesPersonId}`,
      { method: "DELETE" }
    );
  }

  // SalesPersons (Agency-scoped)
  async getAgencySalesPersons(
    orgId: string,
    agencyId: string
  ): Promise<SalesPersonDto[]> {
    return this.fetchMockApi<SalesPersonDto[]>(
      `/${orgId}/agencies/${agencyId}/sales-people`
    );
  }
  async createAgencySalesPerson(
    orgId: string,
    agencyId: string,
    data: CreateSalesPersonRequest
  ): Promise<SalesPersonDto> {
    return this.fetchMockApi<SalesPersonDto>(
      `/${orgId}/agencies/${agencyId}/sales-people`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getAgencySalesPersonById(
    orgId: string,
    agencyId: string,
    salesPersonId: string
  ): Promise<SalesPersonDto | null> {
    return this.fetchMockApi<SalesPersonDto | null>(
      `/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`
    );
  }
  async updateAgencySalesPerson(
    orgId: string,
    agencyId: string,
    salesPersonId: string,
    data: UpdateSalesPersonRequest
  ): Promise<SalesPersonDto> {
    return this.fetchMockApi<SalesPersonDto>(
      `/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteAgencySalesPerson(
    orgId: string,
    agencyId: string,
    salesPersonId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`,
      { method: "DELETE" }
    );
  }

  // Customers (Organization-linked)
  async getOrgCustomers(orgId: string): Promise<CustomerDto[]> {
    return this.fetchMockApi<CustomerDto[]>(`/${orgId}/customers`);
  }
  async createOrgCustomer(
    orgId: string,
    data: CreateCustomerRequest
  ): Promise<CustomerDto> {
    return this.fetchMockApi<CustomerDto>(`/${orgId}/customers`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async getOrgCustomerById(
    orgId: string,
    customerId: string
  ): Promise<CustomerDto | null> {
    return this.fetchMockApi<CustomerDto | null>(
      `/${orgId}/customers/${customerId}`
    );
  }
  async updateOrgCustomer(
    orgId: string,
    customerId: string,
    data: UpdateCustomerRequest
  ): Promise<CustomerDto> {
    return this.fetchMockApi<CustomerDto>(
      `/${orgId}/customers/${customerId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteOrgCustomer(orgId: string, customerId: string): Promise<void> {
    return this.fetchMockApi<void>(`/${orgId}/customers/${customerId}`, {
      method: "DELETE",
    });
  }

  // Customers (Agency-scoped)
  async getAgencyCustomers(
    orgId: string,
    agencyId: string
  ): Promise<CustomerDto[]> {
    return this.fetchMockApi<CustomerDto[]>(
      `/${orgId}/agencies/${agencyId}/customers`,
    );
  }
  async createAgencyCustomer(
    orgId: string,
    agencyId: string,
    data: CreateCustomerRequest
  ): Promise<CustomerDto> {
    return this.fetchMockApi<CustomerDto>(
      `/${orgId}/agencies/${agencyId}/customers`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getAgencyCustomerById(
    orgId: string,
    agencyId: string,
    customerId: string
  ): Promise<CustomerDto | null> {
    return this.fetchMockApi<CustomerDto | null>(
      `/${orgId}/agencies/${agencyId}/customers/${customerId}`
    );
  }
  async updateAgencyCustomer(
    orgId: string,
    agencyId: string,
    customerId: string,
    data: UpdateCustomerRequest
  ): Promise<CustomerDto> {
    return this.fetchMockApi<CustomerDto>(
      `/${orgId}/agencies/${agencyId}/customers/${customerId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteAgencyCustomer(
    orgId: string,
    agencyId: string,
    customerId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/agencies/${agencyId}/customers/${customerId}`,
      { method: "DELETE" }
    );
  }
  async affectCustomerToAgency(
    orgId: string,
    agencyId: string,
    data: AffectCustomerRequest
  ): Promise<CustomerDto> {
    return this.fetchMockApi<CustomerDto>(
      `/${orgId}/agencies/${agencyId}/customers/add`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }

  // Suppliers (Providers) (Org-scoped)
  async getOrgSuppliers(orgId: string): Promise<ProviderDto[]> {
    return this.fetchMockApi<ProviderDto[]>(`/${orgId}/suppliers`);
  }
  async createOrgSupplier(
    orgId: string,
    data: CreateProviderRequest
  ): Promise<ProviderDto> {
    return this.fetchMockApi<ProviderDto>(`/${orgId}/suppliers`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async getOrgSupplierById(
    orgId: string,
    providerId: string
  ): Promise<ProviderDto | null> {
    return this.fetchMockApi<ProviderDto | null>(
      `/${orgId}/suppliers/${providerId}`
    );
  }
  async updateOrgSupplier(
    orgId: string,
    providerId: string,
    data: UpdateProviderRequest
  ): Promise<ProviderDto> {
    return this.fetchMockApi<ProviderDto>(
      `/${orgId}/suppliers/${providerId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteOrgSupplier(orgId: string, providerId: string): Promise<void> {
    return this.fetchMockApi<void>(`/${orgId}/suppliers/${providerId} `, {
      method: "DELETE",
    });
  }

  // Suppliers (Providers) (Agency-scoped)
  async getAgencySuppliers(
    orgId: string,
    agencyId: string
  ): Promise<ProviderDto[]> {
    return this.fetchMockApi<ProviderDto[]>(
      `/${orgId}/agencies/${agencyId}/suppliers`
    );
  }
  async createAgencySupplier(
    orgId: string,
    agencyId: string,
    data: CreateProviderRequest
  ): Promise<ProviderDto> {
    return this.fetchMockApi<ProviderDto>(
      `/${orgId}/agencies/${agencyId}/suppliers`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getAgencySupplierById(
    orgId: string,
    agencyId: string,
    providerId: string
  ): Promise<ProviderDto | null> {
    return this.fetchMockApi<ProviderDto | null>(
      `/${orgId}/agencies/${agencyId}/suppliers/${providerId}`
    );
  }
  async updateAgencySupplier(
    orgId: string,
    agencyId: string,
    providerId: string,
    data: UpdateProviderRequest
  ): Promise<ProviderDto> {
    return this.fetchMockApi<ProviderDto>(
      `/${orgId}/agencies/${agencyId}/suppliers/${providerId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteAgencySupplier(
    orgId: string,
    agencyId: string,
    providerId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/agencies/${agencyId}/suppliers/${providerId} `,
      { method: "DELETE" }
    );
  }
  async affectSupplierToAgency(
    orgId: string,
    agencyId: string,
    data: AffectProviderRequest
  ): Promise<ProviderDto> {
    return this.fetchMockApi<ProviderDto>(
      `/${orgId}/agencies/${agencyId}/suppliers/add`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }

  // Prospects - (Org-scoped)
  async getOrgProspects(orgId: string): Promise<ProspectDto[]> {
    return this.fetchMockApi<ProspectDto[]>(`/${orgId}/prospects`);
  }
  async createOrgProspect(
    orgId: string,
    data: CreateProspectRequest
  ): Promise<ProspectDto> {
    return this.fetchMockApi<ProspectDto>(`/${orgId}/prospects`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async getOrgProspectById(
    orgId: string,
    prospectId: string
  ): Promise<ProspectDto | null> {
    return this.fetchMockApi<ProspectDto | null>(
      `/${orgId}/prospects/${prospectId}`
    );
  }
  async updateOrgProspect(
    orgId: string,
    prospectId: string,
    data: UpdateProspectRequest
  ): Promise<ProspectDto> {
    return this.fetchMockApi<ProspectDto>(
      `/${orgId}/prospects/${prospectId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteOrgProspect(orgId: string, prospectId: string): Promise<void> {
    return this.fetchMockApi<void>(`/${orgId}/prospects/${prospectId} `, {
      method: "DELETE",
    });
  }

  // Prospects - (Agency-scoped)
  async getAgencyProspects(
    orgId: string,
    agencyId: string
  ): Promise<ProspectDto[]> {
    return this.fetchMockApi<ProspectDto[]>(
      `/${orgId}/agencies/${agencyId}/prospects`
    );
  }
  async createAgencyProspect(
    orgId: string,
    agencyId: string,
    data: CreateProspectRequest
  ): Promise<ProspectDto> {
    return this.fetchMockApi<ProspectDto>(
      `/${orgId}/agencies/${agencyId}/prospects`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getAgencyProspectById(
    orgId: string,
    agencyId: string,
    prospectId: string
  ): Promise<ProspectDto | null> {
    return this.fetchMockApi<ProspectDto | null>(
      `/${orgId}/agencies/${agencyId}/prospects/${prospectId}`
    );
  }
  async updateAgencyProspect(
    orgId: string,
    agencyId: string,
    prospectId: string,
    data: UpdateProspectRequest
  ): Promise<ProspectDto> {
    return this.fetchMockApi<ProspectDto>(
      `/${orgId}/agencies/${agencyId}/prospects/${prospectId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteAgencyProspect(
    orgId: string,
    agencyId: string,
    prospectId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/agencies/${agencyId}/prospects/${prospectId} `,
      { method: "DELETE" }
    );
  }

  // Business Actors
  async getAllBusinessActors(): Promise<BusinessActorDto[]> {
    return this.fetchMockApi<BusinessActorDto[]>("", {}, `${MOCK_API_GLOBAL_ORG_ENTITIES_BASE}/business-actors`);
  }
  async createBusinessActor(
    data: CreateBusinessActorRequest
  ): Promise<BusinessActorDto> {
    return this.fetchMockApi<BusinessActorDto>(
      "",
      { method: "POST", body: JSON.stringify(data) },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-actors"
    );
  }
  async getBusinessActorById(baId: string): Promise<BusinessActorDto | null> {
    return this.fetchMockApi<BusinessActorDto | null>(`/${baId}`, {}, `${MOCK_API_GLOBAL_ORG_ENTITIES_BASE}/business-actors`);
  }

  async updateBusinessActor(
    baId: string,
    data: UpdateBusinessActorRequest
  ): Promise<BusinessActorDto> {
    return this.fetchMockApi<BusinessActorDto>(
      `/${baId}`,
      { method: "PUT", body: JSON.stringify(data) },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-actors"
    );
  }
  async deleteBusinessActor(baId: string): Promise<void> {
    return this.fetchMockApi<void>(
      `/${baId} `,
      { method: "DELETE" },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-actors"
    );
  }
  async getBusinessActorsByType(
    type: BusinessActorType
  ): Promise<BusinessActorDto[]> {
    return this.fetchMockApi<BusinessActorDto[]>(
      `/type/${type}`,
      {},
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-actors"
    );
    // const orgs = await this.fetchMockApi<OrganizationDto[]>("/all");
  }

  // Images
  async uploadOrganizationImages(
    orgId: string,
    formData: FormData
  ): Promise<ImageDto[]> {
    // For FormData with mock API routes, you typically have a specific route.
    // This simple fetch won send FormData correctly to a generic mock handler without special parsing on the route side.
    // For now, returning a placeholder:
    console.warn(
      "uploadOrganizationImages mock in local repo needs a dedicated mock API route for FormData."
    );
    const files = formData.getAll("images") as File[];
    return Promise.resolve(
      files.map((f) => ({
        id: `mock-img-${Date.now()}`,
        name: f.name,
        size: f.size,
        fileType: f.type,
      }))
    );
  }
  async getOrganizationImageInfo(imageId: string): Promise<ImageDto | null> {
    return this.fetchMockApi<ImageDto | null>(
      `/images/${imageId}`,
      {},
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }

  // ThirdParty
  async getThirdParties(
    orgId: string,
    params: GetThirdPartyRequest
  ): Promise<ThirdPartyDto[]> {
    // This route remains the same as it doesn't conflict.
    return this.fetchMockApi<ThirdPartyDto[]>(
      `/${orgId}/third-parties?${new URLSearchParams(params as any)}`
    );
  }
  async createThirdParty(
    orgId: string,
    type: ThirdPartyType,
    data: CreateThirdPartyRequest
  ): Promise<ThirdPartyDto> {
    // [CHANGE] The route is now static, and the type is part of the body.
    const payload = { ...data, type: type };
    return this.fetchMockApi<ThirdPartyDto>(
      `/${orgId}/third-parties/create`,
      { method: "POST", body: JSON.stringify(payload) }
    );
  }
  async getThirdPartyById(
    orgId: string,
    thirdPartyId: string
  ): Promise<ThirdPartyDto | null> {
    // [CHANGE] The dynamic segment is now explicitly named.
    return this.fetchMockApi<ThirdPartyDto | null>(
      `/${orgId}/third-parties/${thirdPartyId}`
    );
  }
  async updateThirdParty(
    orgId: string,
    thirdPartyId: string,
    data: UpdateThirdPartyRequest
  ): Promise<ThirdPartyDto> {
    // [CHANGE] The dynamic segment is now explicitly named.
    return this.fetchMockApi<ThirdPartyDto>(
      `/${orgId}/third-parties/${thirdPartyId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteThirdParty(orgId: string, thirdPartyId: string): Promise<void> {
    // [CHANGE] The dynamic segment is now explicitly named.
    return this.fetchMockApi<void>(
      `/${orgId}/third-parties/${thirdPartyId}`,
      { method: "DELETE" }
    );
  }
  async updateThirdPartyStatus(
    orgId: string,
    thirdPartyId: string,
    data: UpdateThirdPartyStatusRequest
  ): Promise<ThirdPartyDto> {
    // [CHANGE] The dynamic segment is now explicitly named.
    return this.fetchMockApi<ThirdPartyDto>(
      `/${orgId}/third-parties/${thirdPartyId}/status`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  // Proposed Activities
  async getProposedActivities(
    orgId: string,
    params: { organizationId: string }
  ): Promise<ProposedActivityDto[]> {
    return this.fetchMockApi<ProposedActivityDto[]>(
      `/${orgId}/proposed-activities?${new URLSearchParams(
        params
      ).toString()}`
    );
  } // Ensure mock route handles query
  async createProposedActivity(
    orgId: string,
    data: CreateProposedActivityRequest
  ): Promise<ProposedActivityDto> {
    return this.fetchMockApi<ProposedActivityDto>(
      `/${orgId}/proposed-activities`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getProposedActivityById(
    orgId: string,
    activityId: string
  ): Promise<ProposedActivityDto | null> {
    return this.fetchMockApi<ProposedActivityDto | null>(
      `/${orgId}/proposed-activities/${activityId}`
    );
  }
  async updateProposedActivity(
    orgId: string,
    activityId: string,
    data: UpdateProposedActivityRequest
  ): Promise<ProposedActivityDto> {
    return this.fetchMockApi<ProposedActivityDto>(
      `/${orgId}/proposed-activities/${activityId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteProposedActivity(
    orgId: string,
    activityId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/proposed-activities/${activityId}`,
      { method: "DELETE" }
    );
  }

  // Applications & Keys
  async getAllApplications(): Promise<ApplicationDto[]> {
    return this.fetchMockApi<ApplicationDto[]>(
      ``,
      {},
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/applications"
    );
  }
  async createApplication(
    data: CreateApplicationRequest
  ): Promise<ApplicationDto> {
    return this.fetchMockApi<ApplicationDto>(
      ``,
      { method: "POST", body: JSON.stringify(data) },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/applications"
    );
  }
  async getApplicationKeys(
    applicationId: string
  ): Promise<ApplicationKeyDto[]> {
    return this.fetchMockApi<ApplicationKeyDto[]>(
      `/${applicationId}/keys`,
      {},
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/applications"
    );
  }
  async createApiKey(applicationId: string): Promise<ApplicationKeyDto> {
    return this.fetchMockApi<ApplicationKeyDto>(
      `/${applicationId}/keys`,
      { method: "POST" },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/applications"
    );
  }
}
// END OF FILE: lib/data-repo/organization/organization-local-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/organization/organization-remote-repository.ts

// lib/data-repo/organization/organization-remote-repository.ts
import { IOrganizationRepository } from './organization-repository-interface';
import { /* Import ALL DTOs and Request types used in the interface */
  OrganizationDto, CreateOrganizationRequest, UpdateOrganizationRequest, UpdateOrganizationStatusRequest,
  ContactDto, CreateContactRequest, UpdateContactRequest, ContactableType,
  AddressDto, CreateAddressRequest, UpdateAddressRequest, AddressableType,
  AgencyDto, CreateAgencyRequest, UpdateAgencyRequest, UpdateAgencyStatusRequest,
  EmployeeDto, CreateEmployeeRequest, UpdateEmployeeRequest, AffectEmployeeRequest, EmployeeResponse,
  SalesPersonDto, CreateSalesPersonRequest, UpdateSalesPersonRequest,
  CustomerDto, CreateCustomerRequest, UpdateCustomerRequest, AffectCustomerRequest,
  ProviderDto, CreateProviderRequest, UpdateProviderRequest, AffectProviderRequest,
  ProspectDto, CreateProspectRequest, UpdateProspectRequest,
  PracticalInformationDto, CreatePracticalInformationRequest, UpdatePracticalInformationRequest,
  CertificationDto, CreateCertificationRequest, UpdateCertificationRequest,
  BusinessDomainDto, CreateBusinessDomainRequest, UpdateBusinessDomainRequest, GetBusinessDomainRequest,
  ImageDto,
  ThirdPartyDto, CreateThirdPartyRequest, UpdateThirdPartyRequest, UpdateThirdPartyStatusRequest, GetThirdPartyRequest, ThirdPartyType,
  ProposedActivityDto, CreateProposedActivityRequest, UpdateProposedActivityRequest,
  BusinessActorDto, CreateBusinessActorRequest, UpdateBusinessActorRequest, BusinessActorType,
  ApplicationDto, CreateApplicationRequest, ApplicationKeyDto,
} from '@/types/organization';
import { yowyobOrganizationApi } from '@/lib/apiClient';

export class OrganizationRemoteRepository implements IOrganizationRepository {
  // Organizations
  async getMyOrganizations(): Promise<OrganizationDto[]> {
    return yowyobOrganizationApi.getMyOrganizations();
  }
  async getAllOrganizations(): Promise<OrganizationDto[]> {
    return yowyobOrganizationApi.getAllOrganizations();
  }
  async getOrganizationsByDomain(domainId: string): Promise<OrganizationDto[]> {
    return yowyobOrganizationApi.getOrganizationsByDomain(domainId);
  }
  async getOrganizationById(orgId: string): Promise<OrganizationDto | null> {
    return yowyobOrganizationApi.getOrganizationById(orgId).catch(e => (e.status === 404 ? null : Promise.reject(e)));
  }
  async createOrganization(data: CreateOrganizationRequest): Promise<OrganizationDto> { return yowyobOrganizationApi.createOrganization(data); }
  async updateOrganization(orgId: string, data: UpdateOrganizationRequest): Promise<OrganizationDto> { return yowyobOrganizationApi.updateOrganization(orgId, data); }
  async deleteOrganization(orgId: string): Promise<void> { return yowyobOrganizationApi.deleteOrganization(orgId); }
  async updateOrganizationStatus(orgId: string, data: UpdateOrganizationStatusRequest): Promise<OrganizationDto> { return yowyobOrganizationApi.updateOrganizationStatus(orgId, data); }
  async addBusinessDomainToOrg(orgId: string, businessDomainId: string): Promise<OrganizationDto> { return yowyobOrganizationApi.addBusinessDomainToOrg(orgId, businessDomainId); }
  async removeBusinessDomainFromOrg(orgId: string, businessDomainId: string): Promise<OrganizationDto> { return yowyobOrganizationApi.removeBusinessDomainFromOrg(orgId, businessDomainId); }

  // Contacts
  async getContacts(contactableType: ContactableType, contactableId: string): Promise<ContactDto[]> { return yowyobOrganizationApi.getContacts(contactableType, contactableId); }
  async getContactById(contactableType: ContactableType, contactableId: string, contactId: string): Promise<ContactDto | null> { return yowyobOrganizationApi.getContactById(contactableType, contactableId, contactId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async createContact(contactableType: ContactableType, contactableId: string, data: CreateContactRequest): Promise<ContactDto> { return yowyobOrganizationApi.createContact(contactableType, contactableId, data); }
  async updateContact(contactableType: ContactableType, contactableId: string, contactId: string, data: UpdateContactRequest): Promise<ContactDto> { return yowyobOrganizationApi.updateContact(contactableType, contactableId, contactId, data); }
  async deleteContactById(contactableType: ContactableType, contactableId: string, contactId: string): Promise<void> { return yowyobOrganizationApi.deleteContactById(contactableType, contactableId, contactId); }
  async markContactAsFavorite(contactableType: ContactableType, contactableId: string, contactId: string): Promise<ContactDto> { return yowyobOrganizationApi.markContactAsFavorite(contactableType, contactableId, contactId); }

  // Addresses
  async getAddresses(addressableType: AddressableType, addressableId: string): Promise<AddressDto[]> { return yowyobOrganizationApi.getAddresses(addressableType, addressableId); }
  async getAddressById(addressableType: AddressableType, addressableId: string, addressId: string): Promise<AddressDto | null> { return yowyobOrganizationApi.getAddressById(addressableType, addressableId, addressId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async createAddress(addressableType: AddressableType, addressableId: string, data: CreateAddressRequest): Promise<AddressDto> { return yowyobOrganizationApi.createAddress(addressableType, addressableId, data); }
  async updateAddress(addressableType: AddressableType, addressableId: string, addressId: string, data: UpdateAddressRequest): Promise<AddressDto> { return yowyobOrganizationApi.updateAddress(addressableType, addressableId, addressId, data); }
  async deleteAddressById(addressableType: AddressableType, addressableId: string, addressId: string): Promise<void> { return yowyobOrganizationApi.deleteAddressById(addressableType, addressableId, addressId); }
  async markAddressAsFavorite(addressableType: AddressableType, addressableId: string, addressId: string): Promise<AddressDto> { return yowyobOrganizationApi.markAddressAsFavorite(addressableType, addressableId, addressId); }

  // Practical Information
  async getPracticalInformation(orgId: string): Promise<PracticalInformationDto[]> { return yowyobOrganizationApi.getPracticalInformation(orgId, { organizationId: orgId }); }
  async createPracticalInformation(orgId: string, data: CreatePracticalInformationRequest): Promise<PracticalInformationDto> { return yowyobOrganizationApi.createPracticalInformation(orgId, data); }
  async getPracticalInformationById(orgId: string, infoId: string): Promise<PracticalInformationDto | null> { return yowyobOrganizationApi.getPracticalInformationById(orgId, infoId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updatePracticalInformation(orgId: string, infoId: string, data: UpdatePracticalInformationRequest): Promise<PracticalInformationDto> { return yowyobOrganizationApi.updatePracticalInformation(orgId, infoId, data); }
  async deletePracticalInformation(orgId: string, infoId: string): Promise<void> { return yowyobOrganizationApi.deletePracticalInformation(orgId, infoId); }

  // Certifications
  async getCertifications(orgId: string): Promise<CertificationDto[]> { return yowyobOrganizationApi.getCertifications(orgId); }
  async createCertification(orgId: string, data: CreateCertificationRequest): Promise<CertificationDto> { return yowyobOrganizationApi.createCertification(orgId, data); }
  async getCertificationById(orgId: string, certId: string): Promise<CertificationDto | null> { return yowyobOrganizationApi.getCertificationById(orgId, certId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateCertification(orgId: string, certId: string, data: UpdateCertificationRequest): Promise<CertificationDto> { return yowyobOrganizationApi.updateCertification(orgId, certId, data); }
  async deleteCertification(orgId: string, certId: string): Promise<void> { return yowyobOrganizationApi.deleteCertification(orgId, certId); }

  // Business Domains
  async getAllBusinessDomains(params?: GetBusinessDomainRequest): Promise<BusinessDomainDto[]> { return yowyobOrganizationApi.getAllBusinessDomains(params); }
  async getBusinessDomainById(domainId: string): Promise<BusinessDomainDto | null> { return yowyobOrganizationApi.getBusinessDomainById(domainId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async createBusinessDomain(data: CreateBusinessDomainRequest): Promise<BusinessDomainDto> { return yowyobOrganizationApi.createBusinessDomain(data); }
  async updateBusinessDomain(domainId: string, data: UpdateBusinessDomainRequest): Promise<BusinessDomainDto> { return yowyobOrganizationApi.updateBusinessDomain(domainId, data); }
  async deleteBusinessDomain(domainId: string): Promise<void> { return yowyobOrganizationApi.deleteBusinessDomain(domainId); }

  // Agencies
  async getAgencies(orgId: string, active?: boolean): Promise<AgencyDto[]> { return yowyobOrganizationApi.getAgencies(orgId, active); }
  async createAgency(orgId: string, data: CreateAgencyRequest): Promise<AgencyDto> { return yowyobOrganizationApi.createAgency(orgId, data); }
  async getAgencyById(orgId: string, agencyId: string): Promise<AgencyDto | null> { return yowyobOrganizationApi.getAgencyById(orgId, agencyId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateAgency(orgId: string, agencyId: string, data: UpdateAgencyRequest): Promise<AgencyDto> { return yowyobOrganizationApi.updateAgency(orgId, agencyId, data); }
  async deleteAgency(orgId: string, agencyId: string): Promise<void> { return yowyobOrganizationApi.deleteAgency(orgId, agencyId); }
  async updateAgencyStatus(orgId: string, agencyId: string, data: UpdateAgencyStatusRequest): Promise<AgencyDto> { return yowyobOrganizationApi.updateAgencyStatus(orgId, agencyId, data); }

  // Employees (Organization-scoped)
  async getOrgEmployees(orgId: string): Promise<EmployeeDto[]> { return yowyobOrganizationApi.getOrgEmployees(orgId); }
  async createOrgEmployee(orgId: string, data: CreateEmployeeRequest): Promise<EmployeeResponse> { return yowyobOrganizationApi.createOrgEmployee(orgId, data); }
  async getOrgEmployeeById(orgId: string, employeeId: string): Promise<EmployeeDto | null> { return yowyobOrganizationApi.getOrgEmployeeById(orgId, employeeId).catch(e => e.status === 404 ? null : Promise.reject(e)); }
  async updateOrgEmployee(orgId: string, employeeId: string, data: UpdateEmployeeRequest): Promise<EmployeeResponse> { return yowyobOrganizationApi.updateOrgEmployee(orgId, employeeId, data); }
  async deleteOrgEmployee(orgId: string, employeeId: string): Promise<void> { return yowyobOrganizationApi.deleteOrgEmployee(orgId, employeeId); }

  // Employees (Agency-scoped)
  async getAgencyEmployees(orgId: string, agencyId: string): Promise<EmployeeDto[]> { return yowyobOrganizationApi.getAgencyEmployees(orgId, agencyId); }
  async createAgencyEmployee(orgId: string, agencyId: string, data: CreateEmployeeRequest): Promise<EmployeeResponse> { return yowyobOrganizationApi.createAgencyEmployee(orgId, agencyId, data); }
  async getAgencyEmployeeById(orgId: string, agencyId: string, employeeId: string): Promise<EmployeeDto | null> { return yowyobOrganizationApi.getAgencyEmployeeById(orgId, agencyId, employeeId).catch(e => e.status === 404 ? null : Promise.reject(e)); }
  async updateAgencyEmployee(orgId: string, agencyId: string, employeeId: string, data: UpdateEmployeeRequest): Promise<EmployeeResponse> { return yowyobOrganizationApi.updateAgencyEmployee(orgId, agencyId, employeeId, data); }
  async deleteAgencyEmployee(orgId: string, agencyId: string, employeeId: string): Promise<void> { return yowyobOrganizationApi.deleteAgencyEmployee(orgId, agencyId, employeeId); }
  async affectEmployeeToAgency(orgId: string, agencyId: string, data: AffectEmployeeRequest): Promise<EmployeeResponse> { return yowyobOrganizationApi.affectEmployeeToAgency(orgId, agencyId, data); }

  // SalesPersons - Placeholder, expand similarly to Employees
  async getOrgSalesPersons(orgId: string): Promise<SalesPersonDto[]> { const s = await yowyobOrganizationApi.getOrgSalesPersons(orgId); return s || []; }
  async createOrgSalesPerson(orgId: string, data: CreateSalesPersonRequest): Promise<SalesPersonDto> { return yowyobOrganizationApi.createOrgSalesPerson(orgId, data); }
  async getOrgSalesPersonById(orgId: string, salesPersonId: string): Promise<SalesPersonDto | null> { return yowyobOrganizationApi.getOrgSalesPersonById(orgId, salesPersonId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateOrgSalesPerson(orgId: string, salesPersonId: string, data: UpdateSalesPersonRequest): Promise<SalesPersonDto> { return yowyobOrganizationApi.updateOrgSalesPerson(orgId, salesPersonId, data); }
  async deleteOrgSalesPerson(orgId: string, salesPersonId: string): Promise<void> { return yowyobOrganizationApi.deleteOrgSalesPerson(orgId, salesPersonId); }
  async getAgencySalesPersons(orgId: string, agencyId: string): Promise<SalesPersonDto[]> { const s = await yowyobOrganizationApi.getAgencySalesPersons(orgId, agencyId); return s || []; }
  async createAgencySalesPerson(orgId: string, agencyId: string, data: CreateSalesPersonRequest): Promise<SalesPersonDto> { return yowyobOrganizationApi.createAgencySalesPerson(orgId, agencyId, data); }
  async getAgencySalesPersonById(orgId: string, agencyId: string, salesPersonId: string): Promise<SalesPersonDto | null> { return yowyobOrganizationApi.getAgencySalesPersonById(orgId, agencyId, salesPersonId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateAgencySalesPerson(orgId: string, agencyId: string, salesPersonId: string, data: UpdateSalesPersonRequest): Promise<SalesPersonDto> { return yowyobOrganizationApi.updateAgencySalesPerson(orgId, agencyId, salesPersonId, data); }
  async deleteAgencySalesPerson(orgId: string, agencyId: string, salesPersonId: string): Promise<void> { return yowyobOrganizationApi.deleteAgencySalesPerson(orgId, agencyId, salesPersonId); }

  // Customers (Organization-linked) - Placeholder
  async getOrgCustomers(orgId: string): Promise<CustomerDto[]> { const c = await yowyobOrganizationApi.getOrgCustomers(orgId); return c || []; }
  async createOrgCustomer(orgId: string, data: CreateCustomerRequest): Promise<CustomerDto> { return yowyobOrganizationApi.createOrgCustomer(orgId, data); }
  async getOrgCustomerById(orgId: string, customerId: string): Promise<CustomerDto | null> { return yowyobOrganizationApi.getOrgCustomerById(orgId, customerId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateOrgCustomer(orgId: string, customerId: string, data: UpdateCustomerRequest): Promise<CustomerDto> { return yowyobOrganizationApi.updateOrgCustomer(orgId, customerId, data); }
  async deleteOrgCustomer(orgId: string, customerId: string): Promise<void> { return yowyobOrganizationApi.deleteOrgCustomer(orgId, customerId); }
  async getAgencyCustomers(orgId: string, agencyId: string): Promise<CustomerDto[]> { const c = await yowyobOrganizationApi.getAgencyCustomers(orgId, agencyId); return c || []; }
  async createAgencyCustomer(orgId: string, agencyId: string, data: CreateCustomerRequest): Promise<CustomerDto> { return yowyobOrganizationApi.createAgencyCustomer(orgId, agencyId, data); }
  async getAgencyCustomerById(orgId: string, agencyId: string, customerId: string): Promise<CustomerDto | null> { return yowyobOrganizationApi.getAgencyCustomerById(orgId, agencyId, customerId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateAgencyCustomer(orgId: string, agencyId: string, customerId: string, data: UpdateCustomerRequest): Promise<CustomerDto> { return yowyobOrganizationApi.updateAgencyCustomer(orgId, agencyId, customerId, data); }
  async deleteAgencyCustomer(orgId: string, agencyId: string, customerId: string): Promise<void> { return yowyobOrganizationApi.deleteAgencyCustomer(orgId, agencyId, customerId); }
  async affectCustomerToAgency(orgId: string, agencyId: string, data: AffectCustomerRequest): Promise<CustomerDto> { return yowyobOrganizationApi.affectCustomerToAgency(orgId, agencyId, data); }

  // Suppliers (Providers) - Placeholder
  async getOrgSuppliers(orgId: string): Promise<ProviderDto[]> { const s = await yowyobOrganizationApi.getOrgSuppliers(orgId); return s || []; }
  async createOrgSupplier(orgId: string, data: CreateProviderRequest): Promise<ProviderDto> { return yowyobOrganizationApi.createOrgSupplier(orgId, data); }
  async getOrgSupplierById(orgId: string, providerId: string): Promise<ProviderDto | null> { return yowyobOrganizationApi.getOrgSupplierById(orgId, providerId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateOrgSupplier(orgId: string, providerId: string, data: UpdateProviderRequest): Promise<ProviderDto> { return yowyobOrganizationApi.updateOrgSupplier(orgId, providerId, data); }
  async deleteOrgSupplier(orgId: string, providerId: string): Promise<void> { return yowyobOrganizationApi.deleteOrgSupplier(orgId, providerId); }
  async getAgencySuppliers(orgId: string, agencyId: string): Promise<ProviderDto[]> { const s = await yowyobOrganizationApi.getAgencySuppliers(orgId, agencyId); return s || []; }
  async createAgencySupplier(orgId: string, agencyId: string, data: CreateProviderRequest): Promise<ProviderDto> { return yowyobOrganizationApi.createAgencySupplier(orgId, agencyId, data); }
  async getAgencySupplierById(orgId: string, agencyId: string, providerId: string): Promise<ProviderDto | null> { return yowyobOrganizationApi.getAgencySupplierById(orgId, agencyId, providerId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateAgencySupplier(orgId: string, agencyId: string, providerId: string, data: UpdateProviderRequest): Promise<ProviderDto> { return yowyobOrganizationApi.updateAgencySupplier(orgId, agencyId, providerId, data); }
  async deleteAgencySupplier(orgId: string, agencyId: string, providerId: string): Promise<void> { return yowyobOrganizationApi.deleteAgencySupplier(orgId, agencyId, providerId); }
  async affectSupplierToAgency(orgId: string, agencyId: string, data: AffectProviderRequest): Promise<ProviderDto> { return yowyobOrganizationApi.affectSupplierToAgency(orgId, agencyId, data); }

  // Prospects - Placeholder
  async getOrgProspects(orgId: string): Promise<ProspectDto[]> { const p = await yowyobOrganizationApi.getOrgProspects(orgId); return p || []; }
  async createOrgProspect(orgId: string, data: CreateProspectRequest): Promise<ProspectDto> { return yowyobOrganizationApi.createOrgProspect(orgId, data); }
  async getOrgProspectById(orgId: string, prospectId: string): Promise<ProspectDto | null> { return yowyobOrganizationApi.getOrgProspectById(orgId, prospectId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateOrgProspect(orgId: string, prospectId: string, data: UpdateProspectRequest): Promise<ProspectDto> { return yowyobOrganizationApi.updateOrgProspect(orgId, prospectId, data); }
  async deleteOrgProspect(orgId: string, prospectId: string): Promise<void> { return yowyobOrganizationApi.deleteOrgProspect(orgId, prospectId); }
  async getAgencyProspects(orgId: string, agencyId: string): Promise<ProspectDto[]> { const p = await yowyobOrganizationApi.getAgencyProspects(orgId, agencyId); return p || []; }
  async createAgencyProspect(orgId: string, agencyId: string, data: CreateProspectRequest): Promise<ProspectDto> { return yowyobOrganizationApi.createAgencyProspect(orgId, agencyId, data); }
  async getAgencyProspectById(orgId: string, agencyId: string, prospectId: string): Promise<ProspectDto | null> { return yowyobOrganizationApi.getAgencyProspectById(orgId, agencyId, prospectId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateAgencyProspect(orgId: string, agencyId: string, prospectId: string, data: UpdateProspectRequest): Promise<ProspectDto> { return yowyobOrganizationApi.updateAgencyProspect(orgId, agencyId, prospectId, data); }
  async deleteAgencyProspect(orgId: string, agencyId: string, prospectId: string): Promise<void> { return yowyobOrganizationApi.deleteAgencyProspect(orgId, agencyId, prospectId); }


  // Business Actors
  async getAllBusinessActors(): Promise<BusinessActorDto[]> {
    return yowyobOrganizationApi.getAllBusinessActors();
  }
  async createBusinessActor(data: CreateBusinessActorRequest): Promise<BusinessActorDto> { return yowyobOrganizationApi.createBusinessActor(data); }
  async getBusinessActorById(baId: string): Promise<BusinessActorDto | null> {
    return yowyobOrganizationApi.getBusinessActorById(baId).catch(e => (e.status === 404 ? null : Promise.reject(e)));
  }
  async updateBusinessActor(baId: string, data: UpdateBusinessActorRequest): Promise<BusinessActorDto> { return yowyobOrganizationApi.updateBusinessActor(baId, data); }
  async deleteBusinessActor(baId: string): Promise<void> { return yowyobOrganizationApi.deleteBusinessActor(baId); }
  async getBusinessActorsByType(type: BusinessActorType): Promise<BusinessActorDto[]> {
    return yowyobOrganizationApi.getBusinessActorsByType(type);
  }

  // Images
  async uploadOrganizationImages(orgId: string, formData: FormData): Promise<ImageDto[]> { return yowyobOrganizationApi.uploadOrganizationImages(orgId, formData); }
  async getOrganizationImageInfo(imageId: string): Promise<ImageDto | null> { return yowyobOrganizationApi.getOrganizationImageInfo(imageId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }

  // ThirdParty
  async getThirdParties(orgId: string, params: GetThirdPartyRequest): Promise<ThirdPartyDto[]> { return yowyobOrganizationApi.getThirdParties(orgId, params); }
  async createThirdParty(orgId: string, type: ThirdPartyType, data: CreateThirdPartyRequest): Promise<ThirdPartyDto> { return yowyobOrganizationApi.createThirdParty(orgId, type, data); }
  async getThirdPartyById(orgId: string, thirdPartyId: string): Promise<ThirdPartyDto | null> { return yowyobOrganizationApi.getThirdPartyById(orgId, thirdPartyId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateThirdParty(orgId: string, thirdPartyId: string, data: UpdateThirdPartyRequest): Promise<ThirdPartyDto> { return yowyobOrganizationApi.updateThirdParty(orgId, thirdPartyId, data); }
  async deleteThirdParty(orgId: string, thirdPartyId: string): Promise<void> { return yowyobOrganizationApi.deleteThirdParty(orgId, thirdPartyId); }
  async updateThirdPartyStatus(orgId: string, thirdPartyId: string, data: UpdateThirdPartyStatusRequest): Promise<ThirdPartyDto> { return yowyobOrganizationApi.updateThirdPartyStatus(orgId, thirdPartyId, data); }

  // Proposed Activities
  async getProposedActivities(orgId: string, params: { organizationId: string }): Promise<ProposedActivityDto[]> { return yowyobOrganizationApi.getProposedActivities(orgId, params); }
  async createProposedActivity(orgId: string, data: CreateProposedActivityRequest): Promise<ProposedActivityDto> { return yowyobOrganizationApi.createProposedActivity(orgId, data); }
  async getProposedActivityById(orgId: string, activityId: string): Promise<ProposedActivityDto | null> { return yowyobOrganizationApi.getProposedActivityById(orgId, activityId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateProposedActivity(orgId: string, activityId: string, data: UpdateProposedActivityRequest): Promise<ProposedActivityDto> { return yowyobOrganizationApi.updateProposedActivity(orgId, activityId, data); }
  async deleteProposedActivity(orgId: string, activityId: string): Promise<void> { return yowyobOrganizationApi.deleteProposedActivity(orgId, activityId); }

  // Applications & Keys
  async getAllApplications(): Promise<ApplicationDto[]> { return yowyobOrganizationApi.getAllApplications(); }
  async createApplication(data: CreateApplicationRequest): Promise<ApplicationDto> { return yowyobOrganizationApi.createApplication(data); }
  async getApplicationKeys(applicationId: string): Promise<ApplicationKeyDto[]> { return yowyobOrganizationApi.getApplicationKeys(applicationId); }
  async createApiKey(applicationId: string): Promise<ApplicationKeyDto> { return yowyobOrganizationApi.createApiKey(applicationId); }


}// END OF FILE: lib/data-repo/organization/organization-remote-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/organization/organization-repository-interface.ts

// lib/data-repo/organization/organization-repository-interface.ts
import {
  OrganizationDto, CreateOrganizationRequest, UpdateOrganizationRequest, UpdateOrganizationStatusRequest,
  ContactDto, CreateContactRequest, UpdateContactRequest, ContactableType,
  AddressDto, CreateAddressRequest, UpdateAddressRequest, AddressableType,
  AgencyDto, CreateAgencyRequest, UpdateAgencyRequest, UpdateAgencyStatusRequest,
  EmployeeDto, CreateEmployeeRequest, UpdateEmployeeRequest, AffectEmployeeRequest, EmployeeResponse,
  SalesPersonDto, CreateSalesPersonRequest, UpdateSalesPersonRequest,
  CustomerDto, CreateCustomerRequest, UpdateCustomerRequest, AffectCustomerRequest,
  ProviderDto, CreateProviderRequest, UpdateProviderRequest, AffectProviderRequest,
  ProspectDto, CreateProspectRequest, UpdateProspectRequest,
  PracticalInformationDto, CreatePracticalInformationRequest, UpdatePracticalInformationRequest,
  CertificationDto, CreateCertificationRequest, UpdateCertificationRequest,
  BusinessDomainDto, CreateBusinessDomainRequest, UpdateBusinessDomainRequest, GetBusinessDomainRequest,
  ImageDto,
  ThirdPartyDto, CreateThirdPartyRequest, UpdateThirdPartyRequest, UpdateThirdPartyStatusRequest, GetThirdPartyRequest, ThirdPartyType,
  ProposedActivityDto, CreateProposedActivityRequest, UpdateProposedActivityRequest,
  BusinessActorDto, CreateBusinessActorRequest, UpdateBusinessActorRequest, BusinessActorType,
  ApplicationDto, CreateApplicationRequest, ApplicationKeyDto,
} from '@/types/organization';

export interface IOrganizationRepository {
  // Organizations
  getMyOrganizations(): Promise<OrganizationDto[]>;
  getAllOrganizations(): Promise<OrganizationDto[]>;
  getOrganizationsByDomain(domainId: string): Promise<OrganizationDto[]>;

  getOrganizationById(orgId: string): Promise<OrganizationDto | null>;
  createOrganization(data: CreateOrganizationRequest): Promise<OrganizationDto>;
  updateOrganization(orgId: string, data: UpdateOrganizationRequest): Promise<OrganizationDto>;
  deleteOrganization(orgId: string): Promise<void>;
  updateOrganizationStatus(orgId: string, data: UpdateOrganizationStatusRequest): Promise<OrganizationDto>;
  addBusinessDomainToOrg(orgId: string, businessDomainId: string): Promise<OrganizationDto>;
  removeBusinessDomainFromOrg(orgId: string, businessDomainId: string): Promise<OrganizationDto>;

  // Contacts
  getContacts(contactableType: ContactableType, contactableId: string): Promise<ContactDto[]>;
  getContactById(contactableType: ContactableType, contactableId: string, contactId: string): Promise<ContactDto | null>;
  createContact(contactableType: ContactableType, contactableId: string, data: CreateContactRequest): Promise<ContactDto>;
  updateContact(contactableType: ContactableType, contactableId: string, contactId: string, data: UpdateContactRequest): Promise<ContactDto>;
  deleteContactById(contactableType: ContactableType, contactableId: string, contactId: string): Promise<void>;
  markContactAsFavorite(contactableType: ContactableType, contactableId: string, contactId: string): Promise<ContactDto>;

  // Addresses
  getAddresses(addressableType: AddressableType, addressableId: string): Promise<AddressDto[]>;
  getAddressById(addressableType: AddressableType, addressableId: string, addressId: string): Promise<AddressDto | null>;
  createAddress(addressableType: AddressableType, addressableId: string, data: CreateAddressRequest): Promise<AddressDto>;
  updateAddress(addressableType: AddressableType, addressableId: string, addressId: string, data: UpdateAddressRequest): Promise<AddressDto>;
  deleteAddressById(addressableType: AddressableType, addressableId: string, addressId: string): Promise<void>;
  markAddressAsFavorite(addressableType: AddressableType, addressableId: string, addressId: string): Promise<AddressDto>;

  // Practical Information
  getPracticalInformation(orgId: string): Promise<PracticalInformationDto[]>; // Adjusted params
  createPracticalInformation(orgId: string, data: CreatePracticalInformationRequest): Promise<PracticalInformationDto>;
  getPracticalInformationById(orgId: string, infoId: string): Promise<PracticalInformationDto | null>;
  updatePracticalInformation(orgId: string, infoId: string, data: UpdatePracticalInformationRequest): Promise<PracticalInformationDto>;
  deletePracticalInformation(orgId: string, infoId: string): Promise<void>;

  // Certifications
  getCertifications(orgId: string): Promise<CertificationDto[]>;
  createCertification(orgId: string, data: CreateCertificationRequest): Promise<CertificationDto>;
  getCertificationById(orgId: string, certId: string): Promise<CertificationDto | null>;
  updateCertification(orgId: string, certId: string, data: UpdateCertificationRequest): Promise<CertificationDto>;
  deleteCertification(orgId: string, certId: string): Promise<void>;

  // Business Domains
  getAllBusinessDomains(params?: GetBusinessDomainRequest): Promise<BusinessDomainDto[]>;
  getBusinessDomainById(domainId: string): Promise<BusinessDomainDto | null>;
  createBusinessDomain(data: CreateBusinessDomainRequest): Promise<BusinessDomainDto>;
  updateBusinessDomain(domainId: string, data: UpdateBusinessDomainRequest): Promise<BusinessDomainDto>;
  deleteBusinessDomain(domainId: string): Promise<void>;

  // Agencies
  getAgencies(orgId: string, active?: boolean): Promise<AgencyDto[]>;
  createAgency(orgId: string, data: CreateAgencyRequest): Promise<AgencyDto>;
  getAgencyById(orgId: string, agencyId: string): Promise<AgencyDto | null>;
  updateAgency(orgId: string, agencyId: string, data: UpdateAgencyRequest): Promise<AgencyDto>;
  deleteAgency(orgId: string, agencyId: string): Promise<void>;
  updateAgencyStatus(orgId: string, agencyId: string, data: UpdateAgencyStatusRequest): Promise<AgencyDto>;

  // Employees (Organization-scoped)
  getOrgEmployees(orgId: string): Promise<EmployeeDto[]>;
  createOrgEmployee(orgId: string, data: CreateEmployeeRequest): Promise<EmployeeResponse>;
  getOrgEmployeeById(orgId: string, employeeId: string): Promise<EmployeeDto | null>;
  updateOrgEmployee(orgId: string, employeeId: string, data: UpdateEmployeeRequest): Promise<EmployeeResponse>;
  deleteOrgEmployee(orgId: string, employeeId: string): Promise<void>;

  // Employees (Agency-scoped)
  getAgencyEmployees(orgId: string, agencyId: string): Promise<EmployeeDto[]>;
  createAgencyEmployee(orgId: string, agencyId: string, data: CreateEmployeeRequest): Promise<EmployeeResponse>;
  getAgencyEmployeeById(orgId: string, agencyId: string, employeeId: string): Promise<EmployeeDto | null>;
  updateAgencyEmployee(orgId: string, agencyId: string, employeeId: string, data: UpdateEmployeeRequest): Promise<EmployeeResponse>;
  deleteAgencyEmployee(orgId: string, agencyId: string, employeeId: string): Promise<void>;
  affectEmployeeToAgency(orgId: string, agencyId: string, data: AffectEmployeeRequest): Promise<EmployeeResponse>;

  // SalesPersons (Organization-scoped)
  getOrgSalesPersons(orgId: string): Promise<SalesPersonDto[]>;
  createOrgSalesPerson(orgId: string, data: CreateSalesPersonRequest): Promise<SalesPersonDto>;
  getOrgSalesPersonById(orgId: string, salesPersonId: string): Promise<SalesPersonDto | null>;
  updateOrgSalesPerson(orgId: string, salesPersonId: string, data: UpdateSalesPersonRequest): Promise<SalesPersonDto>;
  deleteOrgSalesPerson(orgId: string, salesPersonId: string): Promise<void>;

  // SalesPersons (Agency-scoped)
  getAgencySalesPersons(orgId: string, agencyId: string): Promise<SalesPersonDto[]>;
  createAgencySalesPerson(orgId: string, agencyId: string, data: CreateSalesPersonRequest): Promise<SalesPersonDto>;
  getAgencySalesPersonById(orgId: string, agencyId: string, salesPersonId: string): Promise<SalesPersonDto | null>;
  updateAgencySalesPerson(orgId: string, agencyId: string, salesPersonId: string, data: UpdateSalesPersonRequest): Promise<SalesPersonDto>;
  deleteAgencySalesPerson(orgId: string, agencyId: string, salesPersonId: string): Promise<void>;

  // Customers (Organization-scoped)
  getOrgCustomers(orgId: string): Promise<CustomerDto[]>;
  createOrgCustomer(orgId: string, data: CreateCustomerRequest): Promise<CustomerDto>;
  getOrgCustomerById(orgId: string, customerId: string): Promise<CustomerDto | null>;
  updateOrgCustomer(orgId: string, customerId: string, data: UpdateCustomerRequest): Promise<CustomerDto>;
  deleteOrgCustomer(orgId: string, customerId: string): Promise<void>;

  // Customers (Agency-scoped)
  getAgencyCustomers(orgId: string, agencyId: string): Promise<CustomerDto[]>;
  createAgencyCustomer(orgId: string, agencyId: string, data: CreateCustomerRequest): Promise<CustomerDto>;
  getAgencyCustomerById(orgId: string, agencyId: string, customerId: string): Promise<CustomerDto | null>;
  updateAgencyCustomer(orgId: string, agencyId: string, customerId: string, data: UpdateCustomerRequest): Promise<CustomerDto>;
  deleteAgencyCustomer(orgId: string, agencyId: string, customerId: string): Promise<void>;
  affectCustomerToAgency(orgId: string, agencyId: string, data: AffectCustomerRequest): Promise<CustomerDto>;

  // Suppliers (Providers) (Organization-scoped)
  getOrgSuppliers(orgId: string): Promise<ProviderDto[]>;
  createOrgSupplier(orgId: string, data: CreateProviderRequest): Promise<ProviderDto>;
  getOrgSupplierById(orgId: string, providerId: string): Promise<ProviderDto | null>;
  updateOrgSupplier(orgId: string, providerId: string, data: UpdateProviderRequest): Promise<ProviderDto>;
  deleteOrgSupplier(orgId: string, providerId: string): Promise<void>;

  // Suppliers (Providers) (Agency-scoped)
  getAgencySuppliers(orgId: string, agencyId: string): Promise<ProviderDto[]>;
  createAgencySupplier(orgId: string, agencyId: string, data: CreateProviderRequest): Promise<ProviderDto>;
  getAgencySupplierById(orgId: string, agencyId: string, providerId: string): Promise<ProviderDto | null>;
  updateAgencySupplier(orgId: string, agencyId: string, providerId: string, data: UpdateProviderRequest): Promise<ProviderDto>;
  deleteAgencySupplier(orgId: string, agencyId: string, providerId: string): Promise<void>;
  affectSupplierToAgency(orgId: string, agencyId: string, data: AffectProviderRequest): Promise<ProviderDto>;

  // Prospects (Organization-scoped)
  getOrgProspects(orgId: string): Promise<ProspectDto[]>;
  createOrgProspect(orgId: string, data: CreateProspectRequest): Promise<ProspectDto>;
  getOrgProspectById(orgId: string, prospectId: string): Promise<ProspectDto | null>;
  updateOrgProspect(orgId: string, prospectId: string, data: UpdateProspectRequest): Promise<ProspectDto>;
  deleteOrgProspect(orgId: string, prospectId: string): Promise<void>;

  // Prospects (Agency-scoped)
  getAgencyProspects(orgId: string, agencyId: string): Promise<ProspectDto[]>;
  createAgencyProspect(orgId: string, agencyId: string, data: CreateProspectRequest): Promise<ProspectDto>;
  getAgencyProspectById(orgId: string, agencyId: string, prospectId: string): Promise<ProspectDto | null>;
  updateAgencyProspect(orgId: string, agencyId: string, prospectId: string, data: UpdateProspectRequest): Promise<ProspectDto>;
  deleteAgencyProspect(orgId: string, agencyId: string, prospectId: string): Promise<void>;

  // Business Actors (Global in this service context)
  getAllBusinessActors(): Promise<BusinessActorDto[]>;
  createBusinessActor(data: CreateBusinessActorRequest): Promise<BusinessActorDto>;
  getBusinessActorById(baId: string): Promise<BusinessActorDto | null>;
  updateBusinessActor(baId: string, data: UpdateBusinessActorRequest): Promise<BusinessActorDto>;
  deleteBusinessActor(baId: string): Promise<void>;
  getBusinessActorsByType(type: BusinessActorType): Promise<BusinessActorDto[]>;

  // Images
  uploadOrganizationImages(orgId: string, formData: FormData): Promise<ImageDto[]>;
  getOrganizationImageInfo(imageId: string): Promise<ImageDto | null>;

  // ThirdParty
  getThirdParties(orgId: string, params: GetThirdPartyRequest): Promise<ThirdPartyDto[]>;
  createThirdParty(orgId: string, type: ThirdPartyType, data: CreateThirdPartyRequest): Promise<ThirdPartyDto>;
  getThirdPartyById(orgId: string, thirdPartyId: string): Promise<ThirdPartyDto | null>;
  updateThirdParty(orgId: string, thirdPartyId: string, data: UpdateThirdPartyRequest): Promise<ThirdPartyDto>;
  deleteThirdParty(orgId: string, thirdPartyId: string): Promise<void>;
  updateThirdPartyStatus(orgId: string, thirdPartyId: string, data: UpdateThirdPartyStatusRequest): Promise<ThirdPartyDto>;

  // Proposed Activities
  getProposedActivities(orgId: string, params: { organizationId: string }): Promise<ProposedActivityDto[]>;
  createProposedActivity(orgId: string, data: CreateProposedActivityRequest): Promise<ProposedActivityDto>;
  getProposedActivityById(orgId: string, activityId: string): Promise<ProposedActivityDto | null>;
  updateProposedActivity(orgId: string, activityId: string, data: UpdateProposedActivityRequest): Promise<ProposedActivityDto>;
  deleteProposedActivity(orgId: string, activityId: string): Promise<void>;

  // Applications & Keys
  getAllApplications(): Promise<ApplicationDto[]>;
  createApplication(data: CreateApplicationRequest): Promise<ApplicationDto>;
  getApplicationKeys(applicationId: string): Promise<ApplicationKeyDto[]>;
  createApiKey(applicationId: string): Promise<ApplicationKeyDto>;
}// END OF FILE: lib/data-repo/organization/organization-repository-interface.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/user-preferences/index.ts

import { IUserPreferencesRepository } from './user-preferences-repository-interface';
import { UserPreferencesLocalRepository } from './user-preferences-local-repository';
import { UserPreferencesRemoteRepository } from './user-preferences-remote-repository';

let userPreferencesRepository: IUserPreferencesRepository;

const dataSource = process.env.NEXT_PUBLIC_DATA_SOURCE;

if (dataSource === 'local') {
  console.log("INFO: Using Local UserPreferences Repository (fetches from /api/mock/*)");
  userPreferencesRepository = new UserPreferencesLocalRepository();
} else {
  console.log("INFO: Using Remote UserPreferences Repository (via Proxy)");
  userPreferencesRepository = new UserPreferencesRemoteRepository();
}

export { userPreferencesRepository };// END OF FILE: lib/data-repo/user-preferences/index.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/user-preferences/user-preferences-local-repository.ts

import { IUserPreferencesRepository } from './user-preferences-repository-interface';
import { UserPreferencesDto, UpdateUserPreferencesRequest } from '@/types/user-preferences';
import { toast } from 'sonner';

const APP_URL = typeof window !== 'undefined' ? window.location.origin : (process.env.NEXTAUTH_URL || process.env.VERCEL_URL || 'http://localhost:3000');
const MOCK_API_PREFERENCES_BASE = `${APP_URL}/api/mock/user-preferences`;

export class UserPreferencesLocalRepository implements IUserPreferencesRepository {
  private async fetchMockApi<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const response = await fetch(`${MOCK_API_PREFERENCES_BASE}${endpoint}`, {
      ...options,
      headers: { 'Content-Type': 'application/json', ...options.headers },
    });
    const responseContentType = response.headers.get("content-type");
    let responseData;
    if (responseContentType && responseContentType.includes("application/json")) {
      responseData = await response.json();
    } else if (response.status !== 204) {
      responseData = { message: await response.text() || response.statusText };
    }
    if (!response.ok) {
      const errorPayload = responseData || { message: `Request to ${endpoint} failed` };
      console.error(`[UserPrefsLocalRepo] Mock API Error: ${response.status}`, errorPayload);
      // toast.error(errorPayload.message || `Mock API request failed: ${response.status}`);
      throw { status: response.status, message: errorPayload.message, data: errorPayload };
    }
    return responseData as T;
  }

  async getUserPreferences(userId: string): Promise<UserPreferencesDto | null> {
    return this.fetchMockApi<UserPreferencesDto | null>(`/${userId}`, { method: "GET" });
  }

  async updateUserPreferences(userId: string, data: UpdateUserPreferencesRequest): Promise<UserPreferencesDto> {
    return this.fetchMockApi<UserPreferencesDto>(`/${userId}`, {
      method: "PUT",
      body: JSON.stringify(data),
    });
  }
}// END OF FILE: lib/data-repo/user-preferences/user-preferences-local-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/user-preferences/user-preferences-remote-repository.ts

// lib/data-repo/user-preferences/user-preferences-remote-repository.ts
import { IUserPreferencesRepository } from './user-preferences-repository-interface';
import { UserPreferencesDto, UpdateUserPreferencesRequest } from '@/types/user-preferences';
// import { yowyobApiRequest } from '@/lib/apiClient'; // Assuming a generic or specific API client setup

// Placeholder: Define the base URL for the actual User Preferences Service
// const YOWYOB_USER_PREFERENCES_API_BASE_URL = process.env.NEXT_PUBLIC_YOWYOB_USER_PREFERENCES_SERVICE_BASE_URL || "http://localhost:8085/user-preferences-service"; // Example

export class UserPreferencesRemoteRepository implements IUserPreferencesRepository {
  async getUserPreferences(userId: string): Promise<UserPreferencesDto | null> {
    // TODO: Replace with actual API call structure
    // Example: return yowyobApiRequest<UserPreferencesDto | null>(YOWYOB_USER_PREFERENCES_API_BASE_URL, `/api/users/${userId}/preferences`, { method: "GET" });
    console.warn("UserPreferencesRemoteRepository.getUserPreferences is not implemented against a real backend yet.");
    // Simulating a 404 if not found or an empty object if found but no prefs
    if (userId === "user-with-no-prefs") return null; // Simulate not found or no prefs
    const defaultPreferences: UserPreferencesDto = { // Return default if found but empty
      user_id: userId,
      display: {
        language: 'en', currency: 'USD', dateFormat: 'mm-dd-yyyy',
        fontSize: 0,
        theme: 'light',
        layout: 'expanded'
      },
      notifications: { email: true, push: true, sms: false, accountActivity: true, newFeatures: true, marketing: false, frequency: 'daily', quietHoursStart: '22:00', quietHoursEnd: '07:00' },
      privacy: { analyticsSharing: true, personalizedAds: false, visibility: 'private', dataRetention: '1-year' },
      updated_at: new Date().toISOString()
    };
    return Promise.resolve(userId === "user-test-123" ? defaultPreferences : null); // Only return for a specific user for now
  }

  async updateUserPreferences(userId: string, data: UpdateUserPreferencesRequest): Promise<UserPreferencesDto> {
    // TODO: Replace with actual API call structure
    // Example: return yowyobApiRequest<UserPreferencesDto>(YOWYOB_USER_PREFERENCES_API_BASE_URL, `/api/users/${userId}/preferences`, { method: "PUT", body: JSON.stringify(data) });
    console.warn("UserPreferencesRemoteRepository.updateUserPreferences is not implemented against a real backend yet.");
    const updatedPrefs: UserPreferencesDto = {
      user_id: userId,
      display: { language: 'en', currency: 'USD', dateFormat: 'mm-dd-yyyy', fontSize: 0, theme: 'light', layout: 'expanded', ...data.display, },
      notifications: { email: true, push: true, sms: false, accountActivity: true, newFeatures: true, marketing: false, frequency: 'daily', ...data.notifications },
      privacy: { analyticsSharing: true, personalizedAds: false, visibility: 'private', dataRetention: '1-year', ...data.privacy },
      updated_at: new Date().toISOString()
    };
    return Promise.resolve(updatedPrefs);
  }
}// END OF FILE: lib/data-repo/user-preferences/user-preferences-remote-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/user-preferences/user-preferences-repository-interface.ts

// lib/data-repo/user-preferences/user-preferences-repository-interface.ts
import { UserPreferencesDto, UpdateUserPreferencesRequest } from '@/types/user-preferences';

export interface IUserPreferencesRepository {
  getUserPreferences(userId: string): Promise<UserPreferencesDto | null>;
  updateUserPreferences(userId: string, data: UpdateUserPreferencesRequest): Promise<UserPreferencesDto>;
  // No create, as preferences are typically created with user or on first update
  // No delete, as preferences are tied to a user
}// END OF FILE: lib/data-repo/user-preferences/user-preferences-repository-interface.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/export.ts

import { toast } from "sonner";

// A generic function to export an array of objects to a CSV file.
export function exportToCsv<T extends Record<string, any>>(
  data: T[],
  filename: string = "export.csv"
): void {
  if (!data || data.length === 0) {
    toast.warning("No data to export.");
    return;
  }

  try {
    const headers = Object.keys(data[0]);
    const csvRows = [
      headers.join(','), // Header row
      ...data.map(row =>
        headers.map(fieldName => {
          let cell = row[fieldName] === null || row[fieldName] === undefined ? '' : row[fieldName];
          // Escape commas and quotes
          cell = String(cell).replace(/"/g, '""');
          if (String(cell).includes(',')) {
            cell = `"${cell}"`;
          }
          return cell;
        }).join(',')
      )
    ];

    const csvString = csvRows.join('\n');
    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });

    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
    toast.success("Data exported successfully!");
  } catch (error) {
    console.error("CSV Export Error:", error);
    toast.error("Failed to export data.");
  }
}// END OF FILE: lib/export.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/utils/metadata-embed.ts

// FILE: lib/utils/metadata-embed.ts

const METADATA_REGEX = /<!--\s*metadata:(\{.*\})\s*-->$/;

/**
 * Embeds a metadata object into a string by appending it as a structured HTML comment.
 * If existing metadata is found, it is replaced.
 * 
 * @param mainText The primary text content (e.g., a biography).
 * @param metadata The JSON object to embed.
 * @returns A new string with the metadata embedded at the end.
 * 
 * @example
 * embedMetadata("User bio.", { userId: "123" })
 * // Returns: "User bio.<!-- metadata:{\"userId\":\"123\"} -->"
 */
export function embedMetadata(mainText: string, metadata: Record<string, any>): string {
  // First, remove any existing metadata comment to prevent nesting.
  const cleanText = mainText.replace(METADATA_REGEX, '').trim();

  // Create the new metadata comment.
  const metadataString = JSON.stringify(metadata);
  const metadataComment = `<!-- metadata:${metadataString} -->`;

  // Return the original text concatenated with the new metadata comment.
  return `${cleanText}\n${metadataComment}`;
}

/**
 * Parses a string to extract the clean text and any embedded metadata.
 * 
 * @param textWithMetadata The string potentially containing embedded metadata.
 * @returns An object with `cleanText` and the parsed `metadata` object (or null if not found).
 * 
 * @example
 * parseMetadata("User bio.<!-- metadata:{\"userId\":\"123\"} -->")
 * // Returns: { cleanText: "User bio.", metadata: { userId: "123" } }
 */
export function parseMetadata<T extends Record<string, any>>(
  textWithMetadata: string | null | undefined
): { cleanText: string; metadata: T | null } {
  if (!textWithMetadata) {
    return { cleanText: '', metadata: null };
  }
  
  const match = textWithMetadata.match(METADATA_REGEX);

  if (match && match[1]) {
    const jsonString = match[1];
    const cleanText = textWithMetadata.replace(METADATA_REGEX, '').trim();
    try {
      const metadata = JSON.parse(jsonString) as T;
      return { cleanText, metadata };
    } catch (error) {
      console.error("Failed to parse embedded metadata:", error);
      // If parsing fails, return the text as is, without the broken comment.
      return { cleanText, metadata: null };
    }
  }

  // No metadata found, return the original text.
  return { cleanText: textWithMetadata, metadata: null };
}// END OF FILE: lib/utils/metadata-embed.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/utils.ts

import { rankItem } from "@tanstack/match-sorter-utils";
import { FilterFn } from "@tanstack/react-table";
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
export const fuzzyGlobalFilterFn: FilterFn<any> = (row, columnId, value, addMeta) => {
  const itemRank = rankItem(row.getValue(columnId), value);
  addMeta({ itemRank });
  return itemRank.passed;
};
// END OF FILE: lib/utils.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/validators/productValidator.ts

import * as z from "zod"; // Ensure '*' import for Zod v3

// Base Product Schema (Common fields)
export const baseProductSchema = z.object({
  // id: z.string().optional(), // Optional for create, required for update
  name: z.string().min(3, { message: "Name must be at least 3 characters long." }).max(100),
  description: z.string().min(10, { message: "Description must be at least 10 characters long." }).max(1000).optional(),
  basePrice: z.coerce.number().positive({ message: "Base price must be a positive number." }).optional(),
});

// Enum for Product Type
export const ProductTypeEnum = z.enum(["RESOURCE", "SERVICE"], {
  required_error: "Product type is required.",
});

// Enum for Action Type (if needed elsewhere, kept for context)
export const ActionTypeEnum = z.enum(["CREATE", "READ", "UPDATE", "DELETE", "CUSTOM"]);

// Schema for the main form type selection (used to determine which other fields are relevant)
export const productFormTypeSchema = z.object({
  productType: ProductTypeEnum,
});

// Schema parts - these will be conditionally merged or processed
const coreProductFieldsSchema = baseProductSchema.extend({
  productType: ProductTypeEnum, // This must be present to discriminate
});

const schedulingFieldsBaseSchema = z.object({
  isScheduled: z.boolean().default(false).optional(),
  scheduledAt: z.date().optional(), // ISO date string
  // scheduledAt: z.string().optional().refine((date) => {
  //   const parsedDate = new Date(date);
  //   return !isNaN(parsedDate.getTime());
  // }, { message: "Invalid date format." }),
});

const customActionFieldsBaseSchema = z.object({
  isCustomAction: z.boolean().default(false).optional(),
  customActionQuery: z.string().optional(),
});

// We will now create a combined schema and apply refinements at the end.
// This is often easier than trying to merge ZodEffects.
export const fullProductFormSchema = coreProductFieldsSchema
  .merge(schedulingFieldsBaseSchema)
  .merge(customActionFieldsBaseSchema)
  .superRefine((data, ctx) => { // Use superRefine for complex cross-field validation
    // Scheduling validation
    if (data.isScheduled && !data.scheduledAt) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "Scheduled date is required when scheduling is enabled.",
        path: ["scheduledAt"],
      });
    }
    if (data.isScheduled && data.scheduledAt && data.scheduledAt < new Date(new Date().setHours(0, 0, 0, 0))) { // Compare date part only for "past"
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "Scheduled date cannot be in the past.",
        path: ["scheduledAt"],
      });
    }

    // Custom action validation
    if (data.isCustomAction && (!data.customActionQuery || data.customActionQuery.trim().length < 3)) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "Custom action query is required (min 3 characters) when custom action is enabled.",
        path: ["customActionQuery"],
      });
    }
  });

// Type inferred from the Zod schema
export type ProductFormData = z.infer<typeof fullProductFormSchema>;// END OF FILE: lib/validators/productValidator.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/middleware.ts

import { withAuth } from "next-auth/middleware";
import { NextResponse } from "next/server";

export default withAuth(
  function middleware(req) {
    // If no specific rules, just let authorized users pass
    return NextResponse.next();
  },
  {
    callbacks: {
      authorized: ({ token }) => !!token, // Allow if token exists (user is logged in)
    },
    // Redirect users to custom login page if `authorized` callback fails
    pages: {
      signIn: "/login",
    },
  }
);

// Configure which paths are protected by this middleware
export const config = {
  matcher: [
    "/((?!api|_next/static|_next/image|favicon.ico|svg|login|auth|signup|data|forgot-password|$).*)", 
  ],
};// END OF FILE: middleware.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/next.config.ts

// next.config.js or next.config.ts
const nextConfig = {

  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'picsum.photos',
        pathname: '/**', // More permissive for any path on this host
      }, {
        protocol: 'https',
        hostname: '*',
        pathname: '/**', // More permissive for any path on this host
      },
      {
        protocol: 'http',
        hostname: '*',
        pathname: '/**', // More permissive for any path on this host
      }

    ],
  },
  // ... other configs
};

// module.exports = nextConfig; // if JS
export default nextConfig; // if TS// END OF FILE: next.config.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/next-env.d.ts

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
// END OF FILE: next-env.d.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/postcss.config.mjs

const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
// END OF FILE: postcss.config.mjs

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/script.sh

#!/bin/bash
# Description: Refactors the main sidebar to be context-aware based on the URL path, not just the user's role.

echo "🧠 Refining the Sidebar to be context-aware..."

# --- 1. Update the Main Sidebar with Path-Based Logic ---
code "components/sidebar.tsx"
cat > "components/sidebar.tsx" << 'EOF'
"use client";

import React, { useState, useMemo, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { usePathname, useRouter } from "next/navigation";
import { useSession, signOut } from "next-auth/react";
import {
  Award, Briefcase, Building, FileText, FolderHeart, HandCoins, HelpCircle,
  LayoutGrid, Lightbulb, LogOut, Landmark, Menu, MessagesSquare, Package, Server,
  Settings, Share2, SidebarClose, Truck, UserCheck, Users, Users2, UsersRound,
  Webhook, ArrowLeft, UserCog, Power, Shield, Info, Handshake, UserPlus, User
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { OrganizationSwitcher } from "@/components/organization/organization-switcher";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Separator } from "./ui/separator";
import { AgencySwitcher } from "./organization/agencies/agency-switcher";
import { toast } from "sonner";

// --- Navigation Definitions ---
const baOrgNavigation = [
  { name: "Organizations Hub", href: "/business-actor/organizations", icon: Building },
  { name: "Org. Dashboard", href: "/business-actor/dashboard", icon: LayoutGrid, isOrgSpecific: true },
  { name: "Org. Profile", href: "/business-actor/org/profile", icon: Landmark, isOrgSpecific: true },
  { name: "Agencies", href: "/business-actor/org/agencies", icon: Users2, isOrgSpecific: true },
  { name: "Employees", href: "/business-actor/org/employees", icon: Users, isOrgSpecific: true },
  { name: "Customers", href: "/business-actor/org/customers", icon: UsersRound, isOrgSpecific: true },
  { name: "Suppliers", href: "/business-actor/org/suppliers", icon: Truck, isOrgSpecific: true },
  { name: "Sales People", href: "/business-actor/org/sales-people", icon: UserCheck, isOrgSpecific: true },
  { name: "Prospects", href: "/business-actor/org/prospects", icon: UserPlus, isOrgSpecific: true },
  { name: "Third Parties", href: "/business-actor/org/third-parties", icon: Handshake, isOrgSpecific: true },
  { name: "Certifications", href: "/business-actor/org/certifications", icon: Award, isOrgSpecific: true },
];
const agencyNavigation = [
  { name: "Agency Dashboard", href: "/business-actor/agency/dashboard", icon: LayoutGrid },
  { name: "Agency Profile", href: "/business-actor/agency/profile", icon: Landmark },
  { name: "Agency Employees", href: "/business-actor/agency/employees", icon: Users },
];
const baGlobalNavigation = [
  { name: "My BA Profile", href: "/business-actor/profile", icon: UserCog },
  { name: "API & Webhooks", href: "/business-actor/webhooks", icon: Webhook },
];
const userNavigation = [
  { name: "Dashboard", href: "/dashboard", icon: LayoutGrid },
  { name: "My Bonus", href: "/bonus", icon: HandCoins },
  { name: "Favorites", href: "/favorites", icon: FolderHeart },
];
const superAdminNavigation = [
  { name: "Dashboard", href: "/super-admin/dashboard", icon: LayoutGrid },
  { name: "Organizations", href: "/super-admin/organizations", icon: Building },
  { name: "Users", href: "/super-admin/users", icon: Users },
  { name: "Roles & Permissions", href: "/super-admin/roles", icon: Shield },
  { name: "Business Domains", href: "/super-admin/business-domains", icon: Server },
];
const bottomNavigation = [
  { name: "Help & Support", href: "/help", icon: HelpCircle },
  { name: "Settings", href: "/settings", icon: Settings },
];

export function Sidebar() {
  const pathname = usePathname();
  const router = useRouter();
  const { data: session } = useSession();
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isMobileOpen, setIsMobileOpen] = useState(false);
  const { activeOrganizationId, activeAgencyDetails, clearActiveAgency, clearActiveOrganization } = useActiveOrganization();

  const { isBusinessActor, isSuperAdmin } = useMemo(() => ({
    isBusinessActor: !!session?.user.businessActorId,
    isSuperAdmin: session?.user.roles?.includes('SUPER_ADMIN_ROLE'),
  }), [session]);

  // --- [THE FIX] Path-driven sidebar logic ---
  let mainNav: any[], globalNav: any[], sidebarTitle: string, homeLink: string;
  let ContextSwitcher = null;

  const isAgencyContext = isBusinessActor && pathname.startsWith('/business-actor/agency');
  const isOrgContext = isBusinessActor && pathname.startsWith('/business-actor/') && !isAgencyContext;
  const isAdminContext = isSuperAdmin && pathname.startsWith('/super-admin');
  
  if (isAgencyContext) {
      mainNav = agencyNavigation;
      sidebarTitle = activeAgencyDetails?.short_name || "Agency";
      homeLink = "/business-actor/agency/dashboard";
      ContextSwitcher = () => <AgencySwitcher isCollapsed={isCollapsed} />;
      globalNav = [];
  } else if (isOrgContext) {
      mainNav = baOrgNavigation;
      globalNav = baGlobalNavigation;
      sidebarTitle = "BA Workspace";
      homeLink = "/business-actor/organizations";
      ContextSwitcher = () => <OrganizationSwitcher isCollapsed={isCollapsed} />;
  } else if (isAdminContext) {
      mainNav = superAdminNavigation;
      sidebarTitle = "Platform Admin";
      homeLink = "/super-admin/dashboard";
      globalNav = [];
  } else {
      // Default view for ALL users, regardless of role, when not in a specific workspace.
      mainNav = userNavigation;
      sidebarTitle = "My Account";
      homeLink = "/dashboard";
      globalNav = [];
  }
  // --- End of path-driven logic ---

  const NavItem = ({ item }: { item: { name: string; href: string; icon: React.ElementType; isOrgSpecific?: boolean; } }) => {
    const isDisabled = item.isOrgSpecific && !activeOrganizationId;
    const isActive = !isDisabled && pathname.startsWith(item.href);
    return (
      <Tooltip delayDuration={0}>
        <TooltipTrigger asChild>
          <Link href={isDisabled ? "#" : item.href} className={cn("flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors h-9", isActive && "bg-sidebar-accent text-sidebar-accent-foreground", !isDisabled && !isActive && "text-sidebar-foreground hover:bg-sidebar-accent/80", isDisabled && "cursor-not-allowed text-muted-foreground/50", isCollapsed && "justify-center px-2")} onClick={() => isMobileOpen && !isDisabled && setIsMobileOpen(false)}>
            <item.icon className={cn("h-[18px] w-[18px] shrink-0", !isCollapsed && "mr-3")} />
            {!isCollapsed && <span className="truncate">{item.name}</span>}
          </Link>
        </TooltipTrigger>
        {isCollapsed && <TooltipContent side="right">{item.name}</TooltipContent>}
      </Tooltip>
    );
  };
  
  const ExitButton = () => {
    if (isAgencyContext) {
      return (
        <Tooltip delayDuration={0}>
          <TooltipTrigger asChild>
            <Button onClick={() => { clearActiveAgency(); router.push("/business-actor/dashboard"); }} variant="ghost" className="w-full justify-start h-9 px-3 text-destructive hover:text-destructive hover:bg-destructive/10">
              <ArrowLeft className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")} />
              {!isCollapsed && "Exit Agency"}
            </Button>
          </TooltipTrigger>
          {isCollapsed && <TooltipContent side="right">Exit Agency</TooltipContent>}
        </Tooltip>
      );
    }
    if (isBusinessActor && pathname.startsWith('/business-actor')) {
      return (
        <Tooltip delayDuration={0}>
          <TooltipTrigger asChild>
            <Button onClick={() => { clearActiveOrganization(); router.push('/dashboard'); toast.info("Exited Business Workspace."); }} variant="ghost" className="flex items-center w-full justify-start h-9 px-3 text-sidebar-foreground hover:bg-amber-500/10 hover:text-amber-600">
              <Power className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")} />
              {!isCollapsed && "Exit Workspace"}
            </Button>
          </TooltipTrigger>
          {isCollapsed && <TooltipContent side="right">Exit Workspace</TooltipContent>}
        </Tooltip>
      );
    }
    return null;
  };

  return (
    <TooltipProvider>
      <Button variant="outline" size="icon" className="lg:hidden fixed top-4 left-4 z-[60]" onClick={() => setIsMobileOpen(v => !v)}><Menu className="h-5 w-5" /></Button>
      <div className={cn("fixed inset-y-0 left-0 z-50 flex h-full flex-col border-r bg-sidebar text-sidebar-foreground transition-all duration-300 ease-in-out lg:sticky lg:top-0 lg:h-screen", isCollapsed ? "w-[72px]" : "w-64", isMobileOpen ? "translate-x-0 shadow-xl" : "-translate-x-full lg:translate-x-0")}>
        <div className={cn("flex h-16 shrink-0 items-center border-b px-4", isCollapsed && "justify-center px-2")}>
          <Link href={homeLink} className="flex items-center gap-2 font-semibold"><Image src="/logo.svg" alt="Logo" width={32} height={32} priority className="shrink-0" />{!isCollapsed && <span className="text-lg truncate">{sidebarTitle}</span>}</Link>
          <Button variant="ghost" size="icon" className={cn("h-8 w-8 ml-auto hidden lg:flex")} onClick={() => setIsCollapsed(!isCollapsed)}><SidebarClose className={cn("h-4 w-4 transition-transform", isCollapsed && "rotate-180")} /></Button>
          {isMobileOpen && <Button variant="ghost" size="icon" className="h-8 w-8 ml-auto lg:hidden" onClick={() => setIsMobileOpen(false)}><SidebarClose className="h-4 w-4" /></Button>}
        </div>
        {ContextSwitcher && <ContextSwitcher />}
        <div className="flex flex-1 flex-col overflow-y-auto overflow-x-hidden">
          <nav className={cn("flex-1 space-y-1 py-4", isCollapsed ? "px-2" : "px-4")}>
            {mainNav.map((item) => <NavItem key={item.name} item={item} />)}
            {globalNav.length > 0 && (<><Separator className="my-3" />{globalNav.map((item) => <NavItem key={item.name} item={item} />)}</>)}
          </nav>
          <div className={cn("mt-auto border-t", isCollapsed ? "px-2" : "px-4")}>
            <div className="space-y-1 py-4">
              <ExitButton />
              {bottomNavigation.map((item) => <NavItem key={item.name} item={item} />)}
              <Tooltip delayDuration={0}>
                <TooltipTrigger asChild>
                  <Button onClick={() => signOut({ callbackUrl: "/login" })} variant="ghost" className="flex items-center w-full justify-start h-9 px-3 text-sidebar-foreground hover:bg-destructive/10 hover:text-destructive"><LogOut className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")} />{!isCollapsed && "Logout"}</Button>
                </TooltipTrigger>
                {isCollapsed && <TooltipContent side="right">Logout</TooltipContent>}
              </Tooltip>
            </div>
          </div>
        </div>
      </div>
      {isMobileOpen && <div className="fixed inset-0 z-40 bg-black/50 lg:hidden" onClick={() => setIsMobileOpen(false)} />}
    </TooltipProvider>
  );
}
EOF

echo "✅ Sidebar logic has been successfully updated to be path-aware."
echo "✅ Users will now see the correct navigation based on their current workspace context."// END OF FILE: script.sh

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/tailwind.config.js

// Import default theme
const { fontFamily } = require("tailwindcss/defaultTheme") // Import default theme

module.exports = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx,js,jsx,mdx}",
    "./components/**/*.{ts,tsx,js,jsx,mdx}",
    "./app/**/*.{ts,tsx,js,jsx,mdx}",
    "./src/**/*.{ts,tsx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "1.5rem", // Adjusted default padding
      screens: {
        "2xl": "1440px", // Slightly wider max width
      },
    },
    extend: {
      fontFamily: {
        // Set 'sans' to use the Montserrat variable, with fallbacks
        // sans: ["var(--font-montserrat)", ...fontFamily.sans],
      },
      colors: {
         // Add sidebar specific colors if not already defined via CSS vars
         sidebar: {
           DEFAULT: "hsl(var(--sidebar))",
           foreground: "hsl(var(--sidebar-foreground))",
           border: "hsl(var(--sidebar-border))",
           // ... add others like primary, accent if needed for sidebar theme
         },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" }, // Use string "0"
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" }, // Use string "0"
        },
         // Add fade-in-up animation if not using tw-animate-css
         "fade-in-up": {
           "0%": {
             opacity: "0",
             transform: "translateY(10px)",
           },
           "100%": {
             opacity: "1",
             transform: "translateY(0)",
           },
         },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "fade-in-up": "fade-in-up 0.5s ease-out forwards", // Add fade-in-up
      },
    },
  },
  // Ensure you have the required plugins
  plugins: [
      // require("tailwindcss-animate"), // Standard animate plugin
      // require("tw-animate-css") // Remove if using tailwindcss-animate
    ],
}// END OF FILE: tailwind.config.js

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/tsconfig.tsbuildinfo

{"fileNames":["./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es5.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2015.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2016.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2017.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2018.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2019.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2020.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2021.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2022.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2023.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2024.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.esnext.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.dom.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.dom.iterable.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2015.core.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2015.collection.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2015.generator.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2015.iterable.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2015.promise.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2015.proxy.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2015.reflect.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2015.symbol.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2016.array.include.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2016.intl.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2017.arraybuffer.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2017.date.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2017.object.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2017.string.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2017.intl.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2018.intl.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2018.promise.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2018.regexp.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2019.array.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2019.object.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2019.string.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2019.symbol.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2019.intl.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2020.bigint.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2020.date.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2020.promise.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2020.string.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2020.intl.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2020.number.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2021.promise.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2021.string.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2021.weakref.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2021.intl.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2022.array.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2022.error.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2022.intl.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2022.object.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2022.string.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2022.regexp.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2023.array.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2023.collection.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2023.intl.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2024.arraybuffer.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2024.collection.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2024.object.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2024.promise.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2024.regexp.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2024.sharedmemory.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.es2024.string.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.esnext.array.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.esnext.collection.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.esnext.intl.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.esnext.disposable.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.esnext.promise.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.esnext.decorators.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.esnext.iterator.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.esnext.float16.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.decorators.d.ts","./node_modules/.pnpm/typescript@5.8.2/node_modules/typescript/lib/lib.decorators.legacy.d.ts","./node_modules/.pnpm/@types+react@19.0.12/node_modules/@types/react/global.d.ts","./node_modules/.pnpm/csstype@3.1.3/node_modules/csstype/index.d.ts","./node_modules/.pnpm/@types+react@19.0.12/node_modules/@types/react/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/styled-jsx/types/css.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/styled-jsx/types/macro.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/styled-jsx/types/style.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/styled-jsx/types/global.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/styled-jsx/types/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/amp.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/amp.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/get-page-files.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/compatibility/disposable.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/compatibility/indexable.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/compatibility/iterators.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/compatibility/index.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/globals.typedarray.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/buffer.buffer.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/header.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/readable.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/file.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/fetch.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/formdata.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/connector.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/client.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/errors.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/dispatcher.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/global-dispatcher.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/global-origin.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/pool-stats.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/pool.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/handlers.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/balanced-pool.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/agent.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/mock-interceptor.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/mock-agent.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/mock-client.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/mock-pool.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/mock-errors.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/proxy-agent.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/env-http-proxy-agent.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/retry-handler.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/retry-agent.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/api.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/interceptors.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/util.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/cookies.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/patch.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/websocket.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/eventsource.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/filereader.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/diagnostics-channel.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/content-type.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/cache.d.ts","./node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/index.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/globals.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/assert.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/assert/strict.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/async_hooks.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/buffer.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/child_process.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/cluster.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/console.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/constants.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/crypto.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/dgram.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/diagnostics_channel.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/dns.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/dns/promises.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/domain.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/dom-events.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/events.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/fs.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/fs/promises.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/http.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/http2.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/https.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/inspector.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/module.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/net.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/os.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/path.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/perf_hooks.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/process.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/punycode.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/querystring.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/readline.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/readline/promises.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/repl.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/sea.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/stream.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/stream/promises.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/stream/consumers.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/stream/web.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/string_decoder.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/test.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/timers.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/timers/promises.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/tls.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/trace_events.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/tty.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/url.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/util.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/v8.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/vm.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/wasi.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/worker_threads.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/zlib.d.ts","./node_modules/.pnpm/@types+node@20.17.28/node_modules/@types/node/index.d.ts","./node_modules/.pnpm/@types+react@19.0.12/node_modules/@types/react/canary.d.ts","./node_modules/.pnpm/@types+react@19.0.12/node_modules/@types/react/experimental.d.ts","./node_modules/.pnpm/@types+react-dom@19.0.4_@types+react@19.0.12/node_modules/@types/react-dom/index.d.ts","./node_modules/.pnpm/@types+react-dom@19.0.4_@types+react@19.0.12/node_modules/@types/react-dom/canary.d.ts","./node_modules/.pnpm/@types+react-dom@19.0.4_@types+react@19.0.12/node_modules/@types/react-dom/experimental.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/fallback.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/compiled/webpack/webpack.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/config.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/load-custom-routes.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/image-config.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/webpack/plugins/subresource-integrity-plugin.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/body-streams.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/cache-control.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/setup-exception-listeners.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/worker.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/constants.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/app-router-headers.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/rendering-mode.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/router-utils/build-prefetch-segment-data-route.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/require-hook.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/experimental/ppr.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/webpack/plugins/app-build-manifest-plugin.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/page-types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/segment-config/app/app-segment-config.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/segment-config/pages/pages-segment-config.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/analysis/get-page-static-info.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/webpack/loaders/get-module-build-info.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/webpack/plugins/middleware-plugin.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/node-polyfill-crypto.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/node-environment-baseline.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/node-environment-extensions/error-inspect.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/node-environment-extensions/random.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/node-environment-extensions/date.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/node-environment-extensions/web-crypto.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/node-environment-extensions/node-crypto.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/node-environment.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/page-extensions-type.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/webpack/plugins/flight-manifest-plugin.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-kind.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-definitions/route-definition.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-modules/route-module.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/deep-readonly.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/load-components.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-definitions/app-page-route-definition.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/cache-handlers/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/response-cache/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/resume-data-cache/cache-store.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/resume-data-cache/resume-data-cache.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/render-result.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/webpack/plugins/next-font-manifest-plugin.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/router-reducer/router-reducer-types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/flight-data-helpers.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/router-reducer/fetch-server-response.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/app-router-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/router/utils/middleware-route-matcher.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-definitions/locale-route-definition.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-definitions/pages-route-definition.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/mitt.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/with-router.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/router.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/route-loader.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/page-loader.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/bloom-filter.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/router/router.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/router-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/loadable-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/loadable.shared-runtime.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/image-config-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/hooks-client-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/head-manager-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/amp-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/server-inserted-html.shared-runtime.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-modules/pages/vendored/contexts/entrypoints.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-modules/pages/module.compiled.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/templates/pages.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-modules/pages/module.d.ts","./node_modules/.pnpm/@types+react@19.0.12/node_modules/@types/react/jsx-runtime.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/react-dev-overlay/pages/pages-dev-overlay.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/render.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/response-cache/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/webpack/plugins/pages-manifest-plugin.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-definitions/pages-api-route-definition.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-matches/pages-api-route-match.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/instrumentation/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-matchers/route-matcher.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-matcher-providers/route-matcher-provider.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/i18n-provider.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-matcher-managers/route-matcher-manager.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/normalizers/normalizer.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/normalizers/locale-route-normalizer.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/normalizers/request/pathname-normalizer.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/normalizers/request/suffix.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/normalizers/request/rsc.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/normalizers/request/prefetch-rsc.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/normalizers/request/next-data.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/after/builtin-request-context.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/normalizers/request/segment-prefix-rsc.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/base-server.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/next-url.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/compiled/@edge-runtime/cookies/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/spec-extension/cookies.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/spec-extension/request.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/spec-extension/fetch-event.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/spec-extension/response.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/segment-config/middleware/middleware-config.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/adapter.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/use-cache/cache-life.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/modern-browserslist-target.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/constants.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/webpack/loaders/metadata/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/app-dir-module.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/async-storage/draft-mode-provider.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/spec-extension/adapters/headers.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/cache-signal.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/dynamic-rendering.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/work-unit-async-storage-instance.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/work-unit-async-storage.external.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/router/utils/parse-relative-url.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/request/fallback-params.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/clean-async-snapshot-instance.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/clean-async-snapshot.external.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/app-render.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/server-inserted-metadata.shared-runtime.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-modules/app-page/vendored/contexts/entrypoints.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/error-boundary.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/layout-router.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/render-from-template-context.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/action-async-storage-instance.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/action-async-storage.external.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/client-page.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/client-segment.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/request/search-params.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/hooks-server-context.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/http-access-fallback/error-boundary.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/metadata/types/alternative-urls-types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/metadata/types/extra-types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/metadata/types/metadata-types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/metadata/types/manifest-types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/metadata/types/opengraph-types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/metadata/types/twitter-types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/metadata/types/metadata-interface.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/metadata/types/resolvers.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/metadata/types/icons.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/metadata/resolve-metadata.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/metadata/metadata.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/metadata/metadata-boundary.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/rsc/preloads.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/rsc/postpone.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/rsc/taint.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/collect-segment-data.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/entry-base.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/templates/app-page.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-modules/app-page/module.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-modules/app-page/module.compiled.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-definitions/app-route-route-definition.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/async-storage/work-store.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/http.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-modules/app-route/shared-modules.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/redirect-status-code.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/redirect-error.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/templates/app-route.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-modules/app-route/module.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-modules/app-route/module.compiled.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/segment-config/app/app-segments.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/static-paths/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/utils.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/turborepo-access-trace/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/turborepo-access-trace/result.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/turborepo-access-trace/helpers.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/turborepo-access-trace/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/export/routes/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/export/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/export/worker.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/worker.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/incremental-cache/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/after/after.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/after/after-context.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/work-async-storage-instance.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/app-render/work-async-storage.external.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/request/params.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/route-matches/route-match.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/request-meta.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/cli/next-test.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/config-shared.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/base-http/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/api-utils/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/router/utils/parse-url.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/base-http/node.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/async-callback-set.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/router/utils/route-regex.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/router/utils/route-matcher.d.ts","./node_modules/.pnpm/sharp@0.33.5/node_modules/sharp/lib/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/image-optimizer.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/next-server.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/lib/coalesced-function.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/router-utils/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/trace/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/trace/trace.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/trace/shared.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/trace/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/load-jsconfig.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/webpack-config.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/swc/generated-native.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/build/swc/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/dev/parse-version-info.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/react-dev-overlay/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/dev/dev-indicator-server-state.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/dev/hot-reloader-types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/telemetry/storage.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/render-server.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/router-server.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/router/utils/path-match.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/router-utils/filesystem.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/router-utils/setup-dev-bundler.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/lru-cache.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/lib/dev-bundler-service.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/dev/static-paths-worker.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/dev/next-dev-server.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/next.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/html-context.shared-runtime.d.ts","./node_modules/.pnpm/@next+env@15.2.4/node_modules/@next/env/dist/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/utils.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/pages/_app.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/app.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/spec-extension/unstable-cache.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/spec-extension/revalidate.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/spec-extension/unstable-no-store.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/use-cache/cache-tag.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/cache.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/runtime-config.external.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/config.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/pages/_document.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/document.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/dynamic.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dynamic.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/pages/_error.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/error.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/head.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/head.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/request/cookies.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/request/headers.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/request/draft-mode.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/headers.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/get-img-props.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/image-component.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/shared/lib/image-external.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/image.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/link.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/link.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/redirect.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/not-found.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/forbidden.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/unauthorized.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/unstable-rethrow.server.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/unstable-rethrow.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/navigation.react-server.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/components/navigation.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/navigation.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/router.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/client/script.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/script.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/spec-extension/user-agent.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/compiled/@edge-runtime/primitives/url.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/web/spec-extension/image-response.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/compiled/@vercel/og/satori/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/compiled/@vercel/og/emoji/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/compiled/@vercel/og/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/after/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/request/root-params.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/server/request/connection.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/server.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/types/global.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/types/compiled.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/image-types/global.d.ts","./next-env.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/adapters.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/types.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwe/compact/decrypt.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwe/flattened/decrypt.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwe/general/decrypt.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwe/general/encrypt.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jws/compact/verify.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jws/flattened/verify.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jws/general/verify.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwt/verify.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwt/decrypt.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwt/produce.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwe/compact/encrypt.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwe/flattened/encrypt.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jws/compact/sign.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jws/flattened/sign.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jws/general/sign.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwt/sign.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwt/encrypt.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwk/thumbprint.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwk/embedded.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwks/local.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwks/remote.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/jwt/unsecured.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/key/export.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/key/import.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/util/decode_protected_header.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/util/decode_jwt.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/util/errors.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/key/generate_key_pair.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/key/generate_secret.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/util/base64url.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/util/runtime.d.ts","./node_modules/.pnpm/jose@4.15.9/node_modules/jose/dist/types/index.d.ts","./node_modules/.pnpm/openid-client@5.7.1/node_modules/openid-client/types/index.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/providers/oauth-types.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/providers/oauth.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/providers/email.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/core/lib/cookie.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/core/index.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/providers/credentials.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/providers/index.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/jwt/types.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/jwt/index.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/utils/logger.d.ts","../../../../../../node_modules/@types/cookie/index.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/core/types.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/next/index.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/index.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/next/middleware.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/middleware.d.ts","./middleware.ts","./next.config.ts","./app/robots.ts","./app/sitemap.ts","./types/auth.ts","./lib/data-repo/auth/auth-repository-interface.ts","./node_modules/.pnpm/sonner@2.0.2_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/sonner/dist/index.d.mts","./lib/data-repo/auth/auth-local-repository.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/client/_utils.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/react/types.d.ts","./node_modules/.pnpm/next-auth@4.24.11_next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc._ccf70dbf0d1b687b4b31718be4bd137b/node_modules/next-auth/react/index.d.ts","./types/organization.ts","./types/media.ts","./lib/auth/system-token-manager.ts","./lib/apiClient.ts","./lib/data-repo/auth/auth-remote-repository.ts","./lib/data-repo/auth/index.ts","./lib/data-repo/organization/organization-repository-interface.ts","./lib/data-repo/organization/organization-local-repository.ts","./lib/data-repo/organization/organization-remote-repository.ts","./lib/data-repo/organization/index.ts","./app/api/auth/[...nextauth]/route.ts","./types/user-preferences.ts","./lib/data-repo/local-store/json-db-manager.ts","./app/api/mock/[entityType]/[entityId]/addresses/route.ts","./app/api/mock/[entityType]/[entityId]/addresses/[addressId]/route.ts","./app/api/mock/[entityType]/[entityId]/addresses/[addressId]/favorite/route.ts","./app/api/mock/[entityType]/[entityId]/contacts/route.ts","./app/api/mock/[entityType]/[entityId]/contacts/[contactId]/route.ts","./app/api/mock/[entityType]/[entityId]/contacts/[contactId]/favorite/route.ts","./app/api/mock/applications/route.ts","./app/api/mock/applications/[applicationId]/keys/route.ts","./app/api/mock/applications/[applicationId]/keys/create/route.ts","./node_modules/.pnpm/bcryptjs@3.0.2/node_modules/bcryptjs/types.d.ts","./node_modules/.pnpm/bcryptjs@3.0.2/node_modules/bcryptjs/index.d.ts","./app/api/mock/auth/login/route.ts","./app/api/mock/auth/permissions/route.ts","./app/api/mock/auth/permissions/[permission_id]/route.ts","./app/api/mock/auth/register/route.ts","./app/api/mock/auth/resources/save/route.ts","./app/api/mock/auth/roles/route.ts","./app/api/mock/auth/roles/[role_id]/route.ts","./app/api/mock/auth/roles/[role_id]/permissions/route.ts","./app/api/mock/auth/roles/[role_id]/permissions/[permission_id]/route.ts","./app/api/mock/auth/roles/hierarchy/route.ts","./app/api/mock/auth/user/route.ts","./app/api/mock/auth/users/route.ts","./app/api/mock/auth/users/email/[email]/route.ts","./app/api/mock/auth/users/phone/[phone_number]/route.ts","./app/api/mock/auth/users/username/[username]/route.ts","./lib/data-repo/local-store/mock-auth-utils.ts","./app/api/mock/business-actors/route.ts","./app/api/mock/business-actors/[baId]/route.ts","./app/api/mock/business-actors/type/[type]/route.ts","./app/api/mock/business-domains/route.ts","./app/api/mock/business-domains/[domainId]/route.ts","./app/api/mock/geo/reverse/route.ts","./app/api/mock/geo/search/route.ts","./app/api/mock/images/[orgId]/add/route.ts","./app/api/mock/images/details/[imageId]/route.ts","./app/api/mock/media/[service]/[type]/[path]/[resource_id]/route.ts","./app/api/mock/media/infos/[service]/[type]/[path]/[resource_id]/route.ts","./app/api/mock/organization/route.ts","./app/api/mock/organization/[orgId]/route.ts","./app/api/mock/organization/[orgId]/agencies/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/[customerId]/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/add/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/[employeeId]/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/add/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/prospects/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/prospects/[prospectId]/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/sales-people/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/sales-people/[salesPersonId]/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/status/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/[providerId]/route.ts","./app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/add/route.ts","./app/api/mock/organization/[orgId]/certifications/route.ts","./app/api/mock/organization/[orgId]/certifications/[certId]/route.ts","./app/api/mock/organization/[orgId]/customers/route.ts","./app/api/mock/organization/[orgId]/customers/[customerId]/route.ts","./app/api/mock/organization/[orgId]/details/route.ts","./app/api/mock/organization/[orgId]/domains/[businessDomainId]/add/route.ts","./app/api/mock/organization/[orgId]/domains/[businessDomainId]/remove/route.ts","./app/api/mock/organization/[orgId]/employees/route.ts","./app/api/mock/organization/[orgId]/employees/[employeeId]/route.ts","./app/api/mock/organization/[orgId]/practical-infos/route.ts","./app/api/mock/organization/[orgId]/practical-infos/[infoId]/route.ts","./app/api/mock/organization/[orgId]/proposed-activities/route.ts","./app/api/mock/organization/[orgId]/proposed-activities/[activityId]/route.ts","./app/api/mock/organization/[orgId]/prospects/route.ts","./app/api/mock/organization/[orgId]/prospects/[prospectId]/route.ts","./app/api/mock/organization/[orgId]/sales-people/route.ts","./app/api/mock/organization/[orgId]/sales-people/[salesPersonId]/route.ts","./app/api/mock/organization/[orgId]/status/route.ts","./app/api/mock/organization/[orgId]/suppliers/route.ts","./app/api/mock/organization/[orgId]/suppliers/[providerId]/route.ts","./app/api/mock/organization/[orgId]/third-parties/route.ts","./app/api/mock/organization/[orgId]/third-parties/[thirdPartyId]/route.ts","./app/api/mock/organization/[orgId]/third-parties/[thirdPartyId]/status/route.ts","./app/api/mock/organization/[orgId]/third-parties/create/route.ts","./app/api/mock/organization/all/route.ts","./app/api/mock/organization/domain/[domainId]/route.ts","./app/api/mock/organization/user-orgs/route.ts","./app/api/mock/user-preferences/[userId]/route.ts","./app/api/proxy/[...slug]/route.ts","./hooks/use-command-palette.ts","./hooks/use-debounce.ts","./hooks/use-local-storage.ts","./hooks/use-mouse-position.ts","./lib/export.ts","./node_modules/.pnpm/@tanstack+match-sorter-utils@8.19.4/node_modules/@tanstack/match-sorter-utils/build/lib/index.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/utils.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/core/table.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/ColumnVisibility.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/ColumnOrdering.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/ColumnPinning.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/RowPinning.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/core/headers.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/ColumnFaceting.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/GlobalFaceting.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/filterFns.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/ColumnFiltering.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/GlobalFiltering.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/sortingFns.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/RowSorting.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/aggregationFns.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/ColumnGrouping.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/RowExpanding.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/ColumnSizing.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/RowPagination.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/features/RowSelection.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/core/row.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/core/cell.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/core/column.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/types.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/columnHelper.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/utils/getCoreRowModel.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/utils/getExpandedRowModel.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/utils/getFacetedMinMaxValues.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/utils/getFacetedRowModel.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/utils/getFacetedUniqueValues.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/utils/getFilteredRowModel.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/utils/getGroupedRowModel.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/utils/getPaginationRowModel.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/utils/getSortedRowModel.d.ts","./node_modules/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/index.d.ts","./node_modules/.pnpm/@tanstack+react-table@8.21.3_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@tanstack/react-table/build/lib/index.d.ts","./node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/clsx.d.mts","./node_modules/.pnpm/tailwind-merge@3.0.2/node_modules/tailwind-merge/dist/types.d.ts","./lib/utils.ts","./types/map.ts","./lib/data-repo/map/map-repository-interface.ts","./lib/data-repo/map/map-local-repository.ts","./lib/data-repo/map/map-remote-repository.ts","./lib/data-repo/map/index.ts","./lib/data-repo/media/media-repository-interface.ts","./lib/data-repo/media/media-local-repository.ts","./lib/data-repo/media/media-remote-repository.ts","./lib/data-repo/media/index.ts","./lib/data-repo/user-preferences/user-preferences-repository-interface.ts","./lib/data-repo/user-preferences/user-preferences-local-repository.ts","./lib/data-repo/user-preferences/user-preferences-remote-repository.ts","./lib/data-repo/user-preferences/index.ts","./lib/utils/metadata-embed.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/typeAliases.d.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/util.d.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/ZodError.d.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/locales/en.d.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/errors.d.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/parseUtil.d.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/enumUtil.d.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/errorUtil.d.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/partialUtil.d.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/standard-schema.d.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/types.d.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/external.d.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/index.d.ts","./node_modules/.pnpm/zod@3.24.2/node_modules/zod/index.d.ts","./lib/validators/productValidator.ts","./types/common.ts","./types/address.ts","./types/next-auth.d.ts","./types/product.ts","./types/table.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/compiled/@next/font/dist/types.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/dist/compiled/@next/font/dist/google/index.d.ts","./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next/font/google/index.d.ts","./node_modules/.pnpm/next-themes@0.4.6_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/next-themes/dist/index.d.ts","./components/ui/sonner.tsx","./node_modules/.pnpm/@radix-ui+react-context@1.1.1_@types+react@19.0.12_react@19.0.0-rc.1/node_modules/@radix-ui/react-context/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-primitive@2.0.2_@types+react-dom@19.0.4_@types+react@19.0.12__@types+re_7f150cc982b45e328cda0d8f03929598/node_modules/@radix-ui/react-primitive/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-dismissable-layer@1.1.5_@types+react-dom@19.0.4_@types+react@19.0.12__@_f30fea39be68db289ffa781be8eba1e1/node_modules/@radix-ui/react-dismissable-layer/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-arrow@1.1.2_@types+react-dom@19.0.4_@types+react@19.0.12__@types+react@_fb11af5f1b207af87136a109a6081485/node_modules/@radix-ui/react-arrow/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+rect@1.1.0/node_modules/@radix-ui/rect/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-popper@1.2.2_@types+react-dom@19.0.4_@types+react@19.0.12__@types+react_623636a091b151534ce41a8042dd85dd/node_modules/@radix-ui/react-popper/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-portal@1.1.4_@types+react-dom@19.0.4_@types+react@19.0.12__@types+react_56156c3b1c0e7ca340415920faabeb8f/node_modules/@radix-ui/react-portal/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-tooltip@1.1.8_@types+react-dom@19.0.4_@types+react@19.0.12__@types+reac_381bb394542f01b8099c66751fb68fae/node_modules/@radix-ui/react-tooltip/dist/index.d.mts","./components/ui/tooltip.tsx","./contexts/settings-context.tsx","./components/providers/session-provider.tsx","./app/layout.tsx","./node_modules/.pnpm/lucide-react@0.484.0_react@19.0.0-rc.1/node_modules/lucide-react/dist/lucide-react.d.ts","./node_modules/.pnpm/@radix-ui+react-slot@1.1.2_@types+react@19.0.12_react@19.0.0-rc.1/node_modules/@radix-ui/react-slot/dist/index.d.mts","./node_modules/.pnpm/class-variance-authority@0.7.1/node_modules/class-variance-authority/dist/types.d.ts","./node_modules/.pnpm/class-variance-authority@0.7.1/node_modules/class-variance-authority/dist/index.d.ts","./components/ui/button.tsx","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/types.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/AccessibilityIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ActivityLogIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/AlignBaselineIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/AlignBottomIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/AlignCenterHorizontallyIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/AlignCenterVerticallyIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/AlignLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/AlignRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/AlignTopIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/AllSidesIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/AngleIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ArchiveIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ArrowBottomLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ArrowBottomRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ArrowDownIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ArrowLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ArrowRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ArrowTopLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ArrowTopRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ArrowUpIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/AspectRatioIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/AvatarIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BackpackIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BadgeIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BarChartIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BellIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BlendingModeIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BookmarkIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BookmarkFilledIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BorderAllIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BorderBottomIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BorderDashedIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BorderDottedIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BorderLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BorderNoneIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BorderRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BorderSolidIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BorderSplitIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BorderStyleIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BorderTopIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BorderWidthIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BoxIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/BoxModelIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ButtonIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CalendarIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CameraIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CardStackIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CardStackMinusIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CardStackPlusIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CaretDownIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CaretLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CaretRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CaretSortIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CaretUpIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ChatBubbleIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CheckIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CheckCircledIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CheckboxIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ChevronDownIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ChevronLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ChevronRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ChevronUpIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CircleIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CircleBackslashIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ClipboardIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ClipboardCopyIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ClockIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CodeIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CodeSandboxLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ColorWheelIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ColumnSpacingIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ColumnsIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CommitIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Component1Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Component2Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ComponentBooleanIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ComponentInstanceIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ComponentNoneIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ComponentPlaceholderIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ContainerIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CookieIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CopyIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CornerBottomLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CornerBottomRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CornerTopLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CornerTopRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CornersIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CountdownTimerIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CounterClockwiseClockIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CropIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Cross1Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Cross2Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CrossCircledIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Crosshair1Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Crosshair2Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CrumpledPaperIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CubeIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CursorArrowIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/CursorTextIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DashIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DashboardIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DesktopIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DimensionsIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DiscIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DiscordLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DividerHorizontalIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DividerVerticalIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DotIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DotFilledIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DotsHorizontalIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DotsVerticalIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DoubleArrowDownIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DoubleArrowLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DoubleArrowRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DoubleArrowUpIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DownloadIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DragHandleDots1Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DragHandleDots2Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DragHandleHorizontalIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DragHandleVerticalIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DrawingPinIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DrawingPinFilledIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/DropdownMenuIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/EnterIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/EnterFullScreenIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/EnvelopeClosedIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/EnvelopeOpenIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/EraserIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ExclamationTriangleIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ExitIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ExitFullScreenIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ExternalLinkIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/EyeClosedIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/EyeNoneIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/EyeOpenIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FaceIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FigmaLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FileIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FileMinusIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FilePlusIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FileTextIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FontBoldIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FontFamilyIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FontItalicIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FontRomanIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FontSizeIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FontStyleIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FrameIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/FramerLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/GearIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/GitHubLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/GlobeIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/GridIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/GroupIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Half1Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Half2Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/HamburgerMenuIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/HandIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/HeadingIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/HeartIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/HeartFilledIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/HeightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/HobbyKnifeIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/HomeIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/IconJarLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/IdCardIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ImageIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/InfoCircledIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/InputIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/InstagramLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/KeyboardIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LapTimerIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LaptopIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LayersIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LayoutIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LetterCaseCapitalizeIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LetterCaseLowercaseIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LetterCaseToggleIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LetterCaseUppercaseIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LetterSpacingIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LightningBoltIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LineHeightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Link1Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Link2Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LinkBreak1Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LinkBreak2Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LinkNone1Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LinkNone2Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LinkedInLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ListBulletIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LockClosedIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LockOpen1Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LockOpen2Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/LoopIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/MagicWandIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/MagnifyingGlassIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/MarginIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/MaskOffIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/MaskOnIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/MinusIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/MinusCircledIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/MixIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/MixerHorizontalIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/MixerVerticalIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/MobileIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ModulzLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/MoonIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/MoveIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/NotionLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/OpacityIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/OpenInNewWindowIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/OverlineIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/PaddingIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/PaperPlaneIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/PauseIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Pencil1Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Pencil2Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/PersonIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/PieChartIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/PilcrowIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/PinBottomIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/PinLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/PinRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/PinTopIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/PlayIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/PlusIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/PlusCircledIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/QuestionMarkIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/QuestionMarkCircledIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/QuoteIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/RadiobuttonIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ReaderIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ReloadIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ResetIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ResumeIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/RocketIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/RotateCounterClockwiseIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/RowSpacingIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/RowsIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/RulerHorizontalIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/RulerSquareIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ScissorsIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SectionIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SewingPinIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SewingPinFilledIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ShadowIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ShadowInnerIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ShadowNoneIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ShadowOuterIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Share1Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/Share2Icon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ShuffleIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SizeIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SketchLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SlashIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SliderIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SpaceBetweenHorizontallyIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SpaceBetweenVerticallyIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SpaceEvenlyHorizontallyIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SpaceEvenlyVerticallyIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SpeakerLoudIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SpeakerModerateIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SpeakerOffIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SpeakerQuietIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SquareIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/StackIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/StarIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/StarFilledIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/StitchesLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/StopIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/StopwatchIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/StretchHorizontallyIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/StretchVerticallyIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/StrikethroughIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SunIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SwitchIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/SymbolIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TableIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TargetIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TextIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TextAlignBottomIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TextAlignCenterIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TextAlignJustifyIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TextAlignLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TextAlignMiddleIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TextAlignRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TextAlignTopIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TextNoneIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ThickArrowDownIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ThickArrowLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ThickArrowRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ThickArrowUpIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TimerIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TokensIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TrackNextIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TrackPreviousIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TransformIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TransparencyGridIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TrashIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TriangleDownIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TriangleLeftIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TriangleRightIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TriangleUpIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/TwitterLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/UnderlineIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/UpdateIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/UploadIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ValueIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ValueNoneIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/VercelLogoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/VideoIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ViewGridIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ViewHorizontalIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ViewNoneIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ViewVerticalIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/WidthIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ZoomInIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/ZoomOutIcon.d.ts","./node_modules/.pnpm/@radix-ui+react-icons@1.3.2_react@19.0.0-rc.1/node_modules/@radix-ui/react-icons/dist/index.d.ts","./components/not-found-buttons.tsx","./app/not-found.tsx","./node_modules/.pnpm/@radix-ui+react-focus-scope@1.1.2_@types+react-dom@19.0.4_@types+react@19.0.12__@types+_36e2012a3b75a5d03ff70a312567a534/node_modules/@radix-ui/react-focus-scope/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-roving-focus@1.1.2_@types+react-dom@19.0.4_@types+react@19.0.12__@types_6684f8f95028d8d19585f4e7115ea75a/node_modules/@radix-ui/react-roving-focus/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-menu@2.1.6_@types+react-dom@19.0.4_@types+react@19.0.12__@types+react@1_6a1a32ff993a0cc544363fe43aa3cd1b/node_modules/@radix-ui/react-menu/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-dropdown-menu@2.1.6_@types+react-dom@19.0.4_@types+react@19.0.12__@type_51d7bb9d693ac2bbcf5f3e77dd6f9ba4/node_modules/@radix-ui/react-dropdown-menu/dist/index.d.mts","./components/ui/dropdown-menu.tsx","./components/mode-toggle.tsx","./node_modules/.pnpm/@radix-ui+react-separator@1.1.2_@types+react-dom@19.0.4_@types+react@19.0.12__@types+re_408f4cf4857db79387c3d48254c6983e/node_modules/@radix-ui/react-separator/dist/index.d.mts","./components/ui/separator.tsx","./components/app-footer.tsx","./app/page.tsx","./app/(auth)/layout.tsx","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/constants.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/utils/createSubject.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/types/events.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/types/path/common.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/types/path/eager.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/types/path/index.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/types/fieldArray.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/types/resolvers.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/types/form.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/types/utils.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/types/fields.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/types/errors.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/types/validator.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/types/controller.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/types/index.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/controller.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/form.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/logic/appendErrors.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/logic/createFormControl.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/logic/index.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/useController.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/useFieldArray.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/useForm.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/useFormContext.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/useFormState.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/useWatch.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/utils/get.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/utils/set.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/utils/index.d.ts","./node_modules/.pnpm/react-hook-form@7.55.0_react@19.0.0-rc.1/node_modules/react-hook-form/dist/index.d.ts","./node_modules/.pnpm/@hookform+resolvers@4.1.3_react-hook-form@7.55.0_react@19.0.0-rc.1_/node_modules/@hookform/resolvers/zod/dist/zod.d.ts","./node_modules/.pnpm/@hookform+resolvers@4.1.3_react-hook-form@7.55.0_react@19.0.0-rc.1_/node_modules/@hookform/resolvers/zod/dist/index.d.ts","./components/ui/card.tsx","./components/auth/auth-card-wrapper.tsx","./components/ui/input.tsx","./node_modules/.pnpm/@radix-ui+react-label@2.1.2_@types+react-dom@19.0.4_@types+react@19.0.12__@types+react@_77011b60bda88c3188dd9e77b83e616f/node_modules/@radix-ui/react-label/dist/index.d.mts","./components/ui/label.tsx","./components/ui/form.tsx","./components/ui/alert.tsx","./components/auth/forgot-password-form.tsx","./app/(auth)/forgot-password/page.tsx","./components/auth/login-form.tsx","./app/(auth)/login/page.tsx","./components/auth/signup-form.tsx","./app/(auth)/signup/page.tsx","./contexts/active-organization-context.tsx","./node_modules/.pnpm/@radix-ui+react-dialog@1.1.6_@types+react-dom@19.0.4_@types+react@19.0.12__@types+react_0a31b5a9891391032ba2b1f229343bde/node_modules/@radix-ui/react-dialog/dist/index.d.mts","./components/ui/dialog.tsx","./components/ui/skeleton.tsx","./node_modules/.pnpm/@radix-ui+react-scroll-area@1.2.3_@types+react-dom@19.0.4_@types+react@19.0.12__@types+_fb938ec52566d034c63640760c6fee9d/node_modules/@radix-ui/react-scroll-area/dist/index.d.mts","./components/ui/scroll-area.tsx","./components/organization/organization-selector-dialog.tsx","./components/organization/organization-switcher.tsx","./components/organization/agencies/agency-selector-dialog.tsx","./components/organization/agencies/agency-switcher.tsx","./components/sidebar.tsx","./node_modules/.pnpm/@radix-ui+react-avatar@1.1.3_@types+react-dom@19.0.4_@types+react@19.0.12__@types+react_97f8058ddb15a2d89efead72ba4e59df/node_modules/@radix-ui/react-avatar/dist/index.d.mts","./components/ui/avatar.tsx","./components/user-nav.tsx","./node_modules/.pnpm/@radix-ui+react-select@2.1.6_@types+react-dom@19.0.4_@types+react@19.0.12__@types+react_62747f95b0c4b9427b6f52d2e9bf6a07/node_modules/@radix-ui/react-select/dist/index.d.mts","./components/ui/select.tsx","./components/dev/role-switcher.tsx","./components/top-nav.tsx","./node_modules/.pnpm/cmdk@1.1.1_@types+react-dom@19.0.4_@types+react@19.0.12__@types+react@19.0.12_react-dom_d713f57cd8a5ef3957e4210a44d440a6/node_modules/cmdk/dist/index.d.ts","./components/ui/command.tsx","./components/command-palette.tsx","./app/(dashboard)/layout.tsx","./app/(dashboard)/bonus/page.tsx","./app/(dashboard)/business-actor/layout.tsx","./node_modules/.pnpm/@radix-ui+react-context@1.1.2_@types+react@19.0.12_react@19.0.0-rc.1/node_modules/@radix-ui/react-context/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-primitive@2.1.3_@types+react-dom@19.0.4_@types+react@19.0.12__@types+re_5b0226594d74cf300a996d734dc15cef/node_modules/@radix-ui/react-primitive/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-dismissable-layer@1.1.10_@types+react-dom@19.0.4_@types+react@19.0.12___4b032193678c008227015ef90df7ceea/node_modules/@radix-ui/react-dismissable-layer/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-focus-scope@1.1.7_@types+react-dom@19.0.4_@types+react@19.0.12__@types+_6d8e50eb60a1cc07ecbcb1d1fdf00252/node_modules/@radix-ui/react-focus-scope/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-portal@1.1.9_@types+react-dom@19.0.4_@types+react@19.0.12__@types+react_eda6f45925cf925d67e9f05a81de1a57/node_modules/@radix-ui/react-portal/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-dialog@1.1.14_@types+react-dom@19.0.4_@types+react@19.0.12__@types+reac_81d997248d18d4b28150a0652ad9bbea/node_modules/@radix-ui/react-dialog/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-alert-dialog@1.1.14_@types+react-dom@19.0.4_@types+react@19.0.12__@type_341bd63135e249424e82301519c0e283/node_modules/@radix-ui/react-alert-dialog/dist/index.d.mts","./components/ui/alert-dialog.tsx","./node_modules/.pnpm/@radix-ui+react-checkbox@1.1.4_@types+react-dom@19.0.4_@types+react@19.0.12__@types+rea_91172ac013b3fc40f0720d1854a80f5a/node_modules/@radix-ui/react-checkbox/dist/index.d.mts","./components/ui/checkbox.tsx","./components/ui/data-table-column-header.tsx","./components/organization/customers/columns.tsx","./components/organization/customers/customer-card.tsx","./components/ui/table.tsx","./components/ui/data-table.tsx","./components/ui/data-grid.tsx","./components/ui/data-table-toolbar.tsx","./components/ui/data-table-pagination.tsx","./components/ui/list-view-skeleton.tsx","./components/ui/feedback-card.tsx","./components/resource-management/resource-data-table.tsx","./components/ui/page-header.tsx","./node_modules/.pnpm/@radix-ui+react-tabs@1.1.3_@types+react-dom@19.0.4_@types+react@19.0.12__@types+react@1_d5c646f9fdd3293e7b756d72f0554718/node_modules/@radix-ui/react-tabs/dist/index.d.mts","./components/ui/tabs.tsx","./components/ui/form-wizard.tsx","./components/ui/form-wrapper.tsx","./components/ui/textarea.tsx","./components/organization/customers/customer-form.tsx","./app/(dashboard)/business-actor/agency/customers/customers-client.tsx","./app/(dashboard)/business-actor/agency/customers/page.tsx","./components/dashboard/organization/stat-card.tsx","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/container/Surface.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/container/Layer.d.ts","./node_modules/.pnpm/@types+d3-time@3.0.4/node_modules/@types/d3-time/index.d.ts","./node_modules/.pnpm/@types+d3-scale@4.0.9/node_modules/@types/d3-scale/index.d.ts","./node_modules/.pnpm/victory-vendor@36.9.2/node_modules/victory-vendor/d3-scale.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/XAxis.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/YAxis.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/util/types.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/component/DefaultLegendContent.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/util/payload/getUniqPayload.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/component/Legend.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/component/DefaultTooltipContent.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/component/Tooltip.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/component/ResponsiveContainer.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/component/Cell.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/component/Text.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/component/Label.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/component/LabelList.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/component/Customized.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/shape/Sector.d.ts","./node_modules/.pnpm/@types+d3-path@3.1.1/node_modules/@types/d3-path/index.d.ts","./node_modules/.pnpm/@types+d3-shape@3.1.7/node_modules/@types/d3-shape/index.d.ts","./node_modules/.pnpm/victory-vendor@36.9.2/node_modules/victory-vendor/d3-shape.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/shape/Curve.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/shape/Rectangle.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/shape/Polygon.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/shape/Dot.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/shape/Cross.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/shape/Symbols.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/polar/PolarGrid.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/polar/PolarRadiusAxis.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/polar/PolarAngleAxis.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/polar/Pie.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/polar/Radar.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/polar/RadialBar.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/Brush.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/util/IfOverflowMatches.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/ReferenceLine.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/ReferenceDot.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/ReferenceArea.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/CartesianAxis.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/CartesianGrid.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/Line.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/Area.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/util/BarUtils.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/Bar.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/ZAxis.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/ErrorBar.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/cartesian/Scatter.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/util/getLegendProps.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/util/ChartUtils.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/AccessibilityManager.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/types.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/generateCategoricalChart.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/LineChart.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/BarChart.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/PieChart.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/Treemap.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/Sankey.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/RadarChart.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/ScatterChart.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/AreaChart.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/RadialBarChart.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/ComposedChart.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/SunburstChart.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/shape/Trapezoid.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/numberAxis/Funnel.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/chart/FunnelChart.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/util/Global.d.ts","./node_modules/.pnpm/recharts@2.15.1_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/recharts/types/index.d.ts","./components/dashboard/organization/sales-chart.tsx","./components/dashboard/agency/team-roster.tsx","./app/(dashboard)/business-actor/agency/dashboard/dashboard-client.tsx","./app/(dashboard)/business-actor/agency/dashboard/page.tsx","./components/ui/badge.tsx","./components/organization/employees/columns.tsx","./components/organization/employees/employee-card.tsx","./node_modules/.pnpm/@radix-ui+react-popover@1.1.6_@types+react-dom@19.0.4_@types+react@19.0.12__@types+reac_d081cd1678c1bfbf3254fc2a0b4e4e0d/node_modules/@radix-ui/react-popover/dist/index.d.mts","./components/ui/popover.tsx","./components/ui/data-table-faceted-filter.tsx","./app/(dashboard)/business-actor/agency/employees/employees-client.tsx","./app/(dashboard)/business-actor/agency/employees/page.tsx","./node_modules/.pnpm/browser-image-compression@2.0.2/node_modules/browser-image-compression/dist/browser-image-compression.d.ts","./components/ui/image-uploader.tsx","./components/organization/employees/employee-form.tsx","./app/(dashboard)/business-actor/agency/employees/[employeeId]/edit-employee-client.tsx","./app/(dashboard)/business-actor/agency/employees/[employeeId]/page.tsx","./app/(dashboard)/business-actor/agency/employees/create/page.tsx","./app/(dashboard)/business-actor/agency/profile/page.tsx","./components/organization/prospects/columns.tsx","./components/organization/prospects/prospect-card.tsx","./components/organization/prospects/prospect-form.tsx","./app/(dashboard)/business-actor/agency/prospects/prospects-client.tsx","./app/(dashboard)/business-actor/agency/prospects/page.tsx","./components/organization/sales-people/columns.tsx","./components/organization/sales-people/sales-person-card.tsx","./components/organization/sales-people/sales-person-form.tsx","./app/(dashboard)/business-actor/agency/sales-people/sales-people-client.tsx","./app/(dashboard)/business-actor/agency/sales-people/page.tsx","./components/organization/suppliers/columns.tsx","./components/organization/suppliers/supplier-card.tsx","./components/organization/suppliers/supplier-form.tsx","./app/(dashboard)/business-actor/agency/suppliers/suppliers-client.tsx","./app/(dashboard)/business-actor/agency/suppliers/page.tsx","./app/(dashboard)/business-actor/bonus/page.tsx","./app/(dashboard)/business-actor/chat/page.tsx","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/constants.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/types.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/fp/types.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/types.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/add.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addBusinessDays.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addDays.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addHours.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addISOWeekYears.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addMilliseconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addMinutes.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addMonths.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addQuarters.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addSeconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addWeeks.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addYears.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/areIntervalsOverlapping.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/clamp.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/closestIndexTo.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/closestTo.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/compareAsc.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/compareDesc.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/constructFrom.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/constructNow.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/daysToWeeks.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInBusinessDays.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInCalendarDays.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInCalendarISOWeekYears.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInCalendarISOWeeks.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInCalendarMonths.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInCalendarQuarters.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInCalendarWeeks.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInCalendarYears.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInDays.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInHours.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInISOWeekYears.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInMilliseconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInMinutes.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInMonths.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInQuarters.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInSeconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInWeeks.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInYears.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/eachDayOfInterval.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/eachHourOfInterval.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/eachMinuteOfInterval.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/eachMonthOfInterval.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/eachQuarterOfInterval.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/eachWeekOfInterval.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/eachWeekendOfInterval.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/eachWeekendOfMonth.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/eachWeekendOfYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/eachYearOfInterval.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfDay.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfDecade.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfHour.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfISOWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfISOWeekYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfMinute.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfMonth.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfQuarter.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfSecond.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfToday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfTomorrow.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfYesterday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/format/formatters.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/format/longFormatters.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/format.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/formatDistance.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/formatDistanceStrict.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/formatDistanceToNow.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/formatDistanceToNowStrict.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/formatDuration.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/formatISO.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/formatISO9075.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/formatISODuration.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/formatRFC3339.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/formatRFC7231.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/formatRelative.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/fromUnixTime.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getDate.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getDay.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getDayOfYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getDaysInMonth.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getDaysInYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getDecade.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/defaultOptions.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getDefaultOptions.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getHours.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getISODay.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getISOWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getISOWeekYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getISOWeeksInYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getMilliseconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getMinutes.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getMonth.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getOverlappingDaysInIntervals.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getQuarter.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getSeconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getTime.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getUnixTime.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getWeekOfMonth.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getWeekYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getWeeksInMonth.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/hoursToMilliseconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/hoursToMinutes.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/hoursToSeconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/interval.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/intervalToDuration.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/intlFormat.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/intlFormatDistance.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isAfter.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isBefore.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isDate.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isEqual.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isExists.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isFirstDayOfMonth.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isFriday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isFuture.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isLastDayOfMonth.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isLeapYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isMatch.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isMonday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isPast.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isSameDay.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isSameHour.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isSameISOWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isSameISOWeekYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isSameMinute.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isSameMonth.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isSameQuarter.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isSameSecond.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isSameWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isSameYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isSaturday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isSunday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isThisHour.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isThisISOWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isThisMinute.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isThisMonth.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isThisQuarter.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isThisSecond.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isThisWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isThisYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isThursday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isToday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isTomorrow.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isTuesday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isValid.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isWednesday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isWeekend.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isWithinInterval.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isYesterday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/lastDayOfDecade.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/lastDayOfISOWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/lastDayOfISOWeekYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/lastDayOfMonth.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/lastDayOfQuarter.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/lastDayOfWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/lastDayOfYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/format/lightFormatters.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/lightFormat.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/max.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/milliseconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/millisecondsToHours.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/millisecondsToMinutes.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/millisecondsToSeconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/min.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/minutesToHours.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/minutesToMilliseconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/minutesToSeconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/monthsToQuarters.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/monthsToYears.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/nextDay.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/nextFriday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/nextMonday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/nextSaturday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/nextSunday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/nextThursday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/nextTuesday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/nextWednesday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/types.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/Setter.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/Parser.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parseISO.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parseJSON.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/previousDay.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/previousFriday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/previousMonday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/previousSaturday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/previousSunday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/previousThursday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/previousTuesday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/previousWednesday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/quartersToMonths.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/quartersToYears.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/roundToNearestHours.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/roundToNearestMinutes.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/secondsToHours.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/secondsToMilliseconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/secondsToMinutes.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/set.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setDate.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setDay.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setDayOfYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setDefaultOptions.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setHours.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setISODay.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setISOWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setISOWeekYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setMilliseconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setMinutes.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setMonth.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setQuarter.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setSeconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setWeekYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfDay.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfDecade.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfHour.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfISOWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfISOWeekYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfMinute.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfMonth.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfQuarter.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfSecond.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfToday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfTomorrow.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfWeek.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfWeekYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfYear.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfYesterday.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/sub.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/subBusinessDays.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/subDays.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/subHours.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/subISOWeekYears.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/subMilliseconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/subMinutes.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/subMonths.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/subQuarters.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/subSeconds.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/subWeeks.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/subYears.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/toDate.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/transpose.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/weeksToDays.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/yearsToDays.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/yearsToMonths.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/yearsToQuarters.d.ts","./node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/index.d.ts","./components/dashboard/organization/recent-activity.tsx","./app/(dashboard)/business-actor/dashboard/dashboard-client.tsx","./app/(dashboard)/business-actor/dashboard/page.tsx","./app/(dashboard)/business-actor/org/layout.tsx","./components/organization/agencies/columns.tsx","./components/organization/agencies/agency-card.tsx","./app/(dashboard)/business-actor/org/agencies/page.tsx","./node_modules/.pnpm/@radix-ui+react-switch@1.1.3_@types+react-dom@19.0.4_@types+react@19.0.12__@types+react_e87a30942a7aedc2b8fb6c9c83c4f40c/node_modules/@radix-ui/react-switch/dist/index.d.mts","./components/ui/switch.tsx","./components/organization/forms/business-domain-search-picker.tsx","./components/organization/agencies/agency-basic-info-form.tsx","./node_modules/.pnpm/react-day-picker@8.10.1_date-fns@4.1.0_react@19.0.0-rc.1/node_modules/react-day-picker/dist/index.d.ts","./components/ui/calendar.tsx","./components/organization/agencies/agency-legal-form.tsx","./components/organization/agencies/agency-branding-form.tsx","./components/organization/agencies/agency-form.tsx","./app/(dashboard)/business-actor/org/agencies/[agencyId]/edit/page.tsx","./app/(dashboard)/business-actor/org/agencies/create/page.tsx","./components/admin/business-domains/columns.tsx","./components/admin/business-domains/business-domain-card.tsx","./components/admin/business-domains/business-domain-form.tsx","./app/(dashboard)/business-actor/org/business-domains/business-domains-client.tsx","./app/(dashboard)/business-actor/org/business-domains/page.tsx","./components/organization/certifications/certification-form.tsx","./components/organization/certifications/columns.tsx","./components/organization/certifications/certification-card.tsx","./app/(dashboard)/business-actor/org/certifications/certifications-client.tsx","./app/(dashboard)/business-actor/org/certifications/page.tsx","./app/(dashboard)/business-actor/org/customers/customers-client.tsx","./app/(dashboard)/business-actor/org/customers/page.tsx","./app/(dashboard)/business-actor/org/employees/employees-client.tsx","./app/(dashboard)/business-actor/org/employees/page.tsx","./app/(dashboard)/business-actor/org/employees/[employeeId]/edit-employee-client.tsx","./app/(dashboard)/business-actor/org/employees/[employeeId]/page.tsx","./app/(dashboard)/business-actor/org/employees/create/page.tsx","./app/(dashboard)/business-actor/org/images/page.tsx","./components/organization/practical-info/practical-info-form.tsx","./components/organization/practical-info/columns.tsx","./components/organization/practical-info/practical-info-card.tsx","./app/(dashboard)/business-actor/org/practical-info/practical-info-client.tsx","./app/(dashboard)/business-actor/org/practical-info/page.tsx","./app/(dashboard)/business-actor/org/products/page.tsx","./components/organization/forms/org-basic-info-form.tsx","./components/organization/forms/org-legal-form.tsx","./components/organization/forms/org-branding-form.tsx","./node_modules/.pnpm/@types+geojson@7946.0.16/node_modules/@types/geojson/index.d.ts","./node_modules/.pnpm/@types+leaflet@1.9.18/node_modules/@types/leaflet/index.d.ts","./components/map/map-skeleton.tsx","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/hooks.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/AttributionControl.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/attribution.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/context.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/element.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/events.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/layer.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/path.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/circle.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/div-overlay.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/component.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/control.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/dom.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/generic.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/grid-layer.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/media-overlay.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/pane.d.ts","./node_modules/.pnpm/@react-leaflet+core@3.0.0_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/@react-leaflet/core/lib/index.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/Circle.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/CircleMarker.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/LayerGroup.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/FeatureGroup.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/GeoJSON.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/ImageOverlay.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/LayersControl.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/MapContainer.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/Marker.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/Pane.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/Polygon.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/Polyline.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/Popup.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/Rectangle.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/ScaleControl.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/SVGOverlay.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/TileLayer.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/Tooltip.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/VideoOverlay.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/WMSTileLayer.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/ZoomControl.d.ts","./node_modules/.pnpm/react-leaflet@5.0.0-rc.2_leaflet@1.9.4_react-dom@19.0.0-rc.1_react@19.0.0-rc.1__react@19.0.0-rc.1/node_modules/react-leaflet/lib/index.d.ts","./components/map/map-component.tsx","./components/map/map-view.tsx","./components/organization/forms/org-address-form.tsx","./components/organization/organization-form.tsx","./components/organization/forms/contact-form.tsx","./components/organization/contact-list.tsx","./components/organization/address-list.tsx","./components/organization/profile-nav.tsx","./app/(dashboard)/business-actor/org/profile/profile-client.tsx","./app/(dashboard)/business-actor/org/profile/page.tsx","./components/organization/proposed-activities/columns.tsx","./components/organization/proposed-activities/proposed-activity-card.tsx","./components/organization/proposed-activities/proposed-activity-form.tsx","./app/(dashboard)/business-actor/org/proposed-activities/proposed-activities-client.tsx","./app/(dashboard)/business-actor/org/proposed-activities/page.tsx","./app/(dashboard)/business-actor/org/prospects/prospects-client.tsx","./app/(dashboard)/business-actor/org/prospects/page.tsx","./app/(dashboard)/business-actor/org/sales-people/sales-people-client.tsx","./app/(dashboard)/business-actor/org/sales-people/page.tsx","./app/(dashboard)/business-actor/org/services/page.tsx","./app/(dashboard)/business-actor/org/suppliers/suppliers-client.tsx","./app/(dashboard)/business-actor/org/suppliers/page.tsx","./components/organization/third-parties/columns.tsx","./components/organization/third-parties/third-party-card.tsx","./components/organization/third-parties/third-party-form.tsx","./app/(dashboard)/business-actor/org/third-parties/third-parties-client.tsx","./app/(dashboard)/business-actor/org/third-parties/page.tsx","./app/(dashboard)/business-actor/organization/create/page.tsx","./components/organization/organization-card.tsx","./components/organization/organization-columns.tsx","./app/(dashboard)/business-actor/organizations/page.tsx","./app/(dashboard)/business-actor/webhooks/page.tsx","./app/(dashboard)/chat/page.tsx","./app/(dashboard)/dashboard/page.tsx","./app/(dashboard)/favorites/page.tsx","./node_modules/.pnpm/@radix-ui+react-collapsible@1.1.3_@types+react-dom@19.0.4_@types+react@19.0.12__@types+_d72c500d6d0e095f26c2583dff3722c5/node_modules/@radix-ui/react-collapsible/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-accordion@1.2.3_@types+react-dom@19.0.4_@types+react@19.0.12__@types+re_4eba6df86a033e3e961e0b1079655e27/node_modules/@radix-ui/react-accordion/dist/index.d.mts","./components/ui/accordion.tsx","./app/(dashboard)/help/page.tsx","./app/(dashboard)/invite/page.tsx","./app/(dashboard)/invoices/page.tsx","./node_modules/.pnpm/@radix-ui+react-slider@1.2.3_@types+react-dom@19.0.4_@types+react@19.0.12__@types+react_bcdd568dd3899c8312ef535c0b295b93/node_modules/@radix-ui/react-slider/dist/index.d.mts","./components/ui/slider.tsx","./node_modules/.pnpm/@radix-ui+react-radio-group@1.2.3_@types+react-dom@19.0.4_@types+react@19.0.12__@types+_ea375dfec4b59969a14d710339da184d/node_modules/@radix-ui/react-radio-group/dist/index.d.mts","./components/ui/radio-group.tsx","./app/(dashboard)/settings/page.tsx","./app/(dashboard)/super-admin/agencies/columns.tsx","./app/(dashboard)/super-admin/agencies/agencies-client.tsx","./app/(dashboard)/super-admin/agencies/page.tsx","./app/(dashboard)/super-admin/bonus/page.tsx","./app/(dashboard)/super-admin/business-actors/business-actor-card.tsx","./app/(dashboard)/super-admin/business-actors/columns.tsx","./components/business-actor/business-actor-form.tsx","./app/(dashboard)/super-admin/business-actors/business-actors-client.tsx","./app/(dashboard)/super-admin/business-actors/page.tsx","./app/(dashboard)/super-admin/business-domains/business-domains-client.tsx","./app/(dashboard)/super-admin/business-domains/page.tsx","./app/(dashboard)/super-admin/certifications/columns.tsx","./app/(dashboard)/super-admin/certifications/certifications-client.tsx","./app/(dashboard)/super-admin/certifications/page.tsx","./app/(dashboard)/super-admin/chat/page.tsx","./app/(dashboard)/super-admin/customers/columns.tsx","./app/(dashboard)/super-admin/customers/customers-client.tsx","./app/(dashboard)/super-admin/customers/page.tsx","./app/(dashboard)/super-admin/dashboard/dashboard-client.tsx","./app/(dashboard)/super-admin/dashboard/page.tsx","./app/(dashboard)/super-admin/organizations/columns.tsx","./app/(dashboard)/super-admin/organizations/organization-card.tsx","./app/(dashboard)/super-admin/organizations/organizations-client.tsx","./app/(dashboard)/super-admin/organizations/page.tsx","./app/(dashboard)/super-admin/platforms/page.tsx","./app/(dashboard)/super-admin/profile/page.tsx","./app/(dashboard)/super-admin/roles/roles-client.tsx","./app/(dashboard)/super-admin/roles/page.tsx","./app/(dashboard)/super-admin/suppliers/columns.tsx","./app/(dashboard)/super-admin/suppliers/suppliers-client.tsx","./app/(dashboard)/super-admin/suppliers/page.tsx","./app/(dashboard)/super-admin/users/columns.tsx","./app/(dashboard)/super-admin/users/user-card.tsx","./app/(dashboard)/super-admin/users/users-client.tsx","./app/(dashboard)/super-admin/users/page.tsx","./app/(dashboard)/super-admin/webhooks/page.tsx","./components/date-range-picker.tsx","./components/notifications.tsx","./components/theme-toggle.tsx","./components/admin/users/columns.tsx","./components/ui/image-placeholder.tsx","./components/customer/CustomerProductCard.tsx","./components/customer/CustomerProductDataTableToolbar.tsx","./components/customer/ReservationModal.tsx","./components/customer/columns.tsx","./components/dashboard/dashboard-card.tsx","./components/resource-management/assignment-dialog.tsx","./components/ui/multi-select.tsx","./node_modules/.pnpm/@radix-ui+react-progress@1.1.2_@types+react-dom@19.0.4_@types+react@19.0.12__@types+rea_184c01399aa747a5f9afe6575c86db37/node_modules/@radix-ui/react-progress/dist/index.d.mts","./components/ui/progress.tsx","./contexts/active-agency-context.tsx","./.next/types/cache-life.d.ts","./.next/types/app/page.ts","./.next/types/app/(auth)/layout.ts","./.next/types/app/(auth)/forgot-password/page.ts","./.next/types/app/(auth)/login/page.ts","./.next/types/app/(auth)/signup/page.ts","./.next/types/app/(dashboard)/bonus/page.ts","./.next/types/app/(dashboard)/business-actor/layout.ts","./.next/types/app/(dashboard)/business-actor/agency/customers/page.ts","./.next/types/app/(dashboard)/business-actor/agency/dashboard/page.ts","./.next/types/app/(dashboard)/business-actor/agency/employees/page.ts","./.next/types/app/(dashboard)/business-actor/agency/employees/[employeeId]/page.ts","./.next/types/app/(dashboard)/business-actor/agency/employees/create/page.ts","./.next/types/app/(dashboard)/business-actor/agency/profile/page.ts","./.next/types/app/(dashboard)/business-actor/agency/prospects/page.ts","./.next/types/app/(dashboard)/business-actor/agency/sales-people/page.ts","./.next/types/app/(dashboard)/business-actor/agency/suppliers/page.ts","./.next/types/app/(dashboard)/business-actor/bonus/page.ts","./.next/types/app/(dashboard)/business-actor/chat/page.ts","./.next/types/app/(dashboard)/business-actor/dashboard/page.ts","./.next/types/app/(dashboard)/business-actor/org/layout.ts","./.next/types/app/(dashboard)/business-actor/org/agencies/page.ts","./.next/types/app/(dashboard)/business-actor/org/agencies/[agencyId]/edit/page.ts","./.next/types/app/(dashboard)/business-actor/org/agencies/create/page.ts","./.next/types/app/(dashboard)/business-actor/org/business-domains/page.ts","./.next/types/app/(dashboard)/business-actor/org/certifications/page.ts","./.next/types/app/(dashboard)/business-actor/org/customers/page.ts","./.next/types/app/(dashboard)/business-actor/org/employees/page.ts","./.next/types/app/(dashboard)/business-actor/org/employees/[employeeId]/page.ts","./.next/types/app/(dashboard)/business-actor/org/employees/create/page.ts","./.next/types/app/(dashboard)/business-actor/org/images/page.ts","./.next/types/app/(dashboard)/business-actor/org/practical-info/page.ts","./.next/types/app/(dashboard)/business-actor/org/products/page.ts","./.next/types/app/(dashboard)/business-actor/org/profile/page.ts","./.next/types/app/(dashboard)/business-actor/org/proposed-activities/page.ts","./.next/types/app/(dashboard)/business-actor/org/prospects/page.ts","./.next/types/app/(dashboard)/business-actor/org/sales-people/page.ts","./.next/types/app/(dashboard)/business-actor/org/services/page.ts","./.next/types/app/(dashboard)/business-actor/org/suppliers/page.ts","./.next/types/app/(dashboard)/business-actor/org/third-parties/page.ts","./.next/types/app/(dashboard)/business-actor/organization/create/page.ts","./.next/types/app/(dashboard)/business-actor/organizations/page.ts","./.next/types/app/(dashboard)/business-actor/webhooks/page.ts","./.next/types/app/(dashboard)/chat/page.ts","./.next/types/app/(dashboard)/dashboard/page.ts","./.next/types/app/(dashboard)/favorites/page.ts","./.next/types/app/(dashboard)/help/page.ts","./.next/types/app/(dashboard)/invite/page.ts","./.next/types/app/(dashboard)/invoices/page.ts","./.next/types/app/(dashboard)/settings/page.ts","./.next/types/app/(dashboard)/super-admin/agencies/page.ts","./.next/types/app/(dashboard)/super-admin/bonus/page.ts","./.next/types/app/(dashboard)/super-admin/business-actors/page.ts","./.next/types/app/(dashboard)/super-admin/business-domains/page.ts","./.next/types/app/(dashboard)/super-admin/certifications/page.ts","./.next/types/app/(dashboard)/super-admin/chat/page.ts","./.next/types/app/(dashboard)/super-admin/customers/page.ts","./.next/types/app/(dashboard)/super-admin/dashboard/page.ts","./.next/types/app/(dashboard)/super-admin/organizations/page.ts","./.next/types/app/(dashboard)/super-admin/platforms/page.ts","./.next/types/app/(dashboard)/super-admin/profile/page.ts","./.next/types/app/(dashboard)/super-admin/roles/page.ts","./.next/types/app/(dashboard)/super-admin/suppliers/page.ts","./.next/types/app/(dashboard)/super-admin/users/page.ts","./.next/types/app/(dashboard)/super-admin/webhooks/page.ts","./.next/types/app/api/mock/[entityType]/[entityId]/addresses/route.ts","./.next/types/app/api/mock/[entityType]/[entityId]/addresses/[addressId]/route.ts","./.next/types/app/api/mock/[entityType]/[entityId]/addresses/[addressId]/favorite/route.ts","./.next/types/app/api/mock/[entityType]/[entityId]/contacts/route.ts","./.next/types/app/api/mock/[entityType]/[entityId]/contacts/[contactId]/route.ts","./.next/types/app/api/mock/[entityType]/[entityId]/contacts/[contactId]/favorite/route.ts","./.next/types/app/api/mock/applications/route.ts","./.next/types/app/api/mock/applications/[applicationId]/keys/route.ts","./.next/types/app/api/mock/applications/[applicationId]/keys/create/route.ts","./.next/types/app/api/mock/auth/login/route.ts","./.next/types/app/api/mock/auth/permissions/route.ts","./.next/types/app/api/mock/auth/permissions/[permission_id]/route.ts","./.next/types/app/api/mock/auth/register/route.ts","./.next/types/app/api/mock/auth/resources/save/route.ts","./.next/types/app/api/mock/auth/roles/route.ts","./.next/types/app/api/mock/auth/roles/[role_id]/route.ts","./.next/types/app/api/mock/auth/roles/[role_id]/permissions/route.ts","./.next/types/app/api/mock/auth/roles/[role_id]/permissions/[permission_id]/route.ts","./.next/types/app/api/mock/auth/roles/hierarchy/route.ts","./.next/types/app/api/mock/auth/user/route.ts","./.next/types/app/api/mock/auth/users/route.ts","./.next/types/app/api/mock/auth/users/email/[email]/route.ts","./.next/types/app/api/mock/auth/users/phone/[phone_number]/route.ts","./.next/types/app/api/mock/auth/users/username/[username]/route.ts","./.next/types/app/api/mock/business-actors/route.ts","./.next/types/app/api/mock/business-actors/[baId]/route.ts","./.next/types/app/api/mock/business-actors/type/[type]/route.ts","./.next/types/app/api/mock/business-domains/route.ts","./.next/types/app/api/mock/business-domains/[domainId]/route.ts","./.next/types/app/api/mock/geo/reverse/route.ts","./.next/types/app/api/mock/geo/search/route.ts","./.next/types/app/api/mock/images/[orgId]/add/route.ts","./.next/types/app/api/mock/images/details/[imageId]/route.ts","./.next/types/app/api/mock/media/[service]/[type]/[path]/[resource_id]/route.ts","./.next/types/app/api/mock/media/infos/[service]/[type]/[path]/[resource_id]/route.ts","./.next/types/app/api/mock/organization/route.ts","./.next/types/app/api/mock/organization/[orgId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/[customerId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/add/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/[employeeId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/add/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/prospects/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/prospects/[prospectId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/sales-people/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/sales-people/[salesPersonId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/status/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/[providerId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/add/route.ts","./.next/types/app/api/mock/organization/[orgId]/certifications/route.ts","./.next/types/app/api/mock/organization/[orgId]/certifications/[certId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/customers/route.ts","./.next/types/app/api/mock/organization/[orgId]/customers/[customerId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/details/route.ts","./.next/types/app/api/mock/organization/[orgId]/domains/[businessDomainId]/add/route.ts","./.next/types/app/api/mock/organization/[orgId]/domains/[businessDomainId]/remove/route.ts","./.next/types/app/api/mock/organization/[orgId]/employees/route.ts","./.next/types/app/api/mock/organization/[orgId]/employees/[employeeId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/practical-infos/route.ts","./.next/types/app/api/mock/organization/[orgId]/practical-infos/[infoId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/proposed-activities/route.ts","./.next/types/app/api/mock/organization/[orgId]/proposed-activities/[activityId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/prospects/route.ts","./.next/types/app/api/mock/organization/[orgId]/prospects/[prospectId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/sales-people/route.ts","./.next/types/app/api/mock/organization/[orgId]/sales-people/[salesPersonId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/status/route.ts","./.next/types/app/api/mock/organization/[orgId]/suppliers/route.ts","./.next/types/app/api/mock/organization/[orgId]/suppliers/[providerId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/third-parties/route.ts","./.next/types/app/api/mock/organization/[orgId]/third-parties/[thirdPartyId]/route.ts","./.next/types/app/api/mock/organization/[orgId]/third-parties/[thirdPartyId]/status/route.ts","./.next/types/app/api/mock/organization/[orgId]/third-parties/create/route.ts","./.next/types/app/api/mock/organization/all/route.ts","./.next/types/app/api/mock/organization/domain/[domainId]/route.ts","./.next/types/app/api/mock/organization/user-orgs/route.ts","./.next/types/app/api/mock/user-preferences/[userId]/route.ts","./.next/types/app/api/proxy/[...slug]/route.ts","./node_modules/.pnpm/@types+bcrypt@5.0.2/node_modules/@types/bcrypt/index.d.ts","./node_modules/.pnpm/@types+negotiator@0.6.4/node_modules/@types/negotiator/index.d.ts","./node_modules/.pnpm/@types+google.maps@3.58.1/node_modules/@types/google.maps/index.d.ts","./node_modules/.pnpm/@types+react-places-autocomplete@7.2.14/node_modules/@types/react-places-autocomplete/index.d.ts","../../../../../../node_modules/@types/cors/index.d.ts"],"fileIdsList":[[97,139,333,1107],[97,139,333,1066],[97,139,333,1109],[97,139,333,1111],[97,139,333,1134],[97,139,333,1165],[97,139,333,1240],[97,139,333,1253],[97,139,333,1254],[97,139,333,1248],[97,139,333,1255],[97,139,333,1260],[97,139,333,1265],[97,139,333,1270],[97,139,333,1271],[97,139,333,1272],[97,139,333,1533],[97,139,333,1135],[97,139,333,1547],[97,139,333,1548],[97,139,333,1537],[97,139,333,1553],[97,139,333,1558],[97,139,333,1560],[97,139,333,1564],[97,139,333,1565],[97,139,333,1562],[97,139,333,1566],[97,139,333,1534],[97,139,333,1571],[97,139,333,1572],[97,139,333,1628],[97,139,333,1633],[97,139,333,1635],[97,139,333,1637],[97,139,333,1638],[97,139,333,1640],[97,139,333,1645],[97,139,333,1646],[97,139,333,1649],[97,139,333,1650],[97,139,333,1651],[97,139,333,1652],[97,139,333,1653],[97,139,333,1657],[97,139,333,1658],[97,139,333,1659],[97,139,333,1664],[97,139,333,1667],[97,139,333,1668],[97,139,333,1673],[97,139,333,1675],[97,139,333,1678],[97,139,333,1679],[97,139,333,1682],[97,139,333,1684],[97,139,333,1688],[97,139,333,1689],[97,139,333,1690],[97,139,333,1692],[97,139,333,1695],[97,139,333,1699],[97,139,333,1700],[97,139,466,550],[97,139,466,549],[97,139,466,548],[97,139,466,553],[97,139,466,552],[97,139,466,551],[97,139,466,556],[97,139,466,555],[97,139,466,554],[97,139,466,559],[97,139,466,561],[97,139,466,560],[97,139,466,562],[97,139,466,563],[97,139,466,567],[97,139,466,566],[97,139,466,565],[97,139,466,568],[97,139,466,564],[97,139,466,569],[97,139,466,571],[97,139,466,572],[97,139,466,570],[97,139,466,573],[97,139,466,576],[97,139,466,575],[97,139,466,577],[97,139,466,579],[97,139,466,578],[97,139,466,580],[97,139,466,581],[97,139,466,582],[97,139,466,583],[97,139,466,584],[97,139,466,585],[97,139,466,591],[97,139,466,592],[97,139,466,590],[97,139,466,594],[97,139,466,595],[97,139,466,593],[97,139,466,597],[97,139,466,596],[97,139,466,589],[97,139,466,599],[97,139,466,598],[97,139,466,600],[97,139,466,602],[97,139,466,603],[97,139,466,601],[97,139,466,588],[97,139,466,605],[97,139,466,604],[97,139,466,607],[97,139,466,606],[97,139,466,608],[97,139,466,609],[97,139,466,610],[97,139,466,612],[97,139,466,611],[97,139,466,614],[97,139,466,613],[97,139,466,616],[97,139,466,615],[97,139,466,618],[97,139,466,617],[97,139,466,587],[97,139,466,620],[97,139,466,619],[97,139,466,621],[97,139,466,623],[97,139,466,622],[97,139,466,625],[97,139,466,626],[97,139,466,627],[97,139,466,624],[97,139,466,628],[97,139,466,629],[97,139,466,586],[97,139,466,630],[97,139,466,631],[97,139,466,632],[97,139,333,1065],[97,139,420,421,422,423],[97,139,1106],[83,97,139,453,534,729],[97,139,1108],[97,139,1110],[83,97,139,733,1099],[83,97,139,530,535,544,674,729,733,1112,1114,1143,1147,1148,1155,1156,1157,1163],[97,139,470,1164],[83,97,139,453,535,544,729,733,1112,1115,1155,1157,1166,1237,1238],[97,139,470,1239],[83,97,139,453,530,535,544,729,1112,1155,1251],[97,139,470,1252],[97,139,453,530,544,1112,1251],[83,97,139,453,530,535,544,674,711,729,733,1112,1143,1155,1156,1157,1242,1243,1246],[97,139,470,1247],[97,139,1099],[97,139,470,1259],[83,97,139,530,535,544,674,729,733,1112,1114,1143,1155,1156,1157,1256,1257,1258],[97,139,470,1264],[83,97,139,530,535,544,674,729,733,1112,1114,1143,1155,1156,1157,1261,1262,1263],[97,139,470,1269],[83,97,139,530,535,544,674,729,733,1112,1114,1143,1155,1156,1157,1266,1267,1268],[83,97,139,1099,1159],[83,97,139,1099],[83,97,139,535,544,729,1099,1112,1115,1155,1157,1166,1236,1237,1531],[97,139,453,470,521,545,709,1532],[83,97,139,453,530,534,729,1112],[83,97,139,453,530,535,544,729,1099,1112,1115,1546],[97,139,453,530,535,729,1099,1112,1546],[83,97,139,453,530,535,544,674,711,729,733,1112,1143,1155,1156,1157,1246,1535,1536],[83,97,139,530,535,544,674,729,733,1112,1114,1143,1155,1156,1157,1549,1550,1551],[97,139,470,1552],[83,97,139,530,535,544,674,711,729,733,1112,1114,1143,1155,1156,1157,1246,1554,1555,1556],[97,139,470,1557],[83,97,139,530,535,544,674,711,729,733,1112,1114,1143,1147,1148,1155,1156,1157,1163,1246],[97,139,470,1559],[97,139,470,1563],[97,139,470,1561],[83,97,139,1112,1115],[97,139,470,1570],[83,97,139,530,535,544,674,711,729,733,1112,1114,1143,1155,1156,1157,1246,1567,1568,1569],[97,139,729,1099,1105],[97,139,470,1627],[83,97,139,530,534,535,544,1099,1112,1115,1622,1624,1625,1626],[97,139,470,1632],[83,97,139,530,535,544,674,729,733,1112,1114,1143,1155,1156,1157,1629,1630,1631],[97,139,470,1634],[83,97,139,530,535,544,674,711,729,733,1112,1114,1143,1155,1156,1157,1246,1256,1257,1258],[97,139,470,1636],[83,97,139,530,535,544,674,711,729,733,1112,1114,1143,1155,1156,1157,1246,1261,1262,1263],[97,139,470,1639],[83,97,139,530,535,544,674,711,729,733,1112,1114,1143,1155,1156,1157,1246,1266,1267,1268],[97,139,470,1644],[83,97,139,530,535,544,674,711,729,733,1112,1114,1143,1155,1156,1157,1246,1641,1642,1643],[97,139,453,530,534,535,1112,1157,1622],[83,97,139,453,530,535,674,711,729,733,1112,1155,1156,1157,1246,1647,1648],[83,97,139,444,534,726,729,733,1099],[83,97,139,444,530,729,733,1099,1101,1656],[83,97,139,733,1099,1101,1103],[97,139,633,1064,1112,1122,1129,1132],[83,97,139,444,453,530,677,715,726,729,733,1063,1099,1101,1103,1104,1127,1159,1250,1539,1661,1663],[83,97,139,535,674,729,1155,1156,1157,1246,1665],[97,139,535,674,729,1124,1146,1241],[97,139,470,544,1666],[97,139,535,729,733,1060,1099,1124,1241],[83,97,139,528,530,535,544,674,729,733,1114,1155,1156,1157,1246,1669,1670,1671],[97,139,535,674,729,733,1060,1124,1145,1146,1241],[97,139,470,540,544,1672],[83,97,139,530,535,544,674,729,733,1114,1143,1155,1156,1157,1549,1550,1551],[97,139,470,1674],[83,97,139,535,674,729,1155,1156,1157,1246,1676],[97,139,535,674,729,1146,1530],[97,139,470,544,1677],[97,139,535,674,1124,1146],[83,97,139,535,674,729,1155,1156,1157,1246,1680],[97,139,470,544,1681],[83,97,139,528,535,729,1099,1157,1236,1530],[97,139,470,540,544,1683],[97,139,535,674,677,729,733,1060,1124,1145,1146,1241],[97,139,442,535,677,729,733,1060,1099,1241],[83,97,139,530,535,544,674,729,733,1143,1155,1156,1157,1246,1685,1686],[97,139,470,544,1687],[97,139,453],[97,139,470,540,1691],[83,97,139,528,530,540,677,729,733,1063,1099,1103,1117,1145,1157],[97,139,470,544,1694],[83,97,139,535,674,729,1155,1156,1157,1246,1693],[97,139,528,674,729,733,1060,1124,1145,1146,1241],[97,139,470,540,1698],[97,139,528,729,733,1060,1099,1124,1241],[83,97,139,528,530,540,674,729,733,1155,1156,1157,1246,1696,1697],[97,139,513,521,528,540,544,709],[97,139,466,535,547],[97,139,466,528,547,558],[97,139,466,528,547],[97,139,466],[97,139,466,516,528,547,709],[97,139,466,535,547,574],[97,139,466,536,547],[97,139,466,547],[97,139,466,547,574],[97,139,466,546,547],[83,97,139,470,677,714,715,716,725,726,727],[97,139,520,545,729,1054],[83,97,139,442,444,677,729,733,1061,1064],[97,139,470],[83,97,139,535,729,733,1060,1099,1124],[83,97,139,535,705,1096,1098,1101,1104,1161,1162],[97,139,535,674,729,733,1060,1124,1145,1146],[83,97,139,442,444,677,729,1063],[83,97,139,442,444,733,1099],[83,97,139,705,729,733,1096,1098,1100,1101,1104,1105],[83,97,139,444,453,530,534,705,729,733,1096,1098,1100,1101,1104,1105],[83,97,139,453,528,530,540,705,729,733,1096,1098,1100,1101,1104,1105],[83,97,139,528,530,535,544,677,686,705,729,733,1096,1098,1101,1104,1127,1161,1162,1245,1250,1530,1539,1543],[97,139,453,729,1112,1131],[83,97,139,442,710,729,733,1099,1124,1241,1705],[97,139,674,677,710,711,729,733,1060,1101,1246],[83,97,139,530,677,710,729,733,1103,1114,1162,1245,1530,1543],[97,139,442,674,710,729,733,1124,1145,1146,1241,1705],[97,139,535,1099,1117,1124],[83,97,139,677,1099],[83,97,139,729,1099,1117,1124,1530],[97,139,1099,1236],[83,97,139,677,1099,1115],[83,97,139,677,733,1053,1245,1530,1542,1543],[83,97,139,453,677,729,1127],[83,97,139,471,677,729,733,1577,1618],[97,139,677,729,1115],[97,139,430,1578,1619],[97,139,715,729,733,1060],[97,139,444,453,729,733,1053],[83,97,139,729,733,1099,1117],[83,97,139,530,535,544,705,729,733,1096,1098,1104,1114,1115,1241,1620,1621],[97,139,1096,1099,1101,1104,1162,1539,1540],[97,139,729,733,1096,1099,1101,1104,1162],[83,97,139,442,535,677,729,733,1060,1099,1241],[83,97,139,530,535,544,705,729,1096,1098,1161,1530,1541,1544,1545],[97,139,677,729,733,1096,1099,1101,1104,1245,1530,1543],[83,97,139,442,453,535,677,729,733,1099,1101,1112,1114,1117],[83,97,139,442,725,729,733,1112,1114,1120],[83,97,139,535,677,729,733,1060,1099,1530],[83,97,139,535,677,705,729,733,1096,1098,1101,1104,1161,1162,1245,1530,1543],[97,139,535,674,729,733,1060,1145,1146,1530],[83,97,139,530,535,544,729,733,1114,1115,1623],[83,97,139,535,705,1096,1098,1101,1104,1127,1161,1162],[83,97,139,535,729,733,1060,1099,1124,1241],[83,97,139,535,705,729,1096,1098,1101,1104,1127,1161,1162,1250],[83,97,139,535,544,1096,1101,1104,1115,1117,1145],[83,97,139,530,535,705,1096,1098,1101,1104,1161],[83,97,139,530,677,682,705,729,733,1099,1101,1104,1577,1620],[97,139,1099,1101,1104,1162,1540],[97,139,729,733,1096,1099,1101,1104,1250],[97,139,535,677,729,733,1099,1101,1104,1127,1245,1530,1543],[83,97,139,530,534,535,544,686,705,729,1096,1098,1161,1530,1573,1574,1575,1621],[83,97,139,442,725,729,733,1112,1114,1115,1118],[97,139,444,677,729],[97,139,535,674,729,733,1060,1145,1146],[83,97,139,535,729,733,1060,1099],[83,97,139,535,705,1096,1098,1101,1104,1127,1161],[83,97,139,535,677,729,733,1060,1099,1124,1241],[83,97,139,535,705,1096,1098,1101,1104,1126,1127,1161],[83,97,139,534],[83,97,139,677,729,733,1114,1117,1131],[83,97,139,635,637,674,677,707,729,733,1099,1150,1151,1152,1153,1154,1155],[83,97,139,442,444,453,530,534,677,725,729,733,1063,1112,1119,1121],[83,97,139,715,729],[83,97,139,444,453,534,729,733,1061,1112,1125,1128],[83,97,139,677,729,1655],[83,97,139,677,733,1142],[83,97,139,677,732],[83,97,139,677,1123],[83,97,139,677,730,732],[83,97,139,677,729,733,1542],[83,97,139,677],[83,97,139,677,729,1144],[83,97,139,677,729,1114,1130],[83,97,139,674,677],[97,139,674,677,729,733,1060],[83,97,139,674,677,733,1053,1063,1131,1241,1245],[97,139,674,707,733,1053,1127],[83,97,139,674,677,707,729,733,1060,1101],[83,97,139,674,1149],[83,97,139,677,729,1113],[83,97,139,677,729,1059],[97,139,677,729,1159],[83,97,139,677,729,733,1096,1099,1104,1160],[83,97,139,677,730,1096,1102,1103],[83,97,139,677,729],[83,97,139,442,530,677,729,733,1101,1103,1114,1124,1249],[83,97,139,677,1102],[83,97,139,677,707,1099,1115],[83,97,139,677,729,1131,1241],[83,97,139,677,1244],[83,97,139,677,1713],[83,97,139,677,729,1662],[83,97,139,677,1116],[83,97,139,677,729,1126],[83,97,139,677,1062],[97,139,677],[83,97,139,677,1660],[97,139,530,715],[83,97,139,677,1538],[83,97,139,677,1158],[83,97,139,677,724],[97,139,444,726,729,733,1060,1124],[83,97,139,453,530,535,544,1112],[83,97,139,453,530,534,535,544,635],[83,97,139,528,530,534,540,546,690],[83,97,139],[97,139,144,528,534,535,536,537],[97,139,528],[97,139,528,529,530],[97,139,528,529,538],[97,139,529,531,539],[97,139,152,161,528,535,536,546],[97,139,466,516,709],[97,139,679,680,681],[97,139,530,678,679],[97,139,678],[97,139,683,684,685],[97,139,536,683],[97,139,536,538,683],[97,139,536],[97,139,541,542,543],[97,139,530,535,541],[97,139,535,538,541],[97,139,535],[97,139,687,688,689],[97,139,530,546,687],[97,139,546,687],[97,139,546],[97,139,530],[97,139,638,674,675,676],[97,139],[97,139,705],[97,139,466,523],[97,139,470,471],[97,139,1097],[97,139,705,1096],[83,97,139,717,718,1654],[83,97,139,1136,1141],[83,97,139,718],[83,97,139,717,718],[83,97,139,1136,1137,1138,1139,1140],[83,97,139,717,718,719,723,1056],[83,97,139,1137],[83,97,139,717,718,1058],[83,97,139,734],[97,139,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052],[83,97,139,717,718,719,722,723,1056,1057],[83,97,139,717,718,719,722,723,1056],[83,97,139,717,718,720,721],[83,97,139,717,718,1057],[83,97,139,265],[83,97,139,717,718,719,722,723],[97,139,1577],[83,97,139,1577,1586],[83,97,139,1583,1588],[83,97,139,1577],[97,139,1577,1583],[97,139,1577,1582,1583,1585],[83,97,139,1582],[83,97,139,1577,1582,1583,1585,1586,1588,1589],[97,139,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595],[97,139,1577,1582,1583,1584],[97,139,1577,1585],[97,139,1577,1582],[97,139,1577,1583,1585],[83,97,139,673],[97,139,654],[97,139,639,662],[97,139,662],[97,139,662,673],[97,139,648,662,673],[97,139,653,662,673],[97,139,643,662],[97,139,651,662,673],[97,139,649],[97,139,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672],[97,139,652],[97,139,639,640,641,642,643,644,645,646,647,649,650,652,654,655,656,657,658,659,660,661],[97,139,188],[97,139,1169],[97,139,1187],[97,139,1576],[97,136,139],[97,138,139],[139],[97,139,144,173],[97,139,140,145,151,152,159,170,181],[97,139,140,141,151,159],[92,93,94,97,139],[97,139,142,182],[97,139,143,144,152,160],[97,139,144,170,178],[97,139,145,147,151,159],[97,138,139,146],[97,139,147,148],[97,139,151],[97,139,149,151],[97,138,139,151],[97,139,151,152,153,170,181],[97,139,151,152,153,166,170,173],[97,134,139,186],[97,139,147,151,154,159,170,181],[97,139,151,152,154,155,159,170,178,181],[97,139,154,156,170,178,181],[95,96,97,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187],[97,139,151,157],[97,139,158,181,186],[97,139,147,151,159,170],[97,139,160],[97,139,161],[97,138,139,162],[97,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187],[97,139,164],[97,139,165],[97,139,151,166,167],[97,139,166,168,182,184],[97,139,151,170,171,173],[97,139,172,173],[97,139,170,171],[97,139,173],[97,139,174],[97,136,139,170],[97,139,151,176,177],[97,139,176,177],[97,139,144,159,170,178],[97,139,179],[97,139,159,180],[97,139,154,165,181],[97,139,144,182],[97,139,170,183],[97,139,158,184],[97,139,185],[97,139,144,151,153,162,170,181,184,186],[97,139,170,187],[83,97,139,191,193],[83,87,97,139,189,190,191,192,414,462],[83,97,139,1865],[83,87,97,139,190,193,414,462],[83,87,97,139,189,193,414,462],[81,82,97,139],[97,139,557],[97,139,675,731],[97,139,675],[83,97,139,1113],[97,139,1276],[97,139,1274,1276],[97,139,1274],[97,139,1276,1340,1341],[97,139,1276,1343],[97,139,1276,1344],[97,139,1361],[97,139,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529],[97,139,1276,1437],[97,139,1276,1341,1461],[97,139,1274,1458,1459],[97,139,1276,1458],[97,139,1460],[97,139,1273,1274,1275],[97,139,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505],[97,139,474],[97,139,474,484],[97,139,521,709],[97,139,154,188,521,709],[97,139,511,519],[97,139,466,470,519,521,709],[97,139,473,507,514,516,517,518,709],[97,139,512,519,520],[97,139,466,470,515,521,709],[97,139,188,521,709],[97,139,522],[97,139,466,516,521,709],[97,139,512,514,521,709],[97,139,514,519,521,709],[97,139,509,510,513],[97,139,506,507,508,514,521,709],[83,97,139,514,521,532,533,709],[83,97,139,514,521,709],[89,97,139],[97,139,418],[97,139,425],[97,139,197,211,212,213,215,377],[97,139,197,201,203,204,205,206,207,366,377,379],[97,139,377],[97,139,212,231,346,355,373],[97,139,197],[97,139,194],[97,139,397],[97,139,377,379,396],[97,139,302,343,346,468],[97,139,309,325,355,372],[97,139,262],[97,139,360],[97,139,359,360,361],[97,139,359],[91,97,139,154,194,197,201,204,208,209,210,212,216,224,225,296,356,357,377,414],[97,139,197,214,251,299,377,393,394,468],[97,139,214,468],[97,139,225,299,300,377,468],[97,139,468],[97,139,197,214,215,468],[97,139,208,358,365],[97,139,165,265,373],[97,139,265,373],[83,97,139,265,317],[97,139,242,260,373,451],[97,139,352,445,446,447,448,450],[97,139,265],[97,139,351],[97,139,351,352],[97,139,205,239,240,297],[97,139,241,242,297],[97,139,449],[97,139,242,297],[83,97,139,198,439],[83,97,139,181],[83,97,139,214,249],[83,97,139,214],[97,139,247,252],[83,97,139,248,417],[97,139,712],[83,87,97,139,154,188,189,190,193,414,460,461],[97,139,154],[97,139,154,201,231,267,286,297,362,363,377,378,468],[97,139,224,364],[97,139,414],[97,139,196],[83,97,139,165,302,314,334,336,372,373],[97,139,165,302,314,333,334,335,372,373],[97,139,327,328,329,330,331,332],[97,139,329],[97,139,333],[83,97,139,248,265,417],[83,97,139,265,415,417],[83,97,139,265,417],[97,139,286,369],[97,139,369],[97,139,154,378,417],[97,139,321],[97,138,139,320],[97,139,226,230,237,268,297,309,310,311,313,345,372,375,378],[97,139,312],[97,139,226,242,297,311],[97,139,309,372],[97,139,309,317,318,319,321,322,323,324,325,326,337,338,339,340,341,342,372,373,468],[97,139,307],[97,139,154,165,226,230,231,236,238,242,272,286,295,296,345,368,377,378,379,414,468],[97,139,372],[97,138,139,212,230,296,311,325,368,370,371,378],[97,139,309],[97,138,139,236,268,289,303,304,305,306,307,308,373],[97,139,154,289,290,303,378,379],[97,139,212,286,296,297,311,368,372,378],[97,139,154,377,379],[97,139,154,170,375,378,379],[97,139,154,165,181,194,201,214,226,230,231,237,238,243,267,268,269,271,272,275,276,278,281,282,283,284,285,297,367,368,373,375,377,378,379],[97,139,154,170],[97,139,197,198,199,209,375,376,414,417,468],[97,139,154,170,181,228,395,397,398,399,400,468],[97,139,165,181,194,228,231,268,269,276,286,294,297,368,373,375,380,381,387,393,410,411],[97,139,208,209,224,296,357,368,377],[97,139,154,181,198,201,268,375,377,385],[97,139,301],[97,139,154,407,408,409],[97,139,375,377],[97,139,230,268,367,417],[97,139,154,165,276,286,375,381,387,389,393,410,413],[97,139,154,208,224,393,403],[97,139,197,243,367,377,405],[97,139,154,214,243,377,388,389,401,402,404,406],[91,97,139,226,229,230,414,417],[97,139,154,165,181,201,208,216,224,231,237,238,268,269,271,272,284,286,294,297,367,368,373,374,375,380,381,382,384,386,417],[97,139,154,170,208,375,387,407,412],[97,139,219,220,221,222,223],[97,139,275,277],[97,139,279],[97,139,277],[97,139,279,280],[97,139,154,201,236,378],[97,139,154,165,196,198,226,230,231,237,238,264,266,375,379,414,417],[97,139,154,165,181,200,205,268,374,378],[97,139,303],[97,139,304],[97,139,305],[97,139,373],[97,139,227,234],[97,139,154,201,227,237],[97,139,233,234],[97,139,235],[97,139,227,228],[97,139,227,244],[97,139,227],[97,139,274,275,374],[97,139,273],[97,139,228,373,374],[97,139,270,374],[97,139,228,373],[97,139,345],[97,139,229,232,237,268,297,302,311,314,316,344,375,378],[97,139,242,253,256,257,258,259,260,315],[97,139,354],[97,139,212,229,230,290,297,309,321,325,347,348,349,350,352,353,356,367,372,377],[97,139,242],[97,139,264],[97,139,154,229,237,245,261,263,267,375,414,417],[97,139,242,253,254,255,256,257,258,259,260,415],[97,139,228],[97,139,290,291,294,368],[97,139,154,275,377],[97,139,289,309],[97,139,288],[97,139,284,290],[97,139,287,289,377],[97,139,154,200,290,291,292,293,377,378],[83,97,139,239,241,297],[97,139,298],[83,97,139,198],[83,97,139,373],[83,91,97,139,230,238,414,417],[97,139,198,439,440],[83,97,139,252],[83,97,139,165,181,196,246,248,250,251,417],[97,139,214,373,378],[97,139,373,383],[83,97,139,152,154,165,196,252,299,414,415,416],[83,97,139,189,190,193,414,462],[83,84,85,86,87,97,139],[97,139,144],[97,139,390,391,392],[97,139,390],[83,87,97,139,154,156,165,188,189,190,191,193,194,196,272,333,379,413,417,462],[97,139,427],[97,139,429],[97,139,431],[97,139,713],[97,139,433],[97,139,435,436,437],[97,139,441],[88,90,97,139,419,424,426,428,430,432,434,438,442,444,453,454,456,466,467,468,469],[97,139,443],[97,139,452],[97,139,248],[97,139,455],[97,138,139,290,291,292,294,324,373,457,458,459,462,463,464,465],[97,139,144,154,155,156,181,182,188,506],[83,97,139,1530],[83,97,139,1081],[97,139,1081,1082,1083,1086,1087,1088,1089,1090,1091,1092,1095],[97,139,1081],[97,139,1084,1085],[83,97,139,1079,1081],[97,139,1076,1077,1079],[97,139,1072,1075,1077,1079],[97,139,1076,1079],[83,97,139,1067,1068,1069,1072,1073,1074,1076,1077,1078,1079],[97,139,1069,1072,1073,1074,1075,1076,1077,1078,1079,1080],[97,139,1076],[97,139,1070,1076,1077],[97,139,1070,1071],[97,139,1075,1077,1078],[97,139,1075],[97,139,1067,1072,1077,1078],[97,139,1093,1094],[83,97,139,1577,1596],[83,97,139,1577,1596,1599],[83,97,139,1576,1577,1596,1599],[83,97,139,1576,1577,1596],[97,139,1579,1580,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617],[83,97,139,1172,1173,1174,1190,1193],[83,97,139,1172,1173,1174,1183,1191,1211],[83,97,139,1171,1174],[83,97,139,1174],[83,97,139,1172,1173,1174],[83,97,139,1172,1173,1174,1209,1212,1215],[83,97,139,1172,1173,1174,1183,1190,1193],[83,97,139,1172,1173,1174,1183,1191,1203],[83,97,139,1172,1173,1174,1183,1193,1203],[83,97,139,1172,1173,1174,1183,1203],[83,97,139,1172,1173,1174,1178,1184,1190,1195,1213,1214],[97,139,1174],[83,97,139,1174,1218,1219,1220],[83,97,139,1174,1191],[83,97,139,1174,1217,1218,1219],[83,97,139,1174,1217],[83,97,139,1174,1183],[83,97,139,1174,1175,1176],[83,97,139,1174,1176,1178],[97,139,1167,1168,1172,1173,1174,1175,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1204,1205,1206,1207,1208,1209,1210,1212,1213,1214,1215,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235],[83,97,139,1174,1232],[83,97,139,1174,1186],[83,97,139,1174,1193,1197,1198],[83,97,139,1174,1184,1186],[83,97,139,1174,1189],[83,97,139,1174,1212],[83,97,139,1174,1189,1216],[83,97,139,1177,1217],[83,97,139,1171,1172,1173],[97,139,170,188],[97,106,110,139,181],[97,106,139,170,181],[97,101,139],[97,103,106,139,178,181],[97,139,159,178],[97,101,139,188],[97,103,106,139,159,181],[97,98,99,102,105,139,151,170,181],[97,106,113,139],[97,98,104,139],[97,106,127,128,139],[97,102,106,139,173,181,188],[97,127,139,188],[97,100,101,139,188],[97,106,139],[97,100,101,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,139],[97,106,121,139],[97,106,113,114,139],[97,104,106,114,115,139],[97,105,139],[97,98,101,106,139],[97,106,110,114,115,139],[97,110,139],[97,104,106,109,139,181],[97,98,103,106,113,139],[97,139,170],[97,101,106,127,139,186,188],[97,139,1170],[97,139,1188],[97,139,704],[97,139,692,693,704],[97,139,694,695],[97,139,692,693,694,696,697,702],[97,139,693,694],[97,139,703],[97,139,694],[97,139,692,693,694,697,698,699,700,701],[97,139,535,707],[97,139,516,521,709],[97,139,154,188]],"fileInfos":[{"version":"69684132aeb9b5642cbcd9e22dff7818ff0ee1aa831728af0ecf97d3364d5546","affectsGlobalScope":true,"impliedFormat":1},{"version":"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","impliedFormat":1},{"version":"3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","impliedFormat":1},{"version":"e44bb8bbac7f10ecc786703fe0a6a4b952189f908707980ba8f3c8975a760962","impliedFormat":1},{"version":"5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","impliedFormat":1},{"version":"68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","impliedFormat":1},{"version":"5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","impliedFormat":1},{"version":"feecb1be483ed332fad555aff858affd90a48ab19ba7272ee084704eb7167569","impliedFormat":1},{"version":"ee7bad0c15b58988daa84371e0b89d313b762ab83cb5b31b8a2d1162e8eb41c2","impliedFormat":1},{"version":"27bdc30a0e32783366a5abeda841bc22757c1797de8681bbe81fbc735eeb1c10","impliedFormat":1},{"version":"8fd575e12870e9944c7e1d62e1f5a73fcf23dd8d3a321f2a2c74c20d022283fe","impliedFormat":1},{"version":"8bf8b5e44e3c9c36f98e1007e8b7018c0f38d8adc07aecef42f5200114547c70","impliedFormat":1},{"version":"092c2bfe125ce69dbb1223c85d68d4d2397d7d8411867b5cc03cec902c233763","affectsGlobalScope":true,"impliedFormat":1},{"version":"07f073f19d67f74d732b1adea08e1dc66b1b58d77cb5b43931dee3d798a2fd53","affectsGlobalScope":true,"impliedFormat":1},{"version":"c57796738e7f83dbc4b8e65132f11a377649c00dd3eee333f672b8f0a6bea671","affectsGlobalScope":true,"impliedFormat":1},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true,"impliedFormat":1},{"version":"515d0b7b9bea2e31ea4ec968e9edd2c39d3eebf4a2d5cbd04e88639819ae3b71","affectsGlobalScope":true,"impliedFormat":1},{"version":"0559b1f683ac7505ae451f9a96ce4c3c92bdc71411651ca6ddb0e88baaaad6a3","affectsGlobalScope":true,"impliedFormat":1},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true,"impliedFormat":1},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true,"impliedFormat":1},{"version":"936e80ad36a2ee83fc3caf008e7c4c5afe45b3cf3d5c24408f039c1d47bdc1df","affectsGlobalScope":true,"impliedFormat":1},{"version":"d15bea3d62cbbdb9797079416b8ac375ae99162a7fba5de2c6c505446486ac0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"68d18b664c9d32a7336a70235958b8997ebc1c3b8505f4f1ae2b7e7753b87618","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb3d66c8327153d8fa7dd03f9c58d351107fe824c79e9b56b462935176cdf12a","affectsGlobalScope":true,"impliedFormat":1},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true,"impliedFormat":1},{"version":"69ab18c3b76cd9b1be3d188eaf8bba06112ebbe2f47f6c322b5105a6fbc45a2e","affectsGlobalScope":true,"impliedFormat":1},{"version":"fef8cfad2e2dc5f5b3d97a6f4f2e92848eb1b88e897bb7318cef0e2820bceaab","affectsGlobalScope":true,"impliedFormat":1},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true,"impliedFormat":1},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true,"impliedFormat":1},{"version":"954296b30da6d508a104a3a0b5d96b76495c709785c1d11610908e63481ee667","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac9538681b19688c8eae65811b329d3744af679e0bdfa5d842d0e32524c73e1c","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a969edff4bd52585473d24995c5ef223f6652d6ef46193309b3921d65dd4376","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true,"impliedFormat":1},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true,"impliedFormat":1},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true,"impliedFormat":1},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true,"impliedFormat":1},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true,"impliedFormat":1},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true,"impliedFormat":1},{"version":"d6d7ae4d1f1f3772e2a3cde568ed08991a8ae34a080ff1151af28b7f798e22ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true,"impliedFormat":1},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true,"impliedFormat":1},{"version":"52ada8e0b6e0482b728070b7639ee42e83a9b1c22d205992756fe020fd9f4a47","affectsGlobalScope":true,"impliedFormat":1},{"version":"3bdefe1bfd4d6dee0e26f928f93ccc128f1b64d5d501ff4a8cf3c6371200e5e6","affectsGlobalScope":true,"impliedFormat":1},{"version":"59fb2c069260b4ba00b5643b907ef5d5341b167e7d1dbf58dfd895658bda2867","affectsGlobalScope":true,"impliedFormat":1},{"version":"639e512c0dfc3fad96a84caad71b8834d66329a1f28dc95e3946c9b58176c73a","affectsGlobalScope":true,"impliedFormat":1},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true,"impliedFormat":1},{"version":"af3dd424cf267428f30ccfc376f47a2c0114546b55c44d8c0f1d57d841e28d74","affectsGlobalScope":true,"impliedFormat":1},{"version":"995c005ab91a498455ea8dfb63aa9f83fa2ea793c3d8aa344be4a1678d06d399","affectsGlobalScope":true,"impliedFormat":1},{"version":"959d36cddf5e7d572a65045b876f2956c973a586da58e5d26cde519184fd9b8a","affectsGlobalScope":true,"impliedFormat":1},{"version":"965f36eae237dd74e6cca203a43e9ca801ce38824ead814728a2807b1910117d","affectsGlobalScope":true,"impliedFormat":1},{"version":"3925a6c820dcb1a06506c90b1577db1fdbf7705d65b62b99dce4be75c637e26b","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a3d63ef2b853447ec4f749d3f368ce642264246e02911fcb1590d8c161b8005","affectsGlobalScope":true,"impliedFormat":1},{"version":"b5ce7a470bc3628408429040c4e3a53a27755022a32fd05e2cb694e7015386c7","affectsGlobalScope":true,"impliedFormat":1},{"version":"8444af78980e3b20b49324f4a16ba35024fef3ee069a0eb67616ea6ca821c47a","affectsGlobalScope":true,"impliedFormat":1},{"version":"3287d9d085fbd618c3971944b65b4be57859f5415f495b33a6adc994edd2f004","affectsGlobalScope":true,"impliedFormat":1},{"version":"b4b67b1a91182421f5df999988c690f14d813b9850b40acd06ed44691f6727ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"df83c2a6c73228b625b0beb6669c7ee2a09c914637e2d35170723ad49c0f5cd4","affectsGlobalScope":true,"impliedFormat":1},{"version":"436aaf437562f276ec2ddbee2f2cdedac7664c1e4c1d2c36839ddd582eeb3d0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e3c06ea092138bf9fa5e874a1fdbc9d54805d074bee1de31b99a11e2fec239d","affectsGlobalScope":true,"impliedFormat":1},{"version":"87dc0f382502f5bbce5129bdc0aea21e19a3abbc19259e0b43ae038a9fc4e326","affectsGlobalScope":true,"impliedFormat":1},{"version":"b1cb28af0c891c8c96b2d6b7be76bd394fddcfdb4709a20ba05a7c1605eea0f9","affectsGlobalScope":true,"impliedFormat":1},{"version":"2fef54945a13095fdb9b84f705f2b5994597640c46afeb2ce78352fab4cb3279","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac77cb3e8c6d3565793eb90a8373ee8033146315a3dbead3bde8db5eaf5e5ec6","affectsGlobalScope":true,"impliedFormat":1},{"version":"56e4ed5aab5f5920980066a9409bfaf53e6d21d3f8d020c17e4de584d29600ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ece9f17b3866cc077099c73f4983bddbcb1dc7ddb943227f1ec070f529dedd1","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a6282c8827e4b9a95f4bf4f5c205673ada31b982f50572d27103df8ceb8013c","affectsGlobalScope":true,"impliedFormat":1},{"version":"1c9319a09485199c1f7b0498f2988d6d2249793ef67edda49d1e584746be9032","affectsGlobalScope":true,"impliedFormat":1},{"version":"e3a2a0cee0f03ffdde24d89660eba2685bfbdeae955a6c67e8c4c9fd28928eeb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811c71eee4aa0ac5f7adf713323a5c41b0cf6c4e17367a34fbce379e12bbf0a4","affectsGlobalScope":true,"impliedFormat":1},{"version":"51ad4c928303041605b4d7ae32e0c1ee387d43a24cd6f1ebf4a2699e1076d4fa","affectsGlobalScope":true,"impliedFormat":1},{"version":"60037901da1a425516449b9a20073aa03386cce92f7a1fd902d7602be3a7c2e9","affectsGlobalScope":true,"impliedFormat":1},{"version":"d4b1d2c51d058fc21ec2629fff7a76249dec2e36e12960ea056e3ef89174080f","affectsGlobalScope":true,"impliedFormat":1},{"version":"22adec94ef7047a6c9d1af3cb96be87a335908bf9ef386ae9fd50eeb37f44c47","affectsGlobalScope":true,"impliedFormat":1},{"version":"4245fee526a7d1754529d19227ecbf3be066ff79ebb6a380d78e41648f2f224d","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e7f8264d0fb4c5339605a15daadb037bf238c10b654bb3eee14208f860a32ea","affectsGlobalScope":true,"impliedFormat":1},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true,"impliedFormat":1},{"version":"36a2e4c9a67439aca5f91bb304611d5ae6e20d420503e96c230cf8fcdc948d94","affectsGlobalScope":true,"impliedFormat":1},{"version":"8a8eb4ebffd85e589a1cc7c178e291626c359543403d58c9cd22b81fab5b1fb9","impliedFormat":1},{"version":"9d37372c385ea35087857d10afe0ae636503035feee2f742c4031c3658b17d80","impliedFormat":1},{"version":"acd8fd5090ac73902278889c38336ff3f48af6ba03aa665eb34a75e7ba1dccc4","impliedFormat":1},{"version":"d6258883868fb2680d2ca96bc8b1352cab69874581493e6d52680c5ffecdb6cc","impliedFormat":1},{"version":"1b61d259de5350f8b1e5db06290d31eaebebc6baafd5f79d314b5af9256d7153","impliedFormat":1},{"version":"f258e3960f324a956fc76a3d3d9e964fff2244ff5859dcc6ce5951e5413ca826","impliedFormat":1},{"version":"643f7232d07bf75e15bd8f658f664d6183a0efaca5eb84b48201c7671a266979","impliedFormat":1},{"version":"0f6666b58e9276ac3a38fdc80993d19208442d6027ab885580d93aec76b4ef00","impliedFormat":1},{"version":"05fd364b8ef02fb1e174fbac8b825bdb1e5a36a016997c8e421f5fab0a6da0a0","impliedFormat":1},{"version":"631eff75b0e35d1b1b31081d55209abc43e16b49426546ab5a9b40bdd40b1f60","impliedFormat":1},{"version":"70521b6ab0dcba37539e5303104f29b721bfb2940b2776da4cc818c07e1fefc1","affectsGlobalScope":true,"impliedFormat":1},{"version":"ab41ef1f2cdafb8df48be20cd969d875602483859dc194e9c97c8a576892c052","affectsGlobalScope":true,"impliedFormat":1},{"version":"d153a11543fd884b596587ccd97aebbeed950b26933ee000f94009f1ab142848","affectsGlobalScope":true,"impliedFormat":1},{"version":"21d819c173c0cf7cc3ce57c3276e77fd9a8a01d35a06ad87158781515c9a438a","impliedFormat":1},{"version":"a79e62f1e20467e11a904399b8b18b18c0c6eea6b50c1168bf215356d5bebfaf","affectsGlobalScope":true,"impliedFormat":1},{"version":"6b80c6175da9de59bace50a72c2d68490d4ab5b07016ff5367bc7ba33cf2f219","affectsGlobalScope":true,"impliedFormat":1},{"version":"5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","impliedFormat":1},{"version":"24bd580b5743dc56402c440dc7f9a4f5d592ad7a419f25414d37a7bfe11e342b","impliedFormat":1},{"version":"25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","impliedFormat":1},{"version":"c464d66b20788266e5353b48dc4aa6bc0dc4a707276df1e7152ab0c9ae21fad8","impliedFormat":1},{"version":"78d0d27c130d35c60b5e5566c9f1e5be77caf39804636bc1a40133919a949f21","impliedFormat":1},{"version":"c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","impliedFormat":1},{"version":"1d6e127068ea8e104a912e42fc0a110e2aa5a66a356a917a163e8cf9a65e4a75","impliedFormat":1},{"version":"5ded6427296cdf3b9542de4471d2aa8d3983671d4cac0f4bf9c637208d1ced43","impliedFormat":1},{"version":"6bdc71028db658243775263e93a7db2fd2abfce3ca569c3cca5aee6ed5eb186d","impliedFormat":1},{"version":"cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","impliedFormat":1},{"version":"385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","impliedFormat":1},{"version":"9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","impliedFormat":1},{"version":"0b8a9268adaf4da35e7fa830c8981cfa22adbbe5b3f6f5ab91f6658899e657a7","impliedFormat":1},{"version":"11396ed8a44c02ab9798b7dca436009f866e8dae3c9c25e8c1fbc396880bf1bb","impliedFormat":1},{"version":"ba7bc87d01492633cb5a0e5da8a4a42a1c86270e7b3d2dea5d156828a84e4882","impliedFormat":1},{"version":"4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","impliedFormat":1},{"version":"c21dc52e277bcfc75fac0436ccb75c204f9e1b3fa5e12729670910639f27343e","impliedFormat":1},{"version":"13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","impliedFormat":1},{"version":"9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","impliedFormat":1},{"version":"4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","impliedFormat":1},{"version":"24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","impliedFormat":1},{"version":"ea0148f897b45a76544ae179784c95af1bd6721b8610af9ffa467a518a086a43","impliedFormat":1},{"version":"24c6a117721e606c9984335f71711877293a9651e44f59f3d21c1ea0856f9cc9","impliedFormat":1},{"version":"dd3273ead9fbde62a72949c97dbec2247ea08e0c6952e701a483d74ef92d6a17","impliedFormat":1},{"version":"405822be75ad3e4d162e07439bac80c6bcc6dbae1929e179cf467ec0b9ee4e2e","impliedFormat":1},{"version":"0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","impliedFormat":1},{"version":"4d2b0eb911816f66abe4970898f97a2cfc902bcd743cbfa5017fad79f7ef90d8","impliedFormat":1},{"version":"bd0532fd6556073727d28da0edfd1736417a3f9f394877b6d5ef6ad88fba1d1a","impliedFormat":1},{"version":"89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","impliedFormat":1},{"version":"e53a3c2a9f624d90f24bf4588aacd223e7bec1b9d0d479b68d2f4a9e6011147f","impliedFormat":1},{"version":"24b8685c62562f5d98615c5a0c1d05f297cf5065f15246edfe99e81ec4c0e011","impliedFormat":1},{"version":"93507c745e8f29090efb99399c3f77bec07db17acd75634249dc92f961573387","impliedFormat":1},{"version":"339dc5265ee5ed92e536a93a04c4ebbc2128f45eeec6ed29f379e0085283542c","impliedFormat":1},{"version":"4732aec92b20fb28c5fe9ad99521fb59974289ed1e45aecb282616202184064f","impliedFormat":1},{"version":"2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","impliedFormat":1},{"version":"c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","impliedFormat":1},{"version":"bf67d53d168abc1298888693338cb82854bdb2e69ef83f8a0092093c2d562107","impliedFormat":1},{"version":"08faa97886e71757779428dd4c69a545c32c85fd629d1116d42710b32c6378bc","affectsGlobalScope":true,"impliedFormat":1},{"version":"6b042aa5d277ad6963e2837179fd2f8fbb01968ac67115b0833c0244e93d1d50","impliedFormat":1},{"version":"7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","impliedFormat":1},{"version":"3d77c73be94570813f8cadd1f05ebc3dc5e2e4fdefe4d340ca20cd018724ee36","impliedFormat":1},{"version":"23cfd70b42094e54cc3c5dab996d81b97e2b6f38ccb24ead85454b8ddfe2fc4f","affectsGlobalScope":true,"impliedFormat":1},{"version":"f3e58c4c18a031cbb17abec7a4ad0bd5ae9fc70c1f4ba1e7fb921ad87c504aca","impliedFormat":1},{"version":"a3e8bafb2af8e850c644f4be7f5156cf7d23b7bfdc3b786bd4d10ed40329649c","impliedFormat":1},{"version":"35ec8b6760fd7138bbf5809b84551e31028fb2ba7b6dc91d95d098bf212ca8b4","affectsGlobalScope":true,"impliedFormat":1},{"version":"5524481e56c48ff486f42926778c0a3cce1cc85dc46683b92b1271865bcf015a","impliedFormat":1},{"version":"4b87f767c7bc841511113c876a6b8bf1fd0cb0b718c888ad84478b372ec486b1","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d04e3640dd9eb67f7f1e5bd3d0bf96c784666f7aefc8ac1537af6f2d38d4c29","impliedFormat":1},{"version":"3c884d9d9ec454bdf0d5a0b8465bf8297d2caa4d853851d92cc417ac6f30b969","impliedFormat":1},{"version":"5a369483ac4cfbdf0331c248deeb36140e6907db5e1daed241546b4a2055f82c","impliedFormat":1},{"version":"e8f5b5cc36615c17d330eaf8eebbc0d6bdd942c25991f96ef122f246f4ff722f","impliedFormat":1},{"version":"f0bd7e6d931657b59605c44112eaf8b980ba7f957a5051ed21cb93d978cf2f45","impliedFormat":1},{"version":"ee1ee365d88c4c6c0c0a5a5701d66ebc27ccd0bcfcfaa482c6e2e7fe7b98edf7","affectsGlobalScope":true,"impliedFormat":1},{"version":"0ada07543808f3b967624645a8e1ccd446f8b01ade47842acf1328aec899fed0","affectsGlobalScope":true,"impliedFormat":1},{"version":"b79ca740194c9e90bd6657046411c940d0c79dcc35392a15b02be5ba9ac55eb0","impliedFormat":1},{"version":"71adf5dbc59568663d252a46179e71e4d544c053978bfc526d11543a3f716f42","impliedFormat":1},{"version":"38bf8ff1b403c861e9052c9ea651cb4f38c1ecc084a34d79f8acc6d6477a7321","impliedFormat":1},{"version":"93bd413918fa921c8729cef45302b24d8b6c7855d72d5bf82d3972595ae8dcbf","impliedFormat":1},{"version":"4ff41188773cbf465807dd2f7059c7494cbee5115608efc297383832a1150c43","impliedFormat":1},{"version":"dccdf1677e531e33f8ac961a68bc537418c9a414797c1ea7e91307501cdc3f5e","impliedFormat":1},{"version":"e184c4b8918ef56c8c9e68bd79f3f3780e2d0d75bf2b8a41da1509a40c2deb46","affectsGlobalScope":true,"impliedFormat":1},{"version":"d206b4baf4ddcc15d9d69a9a2f4999a72a2c6adeaa8af20fa7a9960816287555","impliedFormat":1},{"version":"93f437e1398a4f06a984f441f7fa7a9f0535c04399619b5c22e0b87bdee182cb","impliedFormat":1},{"version":"afbe24ab0d74694372baa632ecb28bb375be53f3be53f9b07ecd7fc994907de5","impliedFormat":1},{"version":"70731d10d5311bd4cf710ef7f6539b62660f4b0bfdbb3f9fbe1d25fe6366a7fa","affectsGlobalScope":true,"impliedFormat":1},{"version":"6b19db3600a17af69d4f33d08cc7076a7d19fb65bb36e442cac58929ec7c9482","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e043a1bc8fbf2a255bccf9bf27e0f1caf916c3b0518ea34aa72357c0afd42ec","impliedFormat":1},{"version":"137c2894e8f3e9672d401cc0a305dc7b1db7c69511cf6d3970fb53302f9eae09","impliedFormat":1},{"version":"3bc2f1e2c95c04048212c569ed38e338873f6a8593930cf5a7ef24ffb38fc3b6","impliedFormat":1},{"version":"8145e07aad6da5f23f2fcd8c8e4c5c13fb26ee986a79d03b0829b8fce152d8b2","impliedFormat":1},{"version":"f9d9d753d430ed050dc1bf2667a1bab711ccbb1c1507183d794cc195a5b085cc","impliedFormat":1},{"version":"9eece5e586312581ccd106d4853e861aaaa1a39f8e3ea672b8c3847eedd12f6e","impliedFormat":1},{"version":"ba1f814c22fd970255ddd60d61fb7e00c28271c933ab5d5cc19cd3ca66b8f57c","impliedFormat":1},{"version":"37ba7b45141a45ce6e80e66f2a96c8a5ab1bcef0fc2d0f56bb58df96ec67e972","impliedFormat":1},{"version":"125d792ec6c0c0f657d758055c494301cc5fdb327d9d9d5960b3f129aff76093","impliedFormat":1},{"version":"295f068af94245ee9d780555351bef98adfd58f8baf0b9dadbc31a489b881f8b","affectsGlobalScope":true,"impliedFormat":1},{"version":"1851a3b4db78664f83901bb9cac9e45e03a37bb5933cc5bf37e10bb7e91ab4eb","impliedFormat":1},{"version":"09d479208911ac3ac6a7c2fe86217fc1abe6c4f04e2d52e4890e500699eeab32","affectsGlobalScope":true,"impliedFormat":1},{"version":"27d8987fd22d92efe6560cf0ce11767bf089903ffe26047727debfd1f3bf438b","affectsGlobalScope":true,"impliedFormat":1},{"version":"578d8bb6dcb2a1c03c4c3f8eb71abc9677e1a5c788b7f24848e3138ce17f3400","impliedFormat":1},{"version":"4f029899f9bae07e225c43aef893590541b2b43267383bf5e32e3a884d219ed5","impliedFormat":1},{"version":"ae56f65caf3be91108707bd8dfbccc2a57a91feb5daabf7165a06a945545ed26","impliedFormat":1},{"version":"a136d5de521da20f31631a0a96bf712370779d1c05b7015d7019a9b2a0446ca9","impliedFormat":1},{"version":"5b566927cad2ed2139655d55d690ffa87df378b956e7fe1c96024c4d9f75c4cf","affectsGlobalScope":true,"impliedFormat":1},{"version":"bce947017cb7a2deebcc4f5ba04cead891ce6ad1602a4438ae45ed9aa1f39104","affectsGlobalScope":true,"impliedFormat":1},{"version":"d3dffd70e6375b872f0b4e152de4ae682d762c61a24881ecc5eb9f04c5caf76f","impliedFormat":1},{"version":"e2c72c065a36bc9ab2a00ac6a6f51e71501619a72c0609defd304d46610487a4","impliedFormat":1},{"version":"d91a7d8b5655c42986f1bdfe2105c4408f472831c8f20cf11a8c3345b6b56c8c","impliedFormat":1},{"version":"616075a6ac578cf5a013ee12964188b4412823796ce0b202c6f1d2e4ca8480d7","affectsGlobalScope":true,"impliedFormat":1},{"version":"e8a979b8af001c9fc2e774e7809d233c8ca955a28756f52ee5dee88ccb0611d2","impliedFormat":1},{"version":"cac793cc47c29e26e4ac3601dcb00b4435ebed26203485790e44f2ad8b6ad847","impliedFormat":1},{"version":"f23dfbb07f71e879e5a23cdd5a1f7f1585c6a8aae8c250b6eba13600956c72dd","impliedFormat":1},{"version":"b2ba94df355e65e967875bf67ea1bbf6d5a0e8dc141a3d36d5b6d7c3c0f234b6","impliedFormat":1},{"version":"115b2ad73fa7d175cd71a5873d984c21593b2a022f1a2036cc39d9f53629e5dc","impliedFormat":1},{"version":"1be330b3a0b00590633f04c3b35db7fa618c9ee079258e2b24c137eb4ffcd728","impliedFormat":1},{"version":"45a9b3079cd70a2668f441b79b4f4356b4e777788c19f29b6f42012a749cfea6","impliedFormat":1},{"version":"413df52d4ea14472c2fa5bee62f7a40abd1eb49be0b9722ee01ee4e52e63beb2","impliedFormat":1},{"version":"db6d2d9daad8a6d83f281af12ce4355a20b9a3e71b82b9f57cddcca0a8964a96","impliedFormat":1},{"version":"7bd32a723a12f78ed756747468f2030bdd55774c68f628de07598dba5b912b14","impliedFormat":1},{"version":"24f8562308dd8ba6013120557fa7b44950b619610b2c6cb8784c79f11e3c4f90","impliedFormat":1},{"version":"bf331b8593ad461052b37d83f37269b56e446f0aa8dd77440f96802470b5601d","impliedFormat":1},{"version":"a86f82d646a739041d6702101afa82dcb935c416dd93cbca7fd754fd0282ce1f","impliedFormat":1},{"version":"57d6ac03382e30e9213641ff4f18cf9402bb246b77c13c8e848c0b1ca2b7ef92","impliedFormat":1},{"version":"ce75b1aebb33d510ff28af960a9221410a3eaf7f18fc5f21f9404075fba77256","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"57e47d02e88abef89d214cdf52b478104dc17997015746e288cbb580beaef266","impliedFormat":1},{"version":"b1177acd771acfcc2648a03fc03ad3b3a1b1d2bdfa6769db0f669293b596ca13","impliedFormat":1},{"version":"40bb8ea2d272d67db97614c7f934caae27f7b941d441dde72a04c195db02ef60","impliedFormat":1},{"version":"9e2739b32f741859263fdba0244c194ca8e96da49b430377930b8f721d77c000","impliedFormat":1},{"version":"99d62b942e98f691f508fc752637fec27661970aa3b0f5eb5a1e2775b995c273","impliedFormat":1},{"version":"a9af0e608929aaf9ce96bd7a7b99c9360636c31d73670e4af09a09950df97841","impliedFormat":1},{"version":"48d37b90a04e753a925228f50304d02c4f95d57bf682f8bb688621c3cd9d32ec","impliedFormat":1},{"version":"361e2b13c6765d7f85bb7600b48fde782b90c7c41105b7dab1f6e7871071ba20","impliedFormat":1},{"version":"c86fe861cf1b4c46a0fb7d74dffe596cf679a2e5e8b1456881313170f092e3fa","impliedFormat":1},{"version":"b6db56e4903e9c32e533b78ac85522de734b3d3a8541bf24d256058d464bf04b","impliedFormat":1},{"version":"24daa0366f837d22c94a5c0bad5bf1fd0f6b29e1fae92dc47c3072c3fdb2fbd5","impliedFormat":1},{"version":"b68c4ed987ef5693d3dccd85222d60769463aca404f2ffca1c4c42781dce388e","impliedFormat":1},{"version":"889c00f3d32091841268f0b994beba4dceaa5df7573be12c2c829d7c5fbc232c","impliedFormat":1},{"version":"65f43099ded6073336e697512d9b80f2d4fec3182b7b2316abf712e84104db00","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","impliedFormat":1},{"version":"12b8dfed70961bea1861e5d39e433580e71323abb5d33da6605182ec569db584","impliedFormat":1},{"version":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","impliedFormat":1},{"version":"7e560f533aaf88cf9d3b427dcf6c112dd3f2ee26d610e2587583b6c354c753db","impliedFormat":1},{"version":"71e0082342008e4dfb43202df85ea0986ef8e003c921a1e49999d0234a3019da","impliedFormat":1},{"version":"27ab780875bcbb65e09da7496f2ca36288b0c541abaa75c311450a077d54ec15","impliedFormat":1},{"version":"b620391fe8060cf9bedc176a4d01366e6574d7a71e0ac0ab344a4e76576fcbb8","impliedFormat":1},{"version":"1fa0d69a4d653c42ced6d77987d0a64c61a09c796c36b48097d2b1afccaea7d8","impliedFormat":1},{"version":"3e7efde639c6a6c3edb9847b3f61e308bf7a69685b92f665048c45132f51c218","impliedFormat":1},{"version":"df45ca1176e6ac211eae7ddf51336dc075c5314bc5c253651bae639defd5eec5","impliedFormat":1},{"version":"ef61792acbfa8c27c9bd113f02731e66229f7d3a169e3c1993b508134f1a58e0","impliedFormat":1},{"version":"9c82171d836c47486074e4ca8e059735bf97b205e70b196535b5efd40cbe1bc5","impliedFormat":1},{"version":"94fe3281392e1015b22f39535878610b4fa6f1388dc8d78746be3bc4e4bb8950","impliedFormat":1},{"version":"106c6025f1d99fd468fd8bf6e5bda724e11e5905a4076c5d29790b6c3745e50c","impliedFormat":1},{"version":"dffe876972134f7ab6b7b9d0906317adb189716b922f55877190836d75d637ff","impliedFormat":1},{"version":"fac1803c07fbc9574815fdb83afddd9d0d4a2ce13f56d4e4cbb4525f8c09ee0a","impliedFormat":1},{"version":"9463ba6c320226e6566ff383ff35b3a7affbbe7266d0684728c0eda6d38c446f","impliedFormat":1},{"version":"5eef43ef86c9c3945780211c2ce25cb9b66143a102713e56a2bea85163c5c3c7","impliedFormat":1},{"version":"a2a1cdf7273ad6641938a487ecf2fdd38f60abce41907817e44ab39e482e8739","impliedFormat":1},{"version":"c5426dbfc1cf90532f66965a7aa8c1136a78d4d0f96d8180ecbfc11d7722f1a5","impliedFormat":1},{"version":"5c2e5ca7d53236bbf483a81ae283e2695e291fe69490cd139b33fa9e71838a69","impliedFormat":1},{"version":"4548fac59ea69a3ffd6c0285a4c53e0d736d936937b74297e3b5c4dfcd902419","impliedFormat":1},{"version":"4da246ee3b860278888dd51913e6407a09ca43530db886e7bec2a592c9b9bde6","impliedFormat":1},{"version":"ed3519e98e2f4e5615ce15dce2ff7ca754acbb0d809747ccab729386d45b16e7","impliedFormat":1},{"version":"a23185bc5ef590c287c28a91baf280367b50ae4ea40327366ad01f6f4a8edbc5","impliedFormat":1},{"version":"65a15fc47900787c0bd18b603afb98d33ede930bed1798fc984d5ebb78b26cf9","impliedFormat":1},{"version":"9d202701f6e0744adb6314d03d2eb8fc994798fc83d91b691b75b07626a69801","impliedFormat":1},{"version":"de9d2df7663e64e3a91bf495f315a7577e23ba088f2949d5ce9ec96f44fba37d","impliedFormat":1},{"version":"c7af78a2ea7cb1cd009cfb5bdb48cd0b03dad3b54f6da7aab615c2e9e9d570c5","impliedFormat":1},{"version":"1ee45496b5f8bdee6f7abc233355898e5bf9bd51255db65f5ff7ede617ca0027","impliedFormat":1},{"version":"0c7c947ff881c4274c0800deaa0086971e0bfe51f89a33bd3048eaa3792d4876","affectsGlobalScope":true,"impliedFormat":1},{"version":"db01d18853469bcb5601b9fc9826931cc84cc1a1944b33cad76fd6f1e3d8c544","affectsGlobalScope":true,"impliedFormat":1},{"version":"dba114fb6a32b355a9cfc26ca2276834d72fe0e94cd2c3494005547025015369","impliedFormat":1},{"version":"a8f8e6ab2fa07b45251f403548b78eaf2022f3c2254df3dc186cb2671fe4996d","affectsGlobalScope":true,"impliedFormat":1},{"version":"fa6c12a7c0f6b84d512f200690bfc74819e99efae69e4c95c4cd30f6884c526e","impliedFormat":1},{"version":"f1c32f9ce9c497da4dc215c3bc84b722ea02497d35f9134db3bb40a8d918b92b","impliedFormat":1},{"version":"b73c319af2cc3ef8f6421308a250f328836531ea3761823b4cabbd133047aefa","affectsGlobalScope":true,"impliedFormat":1},{"version":"e433b0337b8106909e7953015e8fa3f2d30797cea27141d1c5b135365bb975a6","impliedFormat":1},{"version":"15b36126e0089bfef173ab61329e8286ce74af5e809d8a72edcafd0cc049057f","impliedFormat":1},{"version":"ddff7fc6edbdc5163a09e22bf8df7bef75f75369ebd7ecea95ba55c4386e2441","impliedFormat":1},{"version":"13283350547389802aa35d9f2188effaeac805499169a06ef5cd77ce2a0bd63f","impliedFormat":1},{"version":"2e4f37ffe8862b14d8e24ae8763daaa8340c0df0b859d9a9733def0eee7562d9","impliedFormat":1},{"version":"d07cbc787a997d83f7bde3877fec5fb5b12ce8c1b7047eb792996ed9726b4dde","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"8bba776476c48b0e319d243f353190f24096057acede3c2f620fee17ff885dba","impliedFormat":1},{"version":"b83cb14474fa60c5f3ec660146b97d122f0735627f80d82dd03e8caa39b4388c","impliedFormat":1},{"version":"42c169fb8c2d42f4f668c624a9a11e719d5d07dacbebb63cbcf7ef365b0a75b3","impliedFormat":1},{"version":"2b2f9dac86b659e6d5cd623bcc21519910a48114fc0cef52d8f86962c48d44e2","impliedFormat":1},{"version":"4d8ab61ff8865a0b1a038cf8693d91d20e89dc98f29f192247cfff03efc97367","impliedFormat":1},{"version":"72ca9ca89ca15055cbb6ce767b6bf56615be5f1ea6a87ab432ee0603c8d19010","impliedFormat":1},{"version":"7274fbffbd7c9589d8d0ffba68157237afd5cecff1e99881ea3399127e60572f","impliedFormat":1},{"version":"b73cbf0a72c8800cf8f96a9acfe94f3ad32ca71342a8908b8ae484d61113f647","impliedFormat":1},{"version":"bae6dd176832f6423966647382c0d7ba9e63f8c167522f09a982f086cd4e8b23","impliedFormat":1},{"version":"208c9af9429dd3c76f5927b971263174aaa4bc7621ddec63f163640cbd3c473c","impliedFormat":1},{"version":"20865ac316b8893c1a0cc383ccfc1801443fbcc2a7255be166cf90d03fac88c9","impliedFormat":1},{"version":"c9958eb32126a3843deedda8c22fb97024aa5d6dd588b90af2d7f2bfac540f23","impliedFormat":1},{"version":"d682336018141807fb602709e2d95a192828fcb8d5ba06dda3833a8ea98f69e3","impliedFormat":1},{"version":"461d0ad8ae5f2ff981778af912ba71b37a8426a33301daa00f21c6ccb27f8156","impliedFormat":1},{"version":"e927c2c13c4eaf0a7f17e6022eee8519eb29ef42c4c13a31e81a611ab8c95577","impliedFormat":1},{"version":"fcafff163ca5e66d3b87126e756e1b6dfa8c526aa9cd2a2b0a9da837d81bbd72","impliedFormat":1},{"version":"70246ad95ad8a22bdfe806cb5d383a26c0c6e58e7207ab9c431f1cb175aca657","impliedFormat":1},{"version":"f00f3aa5d64ff46e600648b55a79dcd1333458f7a10da2ed594d9f0a44b76d0b","impliedFormat":1},{"version":"772d8d5eb158b6c92412c03228bd9902ccb1457d7a705b8129814a5d1a6308fc","impliedFormat":1},{"version":"45490817629431853543adcb91c0673c25af52a456479588b6486daba34f68bb","impliedFormat":1},{"version":"802e797bcab5663b2c9f63f51bdf67eff7c41bc64c0fd65e6da3e7941359e2f7","impliedFormat":1},{"version":"b01bd582a6e41457bc56e6f0f9de4cb17f33f5f3843a7cf8210ac9c18472fb0f","impliedFormat":1},{"version":"8b4327413e5af38cd8cb97c59f48c3c866015d5d642f28518e3a891c469f240e","impliedFormat":1},{"version":"cecad464ddaf764e5490018d248a8df1733f3d63435fbddac72941c1f4005b66","impliedFormat":1},{"version":"6124e973eab8c52cabf3c07575204efc1784aca6b0a30c79eb85fe240a857efa","impliedFormat":1},{"version":"0d891735a21edc75df51f3eb995e18149e119d1ce22fd40db2b260c5960b914e","impliedFormat":1},{"version":"3b414b99a73171e1c4b7b7714e26b87d6c5cb03d200352da5342ab4088a54c85","impliedFormat":1},{"version":"51b1709e7ad186919a0e30237a8607100143a86d28771b3d3f046359aca1e65c","impliedFormat":1},{"version":"0a437ae178f999b46b6153d79095b60c42c996bc0458c04955f1c996dc68b971","impliedFormat":1},{"version":"74b2a5e5197bd0f2e0077a1ea7c07455bbea67b87b0869d9786d55104006784f","impliedFormat":1},{"version":"4a7baeb6325920044f66c0f8e5e6f1f52e06e6d87588d837bdf44feb6f35c664","impliedFormat":1},{"version":"6dcf60530c25194a9ee0962230e874ff29d34c59605d8e069a49928759a17e0a","impliedFormat":1},{"version":"56013416784a6b754f3855f8f2bf6ce132320679b8a435389aca0361bce4df6b","impliedFormat":1},{"version":"43e96a3d5d1411ab40ba2f61d6a3192e58177bcf3b133a80ad2a16591611726d","impliedFormat":1},{"version":"86c47959cbeaa8499ffc35a2b894bc9abdfdcfeff5a2e4c703e3822f760f3752","impliedFormat":1},{"version":"002eae065e6960458bda3cf695e578b0d1e2785523476f8a9170b103c709cd4f","impliedFormat":1},{"version":"c51641ab4bfa31b7a50a0ca37edff67f56fab3149881024345b13f2b48b7d2de","impliedFormat":1},{"version":"a57b1802794433adec9ff3fed12aa79d671faed86c49b09e02e1ac41b4f1d33a","impliedFormat":1},{"version":"52abbd5035a97ebfb4240ec8ade2741229a7c26450c84eb73490dc5ea048b911","impliedFormat":1},{"version":"1042064ece5bb47d6aba91648fbe0635c17c600ebdf567588b4ca715602f0a9d","impliedFormat":1},{"version":"4360ad4de54de2d5c642c4375d5eab0e7fe94ebe8adca907e6c186bbef75a54d","impliedFormat":1},{"version":"c338dff3233675f87a3869417aaea8b8bf590505106d38907dc1d0144f6402ef","impliedFormat":1},{"version":"7bb79aa2fead87d9d56294ef71e056487e848d7b550c9a367523ee5416c44cfa","impliedFormat":1},{"version":"9c9cae45dc94c2192c7d25f80649414fa13c425d0399a2c7cb2b979e4e50af42","impliedFormat":1},{"version":"6c87b6bcf4336b29c837ea49afbdde69cc15a91cbbfd9f20c0af8694927dec08","impliedFormat":1},{"version":"27ff4196654e6373c9af16b6165120e2dd2169f9ad6abb5c935af5abd8c7938c","impliedFormat":1},{"version":"635c57d330fecc62f8318d5ed1e27c029407b380f617a66960a77ca64ee1637e","impliedFormat":1},{"version":"643672ce383e1c58ea665a92c5481f8441edbd3e91db36e535abccbc9035adeb","impliedFormat":1},{"version":"6dd9bcf10678b889842d467706836a0ab42e6c58711e33918ed127073807ee65","impliedFormat":1},{"version":"8fa022ea514ce0ea78ac9b7092a9f97f08ead20c839c779891019e110fce8307","impliedFormat":1},{"version":"c93235337600b786fd7d0ff9c71a00f37ca65c4d63e5d695fc75153be2690f09","impliedFormat":1},{"version":"1b25ae342b256606d0b36d2bfe7619497d4e5b2887de3b02facd4ba70f94c20a","impliedFormat":1},{"version":"a8e493c0355aabdd495e141bf1c4ec93454a0698c8675df466724adc2fcfe630","impliedFormat":1},{"version":"99702c9058170ae70ea72acbf01be3111784f06152dbf478f52c9afe423528bd","impliedFormat":1},{"version":"cf32f58a7ad3498c69c909121772971ffdee176b882f39c78532d0e0ab41a30d","impliedFormat":1},{"version":"e2bbc579a2fda9473e06b2a68d693e56928900f73ccfc03dabea789fe144e8a5","impliedFormat":1},{"version":"ce0df82a9ae6f914ba08409d4d883983cc08e6d59eb2df02d8e4d68309e7848b","impliedFormat":1},{"version":"796273b2edc72e78a04e86d7c58ae94d370ab93a0ddf40b1aa85a37a1c29ecd7","impliedFormat":1},{"version":"5df15a69187d737d6d8d066e189ae4f97e41f4d53712a46b2710ff9f8563ec9f","impliedFormat":1},{"version":"e17cd049a1448de4944800399daa4a64c5db8657cc9be7ef46be66e2a2cd0e7c","impliedFormat":1},{"version":"d05fb434f4ba073aed74b6c62eff1723c835de2a963dbb091e000a2decb5a691","impliedFormat":1},{"version":"bff8c8bffbf5f302a30ccb1c0557dae477892d50a80eecfe393bd89bac7fb41d","impliedFormat":1},{"version":"43ba4f2fa8c698f5c304d21a3ef596741e8e85a810b7c1f9b692653791d8d97a","impliedFormat":1},{"version":"4d4927cbee21750904af7acf940c5e3c491b4d5ebc676530211e389dd375607a","impliedFormat":1},{"version":"72105519d0390262cf0abe84cf41c926ade0ff475d35eb21307b2f94de985778","impliedFormat":1},{"version":"703989a003790524b4e34a1758941d05c121d5d352bccca55a5cfb0c76bca592","impliedFormat":1},{"version":"a58abf1f5c8feb335475097abeddd32fd71c4dc2065a3d28cf15cacabad9654a","impliedFormat":1},{"version":"ccf6dd45b708fb74ba9ed0f2478d4eb9195c9dfef0ff83a6092fa3cf2ff53b4f","impliedFormat":1},{"version":"2d7db1d73456e8c5075387d4240c29a2a900847f9c1bff106a2e490da8fbd457","impliedFormat":1},{"version":"2b15c805f48e4e970f8ec0b1915f22d13ca6212375e8987663e2ef5f0205e832","impliedFormat":1},{"version":"d1c5135069e162942235cb0edce1a5e28a89c5c16a289265ec8f602be8a3ed7a","impliedFormat":1},{"version":"f0f05149debcf31b3a717ce8dd16e0323a789905cb9e27239167b604153b8885","impliedFormat":1},{"version":"35069c2c417bd7443ae7c7cafd1de02f665bf015479fec998985ffbbf500628c","impliedFormat":1},{"version":"fbfd6a0a1e4d4a7ee64e22df0678ee8a8ddd5af17317c8ce57d985c9d127c964","impliedFormat":1},{"version":"8d5ebd74f6e70959f53012b74cbb9f422310b7c31502ea2b6469e5d810aa824c","impliedFormat":1},{"version":"9e21f8e2c0cfea713a4a372f284b60089c0841eb90bf3610539d89dbcd12d65a","impliedFormat":1},{"version":"045b752f44bf9bbdcaffd882424ab0e15cb8d11fa94e1448942e338c8ef19fba","impliedFormat":1},{"version":"2894c56cad581928bb37607810af011764a2f511f575d28c9f4af0f2ef02d1ab","impliedFormat":1},{"version":"0a72186f94215d020cb386f7dca81d7495ab6c17066eb07d0f44a5bf33c1b21a","impliedFormat":1},{"version":"a072c5f254d5cbb6522c0d4eeeb7cc4a6ce7f2f8ad84e2593d903bfe3aa44176","impliedFormat":1},{"version":"71f1bcde28ab11d0344ed9d75e0415ec9651a152e6142b775df80bc304779b6d","impliedFormat":1},{"version":"87122b31fe473758a5724388c93826caab566f62be2196aefc2ae8b04b814b52","impliedFormat":1},{"version":"063ab26d3488a665d2c3bc963b18ce220dad7351190629179165bc8c499c6cd9","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"2652448ac55a2010a1f71dd141f828b682298d39728f9871e1cdf8696ef443fd","impliedFormat":1},{"version":"d24c3bc597230d67aa7fbc752e43b263e8de01eb0ae5fa7d45472b4d059d710d","impliedFormat":1},{"version":"120599fd965257b1f4d0ff794bc696162832d9d8467224f4665f713a3119078b","impliedFormat":1},{"version":"5433f33b0a20300cca35d2f229a7fc20b0e8477c44be2affeb21cb464af60c76","impliedFormat":1},{"version":"db036c56f79186da50af66511d37d9fe77fa6793381927292d17f81f787bb195","impliedFormat":1},{"version":"bd4131091b773973ca5d2326c60b789ab1f5e02d8843b3587effe6e1ea7c9d86","impliedFormat":1},{"version":"794998dc1c5a19ce77a75086fe829fb9c92f2fd07b5631c7d5e0d04fd9bc540c","impliedFormat":1},{"version":"409678793827cdf5814e027b1f9e52a0445acb1c322282311c1c4e0855a0918e","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"0427df5c06fafc5fe126d14b9becd24160a288deff40e838bfbd92a35f8d0d00","impliedFormat":1},{"version":"3545dc8a9bdbd33db34462af7eed83f703083e4fee9135dadbba7edfe1e7db3c","impliedFormat":1},{"version":"7b5153a9b237898879441e5ddb576ded76ef3ab4c5baee4bb749ca5c72fc395d","impliedFormat":1},{"version":"49c346823ba6d4b12278c12c977fb3a31c06b9ca719015978cb145eb86da1c61","impliedFormat":1},{"version":"bfac6e50eaa7e73bb66b7e052c38fdc8ccfc8dbde2777648642af33cf349f7f1","impliedFormat":1},{"version":"92f7c1a4da7fbfd67a2228d1687d5c2e1faa0ba865a94d3550a3941d7527a45d","impliedFormat":1},{"version":"f53b120213a9289d9a26f5af90c4c686dd71d91487a0aa5451a38366c70dc64b","impliedFormat":1},{"version":"83fe880c090afe485a5c02262c0b7cdd76a299a50c48d9bde02be8e908fb4ae6","impliedFormat":1},{"version":"d5c2934185201f0768fb80d220f0e617cd05aa4c0c791ffcd508646c474b3c44","impliedFormat":1},{"version":"57d67b72e06059adc5e9454de26bbfe567d412b962a501d263c75c2db430f40e","impliedFormat":1},{"version":"6511e4503cf74c469c60aafd6589e4d14d5eb0a25f9bf043dcbecdf65f261972","impliedFormat":1},{"version":"d150315650911c40fc4a1b821d2336d4c6e425effe92f14337866c04ff8e29bd","impliedFormat":1},{"version":"75efc43fb206f3825eb219c96b1e59fdabf2f2f042f424fa5f96335b99897540","impliedFormat":1},{"version":"a67b87d0281c97dfc1197ef28dfe397fc2c865ccd41f7e32b53f647184cc7307","impliedFormat":1},{"version":"771ffb773f1ddd562492a6b9aaca648192ac3f056f0e1d997678ff97dbb6bf9b","impliedFormat":1},{"version":"232f70c0cf2b432f3a6e56a8dc3417103eb162292a9fd376d51a3a9ea5fbbf6f","impliedFormat":1},{"version":"dbb6898ab9bfe3d73dae5f1f16aab2603c9eec4ad85b7b052c71f03f24409355","impliedFormat":1},{"version":"cfb5f0ab72180f4e0b9ed1534847a63d5394b9a8ee685ae149d25fd53f1aec66","impliedFormat":1},{"version":"8a0e762ceb20c7e72504feef83d709468a70af4abccb304f32d6b9bac1129b2c","impliedFormat":1},{"version":"f613e4e752659ebd241be4d991c05200248b50e753fcecf50a249d30f4367794","impliedFormat":1},{"version":"9252d498a77517aab5d8d4b5eb9d71e4b225bbc7123df9713e08181de63180f6","impliedFormat":1},{"version":"7e9548ffe28feff73f278cfe15fffdeca4920a881d36088dc5d9e9a0ad56b41c","impliedFormat":1},{"version":"35e6379c3f7cb27b111ad4c1aa69538fd8e788ab737b8ff7596a1b40e96f4f90","impliedFormat":1},{"version":"1fffe726740f9787f15b532e1dc870af3cd964dbe29e191e76121aa3dd8693f2","impliedFormat":1},{"version":"7cd657e359eac7829db5f02c856993e8945ffccc71999cdfb4ab3bf801a1bbc6","impliedFormat":1},{"version":"1a82deef4c1d39f6882f28d275cad4c01f907b9b39be9cbc472fcf2cf051e05b","impliedFormat":1},{"version":"4b20fcf10a5413680e39f5666464859fc56b1003e7dfe2405ced82371ebd49b6","impliedFormat":1},{"version":"f0f3f57e29b40e9cb0c4b155a96de2f61e51700d2c335dd547ef3c85e668c6a8","impliedFormat":1},{"version":"f7d628893c9fa52ba3ab01bcb5e79191636c4331ee5667ecc6373cbccff8ae12","impliedFormat":1},{"version":"e749bbd37dadf82c9833278780527c717226e1e2c9bc7b2576c8ec1c40ec5647","impliedFormat":1},{"version":"6a76daf108400ca1333e325772f24f40ebdde2120ef68f8c87d7a1adf0257541","impliedFormat":1},{"version":"313698394e61f0343ebf11b64e5cde7e948110eaba98e8dbd7bdd67ee8df2639","impliedFormat":1},{"version":"6459054aabb306821a043e02b89d54da508e3a6966601a41e71c166e4ea1474f","impliedFormat":1},{"version":"bb37588926aba35c9283fe8d46ebf4e79ffe976343105f5c6d45f282793352b2","impliedFormat":1},{"version":"05c97cddbaf99978f83d96de2d8af86aded9332592f08ce4a284d72d0952c391","impliedFormat":1},{"version":"72179f9dd22a86deaad4cc3490eb0fe69ee084d503b686985965654013f1391b","impliedFormat":1},{"version":"2e6114a7dd6feeef85b2c80120fdbfb59a5529c0dcc5bfa8447b6996c97a69f5","impliedFormat":1},{"version":"7b6ff760c8a240b40dab6e4419b989f06a5b782f4710d2967e67c695ef3e93c4","impliedFormat":1},{"version":"c8f004e6036aa1c764ad4ec543cf89a5c1893a9535c80ef3f2b653e370de45e6","impliedFormat":1},{"version":"eee752e7da8ae32e261995b7a07e1989aadb02026c5f528fbdfab494ae215a3a","impliedFormat":1},{"version":"68c4c6eac8f2e053886e954f7d6aa80d61792378cc81e916897e8d5f632dc2a8","impliedFormat":1},{"version":"9203212cbe20f9013c030a70d400d98f7dff7bd37cb1b23d1de75d00bc8979d9","impliedFormat":1},{"version":"f974e4a06953682a2c15d5bd5114c0284d5abf8bc0fe4da25cb9159427b70072","impliedFormat":1},{"version":"50256e9c31318487f3752b7ac12ff365c8949953e04568009c8705db802776fb","impliedFormat":1},{"version":"7d73b24e7bf31dfb8a931ca6c4245f6bb0814dfae17e4b60c9e194a631fe5f7b","impliedFormat":1},{"version":"4eac446ac161245bfc6daa95f2cc64d2da4f7844e36a7a5641abfd4771ef0923","impliedFormat":1},{"version":"8de9fe97fa9e00ec00666fa77ab6e91b35d25af8ca75dabcb01e14ad3299b150","impliedFormat":1},{"version":"076527b1c2fd207de3101ba10e0c2b7d155aa8369cc7fe3eed723811e428223d","impliedFormat":1},{"version":"6c800b281b9e89e69165fd11536195488de3ff53004e55905e6c0059a2d8591e","impliedFormat":1},{"version":"7d4254b4c6c67a29d5e7f65e67d72540480ac2cfb041ca484847f5ae70480b62","impliedFormat":1},{"version":"397f568f996f8ffcf12d9156342552b0da42f6571eadba6bce61c99e1651977d","impliedFormat":1},{"version":"ff0c0d446569f8756be0882b520fd94429468de9f922ab6bf9eed4da55eb0187","impliedFormat":1},{"version":"d663134457d8d669ae0df34eabd57028bddc04fc444c4bc04bc5215afc91e1f4","impliedFormat":1},{"version":"a52674bc98da7979607e0f44d4c015c59c1b1d264c83fc50ec79ff2cfea06723","impliedFormat":1},{"version":"89b3d1b267c4380fbb8e5cadccbb284843b90066f16a2f6e8a5b3a030bb7dcfb","impliedFormat":1},{"version":"f58226e78464f9c85be6cf47c665a8e33b32121ab4cdb2670b66a06f1114a55c","impliedFormat":1},{"version":"9b06ce81ad598c9c6b011cb66182fa66575ad6bd1f8f655830a6a0223a197ab7","impliedFormat":1},{"version":"e108f38a04a607f9386d68a4c6f3fdae1b712960f11f6482c6f1769bab056c2e","impliedFormat":1},{"version":"a3128a84a9568762a2996df79717d92154d18dd894681fc0ab3a098fa7f8ee3b","affectsGlobalScope":true,"impliedFormat":1},{"version":"347791f3792f436950396dd6171d6450234358001ae7c94ca209f1406566ccbf","impliedFormat":1},{"version":"dd80b1e600d00f5c6a6ba23f455b84a7db121219e68f89f10552c54ba46e4dc9","impliedFormat":1},{"version":"2896c2e673a5d3bd9b4246811f79486a073cbb03950c3d252fba10003c57411a","impliedFormat":1},{"version":"616775f16134fa9d01fc677ad3f76e68c051a056c22ab552c64cc281a9686790","impliedFormat":1},{"version":"65c24a8baa2cca1de069a0ba9fba82a173690f52d7e2d0f1f7542d59d5eb4db0","impliedFormat":1},{"version":"f9fe6af238339a0e5f7563acee3178f51db37f32a2e7c09f85273098cee7ec49","impliedFormat":1},{"version":"51bf55bb6eb80f11b3aa59fb0a9571565a7ea304a19381f6da5630f4b2e206c4","impliedFormat":1},{"version":"77e71242e71ebf8528c5802993697878f0533db8f2299b4d36aa015bae08a79c","impliedFormat":1},{"version":"98a787be42bd92f8c2a37d7df5f13e5992da0d967fab794adbb7ee18370f9849","impliedFormat":1},{"version":"02f8ef78d46c5b27f108dbb56709daa0aff625c20247abb0e6bb67cd73439f9f","impliedFormat":1},{"version":"b7fff2d004c5879cae335db8f954eb1d61242d9f2d28515e67902032723caeab","impliedFormat":1},{"version":"5f3dc10ae646f375776b4e028d2bed039a93eebbba105694d8b910feebbe8b9c","impliedFormat":1},{"version":"bb0cd7862b72f5eba39909c9889d566e198fcaddf7207c16737d0c2246112678","impliedFormat":1},{"version":"4545c1a1ceca170d5d83452dd7c4994644c35cf676a671412601689d9a62da35","impliedFormat":1},{"version":"320f4091e33548b554d2214ce5fc31c96631b513dffa806e2e3a60766c8c49d9","impliedFormat":1},{"version":"a2d648d333cf67b9aeac5d81a1a379d563a8ffa91ddd61c6179f68de724260ff","impliedFormat":1},{"version":"d90d5f524de38889d1e1dbc2aeef00060d779f8688c02766ddb9ca195e4a713d","impliedFormat":1},{"version":"a3f41ed1b4f2fc3049394b945a68ae4fdefd49fa1739c32f149d32c0545d67f5","impliedFormat":1},{"version":"bad68fd0401eb90fe7da408565c8aee9c7a7021c2577aec92fa1382e8876071a","impliedFormat":1},{"version":"47699512e6d8bebf7be488182427189f999affe3addc1c87c882d36b7f2d0b0e","impliedFormat":1},{"version":"fec01479923e169fb52bd4f668dbeef1d7a7ea6e6d491e15617b46f2cacfa37d","impliedFormat":1},{"version":"8a8fb3097ba52f0ae6530ec6ab34e43e316506eb1d9aa29420a4b1e92a81442d","impliedFormat":1},{"version":"44e09c831fefb6fe59b8e65ad8f68a7ecc0e708d152cfcbe7ba6d6080c31c61e","impliedFormat":1},{"version":"1c0a98de1323051010ce5b958ad47bc1c007f7921973123c999300e2b7b0ecc0","impliedFormat":1},{"version":"b10bc147143031b250dc36815fd835543f67278245bf2d0a46dca765f215124e","impliedFormat":1},{"version":"87affad8e2243635d3a191fa72ef896842748d812e973b7510a55c6200b3c2a4","impliedFormat":1},{"version":"ad036a85efcd9e5b4f7dd5c1a7362c8478f9a3b6c3554654ca24a29aa850a9c5","impliedFormat":1},{"version":"fedebeae32c5cdd1a85b4e0504a01996e4a8adf3dfa72876920d3dd6e42978e7","impliedFormat":1},{"version":"1e4c6ac595b6d734c056ac285b9ee50d27a2c7afe7d15bd14ed16210e71593b0","impliedFormat":1},{"version":"cdf21eee8007e339b1b9945abf4a7b44930b1d695cc528459e68a3adc39a622e","impliedFormat":1},{"version":"330896c1a2b9693edd617be24fbf9e5895d6e18c7955d6c08f028f272b37314d","impliedFormat":1},{"version":"1d9c0a9a6df4e8f29dc84c25c5aa0bb1da5456ebede7a03e03df08bb8b27bae6","impliedFormat":1},{"version":"84380af21da938a567c65ef95aefb5354f676368ee1a1cbb4cae81604a4c7d17","impliedFormat":1},{"version":"1af3e1f2a5d1332e136f8b0b95c0e6c0a02aaabd5092b36b64f3042a03debf28","impliedFormat":1},{"version":"30d8da250766efa99490fc02801047c2c6d72dd0da1bba6581c7e80d1d8842a4","impliedFormat":1},{"version":"03566202f5553bd2d9de22dfab0c61aa163cabb64f0223c08431fb3fc8f70280","impliedFormat":1},{"version":"9a01f12466488eccd8d9eafc8fecb9926c175a4bf4a8f73a07c3bcf8b3363282","impliedFormat":1},{"version":"b80f624162276f24a4ec78b8e86fbee80ca255938e12f8b58e7a8f1a6937120b","impliedFormat":1},{"version":"1de80059b8078ea5749941c9f863aa970b4735bdbb003be4925c853a8b6b4450","impliedFormat":1},{"version":"1d079c37fa53e3c21ed3fa214a27507bda9991f2a41458705b19ed8c2b61173d","impliedFormat":1},{"version":"5bf5c7a44e779790d1eb54c234b668b15e34affa95e78eada73e5757f61ed76a","impliedFormat":1},{"version":"5835a6e0d7cd2738e56b671af0e561e7c1b4fb77751383672f4b009f4e161d70","impliedFormat":1},{"version":"5c634644d45a1b6bc7b05e71e05e52ec04f3d73d9ac85d5927f647a5f965181a","impliedFormat":1},{"version":"4b7f74b772140395e7af67c4841be1ab867c11b3b82a51b1aeb692822b76c872","impliedFormat":1},{"version":"27be6622e2922a1b412eb057faa854831b95db9db5035c3f6d4b677b902ab3b7","impliedFormat":1},{"version":"b95a6f019095dd1d48fd04965b50dfd63e5743a6e75478343c46d2582a5132bf","impliedFormat":99},{"version":"c2008605e78208cfa9cd70bd29856b72dda7ad89df5dc895920f8e10bcb9cd0a","impliedFormat":99},{"version":"b97cb5616d2ab82a98ec9ada7b9e9cabb1f5da880ec50ea2b8dc5baa4cbf3c16","impliedFormat":99},{"version":"63a7595a5015e65262557f883463f934904959da563b4f788306f699411e9bac","impliedFormat":1},{"version":"9e40365afca304124bc53eb03412643abf074a1580e4dc279a7a16000d11f985","impliedFormat":1},{"version":"4ba137d6553965703b6b55fd2000b4e07ba365f8caeb0359162ad7247f9707a6","impliedFormat":1},{"version":"ceec3c81b2d81f5e3b855d9367c1d4c664ab5046dff8fd56552df015b7ccbe8f","affectsGlobalScope":true,"impliedFormat":1},{"version":"4e18cfe14fa8602c7ff80cbbddb91e31608e5ae20bd361fe7e6a607706cb033c","affectsGlobalScope":true,"impliedFormat":1},{"version":"a1219ee18b9282b4c6a31f1f0bcc9255b425e99363268ba6752a932cf76662f0","impliedFormat":1},{"version":"3dc14e1ab45e497e5d5e4295271d54ff689aeae00b4277979fdd10fa563540ae","impliedFormat":1},{"version":"1d63055b690a582006435ddd3aa9c03aac16a696fac77ce2ed808f3e5a06efab","impliedFormat":1},{"version":"b789bf89eb19c777ed1e956dbad0925ca795701552d22e68fd130a032008b9f9","impliedFormat":1},"f2b3bca04d1bfe583daae1e1f798c92ec24bb6693bd88d0a09ba6802dee362a8",{"version":"b7ca2f47522d4ea41e65ff92c4c6dd9c4c8260da7c456a7631a9c88dc056b4d0","impliedFormat":1},{"version":"4f01e4d0959f9125b89e5737eb1ca2bfa69fd6b7d6126eba22feb8b505b00cde","impliedFormat":1},{"version":"4363a1adb9c77f2ed1ca383a41fbab1afadd35d485c018b2f84e834edde6a2c7","impliedFormat":1},{"version":"1d6458533adb99938d041a93e73c51d6c00e65f84724e9585e3cc8940b25523f","impliedFormat":1},{"version":"b0878fbd194bdc4d49fc9c42bfeeb25650842fe1412c88e283dc80854b019768","impliedFormat":1},{"version":"a892ea0b88d9d19281e99d61baba3155200acced679b8af290f86f695b589b16","impliedFormat":1},{"version":"03b42e83b3bcdf5973d28641d72b81979e3ce200318e4b46feb8347a1828cd5d","impliedFormat":1},{"version":"8a3d57426cd8fb0d59f6ca86f62e05dde8bfd769de3ba45a1a4b2265d84bac5a","impliedFormat":1},{"version":"afc6e1f323b476fdf274e61dab70f26550a1be2353e061ab34e6eed180d349b6","impliedFormat":1},{"version":"7c14483430d839976481fe42e26207f5092f797e1a4190823086f02cd09c113c","impliedFormat":1},{"version":"828a3bea78921789cbd015e968b5b09b671f19b1c14c4bbf3490b58fbf7d6841","impliedFormat":1},{"version":"69759c42e48938a714ee2f002fe5679a7ab56f0b5f29d571e4c31a5398d038fe","impliedFormat":1},{"version":"6e5e666fa6adeb60774b576084eeff65181a40443166f0a46ae9ba0829300fcb","impliedFormat":1},{"version":"1a4d43bdc0f2e240395fd204e597349411c1141dd08f5114c37d6268c3c9d577","impliedFormat":1},{"version":"874e58f8d945c7ac25599128a40ec9615aa67546e91ca12cbf12f97f6baf54ff","impliedFormat":1},{"version":"da2627da8d01662eb137ccd84af7ffa8c94cf2b2547d4970f17802324e54defc","impliedFormat":1},{"version":"07af06b740c01ed0473ebdd3f2911c8e4f5ebf4094291d31db7c1ab24ff559aa","impliedFormat":1},{"version":"ba1450574b1962fcf595fc53362b4d684c76603da5f45b44bc4c7eeed5de045b","impliedFormat":1},{"version":"b7903668ee9558d758c64c15d66a89ed328fee5ac629b2077415f0b6ca2f41bc","impliedFormat":1},{"version":"c7628425ee3076c4530b4074f7d48f012577a59f5ddade39cea236d6405c36ba","impliedFormat":1},{"version":"28c8aff998cc623ab0864a26e2eb1a31da8eb04e59f31fa80f02ec78eb225bcd","impliedFormat":1},{"version":"78d542989bdf7b6ba5410d5a884c0ab5ec54aa9ce46916d34267f885fcf65270","impliedFormat":1},{"version":"4d95060af2775a3a86db5ab47ca7a0ed146d1f6f13e71d96f7ac3b321718a832","impliedFormat":1},{"version":"6708cd298541a89c2abf66cceffc6c661f8ee31c013f98ddb58d2ec4407d0876","impliedFormat":1},{"version":"2e90928c29c445563409d89a834662c2ba6a660204fb3d4dc181914e77f8e29d","impliedFormat":1},{"version":"84be1b8b8011c2aab613901b83309d017d57f6e1c2450dfda11f7b107953286a","impliedFormat":1},{"version":"d7af890ef486b4734d206a66b215ebc09f6743b7fb2f3c79f2fb8716d1912d27","impliedFormat":1},{"version":"7e82c1d070c866eaf448ac7f820403d4e1b86112de582901178906317efc35ad","impliedFormat":1},{"version":"c5c4f547338457f4e8e2bec09f661af14ee6e157c7dc711ccca321ab476dbc6d","impliedFormat":1},{"version":"223e233cb645b44fa058320425293e68c5c00744920fc31f55f7df37b32f11ad","impliedFormat":1},{"version":"1394fe4da1ab8ab3ea2f2b0fcbfd7ccbb8f65f5581f98d10b037c91194141b03","impliedFormat":1},{"version":"086d9e59a579981bdf4f3bfa6e8e893570e5005f7219292bf7d90c153066cdfc","impliedFormat":1},{"version":"1ea59d0d71022de8ea1c98a3f88d452ad5701c7f85e74ddaa0b3b9a34ed0e81c","impliedFormat":1},{"version":"cd66a32437a555f7eb63490509a038d1122467f77fe7a114986186d156363215","impliedFormat":1},{"version":"f53d243499acfacc46e882bbf0bf1ae93ecea350e6c22066a062520b94055e47","impliedFormat":1},{"version":"65522e30a02d2720811b11b658c976bff99b553436d99bafd80944acba5b33b4","impliedFormat":1},{"version":"76b3244ec0b2f5b09b4ebf0c7419260813820f128d2b592b07ea59622038e45c","impliedFormat":1},{"version":"66eb7e876b49beff61e33f746f87b6e586382b49f3de21d54d41313aadb27ee6","impliedFormat":1},{"version":"69e8dc4b276b4d431f5517cd6507f209669691c9fb2f97933e7dbd5619fd07b7","impliedFormat":1},{"version":"361a647c06cec2e7437fa5d7cdf07a0dcce3247d93fbf3b6de1dc75139ff5700","impliedFormat":1},{"version":"fe5726291be816d0c89213057cd0c411bb9e39e315ed7e1987adc873f0e26856","impliedFormat":1},{"version":"1b76990de23762eb038e8d80b3f9c810974a7ed2335caa97262c5b752760f11a","impliedFormat":1},{"version":"5e050e05fe99cd06f2d4ad70e73aa4a72961d0df99525e9cad4a78fa588f387b","impliedFormat":1},{"version":"4ff327e8b16da9d54347b548f85675e35a1dc1076f2c22b2858e276771010dd2","impliedFormat":1},{"version":"f767787945b5c51c0c488f50b3b3aeb2804dfd2ddafcb61125d8d8857c339f5a","impliedFormat":1},{"version":"117ffeecf6c55e25b6446f449ad079029b5e7317399b0a693858faaaea5ca73e","impliedFormat":1},{"version":"14ab21a9aeff5710d1d1262459a6d49fb42bed835aa0f4cfc36b75aa36faddcd","impliedFormat":1},{"version":"ba3c4682491b477c63716864a035b2cfdd727e64ec3a61f2ca0c9af3c0116cfd","affectsGlobalScope":true,"impliedFormat":1},{"version":"b222d32836d745e1e021bb10f6a0f4a562dd42206203060a8539a6b9f16523f0","impliedFormat":1},{"version":"86e355fcc013f3caf1ce7d67b45cc7df1cc570532ae77d7aa8e701d3248e88f7","impliedFormat":1},{"version":"db4af36f01c880562e5b3072a339be19314bd5007ae636055bc36c3c7ee90e72","impliedFormat":1},{"version":"84b7b76ce1ca65b11889dad1dbbcf83875480bfbc8efbedb0e7bed9a1cab6872","signature":"46b15d69f3c28e383469f164ff6ccfbded06bde4550e9bc257e9eb1498f55274"},"422e48cdb9378bd0b561d42b249ee3f602c73efaac98b8346fe7df16dc356cdd","57e603d36bed6dd3c8062b31f233bdea85cd52f9551590e0220fd914b911b677","dc60f7f3f7eed35aedc794ff00ae030618ebd3ec7abfc3117c8e66fc1bc7e930","b9ca130cb6446575c31d7425132d6889bab053d7e6a723504d2be117f30a15f0","572148af7b7cf080b3f4d1317769c54f2e870fed8a4e90880287c22606f5079d",{"version":"0bf39ac9eae0cd32a07f6dcb872955c4249f887f806dd7b325641ce87a176e42","impliedFormat":99},"5157181ba16a50b93ef17d6ca8217b715d787f8f6f29b741593fd39fd47e4460",{"version":"c3d577953f04c0188d8b9c63b2748b814efda6440336fa49557f0079f5cf748a","impliedFormat":1},{"version":"787fe950e18951b7970ec98cb05b3d0b11fcdfeb2091a7ea481ac9e52bf6c086","impliedFormat":1},{"version":"13ceda04874f09091da1994ba5f58bf1e9439af93336616257691863560b3f13","impliedFormat":1},"afdf1c929305c1ab86a7f000e491ca1d139721c46251554a555b24270fdc8333","0a3d0b62fd8830a66d99db7ef30b754ae01d088801004d879ccbe1fd15841b93","20a0581439778efe4e3c74b4874a8483b1c0e54e533eb3f7c7bc7fff2f184b84","afe17bb99a243b776e1987a8219ea55f646ae8ac0e04d9e02393154b2cb6047d","1eebda9cd532574edc74de6dd52f5cdd5b21508e93b5f64cb00e675cb8af60d7","d9c4b9ebc4c5849b9d8c7810f6ce4ae54529925a2d7b097073583d7dccf3459a","b0c36038566a31e009917cc84a5c2de2c60e2df04d4abda8045cc0513e948d9e","a8d00fd1baeb60f6dbc609feef58eccfda006a86a0de2c5d64e201b11b836cb3","e2030d8b0167e440d297440bf6efec033ce88f9905b340e54a54dabeba02bc96","bd529ba7bea30da92da94b152913645a179253e984234ac6b8102b88db24dcfe",{"version":"135119ed549bac6c9dc7d7ec816b9e6bd7b5d417b22f350144af14d27c3b1434","signature":"c6bdb0ef284368f102e474460568721e56b632f4ded0df90f3fc01b17bdde05e"},{"version":"e122a770e7f05a670e1692d87b58a3357f846e01aa314e6814973cfed2745486","signature":"c6ab53c8b01d24992ba70f4a1903c491dc623c7808e63173a5949841d34b47bb"},"401e3c7e497fdb9ab73545fa3bddcc27222b5b4a0e33d244388f66ab31e202c5",{"version":"9555f9debaa00b0b9b60fe7f86f6fecf053cf0e8a2df83d8e09c9f85049a5bff","signature":"8f3320937493aac8090754d3242e48003c35dd209f15c7638101d2f1e9c07c5d"},"8d7e597184973c7e150d38564585dcaa1152955b7351e5c7fda2a78e73c5cecc","38d590c2ada541790feb6646e62dfdf1b0dbfcdd7ec37e1e687f2882c82665fc","3d7b41a9a2e9460f535462fda557b80a0ddec9edfc5871ecd626133f475d6f9a","b0447b790466355f2889eaa9aa39d07f30eba71296820c2cd0b41411e7aeb5d4","ebfa54ea6f2c0ededf3f85b49222201b8393aa2a55c5af9ffb3de1947ef087c1","1b22184dc7bc36f3cd8ab42a63a814b09dd1c3863f9ac713dadad3121cb6e359","9601ffca6b375612939253709ca370eaef2d939c79b44061e599fe60fc7026f4","59117e0bca1e211f089d0762d386438c2e4ea07598ca0b15bc29069c5084aba3",{"version":"07fcc9be98e12bd2f0f71a501a9bfbe2e53d38c50e8a5e84223fdd05bd8749c5","impliedFormat":99},{"version":"b887a4575db46263f82d7bde681bdc14526e4a2618a1172fef4206c467752d8f","impliedFormat":99},"e1b8443a83a50ea88d0c6dad955552f396ae620c829775e096becc213b520d68","c3efb5ec41437781d907d42669b4f3be16f05f7b1098174af78e7986a2cf6416","66bb3a1326defcbe536ef7397109f7f04474cc31fbf4af908b4a64f11d6afbb5","1dfc3858efd6146caab4ee8175173db7aec72186460b77b5ff88c17a082c6d99","50dd522e984b0de8e4dd1dd8d3c14f67d21d5dc754be680538fccffd1bf4f31b","9217bddabebd06ac4ea9e71cbda600f842805a146c2d03aaf21fca54fe455ea4","8949d4bb6840dcf4172227a447864c2816a6d60d6c2cf4d646b9d0ec79326619","e03bcb1cc00ceec34aae72da850be2eaae870bc06ae1481941143940db36fb84","e914782cef1fdf6d8f34e00cef4daf6db86e353f06b9e83eaf5e0ac88c60249d","5f00dd786651f274787e1604a575f1abffe6b4bf199f595c20147237608f898e","341651c87904eeb56c96aa1dc0484b5bb0c544bdebc339873e0ebfe89e87a8f1","baee2a867306c9a094bbe267650c747937edd486571ac86041dc8b4cb8a401b8","8f3cf83a2d3e4f2fbfe41c766fda06156b23d64ef18defba539a59f21a7345a3","8ee88f60a7f25bc24d250f8816ee23b0b6b76e067905d856233b9c4932e41372","4dac6a1986ab7310442a2197e9b0df1e8234fd1b1334745eada79e91c1ad994e","41c76f5f649b3ee9f0ffabd77ccb63b45bc08dbc9e209c1b3f8dd4597e36f5dd","3434d709ec424137550d4e5cc00bae4ca11a4272ab8e65bb63f4f70986ecde5c","45abd96b52cbdc456dd4ff833bd9ddc0df3efbac5fe7895a89689cbc359aea06","1d1b973cf30c8047a6f282fbf9f6e55c9c6889b0adc0d140709d102933e490d3","017683a34612c48852f58f40f24c74cfe79dabc63e7cdc20368b8a4ef1770e02","aac002869c99dd91f6e4c8aabe63a0b468663d84623b2e443ee52a6797e8ea7b","f22aff510a2e6e0c3c8e73541e4daf4100b7ebd7bb6883a691135dd59cbcee68","e987676df7911d3f41e51efb7c9a17fddd8498bfde6bdcf632f5dc76a58553cb",{"version":"aac0ef36874f2845f2eb98164601eaa3ffa302f70aaa3def3fb38fb6cbc3a8a2","signature":"cb4c4299fbd80b8fbbd49bff4c6339ec6bd1fb3e310799ae55348349dca9097e"},"43f0edfd7280525daf8065358ee4cf67fe3ff389346f82d1ebd37eedc2af6b6c","23dccaf976cc42e018af9097e132537c0194f2350651dd72cdc187edfd74621e","d58d52bab42ed6cf5e5355be3e9ba0e97d3a1df7fffdf3ee43e7425a983f5a90","7d0bb6d85f35a7f6e75bb3cc07bc757c9c3f9874d9f2ed9522958c55a278633f","60bbbb58fe491d7a58575e0b154e9a22ed0a33dfac6114f370f749ca396dfba6","0a46e26bb2589c0a787e31be3314b9baa79845c47a6f5aa204ad6110a687574e","9aea6949a84231ce52ffb3ffb387bdcf6fc0425f010ee2d6a6656107c1c349d5","dfd532c4d13a151cf80fd7da53f5ffc734d57614a64928de27a50373e6b58553","adf5f3ad8131d33204dd87229cce7dbb6ca1004ba025fe01e5df153e61cc4fa5","2bc53afb202fb2aaa04094050a68fda48ecc786cc75f63f9ad47ed101bf44692","e19a2a6bbeae8486711a4e6c50c1f03e2c5274f39d3663d967983a55a4617383","3d38be22150241e540b87125dc873f25a641dd366f5ea292eeb4a1908582f750","ae0a049f9c975dad958e15384d84d432815dee99281ad70452be6b7006eabeb5","15356569c2419b6bd151abaf4e5c88518ca4392a8ebb4e0f0208c3b427444491","c3632488852a7a3e0bf2d665962e2bb4107a00abf6f44b4cdacc8e2715a792cf","82bfdbb4c5d8b7ccfcb00afd46f998118f8f7b89e7dc7b57e1813d06dce00770","250795272e21a3714456b36bca8866ea3945f2a502d1aa9cdf7bf821dd142d46","312e14e663f1a45f53c8e191e52415e0795a800309636a0364e39f78d4dd9029","d77e03376e9a1430eb56074e7a43c2fb9a6040b26220cb15dec65ec84bc27d70","75b01e6b6caa84180827aafc64842683ea64f6e071b6b056b8901abf3361b4db","01d0ae9cbebbfc4e6659992a24a875d38b4f30d5166f86f4431699ea5c6c8497","c0a380d597b335e58b7fca6a97f05142582853ac7928a7030a684fc53d9786d0","11fda37141c1b8f8fab42bd8200e4f213fac8576cece1c84dbf729f9ce3d00dd","c9378a3e0de3a581568951b40d442e33b779d23e3c58db9fe2b910449322d539","8782bf2bc8fc79e29ee0bfe25bf1ba23a140e2788523f9a173178ec0143fdda5","36b528003f0e2551f2c9fbf4121e1934fb81eef46a675cd93b83de904b65c24e","562c854f3d5f798d99edb853d97fba02ee8a6c69c82b2d71768107928f6ce37c","17852f1e23daf4679631f35e90695c8a4767e82faa1d413e4a5469abbc360a22","5c816175a8b0845d6330aecc1693eb600cd6b86aad2a513a27ea2f229abe84af","6dd64f1462e77ec60a68d8bf713619221b09c8a6938a2ba3e6825e8a2cb6eaa0","e9d83fe87694197ea5913c3aa925a3260d0935ffed349c4fd9ded3b478b88048","5ab0fc86a09d8ccb39672d69e598c7568ec320f6c46269cbca4d065706f8c30d","7220c33cca45722ab2690c9ae1311a68d6b509a0dcab2b241952ca6d60c4c6db","171d6ab72c1cd14a5cb1b2ed9097f19d6d5e68bb3d56476742297bac36a13901","f2bbbcd6b8b98f9e129af0ecc0a23cab3893ce932f5c3c5c6dafc80ef31fbb6e","d7e4dbfc49cf3e2a76c21a9a8af3e39b13f3b23202342198afcc540726b6eebb","1b30b7f722668c65ed9901aafd4ff2614aca111875059ca5444a04552edb25e5","888d755dfe3e16345e4cadf96ea5db5ecc419d2015994c7656f7a801d05dc2d5","b2a8e89ad1d057f9eecb9fb72b25196500d1cc9bf60ab94beef5ea50d980e49f","bb15d2d37c0690b5d962a64d35ac813a6b5407139e35bccf4635e69a91d5418c","39de371712e52467e3fe7daa560c5bfa86a7cf8bbb6781e9ced8dc65ae985ef9","39484f40906fb100135bfe93bf972e844e31be9d88e669b8f570b8507a281705",{"version":"55ae785c0d3c199d3c4aa91650de22ccf7fdd8da0bf4abb8d1b2c322dde19d10","signature":"97abfaa249107a8b420c9803b3e19ce3218e4a5ff3e393255f191b0894921ca1"},{"version":"2262aad76d4e0e98179f55b0fa16f8dcb46c8ce7b48f575b506a43c3447df862","signature":"35fe530dd8b83a9b3bfc0104d73d6c752aaffb8ef7dfd8cd1bb3867b0b0664e6"},{"version":"14c652d576b0522c1a7f23aa4e3a1c048a6b460a1521c6e80c5c9b3c595bd6a1","signature":"c788154ee7374abc6d4325a41686ec873f1c0c734dd216372181dd62fe46fbc2"},"9f7d85a8bb6de4101b4c9e72e632c68f61d5d3a3d507593471ce04d15d55d854","e2627f0e8ac94ba2ffae3d75a082bea6c225e97b492073f5a1070e25a323d6dd","2143485da06bc921975141ba9af21e26a7cc599fb423f29f8223bdf8a12633f5","bb875833f7965da0444ea6571eba247d0a0df3549b69859d7755cbaf3db3619c","bf2de313c8ead443ee6e63ef253c8dbd20b2471253804d9a7773660104f89200","515f1db8894d27036148777e7df91907cee6eba70f898b745060074fab7a82b8","c04236ece843bc5e022684da966742a058c05bb184bff23a11514e923d341f85","359a8485a2e12b96fc5530115e5e46df4c37e456e86892b0dfc1dfe8404d1ceb","657ba755609868f8ae21ee2a46c57c376bc25980942246137681c9f161d07442","97037632169aac1f7683b4e78feae6dcd7ac8d1910150bc29cc4154b86cc1b13",{"version":"8a48752250bb459c33620fc278e468d98ade9fc3b35a5cf6d921ec29904aaa4f","impliedFormat":1},{"version":"e7c2f40dc99121500ad108a4f86541d29cac105ed018f994c7c5a2836e77b257","impliedFormat":1},{"version":"90e930283286ab117ab89f00589cf89ab5e9992bc57e79f303b36ee14649bdd9","impliedFormat":1},{"version":"6d48a6c907c668a6d6eda66acec4242e367c983e073100e35c1e234c424ad1a4","impliedFormat":1},{"version":"68a0e898d6c39160f1326ef922508914498c7a2d0b5a0d9222b7928d343214eb","impliedFormat":1},{"version":"69d96a8522b301a9e923ac4e42dd37fc942763740b183dffa3d51aca87f978d5","impliedFormat":1},{"version":"ff2fadad64868f1542a69edeadf5c5519e9c89e33bec267605298f8d172417c7","impliedFormat":1},{"version":"2866ae69517d6605a28d0c8d5dff4f15a0b876eeb8e5a1cbc51631d9c6793d3f","impliedFormat":1},{"version":"f8c4434aa8cbd4ede2a75cbc5532b6a12c9cac67c3095ed907e54f3f89d2e628","impliedFormat":1},{"version":"0b8adc0ae60a47acf65575952eee568b3d497f9975e3162f408052a99e65f488","impliedFormat":1},{"version":"ede9879d22f7ce68a8c99e455acab32fc45091c6eed9625549742b03e1f1ac1a","impliedFormat":1},{"version":"0e8c007c6e404da951c3d98a489ac0a3e9b6567648b997c03445ac69d7938c1c","impliedFormat":1},{"version":"f2a4866bed198a7c804b58ee39efe74c66ecdcf2dfebef0b9895d534a50790c4","impliedFormat":1},{"version":"ad72538d0c5e417ee6621e1b54691c274bcacaa1807c9895c5fa6d40b45fb631","impliedFormat":1},{"version":"4f851c59f3112702f6178e76204f839e3156daa98b5b7d7e3fc407a6c5764118","impliedFormat":1},{"version":"57511f723968d2f41dd2d55b9fbc5d0f3107af4e4227db0fb357c904bd34e690","impliedFormat":1},{"version":"9585df69c074d82dda33eadd6e5dccd164659f59b09bd5a0d25874770cf6042d","impliedFormat":1},{"version":"f6f6ce3e3718c2e7592e09d91c43b44318d47bca8ee353426252c694127f2dcb","impliedFormat":1},{"version":"4f70076586b8e194ef3d1b9679d626a9a61d449ba7e91dfc73cbe3904b538aa0","impliedFormat":1},{"version":"6d5838c172ff503ef37765b86019b80e3abe370105b2e1c4510d6098b0e84414","impliedFormat":1},{"version":"1876dac2baa902e2b7ebed5e03b95f338192dc03a6e4b0731733d675ba4048f3","impliedFormat":1},{"version":"8086407dd2a53ce700125037abf419bddcce43c14b3cf5ea3ac1ebded5cad011","impliedFormat":1},{"version":"c2501eb4c4e05c2d4de551a4bace9c28d06a0d89b228443f69eb3d7f9049fbd6","impliedFormat":1},{"version":"1829f790849d54ea3d736c61fdefd3237bede9c5784f4c15dfdafb7e0a9b8f63","impliedFormat":1},{"version":"5392feeda1bf0a1cc755f7339ea486b7a4d0d019774da8057ddc85347359ed63","impliedFormat":1},{"version":"c998117afca3af8432598c7e8d530d8376d0ca4871a34137db8caa1e94d94818","impliedFormat":1},{"version":"4e465f7e9a161a5a5248a18af79dbfbf06e8e1255bfdc8f63ab15475a2ba48bd","impliedFormat":1},{"version":"e0353c5070349846fe9835d782a8ce338d6d4172c603d14a6b364d6354957a4e","impliedFormat":1},{"version":"323133630008263f857a6d8350e36fb7f6e8d221ec0a425b075c20290570c020","impliedFormat":1},{"version":"c04e691d64b97e264ca4d000c287a53f2a75527556962cdbe3e8e2b301dac906","impliedFormat":1},{"version":"3733dba5107de9152f98da9bcb21bf6c91ac385f3b22f30ed08d0dc5e74c966f","impliedFormat":1},{"version":"d3ec922ddd9677696ee0552f10e95c4e59f85bb8c93fd76cd41b2dd93988ff39","impliedFormat":1},{"version":"0492c0d35e05c0fdd638980e02f3a7cdec18b311959fc730d85ed7e1d4ff38a7","impliedFormat":1},{"version":"c7122ba860d3497fa04a112d424ee88b50c482360042972bcf0917c5b82f4484","impliedFormat":1},{"version":"838f52090a0d39dce3c42e0ccb0db8db250c712c1fa2cd36799910c8f8a7f7bf","impliedFormat":1},{"version":"116ec624095373939de9edb03619916226f5e5b6e93cd761c4bda4efecb104fc","impliedFormat":1},{"version":"8e6b8259bfd8c8c3d6ed79349b7f2f69476d255aede2cd6c0acb0869ad8c6fdd","impliedFormat":1},{"version":"c57b441e0c0a9cbdfa7d850dae1f8a387d6f81cbffbc3cd0465d530084c2417d","impliedFormat":99},{"version":"da72b2160aa234dd7e36b0e7642cbc16dba1f4fcb13b096698d5f2fac301219a","impliedFormat":1},"2b84d57aca79d364bb4d47fc8e76edae69d88ae54154d68cf9e135376da901d5","911d56e3770dcd5652adff1bbf6b8316136055e7cf36db74b177960f63f95cfc","2cf8abd910e0b674889f89345068718ce36898a7a90f33eeb7f54bd99e58c93a","df79f13ff143f1228b02affc40b88db8e16706c7801546a54744dd8a5faebf6d","c9e3e64b2bb7790a88280d0c87bca23f773a6e603956602b185a559a1c913555","85a9280b7fb434dd5b017a3beea2bbe541e3cb59d6a0ef53fd77f7f9c48f21a4","cb1a885b22491beb949360d00040ac58d91e521f5f23fde3acf83a507da4e425","65cd8179a6779b1d26bc58992d4f34e61bae04e4c436889e920591d2e9bd66d6","0136eb4fe85d23d8c8ed479f322bfeaae8affae6195d77c5ac68f646aa92a29b","f71396356c5c8f45ec9302ed69fef4bfa731a82c3026e1636267f4f8f3c1612e","ca7c19c9c02450e9672bf65f035ff838aa4f6a5061784aca17ca406e9499f675","c3a7c3026f2d2d86463ba4f3019922ab789cb5d1a431508cb20d19b56063e3f9","df1c23452722bc0759759d24c5b3614fd8891902cfdb5a7a113174f5f5bdf854","7abc2a22734c8651eb7fee303c0d335cb20df1a7f98a8295207a75c6d1bd621d","3c52952439facb27623264f1d5cc21709d7fcf11270782e9f4c03cf4fae883f9",{"version":"d3cfde44f8089768ebb08098c96d01ca260b88bccf238d55eee93f1c620ff5a5","impliedFormat":1},{"version":"b542939a35357458e62f8229c2d7578ae888d63d3ab837395d7bb8a3064c205e","impliedFormat":1},{"version":"3a5af4fba7b27b815bb40f52715aedebaa4b371da3e5a664e7e0798c9b638825","impliedFormat":1},{"version":"8485b6da53ec35637d072e516631d25dae53984500de70a6989058f24354666f","impliedFormat":1},{"version":"ebe80346928736532e4a822154eb77f57ef3389dbe2b3ba4e571366a15448ef2","impliedFormat":1},{"version":"49c632082dc8a916353288d3d8b2dc82b3471794249a381d090d960c8ceac908","impliedFormat":1},{"version":"f672c876c1a04a223cf2023b3d91e8a52bb1544c576b81bf64a8fec82be9969c","impliedFormat":1},{"version":"71addb585c2db7b8e53dc1b0bcfa58c6c67c6e4fa2b968942046749d66f82e7e","impliedFormat":1},{"version":"c76b0c5727302341d0bdfa2cc2cee4b19ff185b554edb6e8543f0661d8487116","impliedFormat":1},{"version":"25b3f581e12ede11e5739f57a86e8668fbc0124f6649506def306cad2c59d262","impliedFormat":1},{"version":"e703cfacb9965c4d4155346c65a0091ecded90ea98874ed6b3f36286577c4dde","impliedFormat":1},{"version":"f5ef066942e4f0bd98200aa6a6694b831e73200c9b3ade77ad0aa2409e8fe1b1","impliedFormat":1},{"version":"b9e99cd94f4166a245f5158f7286c05406e2a4c694619bceb7a4f3519d1d768e","impliedFormat":1},{"version":"5568d7c32e5cf5f35e092649f4e5e168c3114c800b1d7545b7ae5e0415704802","impliedFormat":1},"9cc0c7e9c9d2e652a70696e33a78878a98fb1c1838ac7fd897af1b0d77ef8338",{"version":"7fad6c51ef01884e618e67f94b514e9c8236c16b4a048c30366e0a0c0224e0b8","signature":"0aa5c5e525982dc79d5fa81d3773b7e9f09b76f50ed4b55394044182ce003577"},"15239a087b52469d922573b0c65ea03b331375cb2979e06afdb72dca6276e592","29cb8da647646147d3e254a3522c8fd06030971e743fcd1c38055bd8fe8bfbb0","ef73d875c9241a3e38f1401b706ce9724d82b0d53d809456725abe89e3e4a1b5","c82f6336135b114734eaf38f7f738739ba72a7e53fdc112242af4237d4f2d677",{"version":"fe93c474ab38ac02e30e3af073412b4f92b740152cf3a751fdaee8cbea982341","impliedFormat":1},{"version":"c60093e32612d44af7042c3eb457c616aec3deee748a5a1eb1a6188e3d837f5c","impliedFormat":1},{"version":"1e00b8bf9e3766c958218cd6144ffe08418286f89ff44ba5a2cc830c03dd22c7","impliedFormat":1},{"version":"6c05d0fcee91437571513c404e62396ee798ff37a2d8bef2104accdc79deb9c0","impliedFormat":1},"958d33cd8a85293728acad21c1f3881da56b805bc11a3ec862d6aa355c152d90",{"version":"a26d74bc8768e134734fa049d5a89fb674a560292f4bf1b39392416dc04cf49e","impliedFormat":99},{"version":"ea7f3d87bb25b8cf26c1b440de31b628c53b5e72e8f1ab1726356bf58acf5946","impliedFormat":99},{"version":"7ec047b73f621c526468517fea779fec2007dd05baa880989def59126c98ef79","impliedFormat":99},{"version":"6b5f886fe41e2e767168e491fe6048398ed6439d44e006d9f51cc31265f08978","impliedFormat":99},{"version":"f4a1eba860f7493d19df42373ddde4f3c6f31aa574b608e55e5b2bd459bba587","impliedFormat":99},{"version":"6b863463764ae572b9ada405bf77aac37b5e5089a3ab420d0862e4471051393b","impliedFormat":99},{"version":"904d6ad970b6bd825449480488a73d9b98432357ab38cf8d31ffd651ae376ff5","impliedFormat":99},{"version":"233267a4a036c64aee95f66a0d31e3e0ef048cccc57dd66f9cf87582b38691e4","impliedFormat":99},"8d8a3645f547334b759341daf94a20b12a8ba17e8de4ad6e4e1c64b38842c1e3","7ae3d87911117bcb58c935465e58a56df3b8e07b399b84abfe3fc056e13f050e","f5c66319bb66efb0e804577043afab6475a4296f632d2f47818f0e954ccd1112","efa6e74c6de9c0bd6f0b84cd8f688e56adb1797d84d1e533f63509b00bb34fd8",{"version":"fc2bd184bf1c177b4baad970d0432046edf72f2e51e11de12ba672ffc1c6fe2d","impliedFormat":1},{"version":"a80b7bc4eda856374c26a56f6f25297f4c393309d4c4548002a5238cd57b2b66","impliedFormat":99},{"version":"2fbe402f0ee5aa8ab55367f88030f79d46211c0a0f342becaa9f648bf8534e9d","impliedFormat":1},{"version":"b94258ef37e67474ac5522e9c519489a55dcb3d4a8f645e335fc68ea2215fe88","impliedFormat":1},"82403231e33fd3d45b111e5e819df194cdfa7cef9a726770185724a60bd20932",{"version":"a58825dfef3de2927244c5337ff2845674d1d1a794fb76d37e1378e156302b90","impliedFormat":1},{"version":"1a458765deab35824b11b67f22b1a56e9a882da9f907bfbf9ce0dfaedc11d8fc","impliedFormat":1},{"version":"a48553595da584120091fb7615ed8d3b48aaea4b2a7f5bc5451c1247110be41a","impliedFormat":1},{"version":"ebba1c614e81bf35da8d88a130e7a2924058a9ad140abe79ef4c275d4aa47b0d","impliedFormat":1},{"version":"3f3cfb6d0795d076c62fca9fa90e61e1a1dd9ba1601cd28b30b21af0b989b85a","impliedFormat":1},{"version":"2647c7b6ad90f146f26f3cdf0477eed1cefb1826e8de3f61c584cc727e2e4496","impliedFormat":1},{"version":"891faf74d5399bee0d216314ecf7a0000ba56194ffd16b2b225e4e61706192fb","impliedFormat":1},{"version":"c1227e0b571469c249e7b152e98268b3ccdfd67b5324f55448fad877ba6dbbff","impliedFormat":1},{"version":"230a4cc1df158d6e6e29567bfa2bc88511822a068da08f8761cc4df5d2328dcc","impliedFormat":1},{"version":"c6ee2448a0c52942198242ec9d05251ff5abfb18b26a27970710cf85e3b62e50","impliedFormat":1},{"version":"39525087f91a6f9a246c2d5c947a90d4b80d67efb96e60f0398226827ae9161e","impliedFormat":1},{"version":"1bf429877d50f454b60c081c00b17be4b0e55132517ac322beffe6288b6e7cf6","impliedFormat":1},{"version":"b139b4ed2c853858184aed5798880633c290b680d22aee459b1a7cf9626a540d","impliedFormat":1},{"version":"037a9dab60c22cda0cd6c502a27b2ecfb1ac5199efe5e8c8d939591f32bd73c9","impliedFormat":1},{"version":"a21eaf3dc3388fae4bdd0556eb14c9e737e77b6f1b387d68c3ed01ca05439619","impliedFormat":1},{"version":"60931d8fb8f91afacbb005180092f4f745d2af8b8a9c0957c44c42409ec758e7","impliedFormat":1},{"version":"70e88656db130df927e0c98edcdb4e8beeb2779ac0e650b889ab3a1a3aa71d3d","impliedFormat":1},{"version":"a6473d7b874c3cffc1cb18f5d08dd18ac880b97ec0a651348739ade3b3730272","impliedFormat":1},{"version":"89720b54046b31371a2c18f7c7a35956f1bf497370f4e1b890622078718875b1","impliedFormat":1},{"version":"281637d0a9a4b617138c505610540583676347c856e414121a5552b9e4aeb818","impliedFormat":1},{"version":"87612b346018721fa0ee2c0cb06de4182d86c5c8b55476131612636aac448444","impliedFormat":1},{"version":"c0b2ae1fea13046b9c66df05dd8d36f9b1c9fcea88d822899339183e6ef1b952","impliedFormat":1},{"version":"8c7b41fd103b70c3a65b7ace9f16cd00570b405916d0e3bd63e9986ce91e6156","impliedFormat":1},{"version":"0e51075b769786db5e581e43a64529dca371040256e23d779603a2c8283af7d6","impliedFormat":1},{"version":"54fd7300c6ba1c98cda49b50c215cde3aa5dbae6786eaf05655abf818000954c","impliedFormat":1},{"version":"01a265adad025aa93f619b5521a9cb08b88f3c328b1d3e59c0394a41e5977d43","impliedFormat":1},{"version":"af6082823144bd943323a50c844b3dc0e37099a3a19e7d15c687cd85b3985790","impliedFormat":1},{"version":"241f5b92543efc1557ddb6c27b4941a5e0bb2f4af8dc5dd250d8ee6ca67ad67c","impliedFormat":1},{"version":"55e8db543ceaedfdd244182b3363613143ca19fc9dbc466e6307f687d100e1c8","impliedFormat":1},{"version":"27de37ad829c1672e5d1adf0c6a5be6587cbe405584e9a9a319a4214b795f83a","impliedFormat":1},{"version":"2d39120fb1d7e13f8141fa089543a817a94102bba05b2b9d14b6f33a97de4e0c","impliedFormat":1},{"version":"51c1a42c27ae22f5a2f7a26afcf9aa8e3fd155ba8ecc081c6199a5ce6239b5f4","impliedFormat":1},{"version":"72fb41649e77c743e03740d1fd8e18c824bd859a313a7caeba6ba313a84a79a9","impliedFormat":1},{"version":"6ee51191c0df1ec11db3fbc71c39a7dee2b3e77dcaab974348eaf04b2f22307d","impliedFormat":1},{"version":"b8a996130883aaffdee89e0a3e241d4674a380bde95f8270a8517e118350def7","impliedFormat":1},{"version":"a3dce310d0bd772f93e0303bb364c09fc595cc996b840566e8ef8df7ab0e5360","impliedFormat":1},{"version":"eb9fa21119013a1c7566d2154f6686c468e9675083ef39f211cd537c9560eb53","impliedFormat":1},{"version":"c6b5695ccff3ceab8c7a1fe5c5e1c37667c8e46b6fc9c3c953d53aa17f6e2e59","impliedFormat":1},{"version":"d08d0d4b4a47cc80dbea459bb1830c15ec8d5d7056742ae5ccc16dd4729047d0","impliedFormat":1},{"version":"975c1ef08d7f7d9a2f7bc279508cc47ddfdfe6186c37ac98acbf302cf20e7bb1","impliedFormat":1},{"version":"bd53b46bab84955dc0f83afc10237036facbc7e086125f81f13fd8e02b43a0d5","impliedFormat":1},{"version":"3c68d3e9cd1b250f52d16d5fbbd40a0ccbbe8b2d9dbd117bfd25acc2e1a60ebc","impliedFormat":1},{"version":"88f4763dddd0f685397f1f6e6e486b0297c049196b3d3531c48743e6334ddfcb","impliedFormat":1},{"version":"8f0ab3468882aba7a39acbc1f3b76589a1ef517bfb2ef62e2dd896f25db7fba6","impliedFormat":1},{"version":"407b6b015a9cf880756296a91142e72b3e6810f27f117130992a1138d3256740","impliedFormat":1},{"version":"0bee9708164899b64512c066ba4de189e6decd4527010cc325f550451a32e5ab","impliedFormat":1},{"version":"2472ae6554b4e997ec35ae5ad5f91ab605f4e30b97af860ced3a18ab8651fb89","impliedFormat":1},{"version":"df0e9f64d5facaa59fca31367be5e020e785335679aa088af6df0d63b7c7b3df","impliedFormat":1},{"version":"07ce90ffcac490edb66dfcb3f09f1ffa7415ecf4845f525272b53971c07ad284","impliedFormat":1},{"version":"801a0aa3e78ef62277f712aefb7455a023063f87577df019dde7412d2bc01df9","impliedFormat":1},{"version":"ab457e1e513214ba8d7d13040e404aea11a3e6e547d10a2cbbd926cccd756213","impliedFormat":1},{"version":"d62fbef71a36476326671f182368aed0d77b6577c607e6597d080e05ce49cf9e","impliedFormat":1},{"version":"2a72354cb43930dc8482bd6f623f948d932250c5358ec502a47e7b060ed3bbb6","impliedFormat":1},{"version":"cff4d73049d4fbcd270f6d2b3a6212bf17512722f8a9dfcc7a3ff1b8a8eef1f0","impliedFormat":1},{"version":"f9a7c0d530affbd3a38853818a8c739fbf042a376b7deca9230e65de7b65ee34","impliedFormat":1},{"version":"c024252e3e524fcebaeed916ccb8ede5d487eb8d705c6080dc009df3c87dd066","impliedFormat":1},{"version":"641448b49461f3e6936e82b901a48f2d956a70e75e20c6a688f8303e9604b2ff","impliedFormat":1},{"version":"0d923bfc7b397b8142db7c351ba6f59f118c4fe820c1e4a0b6641ac4b7ab533d","impliedFormat":1},{"version":"13737fae5d9116556c56b3fc01ffae01f31d77748bc419185514568d43aae9be","impliedFormat":1},{"version":"4224758de259543c154b95f11c683da9ac6735e1d53c05ae9a38835425782979","impliedFormat":1},{"version":"2704fd2c7b0e4df05a072202bfcc87b5e60a228853df055f35c5ea71455def95","impliedFormat":1},{"version":"cb52c3b46277570f9eb2ef6d24a9732c94daf83761d9940e10147ebb28fbbb8e","impliedFormat":1},{"version":"1bc305881078821daa054e3cb80272dc7528e0a51c91bf3b5f548d7f1cf13c2b","impliedFormat":1},{"version":"ba53329809c073b86270ebd0423f6e7659418c5bd48160de23f120c32b5ceccc","impliedFormat":1},{"version":"f0a86f692166c5d2b153db200e84bb3d65e0c43deb8f560e33f9f70045821ec9","impliedFormat":1},{"version":"b163773a303feb2cbfc9de37a66ce0a01110f2fb059bc86ea3475399f2c4d888","impliedFormat":1},{"version":"cf781f174469444530756c85b6c9d297af460bf228380ed65a9e5d38b2e8c669","impliedFormat":1},{"version":"cbe1b33356dbcf9f0e706d170f3edf9896a2abc9bc1be12a28440bdbb48f16b1","impliedFormat":1},{"version":"d8498ad8a1aa7416b1ebfec256149f369c4642b48eca37cd1ea85229b0ca00d6","impliedFormat":1},{"version":"d054294baaab34083b56c038027919d470b5c5b26c639720a50b1814d18c5ee4","impliedFormat":1},{"version":"4532f2906ba87ae0c4a63f572e8180a78fd612da56f54d6d20c2506324158c08","impliedFormat":1},{"version":"878bf2fc1bbed99db0c0aa2f1200af4f2a77913a9ba9aafe80b3d75fd2de6ccc","impliedFormat":1},{"version":"039d6e764bb46e433c29c86be0542755035fc7a93aa2e1d230767dd54d7307c2","impliedFormat":1},{"version":"f80195273b09618979ad43009ca9ad7d01461cce7f000dc5b7516080e1bca959","impliedFormat":1},{"version":"16a7f250b6db202acc93d9f1402f1049f0b3b1b94135b4f65c7a7b770a030083","impliedFormat":1},{"version":"d15e9aaeef9ff4e4f8887060c0f0430b7d4767deafb422b7e474d3a61be541b9","impliedFormat":1},{"version":"777ddacdcb4fb6c3e423d3f020419ae3460b283fc5fa65c894a62dff367f9ad2","impliedFormat":1},{"version":"9a02117e0da8889421c322a2650711788622c28b69ed6d70893824a1183a45a8","impliedFormat":1},{"version":"9e30d7ef1a67ddb4b3f304b5ee2873f8e39ed22e409e1b6374819348c1e06dfa","impliedFormat":1},{"version":"ddeb300b9cf256fb7f11e54ce409f6b862681c96cc240360ab180f2f094c038b","impliedFormat":1},{"version":"0dbdd4be29dfc4f317711269757792ccde60140386721bee714d3710f3fbbd66","impliedFormat":1},{"version":"1f92e3e35de7c7ddb5420320a5f4be7c71f5ce481c393b9a6316c0f3aaa8b5e4","impliedFormat":1},{"version":"b721dc785a4d747a8dabc82962b07e25080e9b194ba945f6ff401782e81d1cef","impliedFormat":1},{"version":"f88b42ae60eb60621eec477610a8f457930af3cb83f0bebc5b6ece0a8cc17126","impliedFormat":1},{"version":"97c89e7e4e301d6db3e35e33d541b8ab9751523a0def016d5d7375a632465346","impliedFormat":1},{"version":"29ab360e8b7560cf55b6fb67d0ed81aae9f787427cf2887378fdecf386887e07","impliedFormat":1},{"version":"009bfb8cd24c1a1d5170ba1c1ccfa946c5082d929d1994dcf80b9ebebe6be026","impliedFormat":1},{"version":"654ee5d98b93d5d1a5d9ad4f0571de66c37367e2d86bae3513ea8befb9ed3cac","impliedFormat":1},{"version":"83c14b1b0b4e3d42e440c6da39065ab0050f1556788dfd241643430d9d870cf3","impliedFormat":1},{"version":"d96dfcef148bd4b06fa3c765c24cb07ff20a264e7f208ec4c5a9cbb3f028a346","impliedFormat":1},{"version":"f65550bf87be517c3178ae5372f91f9165aa2f7fc8d05a833e56edc588331bb0","impliedFormat":1},{"version":"9f4031322535a054dcdd801bc39e2ed1cdeef567f83631af473a4994717358e1","impliedFormat":1},{"version":"e6ef5df7f413a8ede8b53f351aac7138908253d8497a6f3150df49270b1e7831","impliedFormat":1},{"version":"b5b3104513449d4937a542fb56ba0c1eb470713ec351922e7c42ac695618e6a4","impliedFormat":1},{"version":"2b117d7401af4b064388acbb26a745c707cbe3420a599dc55f5f8e0fd8dd5baa","impliedFormat":1},{"version":"7d768eb1b419748eec264eff74b384d3c71063c967ac04c55303c9acc0a6c5dd","impliedFormat":1},{"version":"2f1bf6397cecf50211d082f338f3885d290fb838576f71ed4f265e8c698317f9","impliedFormat":1},{"version":"54f0d5e59a56e6ba1f345896b2b79acf897dfbd5736cbd327d88aafbef26ac28","impliedFormat":1},{"version":"760f3a50c7a9a1bc41e514a3282fe88c667fbca83ce5255d89da7a7ffb573b18","impliedFormat":1},{"version":"e966c134cdad68fb5126af8065a5d6608255ed0e9a008b63cf2509940c13660c","impliedFormat":1},{"version":"64a39a5d4bcbe5c8d9e5d32d7eb22dd35ae12cd89542ecb76567334306070f73","impliedFormat":1},{"version":"c1cc0ffa5bca057cc50256964882f462f714e5a76b86d9e23eb9ff1dfa14768d","impliedFormat":1},{"version":"08ab3ecce59aceee88b0c88eb8f4f8f6931f0cfd32b8ad0e163ef30f46e35283","impliedFormat":1},{"version":"0736d054796bb2215f457464811691bf994c0244498f1bb3119c7f4a73c2f99a","impliedFormat":1},{"version":"23bc9533664545d3ba2681eb0816b3f57e6ed2f8dce2e43e8f36745eafd984d4","impliedFormat":1},{"version":"689cbcf3764917b0a1392c94e26dd7ac7b467d84dc6206e3d71a66a4094bf080","impliedFormat":1},{"version":"a9f4de411d2edff59e85dd16cde3d382c3c490cbde0a984bf15533cfed6a8539","impliedFormat":1},{"version":"e30c1cf178412030c123b16dbbee1d59c312678593a0b3622c9f6d487c7e08ba","impliedFormat":1},{"version":"837033f34e1d4b56eab73998c5a0b64ee97db7f6ee9203c649e4cd17572614d8","impliedFormat":1},{"version":"cc8d033897f386df54c65c97c8bb23cfb6912954aa8128bff472d6f99352bb80","impliedFormat":1},{"version":"ca5820f82654abe3a72170fb04bbbb65bb492c397ecce8df3be87155b4a35852","impliedFormat":1},{"version":"9badb725e63229b86fa35d822846af78321a84de4a363da4fe6b5a3262fa31f2","impliedFormat":1},{"version":"f8e96a237b01a2b696b5b31172339d50c77bef996b225e8be043478a3f4a9be5","impliedFormat":1},{"version":"7d048c0fbdb740ae3fa64225653304fdb8d8bb7d905facf14f62e72f3e0ba21a","impliedFormat":1},{"version":"c59b8fb44e6ad7dc3e80359b43821026730a82d98856b690506ba39b5b03789b","impliedFormat":1},{"version":"bd86b749fb17c6596803ace4cae1b6474d820fd680c157e66d884e7c43ef1b24","impliedFormat":1},{"version":"879ba0ae1e59ec935b82af4f3f5ca62cbddecb3eb750c7f5ab28180d3180ec86","impliedFormat":1},{"version":"14fb829e7830df3e326af086bb665fd8dc383b1da2cde92e8ef67b6c49b13980","impliedFormat":1},{"version":"ec14ef5e67a6522f967a17eeedb0b8214c17b5ae3214f1434fcfa0ea66e25756","impliedFormat":1},{"version":"b38474dee55446b3b65ea107bc05ea15b5b5ca3a5fa534371daed44610181303","impliedFormat":1},{"version":"511db7e798d39b067ea149b0025ad2198cfe13ce284a789ef87f0a629942d52f","impliedFormat":1},{"version":"0e50ecb8433db4570ed22f3f56fd7372ebddb01f4e94346f043eeb42b4ada566","impliedFormat":1},{"version":"2beccefff361c478d57f45279478baeb7b7bcdac48c6108bec3a2d662344e1ea","impliedFormat":1},{"version":"b5c984f3e386c7c7c736ed7667b94d00a66f115920e82e9fa450dc27ccc0301e","impliedFormat":1},{"version":"acdd01e74c36396d3743b0caf0b4c7801297ca7301fa5db8ce7dbced64ec5732","impliedFormat":1},{"version":"82da8b99d0030a3babb7adfe3bb77bc8f89cc7d0737b622f4f9554abdc53cd89","impliedFormat":1},{"version":"80e11385ab5c1b042e02d64c65972fff234806525bf4916a32221d1baebfe2f9","impliedFormat":1},{"version":"a894178e9f79a38124f70afb869468bace08d789925fd22f5f671d9fb2f68307","impliedFormat":1},{"version":"b44237286e4f346a7151d33ff98f11a3582e669e2c08ec8b7def892ad7803f84","impliedFormat":1},{"version":"910c0d9ce9a39acafc16f6ca56bdbdb46c558ef44a9aa1ee385257f236498ee1","impliedFormat":1},{"version":"fed512983a39b9f0c6f1f0f04cc926aca2096e81570ae8cd84cad8c348e5e619","impliedFormat":1},{"version":"2ebf8f17b91314ec8167507ee29ebeb8be62a385348a0b8a1e7f433a7fb2cf89","impliedFormat":1},{"version":"cb48d9c290927137bfbd9cd93f98fca80a3704d0a1a26a4609542a3ab416c638","impliedFormat":1},{"version":"9ab3d74792d40971106685fb08a1c0e4b9b80d41e3408aa831e8a19fedc61ab8","impliedFormat":1},{"version":"394f9d6dc566055724626b455a9b5c86c27eeb1fdbd499c3788ab763585f5c41","impliedFormat":1},{"version":"9bc0ab4b8cb98cd3cb314b341e5aaab3475e5385beafb79706a497ebddc71b5d","impliedFormat":1},{"version":"35433c5ee1603dcac929defe439eec773772fab8e51b10eeb71e6296a44d9acb","impliedFormat":1},{"version":"aeee9ba5f764cea87c2b9905beb82cfdf36f9726f8dea4352fc233b308ba2169","impliedFormat":1},{"version":"35ea8672448e71ffa3538648f47603b4f872683e6b9db63168d7e5e032e095ef","impliedFormat":1},{"version":"8e63b8db999c7ad92c668969d0e26d486744175426157964771c65580638740d","impliedFormat":1},{"version":"f9da6129c006c79d6029dc34c49da453b1fe274e3022275bcdecaa02895034a0","impliedFormat":1},{"version":"2e9694d05015feb762a5dc7052dd51f66f692c07394b15f6aff612a9fb186f60","impliedFormat":1},{"version":"f570c4e30ea43aecf6fc7dc038cf0a964cf589111498b7dd735a97bf17837e3a","impliedFormat":1},{"version":"cdad25d233b377dd852eaa9cf396f48d916c1f8fd2193969fcafa8fe7c3387cb","impliedFormat":1},{"version":"243b9e4bcd123a332cb99e4e7913114181b484c0bb6a3b1458dcb5eb08cffdc4","impliedFormat":1},{"version":"ada76d272991b9fa901b2fbd538f748a9294f7b9b4bc2764c03c0c9723739fd1","impliedFormat":1},{"version":"6409389a0fa9db5334e8fbcb1046f0a1f9775abce0da901a5bc4fec1e458917c","impliedFormat":1},{"version":"af8d9efb2a64e68ac4c224724ac213dbc559bcfc165ce545d498b1c2d5b2d161","impliedFormat":1},{"version":"094faf910367cc178228cafe86f5c2bd94a99446f51e38d9c2a4eb4c0dec534d","impliedFormat":1},{"version":"dc4cf53cebe96ef6b569db81e9572f55490bd8a0e4f860aac02b7a0e45292c71","impliedFormat":1},{"version":"2c23e2a6219fbce2801b2689a9920548673d7ca0e53859200d55a0d5d05ea599","impliedFormat":1},{"version":"62491ce05a8e3508c8f7366208287c5fded66aad2ba81854aa65067d328281cc","impliedFormat":1},{"version":"8be1b9d5a186383e435c71d371e85016f92aa25e7a6a91f29aa7fd47651abf55","impliedFormat":1},{"version":"95a1b43dfa67963bd60eb50a556e3b08a9aea65a9ffa45504e5d92d34f58087a","impliedFormat":1},{"version":"b872dcd2b627694001616ab82e6aaec5a970de72512173201aae23f7e3f6503d","impliedFormat":1},{"version":"13517c2e04de0bbf4b33ff0dde160b0281ee47d1bf8690f7836ba99adc56294b","impliedFormat":1},{"version":"a9babac4cb35b319253dfc0f48097bcb9e7897f4f5762a5b1e883c425332d010","impliedFormat":1},{"version":"3d97a5744e12e54d735e7755eabc719f88f9d651e936ff532d56bdd038889fc4","impliedFormat":1},{"version":"7fffc8f7842b7c4df1ae19df7cc18cd4b1447780117fca5f014e6eb9b1a7215e","impliedFormat":1},{"version":"aaea91db3f0d14aca3d8b57c5ffb40e8d6d7232e65947ca6c00ae0c82f0a45dc","impliedFormat":1},{"version":"c62eefdcc2e2266350340ffaa43c249d447890617b037205ac6bb45bb7f5a170","impliedFormat":1},{"version":"9924ad46287d634cf4454fdbbccd03e0b7cd2e0112b95397c70d859ae00a5062","impliedFormat":1},{"version":"b940719c852fd3d759e123b29ace8bbd2ec9c5e4933c10749b13426b096a96a1","impliedFormat":1},{"version":"2745055e3218662533fbaddfb8e2e3186f50babe9fb09e697e73de5340c2ad40","impliedFormat":1},{"version":"5d6b6e6a7626621372d2d3bbe9e66b8168dcd5a40f93ae36ee339a68272a0d8b","impliedFormat":1},{"version":"64868d7db2d9a4fde65524147730a0cccdbd1911ada98d04d69f865ea93723d8","impliedFormat":1},{"version":"368b06a0dd2a29a35794eaa02c2823269a418761d38fdb5e1ac0ad2d7fdd0166","impliedFormat":1},{"version":"20164fb31ecfad1a980bd183405c389149a32e1106993d8224aaa93aae5bfbb9","impliedFormat":1},{"version":"bb4b51c75ee079268a127b19bf386eb979ab370ce9853c7d94c0aca9b75aff26","impliedFormat":1},{"version":"f0ef6f1a7e7de521846c163161b0ec7e52ce6c2665a4e0924e1be73e5e103ed3","impliedFormat":1},{"version":"84ab3c956ae925b57e098e33bd6648c30cdab7eca38f5e5b3512d46f6462b348","impliedFormat":1},{"version":"70d6692d0723d6a8b2c6853ed9ab6baaa277362bb861cf049cb12529bd04f68e","impliedFormat":1},{"version":"b35dc79960a69cd311a7c1da15ee30a8ab966e6db26ec99c2cc339b93b028ff6","impliedFormat":1},{"version":"29d571c13d8daae4a1a41d269ec09b9d17b2e06e95efd6d6dc2eeb4ff3a8c2ef","impliedFormat":1},{"version":"5f8a5619e6ae3fb52aaaa727b305c9b8cbe5ff91fa1509ffa61e32f804b55bd8","impliedFormat":1},{"version":"15becc25682fa4c93d45d92eab97bc5d1bb0563b8c075d98f4156e91652eec86","impliedFormat":1},{"version":"702f5c10b38e8c223e1d055d3e6a3f8c572aa421969c5d8699220fbc4f664901","impliedFormat":1},{"version":"4db15f744ba0cd3ae6b8ac9f6d043bf73d8300c10bbe4d489b86496e3eb1870b","impliedFormat":1},{"version":"80841050a3081b1803dbee94ff18c8b1770d1d629b0b6ebaf3b0351a8f42790b","impliedFormat":1},{"version":"9b7987f332830a7e99a4a067e34d082d992073a4dcf26acd3ecf41ca7b538ed5","impliedFormat":1},{"version":"e95b8e0dc325174c9cb961a5e38eccfe2ac15f979b202b0e40fa7e699751b4e9","impliedFormat":1},{"version":"21360a9fd6895e97cbbd36b7ce74202548710c8e833a36a2f48133b3341c2e8f","impliedFormat":1},{"version":"d74ac436397aa26367b37aa24bdae7c1933d2fed4108ff93c9620383a7f65855","impliedFormat":1},{"version":"65825f8fda7104efe682278afec0a63aeb3c95584781845c58d040d537d3cfed","impliedFormat":1},{"version":"1f467a5e086701edf716e93064f672536fc084bba6fc44c3de7c6ae41b91ac77","impliedFormat":1},{"version":"7e12b5758df0e645592f8252284bfb18d04f0c93e6a2bf7a8663974c88ef01de","impliedFormat":1},{"version":"47dbc4b0afb6bc4c131b086f2a75e35cbae88fb68991df2075ca0feb67bbe45b","impliedFormat":1},{"version":"146d8745ed5d4c6028d9a9be2ecf857da6c241bbbf031976a3dc9b0e17efc8a1","impliedFormat":1},{"version":"c4be9442e9de9ee24a506128453cba1bdf2217dbc88d86ed33baf2c4cbfc3e84","impliedFormat":1},{"version":"c9b42fef8c9d035e9ee3be41b99aae7b1bc1a853a04ec206bf0b3134f4491ec8","impliedFormat":1},{"version":"e6a958ab1e50a3bda4857734954cd122872e6deea7930d720afeebd9058dbaa5","impliedFormat":1},{"version":"088adb4a27dab77e99484a4a5d381f09420b9d7466fce775d9fbd3c931e3e773","impliedFormat":1},{"version":"ddf3d7751343800454d755371aa580f4c5065b21c38a716502a91fbb6f0ef92b","impliedFormat":1},{"version":"9b93adcccd155b01b56b55049028baac649d9917379c9c50c0291d316c6b9cdd","impliedFormat":1},{"version":"b48c56cc948cdf5bc711c3250a7ccbdd41f24f5bbbca8784de4c46f15b3a1e27","impliedFormat":1},{"version":"9eeee88a8f1eed92c11aea07551456a0b450da36711c742668cf0495ffb9149c","impliedFormat":1},{"version":"aeb081443dadcb4a66573dba7c772511e6c3f11c8fa8d734d6b0739e5048eb37","impliedFormat":1},{"version":"acf16021a0b863117ff497c2be4135f3c2d6528e4166582d306c4acb306cb639","impliedFormat":1},{"version":"13fbdad6e115524e50af76b560999459b3afd2810c1cbaa52c08cdc1286d2564","impliedFormat":1},{"version":"d3972149b50cdea8e6631a9b4429a5a9983c6f2453070fb8298a5d685911dc46","impliedFormat":1},{"version":"e2dcfcb61b582c2e1fa1a83e3639e2cc295c79be4c8fcbcbeef9233a50b71f7b","impliedFormat":1},{"version":"4e49b8864a54c0dcde72d637ca1c5718f5c017f378f8c9024eff5738cd84738f","impliedFormat":1},{"version":"8db9eaf81db0fc93f4329f79dd05ea6de5654cabf6526adb0b473d6d1cd1f331","impliedFormat":1},{"version":"f76d2001e2c456b814761f2057874dd775e2f661646a5b4bacdcc4cdaf00c3e6","impliedFormat":1},{"version":"d95afdd2f35228db20ec312cb7a014454c80e53a8726906bd222a9ad56f58297","impliedFormat":1},{"version":"8302bf7d5a3cb0dc5c943f77c43748a683f174fa5fae95ad87c004bf128950ce","impliedFormat":1},{"version":"ced33b4c97c0c078254a2a2c1b223a68a79157d1707957d18b0b04f7450d1ad5","impliedFormat":1},{"version":"0e31e4ec65a4d12b088ecf5213c4660cb7d37181b4e7f1f2b99fe58b1ba93956","impliedFormat":1},{"version":"3028552149f473c2dcf073c9e463d18722a9b179a70403edf8b588fcea88f615","impliedFormat":1},{"version":"0ccbcaa5cb885ad2981e4d56ed6845d65e8d59aba9036796c476ca152bc2ee37","impliedFormat":1},{"version":"cb86555aef01e7aa1602fce619da6de970bb63f84f8cffc4d21a12e60cd33a8c","impliedFormat":1},{"version":"a23c3bb0aecfbb593df6b8cb4ba3f0d5fc1bf93c48cc068944f4c1bdb940cb11","impliedFormat":1},{"version":"544c1aa6fcc2166e7b627581fdd9795fc844fa66a568bfa3a1bc600207d74472","impliedFormat":1},{"version":"745c7e4f6e3666df51143ed05a1200032f57d71a180652b3528c5859a062e083","impliedFormat":1},{"version":"0308b7494aa630c6ecc0e4f848f85fcad5b5d6ef811d5c04673b78cf3f87041c","impliedFormat":1},{"version":"c540aea897a749517aea1c08aeb2562b8b6fc9e70f938f55b50624602cc8b2e4","impliedFormat":1},{"version":"a1ab0c6b4400a900efd4cd97d834a72b7aeaa4b146a165043e718335f23f9a5f","impliedFormat":1},{"version":"89ebe83d44d78b6585dfd547b898a2a36759bc815c87afdf7256204ab453bd08","impliedFormat":1},{"version":"e6a29b3b1ac19c5cdf422685ac0892908eb19993c65057ec4fd3405ebf62f03d","impliedFormat":1},{"version":"c43912d69f1d4e949b0b1ce3156ad7bc169589c11f23db7e9b010248fdd384fa","impliedFormat":1},{"version":"d585b623240793e85c71b537b8326b5506ec4e0dcbb88c95b39c2a308f0e81ba","impliedFormat":1},{"version":"aac094f538d04801ebf7ea02d4e1d6a6b91932dbce4894acb3b8d023fdaa1304","impliedFormat":1},{"version":"da0d796387b08a117070c20ec46cc1c6f93584b47f43f69503581d4d95da2a1e","impliedFormat":1},{"version":"f2307295b088c3da1afb0e5a390b313d0d9b7ff94c7ba3107b2cdaf6fca9f9e6","impliedFormat":1},{"version":"d00bd133e0907b71464cbb0adae6353ebbec6977671d34d3266d75f11b9591a8","impliedFormat":1},{"version":"c3616c3b6a33defc62d98f1339468f6066842a811c6f7419e1ee9cae9db39184","impliedFormat":1},{"version":"7d068fc64450fc5080da3772705441a48016e1022d15d1d738defa50cac446b8","impliedFormat":1},{"version":"4c3c31fba20394c26a8cfc2a0554ae3d7c9ba9a1bc5365ee6a268669851cfe19","impliedFormat":1},{"version":"584e168e0939271bcec62393e2faa74cff7a2f58341c356b3792157be90ea0f7","impliedFormat":1},{"version":"50b6829d9ef8cf6954e0adf0456720dd3fd16f01620105072bae6be3963054d1","impliedFormat":1},{"version":"a72a2dd0145eaf64aa537c22af8a25972c0acf9db1a7187fa00e46df240e4bb0","impliedFormat":1},{"version":"0008a9f24fcd300259f8a8cd31af280663554b67bf0a60e1f481294615e4c6aa","impliedFormat":1},{"version":"21738ef7b3baf3065f0f186623f8af2d695009856a51e1d2edf9873cee60fe3a","impliedFormat":1},{"version":"19c9f153e001fb7ab760e0e3a5df96fa8b7890fc13fc848c3b759453e3965bf0","impliedFormat":1},{"version":"5d3a82cef667a1cff179a0a72465a34a6f1e31d3cdba3adce27b70b85d69b071","impliedFormat":1},{"version":"38763534c4b9928cd33e7d1c2141bc16a8d6719e856bf88fda57ef2308939d82","impliedFormat":1},{"version":"292ec7e47dfc1f6539308adc8a406badff6aa98c246f57616b5fa412d58067f8","impliedFormat":1},{"version":"a11ee86b5bc726da1a2de014b71873b613699cfab8247d26a09e027dee35e438","impliedFormat":1},{"version":"95a595935eecbce6cc8615c20fafc9a2d94cf5407a5b7ff9fa69850bbef57169","impliedFormat":1},{"version":"c42fc2b9cf0b6923a473d9c85170f1e22aa098a2c95761f552ec0b9e0a620d69","impliedFormat":1},{"version":"8c9a55357196961a07563ac00bb6434c380b0b1be85d70921cd110b5e6db832d","impliedFormat":1},{"version":"73149a58ebc75929db972ab9940d4d0069d25714e369b1bc6e33bc63f1f8f094","impliedFormat":1},{"version":"c98f5a640ffecf1848baf321429964c9db6c2e943c0a07e32e8215921b6c36c3","impliedFormat":1},{"version":"43738308660af5cb4a34985a2bd18e5e2ded1b2c8f8b9c148fca208c5d2768a6","impliedFormat":1},{"version":"bb4fa3df2764387395f30de00e17d484a51b679b315d4c22316d2d0cd76095d6","impliedFormat":1},{"version":"0498a3d27ec7107ba49ecc951e38c7726af555f438bab1267385677c6918d8ec","impliedFormat":1},{"version":"fe24f95741e98d4903772dc308156562ae7e4da4f3845e27a10fab9017edae75","impliedFormat":1},{"version":"b63482acb91346b325c20087e1f2533dc620350bf7d0aa0c52967d3d79549523","impliedFormat":1},{"version":"2aef798b8572df98418a7ac4259b315df06839b968e2042f2b53434ee1dc2da4","impliedFormat":1},{"version":"249c41965bd0c7c5b987f242ac9948a2564ef92d39dde6af1c4d032b368738b0","impliedFormat":1},{"version":"7141b7ffd1dcd8575c4b8e30e465dd28e5ae4130ff9abd1a8f27c68245388039","impliedFormat":1},{"version":"d1dd80825d527d2729f4581b7da45478cdaaa0c71e377fd2684fb477761ea480","impliedFormat":1},{"version":"e78b1ba3e800a558899aba1a50704553cf9dc148036952f0b5c66d30b599776d","impliedFormat":1},{"version":"be4ccea4deb9339ca73a5e6a8331f644a6b8a77d857d21728e911eb3271a963c","impliedFormat":1},{"version":"3ee5a61ffc7b633157279afd7b3bd70daa989c8172b469d358aed96f81a078ef","impliedFormat":1},{"version":"23c63869293ca315c9e8eb9359752704068cc5fff98419e49058838125d59b1e","impliedFormat":1},{"version":"af0a68781958ab1c73d87e610953bd70c062ddb2ab761491f3e125eadef2a256","impliedFormat":1},{"version":"c20c624f1b803a54c5c12fdd065ae0f1677f04ffd1a21b94dddee50f2e23f8ec","impliedFormat":1},{"version":"49ef6d2d93b793cc3365a79f31729c0dc7fc2e789425b416b1a4a5654edb41ac","impliedFormat":1},{"version":"c2151736e5df2bdc8b38656b2e59a4bb0d7717f7da08b0ae9f5ddd1e429d90a1","impliedFormat":1},{"version":"3f1baacc3fc5e125f260c89c1d2a940cdccb65d6adef97c9936a3ac34701d414","impliedFormat":1},{"version":"3603cbabe151a2bea84325ce1ea57ca8e89f9eb96546818834d18fb7be5d4232","impliedFormat":1},{"version":"989762adfa2de753042a15514f5ccc4ed799b88bdc6ac562648972b26bc5bc60","impliedFormat":1},{"version":"a23f251635f89a1cc7363cae91e578073132dc5b65f6956967069b2b425a646a","impliedFormat":1},{"version":"995ed46b1839b3fc9b9a0bd5e7572120eac3ba959fa8f5a633be9bcded1f87ae","impliedFormat":1},{"version":"ddabaf119da03258aa0a33128401bbb91c54ef483e9de0f87be1243dd3565144","impliedFormat":1},{"version":"4e79855295a233d75415685fa4e8f686a380763e78a472e3c6c52551c6b74fd3","impliedFormat":1},{"version":"3b036f77ed5cbb981e433f886a07ec719cf51dd6c513ef31e32fd095c9720028","impliedFormat":1},{"version":"ee58f8fca40561d30c9b5e195f39dbc9305a6f2c8e1ff2bf53204cacb2cb15c0","impliedFormat":1},{"version":"83ac7ceab438470b6ddeffce2c13d3cf7d22f4b293d1e6cdf8f322edcd87a393","impliedFormat":1},{"version":"ef0e7387c15b5864b04dd9358513832d1c93b15f4f07c5226321f5f17993a0e2","impliedFormat":1},{"version":"86b6a71515872d5286fbcc408695c57176f0f7e941c8638bcd608b3718a1e28c","impliedFormat":1},{"version":"be59c70c4576ea08eee55cf1083e9d1f9891912ef0b555835b411bc4488464d4","impliedFormat":1},{"version":"57c97195e8efcfc808c41c1b73787b85588974181349b6074375eb19cc3bba91","impliedFormat":1},{"version":"d7cafcc0d3147486b39ac4ad02d879559dd3aa8ac4d0600a0c5db66ab621bdf3","impliedFormat":1},{"version":"b5c8e50e4b06f504513ca8c379f2decb459d9b8185bdcd1ee88d3f7e69725d3b","impliedFormat":1},{"version":"122621159b4443b4e14a955cf5f1a23411e6a59d2124d9f0d59f3465eddc97ec","impliedFormat":1},{"version":"c4889859626d56785246179388e5f2332c89fa4972de680b9b810ab89a9502cd","impliedFormat":1},{"version":"e9395973e2a57933fcf27b0e95b72cb45df8ecc720929ce039fc1c9013c5c0dc","impliedFormat":1},{"version":"a81723e440f533b0678ce5a3e7f5046a6bb514e086e712f9be98ebef74bd39b8","impliedFormat":1},{"version":"298d10f0561c6d3eb40f30001d7a2c8a5aa1e1e7e5d1babafb0af51cc27d2c81","impliedFormat":1},{"version":"e256d96239faffddf27f67ff61ab186ad3adaa7d925eeaf20ba084d90af1df19","impliedFormat":1},{"version":"8357843758edd0a0bd1ef4283fcabb50916663cf64a6a0675bd0996ae5204f3d","impliedFormat":1},{"version":"1525d7dd58aad8573ae1305cc30607d35c9164a8e2b0b14c7d2eaea44143f44b","impliedFormat":1},{"version":"fd19dff6b77e377451a1beacb74f0becfee4e7f4c2906d723570f6e7382bd46f","impliedFormat":1},{"version":"3f3ef670792214404589b74e790e7347e4e4478249ca09db51dc8a7fca6c1990","impliedFormat":1},{"version":"0da423d17493690db0f1adc8bf69065511c22dd99c478d9a2b59df704f77301b","impliedFormat":1},{"version":"ba627cd6215902dbe012e96f33bd4bf9ad0eefc6b14611789c52568cf679dc07","impliedFormat":1},{"version":"5fce817227cd56cb5642263709b441f118e19a64af6b0ed520f19fa032bdb49e","impliedFormat":1},{"version":"754107d580b33acc15edffaa6ac63d3cdf40fb11b1b728a2023105ca31fcb1a8","impliedFormat":1},{"version":"03cbeabd581d540021829397436423086e09081d41e3387c7f50df8c92d93b35","impliedFormat":1},{"version":"91322bf698c0c547383d3d1a368e5f1f001d50b9c3c177de84ab488ead82a1b8","impliedFormat":1},{"version":"79337611e64395512cad3eb04c8b9f50a2b803fa0ae17f8614f19c1e4a7eef8d","impliedFormat":1},{"version":"6835fc8e288c1a4c7168a72a33cb8a162f5f52d8e1c64e7683fc94f427335934","impliedFormat":1},{"version":"a90a83f007a1dece225eb2fd59b41a16e65587270bd405a2eb5f45aa3d2b2044","impliedFormat":1},{"version":"320333b36a5e801c0e6cee69fb6edc2bcc9d192cd71ee1d28c4b46467c69d0b4","impliedFormat":1},{"version":"e4e2457e74c4dc9e0bb7483113a6ba18b91defc39d6a84e64b532ad8a4c9951c","impliedFormat":1},{"version":"c39fb1745e021b123b512b86c41a96497bf60e3c8152b167da11836a6e418fd7","impliedFormat":1},{"version":"95ab9fb3b863c4f05999f131c0d2bd44a9de8e7a36bb18be890362aafa9f0a26","impliedFormat":1},{"version":"c95da8d445b765b3f704c264370ac3c92450cefd9ec5033a12f2b4e0fca3f0f4","impliedFormat":1},{"version":"ac534eb4f4c86e7bef6ed3412e7f072ec83fe36a73e79cbf8f3acb623a2447bb","impliedFormat":1},{"version":"a2a295f55159b84ca69eb642b99e06deb33263b4253c32b4119ea01e4e06a681","impliedFormat":1},{"version":"271584dd56ae5c033542a2788411e62a53075708f51ee4229c7f4f7804b46f98","impliedFormat":1},{"version":"f8fe7bba5c4b19c5e84c614ffcd3a76243049898678208f7af0d0a9752f17429","impliedFormat":1},{"version":"bad7d161bfe5943cb98c90ec486a46bf2ebc539bd3b9dbc3976968246d8c801d","impliedFormat":1},{"version":"be1f9104fa3890f1379e88fdbb9e104e5447ac85887ce5c124df4e3b3bc3fece","impliedFormat":1},{"version":"2d38259c049a6e5f2ea960ff4ad0b2fb1f8d303535afb9d0e590bb4482b26861","impliedFormat":1},{"version":"ae07140e803da03cc30c595a32bb098e790423629ab94fdb211a22c37171af5a","impliedFormat":1},{"version":"b0b6206f9b779be692beab655c1e99ec016d62c9ea6982c7c0108716d3ebb2ec","impliedFormat":1},{"version":"cc39605bf23068cbec34169b69ef3eb1c0585311247ceedf7a2029cf9d9711bd","impliedFormat":1},{"version":"132d600b779fb52dba5873aadc1e7cf491996c9e5abe50bcbc34f5e82c7bfe8a","impliedFormat":1},{"version":"429a4b07e9b7ff8090cc67db4c5d7d7e0a9ee5b9e5cd4c293fd80fca84238f14","impliedFormat":1},{"version":"4ffb10b4813cdca45715d9a8fc8f54c4610def1820fae0e4e80a469056e3c3d5","impliedFormat":1},{"version":"673a5aa23532b1d47a324a6945e73a3e20a6ec32c7599e0a55b2374afd1b098d","impliedFormat":1},{"version":"a70d616684949fdff06a57c7006950592a897413b2d76ec930606c284f89e0b9","impliedFormat":1},{"version":"ddfff10877e34d7c341cb85e4e9752679f9d1dd03e4c20bf2a8d175eda58d05b","impliedFormat":1},{"version":"d4afbe82fbc4e92c18f6c6e4007c68e4971aca82b887249fdcb292b6ae376153","impliedFormat":1},{"version":"9a6a791ca7ed8eaa9a3953cbf58ec5a4211e55c90dcd48301c010590a68b945e","impliedFormat":1},{"version":"10098d13345d8014bbfd83a3f610989946b3c22cdec1e6b1af60693ab6c9f575","impliedFormat":1},{"version":"0b5880de43560e2c042c5337f376b1a0bdae07b764a4e7f252f5f9767ebad590","impliedFormat":1},"8dcb06b2b6e1e77d025c96263575e97b4d9cc4fc7c4c733cc356b0257b4eff72","26179cb75833f0ba6807e664a81873590f808b928de15f00cd2facd1fb606690",{"version":"8dd450de6d756cee0761f277c6dc58b0b5a66b8c274b980949318b8cad26d712","impliedFormat":99},{"version":"ec69ebd1c4850514ebb6724911ad56e71caa0d076891ed6b67cb10d3ebbf2586","impliedFormat":99},{"version":"89783bd45ab35df55203b522f8271500189c3526976af533a599a86caaf31362","impliedFormat":99},{"version":"26e6c521a290630ea31f0205a46a87cab35faac96e2b30606f37bae7bcda4f9d","impliedFormat":99},"9b346378821ba06f9501e4571fd7678cd8819d6833f833daff72bec699565c06","20762e1e3766e172f1357cd39261a22ec4898ae2f7458ad649505aa01403b633",{"version":"9c580c6eae94f8c9a38373566e59d5c3282dc194aa266b23a50686fe10560159","impliedFormat":99},"a9c10c0777c08c857c2d3e820df73c18143d5f50d08849f75bda6f489a7ad02c","c32d07187e8595de5b34fea7ebf02816a99b20a263bbfb7fb7417fdde9994913","483ed23f445e11045dd4e77e0c83851dde212175c4530db391eba05304e816ec","a7f26795146d24bf928aff5e43fa5eb4fe421ff80bef7e33e4e075d764918904",{"version":"91b4ce96f6ad631a0a6920eb0ab928159ff01a439ae0e266ecdc9ea83126a195","impliedFormat":1},{"version":"e3448881d526bfca052d5f9224cc772f61d9fc84d0c52eb7154b13bd4db9d8b2","impliedFormat":1},{"version":"e348f128032c4807ad9359a1fff29fcbc5f551c81be807bfa86db5a45649b7ba","impliedFormat":1},{"version":"42f4d7040a48e5b9c9b20b5f17a04c381676211bdb0b5a580a183cf5908664be","impliedFormat":1},{"version":"d4e4fbb20d20cc5b9f4c85f2357f27cb233cd01f8ca6d85dcca905ec15143e06","impliedFormat":1},{"version":"c2fc483dea0580d1266c1500f17e49a739ca6cfe408691da638ddc211dfffad0","impliedFormat":1},{"version":"dfc8ab0e4a452b8361ccf895ab998bbf27d1f7608fae372ac6aa7f089ef7f68d","impliedFormat":1},{"version":"cca630c92b5382a0677d2dedca95e4e08a0cae660181d6d0dd8fd8bdb104d745","impliedFormat":1},{"version":"801cdc85f84235c3c9d4252b87db1ed3d5b2950898fa0b913fcc54d489bc15b5","impliedFormat":1},{"version":"c16c3b97930e8fbf05022024f049d51c998dd5eb6509047e1f841777968e85c1","impliedFormat":1},{"version":"cce15e7530c8062dea0666a174f31c1fe445a97357885480748b072778fc6f36","impliedFormat":1},{"version":"535b2fc8c89091c20124fe144699bb4a96d5db4418a1594a9a0a6a863b2195ae","impliedFormat":1},{"version":"dd5165bf834f6e784b4aad9fae6d84307c19f140829e4c6c4123b2d1a707d8bd","impliedFormat":1},{"version":"7ccf260729e19eed74c34046b38b6957bcfe4784d94f76eb830a70fc5d59cb43","impliedFormat":1},{"version":"21575cdeaca6a2c2a0beb8c2ecbc981d9deb95f879f82dc7d6e325fe8737b5ba","impliedFormat":1},{"version":"00343c2c578a0e32ecc384ed779ff39bc7ec6778ef84dc48106b602eb5598a6c","impliedFormat":1},{"version":"c333b496e7676a8b84c720bdece6c34621e3945b7d1710d6ed85d8b742852825","impliedFormat":1},{"version":"3eb7d541136cd8b66020417086e4f481fb1ae0e2b916846d43cbf0b540371954","impliedFormat":1},{"version":"b6fed756be83482969cd037fb707285d46cbb03a19dc576cff8179dc55540727","impliedFormat":1},{"version":"26602933b613e4df3868a6c82e14fffa2393a08531cb333ed27b151923462981","impliedFormat":1},{"version":"8fc19c7114cfd352ff9fb615028e6062cb9fa3cd59c4850bc6c5634b9f57ea27","impliedFormat":1},{"version":"05942150b4d7e0eb991776b1905487ecd94e7299847bb251419c99658363ff84","impliedFormat":1},{"version":"073c43eff28f369a05973364a5c466859867661670eb28e1b6f3dd0654dd0f0e","impliedFormat":1},{"version":"4a7c3274af9c78f7b4328f1e673dec81f48dd75da3bc159780fb4a13238b6684","impliedFormat":1},{"version":"3c863779b6de32f36d366465de6abe3a4066813074c6f8cad066a2e0db749525","impliedFormat":1},{"version":"259a3d89235d858b3d495dc2d1d610d6ce4ac0e91da1ae6a293f250d895d45dd","impliedFormat":1},{"version":"369b7270eeeb37982203b2cb18c7302947b89bf5818c1d3d2e95a0418f02b74e","impliedFormat":1},{"version":"f4c772371ce8ceaab394e1f8af9a6e502f0c02cbf184632dd6e64a00b8aeaf74","impliedFormat":1},{"version":"039bd8d1e0d151570b66e75ee152877fb0e2f42eca43718632ac195e6884be34","impliedFormat":1},{"version":"89fb1e22c3c98cbb86dc3e5949012bdae217f2b5d768a2cc74e1c4b413c25ad2","impliedFormat":1},{"version":"e850a4132ac216eaf1b876a79ef454083c4e96aaca534b5d25f22dac8ce3859a","impliedFormat":1},{"version":"58da08d1fe876c79c47dcf88be37c5c3fab55d97b34c8c09a666599a2191208d","impliedFormat":1},"78cdb63dff3ec7ef074ada630ff20a5d8004768b6cbe24ed134a8bfba12bafbb","69375e1cba1deddb0255a42c0eadea090ee836a14994e380310aaef6314c8bb8","6628e8fde207857b9ba08910d386eeea8213d7d745b4e0ae8b95332b52730db9",{"version":"71acd198e19fa38447a3cbc5c33f2f5a719d933fccf314aaff0e8b0593271324","impliedFormat":99},"9ec42c8a57e82311118b794318409ee02b2cebfa49ba6cce8457cff6448cd471","b08d2ea978d8ca240267434629f14bae43cfa58467cf3c7a13b3b07e9d5d104c","49d8311589b810b106aada8ef7b13f70b2b1f68cfce4e1458b7f31a191f420e9","886bd0abfbb54e4867dc93dd70e9852893b75c3ae91cae90ea83fd382c1a08b7","8c53498d0a63c1d300e81373547664143d2842e6d607c8d109154125a8e05155",{"version":"3bbb1c12d84dcfb73d5deb519b6e75c8f02c77b4de784a3f5ad9e991e1d0c7c6","signature":"cc848ef27f45edc9957dd8532f2fa10b736ccb5cdb85e3e3ae7c9d51f7a09c03"},"168baaa3ed19631718504c81746a4a4d500ecf1d2248bed767ef956a4ff4ae7e","ec9ffd3da96e940d52fbaee4dfaa050a771e32cf4ac5e1af058965e072780b6c","bb22d58922daf9515ca40a9d2cf83f2d721b52f3bbc63ba0af607b59bd46e1fa",{"version":"b12ef1105999342b9a44caa3cfb659ce0d60350a40328b094d4b1a7e1b550086","signature":"133b97274485d95649794fc2353a498710c3f457be11451dbe7f4c728844b3eb"},{"version":"dfcf16e716338e9fe8cf790ac7756f61c85b83b699861df970661e97bf482692","impliedFormat":99},"463a65dfd0ef37f158a963ce640ea6c42f46ef10d7e65d721fbc91b89a1651ec","f2aea81d8baf2b621945382aabac150e3db40f20d19ac1abea7aff805f1dc33c",{"version":"260f551168be7a50e7f1d4588574894683709dad712e60cd31282f5ee31c1fa2","impliedFormat":99},"1c5d0b242d0513848f4bfa9b57ba7f438d9b1120617029941bfaa137196ecead","ab38838f86722b4b1fddb73d5db76dd4018428e660f0eb65f5bffbd37cf2b8b4","5366ced284c386673950517f5d4707a848eb06bce2832e93c57bf7151fae0321","2f849ef6b0eea14ed7b95add320867f763119ed548912f6fbb6d38b7a8924212","7acb1fdbfdcd0ed10faa39382493a9dea79f437179eb7f0dda0fc860905eab96",{"version":"9d3e1ec886ae99f5b679e22dab641ac847860f552ee75193bd899c17b606f9b1","signature":"63fe23285ab19575e6ecaa4b235d3ea949f25d415b9662e81aa2dd10d176d076"},{"version":"8085954ba165e611c6230596078063627f3656fed3fb68ad1e36a414c4d7599a","impliedFormat":99},"e8672934f1c315f36cdae39380454ba8c2da62aca420dfb827d96693091419c4","49a561133db79856ae9a6399b4b95074eee6158f6a6a90367cae612cb3472bb9",{"version":"f014493efd0ebbeb7208c9c1287a888d1af91e3cfec0cb923bd6fa9edd03fd2b","impliedFormat":99},"8795c9fac7c48d565ff6c47cbf4cca8bfefe25d8cb3d7e7aeba36855739a76ab","5e34a4641efbf219240f9a415fcda9d0b40b48ceddcff532da92916aab7c7efe","c3345537c03244c789a1767020a0ea88ba108a42fa9c99051afa3ef7e2097cee",{"version":"bb703864a1bc9ca5ac3589ffd83785f6dc86f7f6c485c97d7ffd53438777cb9e","impliedFormat":1},"8bbb8ca040ac59ef47ba6138c8a7fe280452bde1ddd0dca001ad4c061bcff671","be2708a80d134051af193991bd0e1c6f53526c7d2bfc1fe82c8e3cca9659f5ec","c6a77c06bae7d77b9d3641ede49603af1c8e06406ef3279a78ac8e22589cf0b0","7480070a01ccd9f755029d6d1a582b8fc08fb36bd50612f37bfb1db888af3f79",{"version":"44e7734fb793dd9883946aabd1aea2eb623bbca181e74b1a1af1737cc69e5057","signature":"b013a1e2229bde713a517b22214dd8401f440ef026803c9479698c0a4f3389cd"},{"version":"a9373d52584b48809ffd61d74f5b3dfd127da846e3c4ee3c415560386df3994b","impliedFormat":99},{"version":"caf4af98bf464ad3e10c46cf7d340556f89197aab0f87f032c7b84eb8ddb24d9","impliedFormat":99},{"version":"7ec047b73f621c526468517fea779fec2007dd05baa880989def59126c98ef79","impliedFormat":99},{"version":"8dd450de6d756cee0761f277c6dc58b0b5a66b8c274b980949318b8cad26d712","impliedFormat":99},{"version":"904d6ad970b6bd825449480488a73d9b98432357ab38cf8d31ffd651ae376ff5","impliedFormat":99},{"version":"dfcf16e716338e9fe8cf790ac7756f61c85b83b699861df970661e97bf482692","impliedFormat":99},{"version":"31c30cc54e8c3da37c8e2e40e5658471f65915df22d348990d1601901e8c9ff3","impliedFormat":99},"043d56b77486e101a9a34f972e3d1a9903bd8837bb4474f6599e8fd8fd86d666",{"version":"ecd224c9132c9f44b2a93b9c4b6b29d839bef41df565fe2bc6f46a6f4f20d109","impliedFormat":99},"4c395ef15549e46068eb3b32a2a10fb5bfdb01f6834a3c0231a218a529015c83","01e3a3508f43ffdef7ee9212a59b8431195f47bd7ea2c9544f0e2494ada426a0","c94b6d8c0041e17f07d46b37d34c02ee1d2d8ab191245f248bc2ef387ef25b5b","1d5b495d5b5f92bc962da8e6a14b21bae8d8e99b2e42e94d88e4b2c194c5cb04","7b8c7a952cf49e78aafe5f628c3bd90f7e01bd5602eb5d3650bef5727a8186d7","1ccc5209c9d0d495b98455e0c5b684ffa1ceb6e06af44a9eeac141aea19461d3","43aa90d272d386b88eb5e097f75939daea0b50458e2eef1704a2592fc04fcb0c","52747b4c614c5e5e24b5a16fa6d3b1f41d7792087908cde87be062ea5e37944e","354d449811730eae3b133b1b33f3b589016b91c1e1db718f3ce5e9dede4e62c3","ef471b24e8be09dfd4a349f037406aeb0550935615088b5eb6100ec0bd780507","b5d822afe6f75e8e87dc0db6418497380ca66aef73ec8d6a0907cc5ab7ba2c53","9f3ef9b1a1c7f447d7503e951ca46434fbd7b688cde3e7dc83af47f848ed47c9","2b660788fd3e08babe3de974ee42d22a02fd6327ee5fd0c7eebabfb80cf94c8a",{"version":"7a14bf21ae8a29d64c42173c08f026928daf418bed1b97b37ac4bb2aa197b89b","impliedFormat":99},"e8469e599381cf021ce751c27cca3d8cb06440a45665ca9c2ef2efb0acef1fd9","0ac77635fcba6e5fe244cb8395e00d60638f5e207495eb4dffa45ebbe0140422","7f3d62c7012719f307ee4f8929ba7d964a02778773fdac7cb4fad9825303a2a6","de4e9fb0fd8e8ed10ea2e475ffe202a922ffe77e3f3edb2c517b0781447ad1b4","2e290bf35739ec73ee91479e221b0c0f7827170de13968033c19a2f445390432","933f0ff465d468aab2a62ddc147c1554d39b9dfcb20026d16d348c661262ed85","82862546cefe8c7f374dcb40b44436717d8e8cbb5a77ee5ba2c86c5a349d138d","e257d68c7a963187bad245322b73e48149d6b3988b1cba8eea5c45b31b129173",{"version":"7e3373dde2bba74076250204bd2af3aa44225717435e46396ef076b1954d2729","impliedFormat":1},{"version":"1c3dfad66ff0ba98b41c98c6f41af096fc56e959150bc3f44b2141fb278082fd","impliedFormat":1},{"version":"56208c500dcb5f42be7e18e8cb578f257a1a89b94b3280c506818fed06391805","impliedFormat":1},{"version":"0c94c2e497e1b9bcfda66aea239d5d36cd980d12a6d9d59e66f4be1fa3da5d5a","impliedFormat":1},{"version":"eb9271b3c585ea9dc7b19b906a921bf93f30f22330408ffec6df6a22057f3296","impliedFormat":1},{"version":"82b7bf38f1bc606dc662c35b8c80905e40956e4c2212d523402ae925bd75de63","impliedFormat":1},{"version":"81be14ad77be99cea7343fdc92a0f4058bcdebaa789d944e04ce4f86f0ca5fbb","impliedFormat":1},{"version":"9f1e00eab512de990ba27afa8634ca07362192063315be1f8166bc3dcc7f0e0f","impliedFormat":1},{"version":"9674788d4c5fcbd55c938e6719177ac932c304c94e0906551cc57a7942d2b53b","impliedFormat":1},{"version":"86dac6ce3fcd0a069b67a1ac9abdbce28588ea547fd2b42d73c1a2b7841cf182","impliedFormat":1},{"version":"4d34fbeadba0009ed3a1a5e77c99a1feedec65d88c4d9640910ff905e4e679f7","impliedFormat":1},{"version":"2f3ec8a345eefed1af66b5975da98ccf3178d13ba9308359d34d2f7f87dd4c9c","impliedFormat":1},{"version":"8fcc5571404796a8fe56e5c4d05049acdeac9c7a72205ac15b35cb463916d614","impliedFormat":1},{"version":"a3b3a1712610260c7ab96e270aad82bd7b28a53e5776f25a9a538831057ff44c","impliedFormat":1},{"version":"33a2af54111b3888415e1d81a7a803d37fada1ed2f419c427413742de3948ff5","impliedFormat":1},{"version":"d5a4fca3b69f2f740e447efb9565eecdbbe4e13f170b74dd4a829c5c9a5b8ebf","impliedFormat":1},{"version":"56f1e1a0c56efce87b94501a354729d0a0898508197cb50ab3e18322eb822199","impliedFormat":1},{"version":"8960e8c1730aa7efb87fcf1c02886865229fdbf3a8120dd08bb2305d2241bd7e","impliedFormat":1},{"version":"27bf82d1d38ea76a590cbe56873846103958cae2b6f4023dc59dd8282b66a38a","impliedFormat":1},{"version":"0daaab2afb95d5e1b75f87f59ee26f85a5f8d3005a799ac48b38976b9b521e69","impliedFormat":1},{"version":"2c378d9368abcd2eba8c29b294d40909845f68557bc0b38117e4f04fc56e5f9c","impliedFormat":1},{"version":"bb220eaac1677e2ad82ac4e7fd3e609a0c7b6f2d6d9c673a35068c97f9fcd5cd","affectsGlobalScope":true,"impliedFormat":1},{"version":"c60b14c297cc569c648ddaea70bc1540903b7f4da416edd46687e88a543515a1","impliedFormat":1},{"version":"d03cf6cd011da250c9a67c35a3378de326f6136c4192a90dd11f3a84627b4ef6","impliedFormat":1},{"version":"9c0217750253e3bf9c7e3821e51cff04551c00e63258d5e190cf8bd3181d5d4a","impliedFormat":1},{"version":"5c2e7f800b757863f3ddf1a98d7521b8da892a95c1b2eafb48d652a782891677","impliedFormat":1},{"version":"73ed3ff18ca862b9d7272de3b0d137d284a0c40e1c94cbf37acd5270ce9b7cd6","impliedFormat":1},{"version":"c61d8275c35a76cb12c271b5fa8707bb46b1e5778a370fd6037c244c4df6a725","impliedFormat":1},{"version":"c7793cb5cd2bef461059ca340fbcd19d7ddac7ab3dcc6cd1c90432fca260a6ae","impliedFormat":1},{"version":"fd3bf6d545e796ebd31acc33c3b20255a5bc61d963787fc8473035ea1c09d870","impliedFormat":1},{"version":"c7af51101b509721c540c86bb5fc952094404d22e8a18ced30c38a79619916fa","impliedFormat":1},{"version":"59c8f7d68f79c6e3015f8aee218282d47d3f15b85e5defc2d9d1961b6ffed7a0","impliedFormat":1},{"version":"93a2049cbc80c66aa33582ec2648e1df2df59d2b353d6b4a97c9afcbb111ccab","impliedFormat":1},{"version":"d04d359e40db3ae8a8c23d0f096ad3f9f73a9ef980f7cb252a1fdc1e7b3a2fb9","impliedFormat":1},{"version":"84aa4f0c33c729557185805aae6e0df3bd084e311da67a10972bbcf400321ff0","impliedFormat":1},{"version":"cf6cbe50e3f87b2f4fd1f39c0dc746b452d7ce41b48aadfdb724f44da5b6f6ed","impliedFormat":1},{"version":"3cf494506a50b60bf506175dead23f43716a088c031d3aa00f7220b3fbcd56c9","impliedFormat":1},{"version":"f2d47126f1544c40f2b16fc82a66f97a97beac2085053cf89b49730a0e34d231","impliedFormat":1},{"version":"724ac138ba41e752ae562072920ddee03ba69fe4de5dafb812e0a35ef7fb2c7e","impliedFormat":1},{"version":"e4eb3f8a4e2728c3f2c3cb8e6b60cadeb9a189605ee53184d02d265e2820865c","impliedFormat":1},{"version":"f16cb1b503f1a64b371d80a0018949135fbe06fb4c5f78d4f637b17921a49ee8","impliedFormat":1},{"version":"f4808c828723e236a4b35a1415f8f550ff5dec621f81deea79bf3a051a84ffd0","impliedFormat":1},{"version":"3b810aa3410a680b1850ab478d479c2f03ed4318d1e5bf7972b49c4d82bacd8d","impliedFormat":1},{"version":"0ce7166bff5669fcb826bc6b54b246b1cf559837ea9cc87c3414cc70858e6097","impliedFormat":1},{"version":"90ae889ba2396d54fe9c517fcb0d5a8923d3023c3e6cbd44676748045853d433","impliedFormat":1},{"version":"3549400d56ee2625bb5cc51074d3237702f1f9ffa984d61d9a2db2a116786c22","impliedFormat":1},{"version":"5ffe02488a8ffd06804b75084ecc66b512f85186508e7c9b57b5335283b1f487","impliedFormat":1},{"version":"b60f6734309d20efb9b0e0c7e6e68282ee451592b9c079dd1a988bb7a5eeb5e7","impliedFormat":1},{"version":"f4187a4e2973251fd9655598aa7e6e8bba879939a73188ee3290bb090cc46b15","impliedFormat":1},{"version":"44c1a26f578277f8ccef3215a4bd642a0a4fbbaf187cf9ae3053591c891fdc9c","impliedFormat":1},{"version":"a5989cd5e1e4ca9b327d2f93f43e7c981f25ee12a81c2ebde85ec7eb30f34213","impliedFormat":1},{"version":"f65b8fa1532dfe0ef2c261d63e72c46fe5f089b28edcd35b3526328d42b412b8","impliedFormat":1},{"version":"1060083aacfc46e7b7b766557bff5dafb99de3128e7bab772240877e5bfe849d","impliedFormat":1},{"version":"1b32f14ef9e26be36776d6115d3661747508a3437f5bb2528a39ce60f622b5aa","impliedFormat":1},{"version":"9ee50ea4e24ac33273880940358802dd98baddf27173f19ea061752eb192c44d","impliedFormat":1},{"version":"111e1ef247e53abc607bd921154a477a4b19b3e876abb79c672012f06f69b368","impliedFormat":1},{"version":"7ec569bb000dbd2ae79f6e5888fa16765a7c579936054a4f50b021eaf31b0998","impliedFormat":1},{"version":"dd0b9b00a39436c1d9f7358be8b1f32571b327c05b5ed0e88cc91f9d6b6bc3c9","impliedFormat":1},{"version":"a951a7b2224a4e48963762f155f5ad44ca1145f23655dde623ae312d8faeb2f2","impliedFormat":1},{"version":"f7eb7fc7e7c956605835e5bbbdfc4b6d1c36f1d41a162bfffba4540eae5d4257","impliedFormat":1},{"version":"cf7698e227b8f0e3373106ef29db72fc52661c0fdaa823205fbfc357985ec219","impliedFormat":1},{"version":"9f20de1b5776e653764e55f059d02ef460d7e2c064c304bfda1d7ba2dda43886","impliedFormat":1},{"version":"890ed5cccf66fdced5795066488cd006379dfc84b1670e459f03d40c625341ca","impliedFormat":1},{"version":"d8e8ab0dbaee5220b21dfbbb33fefc684ef4d87b07743a998f39e9d88ffe9776","impliedFormat":1},{"version":"977aeb024f773799d20985c6817a4c0db8fed3f601982a52d4093e0c60aba85f","impliedFormat":1},{"version":"d59cf5116848e162c7d3d954694f215b276ad10047c2854ed2ee6d14a481411f","impliedFormat":1},{"version":"50098be78e7cbfc324dfc04983571c80539e55e11a0428f83a090c13c41824a2","impliedFormat":1},{"version":"40894bcf307f326ec4d371cd2ff304dac0fa303d1c6c71ad7dc65742239114da","impliedFormat":1},{"version":"dd6051c7b02af0d521857069c49897adb8595d1f0e94487d53ebc157294ef864","impliedFormat":1},{"version":"79c6a11f75a62151848da39f6098549af0dd13b22206244961048326f451b2a8","impliedFormat":1},"e699b3f96ea736b226a0ac41cc35d8a89dcef1eb954da801746826f10f9f52ef","18907cfead3eea1fcf742f5b91e3a1df650965b9586344b5c66f633d03bd7a4e","73139a48e091467910386ec9a89a7b2a95b88897acd855075ecdb0f1756eeff7","f8c9b59ecfb5abc3ff984c8b59f2e265113f4a9bae99a3f39f88bf08c4b14f03","f41c11fc13e9a1f1b849349cb51b137ddd27de0a17c5339675c789d58f556cc4",{"version":"f2297027f0d68788a2925b8f6148e5ab42ec2a1b639c9887c87ce602af5468fa","signature":"9f320789005e8a64a9f02f6db527ef3dde3b5208fc4ccf2d79c5c70571e7874b"},"cd6600c6203fcd5747f7fe811162fa7851569332f5237c18c3e33fafce8c4ba8",{"version":"2535fc1a5fe64892783ff8f61321b181c24f824e688a4a05ae738da33466605b","impliedFormat":99},"29a217781737bbf5c430859b3de46097a44ada81c4143c2d05543d2167de0ee1","2dd6dceeb8b3633e2a98138baf9aaca300c829161a61e7c5a029f279c5be59ce","0a0b93d806d31b2bda7fbd2f540c8babde72e0d4c0bfd15beb6144ff5b371e4a","34e81b83a88b9514aeb1b4b63aabd600a619d5b8b2ca6773ee028bf5f341d92b",{"version":"6a31539cdd8a77d8718358bee4fb2ce596a61f038b51004ab10a4dffc50aca6e","impliedFormat":1},"8343071aa4860d8ea8a70698d785a88c0f2c4bb115be9ba47d16f8ee4677080f","4f5e076450c0f03bca4cb100aa84f715f96379973a3f9be2a46a510de7114d4e","4e384f98b7d6b2d264c8778fbb0fa2265adf11ea76c46b2b25ea34aad58ea604","a3e45a05771d21adf4612069659b91a7893a687fe2ff846ca6c36a6201724d91","874081a038c797a02e9d239f6898833d2d7124fb6fede8523f79f7996a3ced9b","2a80c24dd34f0a4ca4d0ed2047d2d7c68c117bbed690f012ccad01d161651366",{"version":"e9b0f1c4d813c2347d375f0d8ca78cdebc5236863805402c7f68d41412084078","signature":"fcea5b5f9a6d9b1682d73dbd72132b8cb308c7a9fd5e93cd0d6efdb6e4bdba44"},"5000017db72dfebdad24375f7f0cc031d5569bb9b323d0d0497e00c347f97067","fc11ee302b46225c6cc3d8d42493543c463aad4d5c1262b4d8428e5560d4b7ed","914949bf3a652af40f20720a7791943b21e629dffdce1e244806584723e6776e","39d82d63150e3d759e5bb5893fb7f16d3fc37a752e0f7292e5f1ab78214745a0",{"version":"c390c968970a7634d4306da7a3d6d21f81d7a0d171cbafbe9f67f183b1fab2cb","signature":"3511cef78eda61cc292bb30862aaf04d932aaa13f5a8403229f6b2c21d65839c"},"23f7be382912ec87cdf1649335c102aeeb38d50b7c3368e31de3826c7b04a6c4","c49ec26f3d277d0bdfb911f3185510ce5c936bbe735359f3a2f206056a116a2f","515ec3273e99a7960e7b6e332e2d3c7115d631db818c8998628b18f7133576ea","ed2b46a6c246ab9134067c06e975ba638409df32ddbb8246d783a0982366533b",{"version":"9fb82bd3d98ee058108d3f5b69d1fdb5997d4eaca705a51ae418e9ec2e707e1d","signature":"edbeebd94e2885219e6a6de304469dabc78d99a8a0ec42547b62c5fa07ec6548"},"7101b2d63b5eb72a0729380182fb90b08986b2ad8a67d3f76adfec82f25ab94f","73d801dd3ad57d4fc0bdb68528ea688791823c6062c87800e97638f51b086c4e","cf0db9323a21d762b982d2d4d9d1cb083aa570c46dc9f5c76ac118769f2bf58f","ba96f227ac488e033c36be064b2ea42084760a1d6c6239ed98ff09ac43be0d52","4b3982f445380ee7e3d4ac94e3bf60c27c854d30060eacb518a8d69d26a36720","1a38067b94b98dab8b85bbdac4f3ae84a4e92a63eda4a09e5a07ca8e08e377f4",{"version":"2cef84bf00cbdb452fdc5d8ecfe7b8c0aa3fa788bdc4ad8961e2e636530dbb60","impliedFormat":99},{"version":"24104650185414f379d5cc35c0e2c19f06684a73de5b472bae79e0d855771ecf","impliedFormat":99},{"version":"799003c0ab928582fca04977f47b8d85b43a8de610f4eef0ad2d069fbb9f9399","impliedFormat":99},{"version":"b13dd41c344a23e085f81b2f5cd96792e6b35ae814f32b25e39d9841844ad240","impliedFormat":99},{"version":"17d8b4e6416e48b6e23b73d05fd2fde407e2af8fddbe9da2a98ede14949c3489","impliedFormat":99},{"version":"6d17b2b41f874ab4369b8e04bdbe660163ea5c8239785c850f767370604959e3","impliedFormat":99},{"version":"04b4c044c8fe6af77b6c196a16c41e0f7d76b285d036d79dcaa6d92e24b4982b","impliedFormat":99},{"version":"30bdeead5293c1ddfaea4097d3e9dd5a6b0bc59a1e07ff4714ea1bbe7c5b2318","impliedFormat":99},{"version":"e7df226dcc1b0ce76b32f160556f3d1550124c894aae2d5f73cefaaf28df7779","impliedFormat":99},{"version":"f2b7eef5c46c61e6e72fba9afd7cc612a08c0c48ed44c3c5518559d8508146a2","impliedFormat":99},{"version":"00f0ba57e829398d10168b7db1e16217f87933e61bd8612b53a894bd7d6371da","impliedFormat":99},{"version":"126b20947d9fa74a88bb4e9281462bda05e529f90e22d08ee9f116a224291e84","impliedFormat":99},{"version":"40d9e43acee39702745eb5c641993978ac40f227475eacc99a83ba893ad995db","impliedFormat":99},{"version":"8a66b69b21c8de9cb88b4b6d12f655d5b7636e692a014c5aa1bd81745c8c51d5","impliedFormat":99},{"version":"ebbb846bdd5a78fdacff59ae04cea7a097912aeb1a2b34f8d88f4ebb84643069","impliedFormat":99},{"version":"7321adb29ffd637acb33ee67ea035f1a97d0aa0b14173291cc2fd58e93296e04","impliedFormat":99},{"version":"320816f1a4211188f07a782bdb6c1a44555b3e716ce13018f528ad7387108d5f","impliedFormat":99},{"version":"b2cc8a474b7657f4a03c67baf6bff75e26635fd4b5850675e8cad524a09ddd0c","impliedFormat":99},{"version":"0d081e9dc251063cc69611041c17d25847e8bdbe18164baaa89b7f1f1633c0ab","impliedFormat":99},{"version":"a64c25d8f4ec16339db49867ea2324e77060782993432a875d6e5e8608b0de1e","impliedFormat":99},{"version":"0739310b6b777f3e2baaf908c0fbc622c71160e6310eb93e0d820d86a52e2e23","impliedFormat":99},{"version":"37b32e4eadd8cd3c263e7ac1681c58b2ac54f3f77bb34c5e4326cc78516d55a9","impliedFormat":99},{"version":"9b7a8974e028c4ed6f7f9abb969e3eb224c069fd7f226e26fcc3a5b0e2a1eba8","impliedFormat":99},{"version":"e8100b569926a5592146ed68a0418109d625a045a94ed878a8c5152b1379237c","impliedFormat":99},{"version":"594201c616c318b7f3149a912abd8d6bdf338d765b7bcbde86bca2e66b144606","impliedFormat":99},{"version":"03e380975e047c5c6ded532cf8589e6cc85abb7be3629e1e4b0c9e703f2fd36f","impliedFormat":99},{"version":"fae14b53b7f52a8eb3274c67c11f261a58530969885599efe3df0277b48909e1","impliedFormat":99},{"version":"c41206757c428186f2e0d1fd373915c823504c249336bdc9a9c9bbdf9da95fef","impliedFormat":99},{"version":"e961f853b7b0111c42b763a6aa46fc70d06a697db3d8ed69b38f7ba0ae42a62b","impliedFormat":99},{"version":"3db90f79e36bcb60b3f8de1bc60321026800979c150e5615047d598c787a64b7","impliedFormat":99},{"version":"639b6fb3afbb8f6067c1564af2bd284c3e883f0f1556d59bd5eb87cdbbdd8486","impliedFormat":99},{"version":"49795f5478cb607fd5965aa337135a8e7fd1c58bc40c0b6db726adf186dd403f","impliedFormat":99},{"version":"7d8890e6e2e4e215959e71d5b5bd49482cf7a23be68d48ea446601a4c99bd511","impliedFormat":99},{"version":"d56f72c4bb518de5702b8b6ae3d3c3045c99e0fd48b3d3b54c653693a8378017","impliedFormat":99},{"version":"4c9ac40163e4265b5750510d6d2933fb7b39023eed69f7b7c68b540ad960826e","impliedFormat":99},{"version":"8dfab17cf48e7be6e023c438a9cdf6d15a9b4d2fa976c26e223ba40c53eb8da8","impliedFormat":99},{"version":"38bdf7ccacfd8e418de3a7b1e3cecc29b5625f90abc2fa4ac7843a290f3bf555","impliedFormat":99},{"version":"9819e46a914735211fbc04b8dc6ba65152c62e3a329ca0601a46ba6e05b2c897","impliedFormat":99},{"version":"50f0dc9a42931fb5d65cdd64ba0f7b378aedd36e0cfca988aa4109aad5e714cb","impliedFormat":99},{"version":"894f23066f9fafccc6e2dd006ed5bd85f3b913de90f17cf1fe15a2eb677fd603","impliedFormat":99},{"version":"abdf39173867e6c2d6045f120a316de451bbb6351a6929546b8470ddf2e4b3b9","impliedFormat":99},{"version":"aa2cb4053f948fbd606228195bbe44d78733861b6f7204558bbee603202ee440","impliedFormat":99},{"version":"6911b41bfe9942ac59c2da1bbcbe5c3c1f4e510bf65cae89ed00f434cc588860","impliedFormat":99},{"version":"7b81bc4d4e2c764e85d869a8dd9fe3652b34b45c065482ac94ffaacc642b2507","impliedFormat":99},{"version":"895df4edb46ccdcbce2ec982f5eed292cf7ea3f7168f1efea738ee346feab273","impliedFormat":99},{"version":"8692bb1a4799eda7b2e3288a6646519d4cebb9a0bddf800085fc1bd8076997a0","impliedFormat":99},{"version":"239c9e98547fe99711b01a0293f8a1a776fc10330094aa261f3970aaba957c82","impliedFormat":99},{"version":"34833ec50360a32efdc12780ae624e9a710dd1fd7013b58c540abf856b54285a","impliedFormat":99},{"version":"647538e4007dcc351a8882067310a0835b5bb8559d1cfa5f378e929bceb2e64d","impliedFormat":99},{"version":"992d6b1abcc9b6092e5a574d51d441238566b6461ade5de53cb9718e4f27da46","impliedFormat":99},{"version":"938702305649bf1050bd79f3803cf5cc2904596fc1edd4e3b91033184eae5c54","impliedFormat":99},{"version":"1e931d3c367d4b96fe043e792196d9c2cf74f672ff9c0b894be54e000280a79d","impliedFormat":99},{"version":"05bec322ea9f6eb9efcd6458bb47087e55bd688afdd232b78379eb5d526816ed","impliedFormat":99},{"version":"4c449a874c2d2e5e5bc508e6aa98f3140218e78c585597a21a508a647acd780a","impliedFormat":99},{"version":"dae15e326140a633d7693e92b1af63274f7295ea94fb7c322d5cbe3f5e48be88","impliedFormat":99},{"version":"c2b0a869713bca307e58d81d1d1f4b99ebfc7ec8b8f17e80dde40739aa8a2bc6","impliedFormat":99},{"version":"6e4b4ff6c7c54fa9c6022e88f2f3e675eac3c6923143eb8b9139150f09074049","impliedFormat":99},{"version":"69559172a9a97bbe34a32bff8c24ef1d8c8063feb5f16a6d3407833b7ee504cf","impliedFormat":99},{"version":"86b94a2a3edcb78d9bfcdb3b382547d47cb017e71abe770c9ee8721e9c84857f","impliedFormat":99},{"version":"e3fafafda82853c45c0afc075fea1eaf0df373a06daf6e6c7f382f9f61b2deb3","impliedFormat":99},{"version":"a4ba4b31de9e9140bc49c0addddbfaf96b943a7956a46d45f894822e12bf5560","impliedFormat":99},{"version":"d8a7926fc75f2ed887f17bae732ee31a4064b8a95a406c87e430c58578ee1f67","impliedFormat":99},{"version":"9886ffbb134b0a0059fd82219eba2a75f8af341d98bc6331b6ef8a921e10ec68","impliedFormat":99},{"version":"c2ead057b70d0ae7b87a771461a6222ebdb187ba6f300c974768b0ae5966d10e","impliedFormat":99},{"version":"46687d985aed8485ab2c71085f82fafb11e69e82e8552cf5d3849c00e64a00a5","impliedFormat":99},{"version":"999ca66d4b5e2790b656e0a7ce42267737577fc7a52b891e97644ec418eff7ec","impliedFormat":99},{"version":"ec948ee7e92d0888f92d4a490fdd0afb27fbf6d7aabebe2347a3e8ac82c36db9","impliedFormat":99},{"version":"03ef2386c683707ce741a1c30cb126e8c51a908aa0acc01c3471fafb9baaacd5","impliedFormat":99},{"version":"66a372e03c41d2d5e920df5282dadcec2acae4c629cb51cab850825d2a144cea","impliedFormat":99},{"version":"ddf9b157bd4c06c2e4646c9f034f36267a0fbd028bd4738214709de7ea7c548b","impliedFormat":99},{"version":"3e795aac9be23d4ad9781c00b153e7603be580602e40e5228e2dafe8a8e3aba1","impliedFormat":99},{"version":"98c461ec5953dfb1b5d5bca5fee0833c8a932383b9e651ca6548e55f1e2c71c3","impliedFormat":99},{"version":"5c42107b46cb1d36b6f1dee268df125e930b81f9b47b5fa0b7a5f2a42d556c10","impliedFormat":99},{"version":"7e32f1251d1e986e9dd98b6ff25f62c06445301b94aeebdf1f4296dbd2b8652f","impliedFormat":99},{"version":"2f7e328dda700dcb2b72db0f58c652ae926913de27391bd11505fc5e9aae6c33","impliedFormat":99},{"version":"3de7190e4d37da0c316db53a8a60096dbcd06d1a50677ccf11d182fa26882080","impliedFormat":99},{"version":"a9d6f87e59b32b02c861aade3f4477d7277c30d43939462b93f48644fa548c58","impliedFormat":99},{"version":"2bce8fd2d16a9432110bbe0ba1e663fd02f7d8b8968cd10178ea7bc306c4a5df","impliedFormat":99},{"version":"798bedbf45a8f1e55594e6879cd46023e8767757ecce1d3feaa78d16ad728703","impliedFormat":99},{"version":"62723d5ac66f7ed6885a3931dd5cfa017797e73000d590492988a944832e8bc2","impliedFormat":99},{"version":"03db8e7df7514bf17fc729c87fff56ca99567b9aa50821f544587a666537c233","impliedFormat":99},{"version":"9b1f311ba4409968b68bf20b5d892dbd3c5b1d65c673d5841c7dbde351bc0d0b","impliedFormat":99},{"version":"2d1e8b5431502739fe335ceec0aaded030b0f918e758a5d76f61effa0965b189","impliedFormat":99},{"version":"e725839b8f884dab141b42e9d7ff5659212f6e1d7b4054caa23bc719a4629071","impliedFormat":99},{"version":"4fa38a0b8ae02507f966675d0a7d230ed67c92ab8b5736d99a16c5fbe2b42036","impliedFormat":99},{"version":"50ec1e8c23bad160ddedf8debeebc722becbddda127b8fdce06c23eacd3fe689","impliedFormat":99},{"version":"9a0aea3a113064fd607f41375ade308c035911d3c8af5ae9db89593b5ca9f1f9","impliedFormat":99},{"version":"8d643903b58a0bf739ce4e6a8b0e5fb3fbdfaacbae50581b90803934b27d5b89","impliedFormat":99},{"version":"19de2915ccebc0a1482c2337b34cb178d446def2493bf775c4018a4ea355adb8","impliedFormat":99},{"version":"9be8fc03c8b5392cd17d40fd61063d73f08d0ee3457ecf075dcb3768ae1427bd","impliedFormat":99},{"version":"a2d89a8dc5a993514ca79585039eea083a56822b1d9b9d9d85b14232e4782cbe","impliedFormat":99},{"version":"f526f20cae73f17e8f38905de4c3765287575c9c4d9ecacee41cfda8c887da5b","impliedFormat":99},{"version":"d9ec0978b7023612b9b83a71fee8972e290d02f8ff894e95cdd732cd0213b070","impliedFormat":99},{"version":"7ab10c473a058ec8ac4790b05cae6f3a86c56be9b0c0a897771d428a2a48a9f9","impliedFormat":99},{"version":"451d7a93f8249d2e1453b495b13805e58f47784ef2131061821b0e456a9fd0e1","impliedFormat":99},{"version":"21c56fe515d227ed4943f275a8b242d884046001722a4ba81f342a08dbe74ae2","impliedFormat":99},{"version":"d8311f0c39381aa1825081c921efde36e618c5cf46258c351633342a11601208","impliedFormat":99},{"version":"6b50c3bcc92dc417047740810596fcb2df2502aa3f280c9e7827e87896da168a","impliedFormat":99},{"version":"18a6b318d1e7b31e5749a52be0cf9bbce1b275f63190ef32e2c79db0579328ca","impliedFormat":99},{"version":"6a2d0af2c27b993aa85414f3759898502aa198301bc58b0d410948fe908b07b0","impliedFormat":99},{"version":"2da11b6f5c374300e5e66a6b01c3c78ec21b5d3fec0748a28cc28e00be73e006","impliedFormat":99},{"version":"0729691b39c24d222f0b854776b00530877217bfc30aac1dc7fa2f4b1795c536","impliedFormat":99},{"version":"ca45bb5c98c474d669f0e47615e4a5ae65d90a2e78531fda7862ee43e687a059","impliedFormat":99},{"version":"c1c058b91d5b9a24c95a51aea814b0ad4185f411c38ac1d5eef0bf3cebec17dc","impliedFormat":99},{"version":"3ab0ed4060b8e5b5e594138aab3e7f0262d68ad671d6678bcda51568d4fc4ccc","impliedFormat":99},{"version":"e2bf1faba4ff10a6020c41df276411f641d3fdce5c6bae1db0ec84a0bf042106","impliedFormat":99},{"version":"80b0a8fe14d47a71e23d7c3d4dcee9584d4282ef1d843b70cab1a42a4ea1588c","impliedFormat":99},{"version":"a0f02a73f6e3de48168d14abe33bf5970fdacdb52d7c574e908e75ad571e78f7","impliedFormat":99},{"version":"c728002a759d8ec6bccb10eed56184e86aeff0a762c1555b62b5d0fa9d1f7d64","impliedFormat":99},{"version":"586f94e07a295f3d02f847f9e0e47dbf14c16e04ccc172b011b3f4774a28aaea","impliedFormat":99},{"version":"cfe1a0f4ed2df36a2c65ea6bc235dbb8cf6e6c25feb6629989f1fa51210b32e7","impliedFormat":99},{"version":"8ba69c9bf6de79c177329451ffde48ddab7ec495410b86972ded226552f664df","impliedFormat":99},{"version":"15111cbe020f8802ad1d150524f974a5251f53d2fe10eb55675f9df1e82dbb62","impliedFormat":99},{"version":"782dc153c56a99c9ed07b2f6f497d8ad2747764966876dbfef32f3e27ce11421","impliedFormat":99},{"version":"cc2db30c3d8bb7feb53a9c9ff9b0b859dd5e04c83d678680930b5594b2bf99cb","impliedFormat":99},{"version":"46909b8c85a6fd52e0807d18045da0991e3bdc7373435794a6ba425bc23cc6be","impliedFormat":99},{"version":"e4e511ff63bb6bd69a2a51e472c6044298bca2c27835a34a20827bc3ef9b7d13","impliedFormat":99},{"version":"2c86f279d7db3c024de0f21cd9c8c2c972972f842357016bfbbd86955723b223","impliedFormat":99},{"version":"112c895cff9554cf754f928477c7d58a21191c8089bffbf6905c87fe2dc6054f","impliedFormat":99},{"version":"8cfc293b33082003cacbf7856b8b5e2d6dd3bde46abbd575b0c935dc83af4844","impliedFormat":99},{"version":"d2c5c53f85ce0474b3a876d76c4fc44ff7bb766b14ed1bf495f9abac181d7f5f","impliedFormat":99},{"version":"3c523f27926905fcbe20b8301a0cc2da317f3f9aea2273f8fc8d9ae88b524819","impliedFormat":99},{"version":"9ca0d706f6b039cc52552323aeccb4db72e600b67ddc7a54cebc095fc6f35539","impliedFormat":99},{"version":"a64909a9f75081342ddd061f8c6b49decf0d28051bc78e698d347bdcb9746577","impliedFormat":99},{"version":"7d8d55ae58766d0d52033eae73084c4db6a93c4630a3e17f419dd8a0b2a4dcd8","impliedFormat":99},{"version":"b8b5c8ba972d9ffff313b3c8a3321e7c14523fc58173862187e8d1cb814168ac","impliedFormat":99},{"version":"9c42c0fa76ee36cf9cc7cc34b1389fbb4bd49033ec124b93674ec635fabf7ffe","impliedFormat":99},{"version":"6184c8da9d8107e3e67c0b99dedb5d2dfe5ccf6dfea55c2a71d4037caf8ca196","impliedFormat":99},{"version":"4030ceea7bf41449c1b86478b786e3b7eadd13dfe5a4f8f5fe2eb359260e08b3","impliedFormat":99},{"version":"7bf516ec5dfc60e97a5bde32a6b73d772bd9de24a2e0ec91d83138d39ac83d04","impliedFormat":99},{"version":"e6a6fb3e6525f84edf42ba92e261240d4efead3093aca3d6eb1799d5942ba393","impliedFormat":99},{"version":"45df74648934f97d26800262e9b2af2f77ef7191d4a5c2eb1df0062f55e77891","impliedFormat":99},{"version":"3fe361e4e567f32a53af1f2c67ad62d958e3d264e974b0a8763d174102fe3b29","impliedFormat":99},{"version":"28b520acee4bc6911bfe458d1ad3ebc455fa23678463f59946ad97a327c9ab2b","impliedFormat":99},{"version":"121b39b1a9ad5d23ed1076b0db2fe326025150ef476dccb8bf87778fcc4f6dd7","impliedFormat":99},{"version":"f791f92a060b52aa043dde44eb60307938f18d4c7ac13df1b52c82a1e658953f","impliedFormat":99},{"version":"df09443e7743fd6adc7eb108e760084bacdf5914403b7aac5fbd4dc4e24e0c2c","impliedFormat":99},{"version":"eeb4ff4aa06956083eaa2aad59070361c20254b865d986bc997ee345dbd44cbb","impliedFormat":99},{"version":"ed84d5043444d51e1e5908f664addc4472c227b9da8401f13daa565f23624b6e","impliedFormat":99},{"version":"146bf888b703d8baa825f3f2fb1b7b31bda5dff803e15973d9636cdda33f4af3","impliedFormat":99},{"version":"b4ec8b7a8d23bdf7e1c31e43e5beac3209deb7571d2ccf2a9572865bf242da7c","impliedFormat":99},{"version":"3fba0d61d172091638e56fba651aa1f8a8500aac02147d29bd5a9cc0bc8f9ec2","impliedFormat":99},{"version":"a5a57deb0351b03041e0a1448d3a0cc5558c48e0ed9b79b69c99163cdca64ad8","impliedFormat":99},{"version":"9bcecf0cbc2bfc17e33199864c19549905309a0f9ecc37871146107aac6e05ae","impliedFormat":99},{"version":"d6a211db4b4a821e93c978add57e484f2a003142a6aef9dbfa1fe990c66f337b","impliedFormat":99},{"version":"bd4d10bd44ce3f630dd9ce44f102422cb2814ead5711955aa537a52c8d2cae14","impliedFormat":99},{"version":"08e4c39ab1e52eea1e528ee597170480405716bae92ebe7a7c529f490afff1e0","impliedFormat":99},{"version":"625bb2bc3867557ea7912bd4581288a9fca4f3423b8dffa1d9ed57fafc8610e3","impliedFormat":99},{"version":"d1992164ecc334257e0bef56b1fd7e3e1cea649c70c64ffc39999bb480c0ecdf","impliedFormat":99},{"version":"a53ff2c4037481eb357e33b85e0d78e8236e285b6428b93aa286ceea1db2f5dc","impliedFormat":99},{"version":"4fe608d524954b6857d78857efce623852fcb0c155f010710656f9db86e973a5","impliedFormat":99},{"version":"b53b62a9838d3f57b70cc456093662302abb9962e5555f5def046172a4fe0d4e","impliedFormat":99},{"version":"9866369eb72b6e77be2a92589c9df9be1232a1a66e96736170819e8a1297b61f","impliedFormat":99},{"version":"43abfbdf4e297868d780b8f4cfdd8b781b90ecd9f588b05e845192146a86df34","impliedFormat":99},{"version":"582419791241fb851403ae4a08d0712a63d4c94787524a7419c2bc8e0eb1b031","impliedFormat":99},{"version":"18437eeb932fe48590b15f404090db0ab3b32d58f831d5ffc157f63b04885ee5","impliedFormat":99},{"version":"0c5eaedf622d7a8150f5c2ec1f79ac3d51eea1966b0b3e61bfdea35e8ca213a7","impliedFormat":99},{"version":"fac39fc7a9367c0246de3543a6ee866a0cf2e4c3a8f64641461c9f2dac0d8aae","impliedFormat":99},{"version":"3b9f559d0200134f3c196168630997caedeadc6733523c8b6076a09615d5dec8","impliedFormat":99},{"version":"932af64286d9723da5ef7b77a0c4229829ce8e085e6bcc5f874cb0b83e8310d4","impliedFormat":99},{"version":"adeb9278f11f5561157feee565171c72fd48f5fe34ed06f71abf24e561fcaa1e","impliedFormat":99},{"version":"2269fef79b4900fc6b08c840260622ca33524771ff24fda5b9101ad98ea551f3","impliedFormat":99},{"version":"73d47498a1b73d5392d40fb42a3e7b009ae900c8423f4088c4faa663cc508886","impliedFormat":99},{"version":"7efc34cdc4da0968c3ba687bc780d5cacde561915577d8d1c1e46c7ac931d023","impliedFormat":99},{"version":"3c20a3bb0c50c819419f44aa55acc58476dad4754a16884cef06012d02b0722f","impliedFormat":99},{"version":"4569abf6bc7d51a455503670f3f1c0e9b4f8632a3b030e0794c61bfbba2d13be","impliedFormat":99},{"version":"98b2297b4dc1404078a54b61758d8643e4c1d7830af724f3ed2445d77a7a2d57","impliedFormat":99},{"version":"952ba89d75f1b589e07070fea2d8174332e3028752e76fd46e1c16cc51e6e2af","impliedFormat":99},{"version":"b6c9a2deefb6a57ff68d2a38d33c34407b9939487fc9ee9f32ba3ecf2987a88a","impliedFormat":99},{"version":"f6b371377bab3018dac2bca63e27502ecbd5d06f708ad7e312658d3b5315d948","impliedFormat":99},{"version":"31947dd8f1c8eeb7841e1f139a493a73bd520f90e59a6415375d0d8e6a031f01","impliedFormat":99},{"version":"95cd83b807e10b1af408e62caf5fea98562221e8ddca9d7ccc053d482283ddda","impliedFormat":99},{"version":"19287d6b76288c2814f1633bdd68d2b76748757ffd355e73e41151644e4773d6","impliedFormat":99},{"version":"fc4e6ec7dade5f9d422b153c5d8f6ad074bd9cc4e280415b7dc58fb5c52b5df1","impliedFormat":99},{"version":"3aea973106e1184db82d8880f0ca134388b6cbc420f7309d1c8947b842886349","impliedFormat":99},{"version":"765e278c464923da94dda7c2b281ece92f58981642421ae097862effe2bd30fa","impliedFormat":99},{"version":"de260bed7f7d25593f59e859bd7c7f8c6e6bb87e8686a0fcafa3774cb5ca02d8","impliedFormat":99},{"version":"b5c341ce978f5777fbe05bc86f65e9906a492fa6b327bda3c6aae900c22e76c6","impliedFormat":99},{"version":"686ddbfaf88f06b02c6324005042f85317187866ca0f8f4c9584dd9479653344","impliedFormat":99},{"version":"7f789c0c1db29dd3aab6e159d1ba82894a046bf8df595ac48385931ae6ad83e0","impliedFormat":99},{"version":"8eb3057d4fe9b59b2492921b73a795a2455ebe94ccb3d01027a7866612ead137","impliedFormat":99},{"version":"1e43c5d7aee1c5ec20611e28b5417f5840c75d048de9d7f1800d6808499236f8","impliedFormat":99},{"version":"d42610a5a2bee4b71769968a24878885c9910cd049569daa2d2ee94208b3a7a5","impliedFormat":99},{"version":"f6ed95506a6ed2d40ed5425747529befaa4c35fcbbc1e0d793813f6d725690fa","impliedFormat":99},{"version":"a6fcc1cd6583939506c906dff1276e7ebdc38fbe12d3e108ba38ad231bd18d97","impliedFormat":99},{"version":"ed13354f0d96fb6d5878655b1fead51722b54875e91d5e53ef16de5b71a0e278","impliedFormat":99},{"version":"1193b4872c1fb65769d8b164ca48124c7ebacc33eae03abf52087c2b29e8c46c","impliedFormat":99},{"version":"af682dfabe85688289b420d939020a10eb61f0120e393d53c127f1968b3e9f66","impliedFormat":99},{"version":"0dca04006bf13f72240c6a6a502df9c0b49c41c3cab2be75e81e9b592dcd4ea8","impliedFormat":99},{"version":"79d6ac4a2a229047259116688f9cd62fda25422dee3ad304f77d7e9af53a41ef","impliedFormat":99},{"version":"64534c17173990dc4c3d9388d16675a059aac407031cfce8f7fdffa4ee2de988","impliedFormat":99},{"version":"ba46d160a192639f3ca9e5b640b870b1263f24ac77b6895ab42960937b42dcbb","impliedFormat":99},{"version":"5e5ddd6fc5b590190dde881974ab969455e7fad61012e32423415ae3d085b037","impliedFormat":99},{"version":"1c16fd00c42b60b96fe0fa62113a953af58ddf0d93b0a49cb4919cf5644616f0","impliedFormat":99},{"version":"eb240c0e6b412c57f7d9a9f1c6cd933642a929837c807b179a818f6e8d3a4e44","impliedFormat":99},{"version":"4a7bde5a1155107fc7d9483b8830099f1a6072b6afda5b78d91eb5d6549b3956","impliedFormat":99},{"version":"3c1baaffa9a24cc7ef9eea6b64742394498e0616b127ca630aca0e11e3298006","impliedFormat":99},{"version":"87ca1c31a326c898fa3feb99ec10750d775e1c84dbb7c4b37252bcf3742c7b21","impliedFormat":99},{"version":"d7bd26af1f5457f037225602035c2d7e876b80d02663ab4ca644099ad3a55888","impliedFormat":99},{"version":"2ad0a6b93e84a56b64f92f36a07de7ebcb910822f9a72ad22df5f5d642aff6f3","impliedFormat":99},{"version":"523d1775135260f53f672264937ee0f3dc42a92a39de8bee6c48c7ea60b50b5a","impliedFormat":99},{"version":"e441b9eebbc1284e5d995d99b53ed520b76a87cab512286651c4612d86cd408e","impliedFormat":99},{"version":"76f853ee21425c339a79d28e0859d74f2e53dee2e4919edafff6883dd7b7a80f","impliedFormat":99},{"version":"00cf042cd6ba1915648c8d6d2aa00e63bbbc300ea54d28ed087185f0f662e080","impliedFormat":99},{"version":"f57e6707d035ab89a03797d34faef37deefd3dd90aa17d90de2f33dce46a2c56","impliedFormat":99},{"version":"cc8b559b2cf9380ca72922c64576a43f000275c72042b2af2415ce0fb88d7077","impliedFormat":99},{"version":"1a337ca294c428ba8f2eb01e887b28d080ee4a4307ae87e02e468b1d26af4a74","impliedFormat":99},{"version":"5a15362fc2e72765a908c0d4dd89e3ab3b763e8bc8c23f19234a709ecfd202fe","impliedFormat":99},{"version":"2dffdfe62ac8af0943853234519616db6fd8958fc7ff631149fd8364e663f361","impliedFormat":99},{"version":"5dbdb2b2229b5547d8177c34705272da5a10b8d0033c49efbc9f6efba5e617f2","impliedFormat":99},{"version":"6fc0498cd8823d139004baff830343c9a0d210c687b2402c1384fb40f0aa461c","impliedFormat":99},{"version":"8492306a4864a1dc6fc7e0cc0de0ae9279cbd37f3aae3e9dc1065afcdc83dddc","impliedFormat":99},{"version":"c011b378127497d6337a93f020a05f726db2c30d55dc56d20e6a5090f05919a6","impliedFormat":99},{"version":"f4556979e95a274687ae206bbab2bb9a71c3ad923b92df241d9ab88c184b3f40","impliedFormat":99},{"version":"50e82bb6e238db008b5beba16d733b77e8b2a933c9152d1019cf8096845171a4","impliedFormat":99},{"version":"d6011f8b8bbf5163ef1e73588e64a53e8bf1f13533c375ec53e631aad95f1375","impliedFormat":99},{"version":"693cd7936ac7acfa026d4bcb5801fce71cec49835ba45c67af1ef90dbfd30af7","impliedFormat":99},{"version":"195e2cf684ecddfc1f6420564535d7c469f9611ce7a380d6e191811f84556cd2","impliedFormat":99},{"version":"1dc6b6e7b2a7f2962f31c77f4713f3a5a132bbe14c00db75d557568fe82e4311","impliedFormat":99},{"version":"add93b1180e9aaac2dae4ef3b16f7655893e2ecbe62bd9e48366c305f0063d89","impliedFormat":99},{"version":"594bd896fe37c970aafb7a376ebeec4c0d636b62a5f611e2e27d30fb839ad8a5","impliedFormat":99},{"version":"b1c6a6faf60542ba4b4271db045d7faea56e143b326ef507d2797815250f3afc","impliedFormat":99},{"version":"8c8b165beb794260f462679329b131419e9f5f35212de11c4d53e6d4d9cbedf6","impliedFormat":99},{"version":"ee5a4cf57d49fcf977249ab73c690a59995997c4672bb73fcaaf2eed65dbd1b2","impliedFormat":99},{"version":"f9f36051f138ab1c40b76b230c2a12b3ce6e1271179f4508da06a959f8bee4c1","impliedFormat":99},{"version":"9dc2011a3573d271a45c12656326530c0930f92539accbec3531d65131a14a14","impliedFormat":99},{"version":"091521ce3ede6747f784ae6f68ad2ea86bbda76b59d2bf678bcad2f9d141f629","impliedFormat":99},{"version":"202c2be951f53bafe943fb2c8d1245e35ed0e4dfed89f48c9a948e4d186dd6d4","impliedFormat":99},{"version":"c618aead1d799dbf4f5b28df5a6b9ce13d72722000a0ec3fe90a8115b1ea9226","impliedFormat":99},{"version":"9b0bf59708549c3e77fddd36530b95b55419414f88bbe5893f7bc8b534617973","impliedFormat":99},{"version":"7e216f67c4886f1bde564fb4eebdd6b185f262fe85ad1d6128cad9b229b10354","impliedFormat":99},{"version":"cd51e60b96b4d43698df74a665aa7a16604488193de86aa60ec0c44d9f114951","impliedFormat":99},{"version":"b63341fb6c7ba6f2aeabd9fc46b43e6cc2d2b9eec06534cfd583d9709f310ec2","impliedFormat":99},{"version":"be2af50c81b15bcfe54ad60f53eb1c72dae681c72d0a9dce1967825e1b5830a3","impliedFormat":99},{"version":"be5366845dfb9726f05005331b9b9645f237f1ddc594c0def851208e8b7d297b","impliedFormat":99},{"version":"5ddd536aaeadd4bf0f020492b3788ed209a7050ce27abec4e01c7563ff65da81","impliedFormat":99},{"version":"e243b24da119c1ef0d79af2a45217e50682b139cb48e7607efd66cc01bd9dcda","impliedFormat":99},{"version":"5b1398c8257fd180d0bf62e999fe0a89751c641e87089a83b24392efda720476","impliedFormat":99},{"version":"1588b1359f8507a16dbef67cd2759965fc2e8d305e5b3eb71be5aa9506277dff","impliedFormat":99},{"version":"4c99f2524eee1ec81356e2b4f67047a4b7efaf145f1c4eb530cd358c36784423","impliedFormat":99},{"version":"b30c6b9f6f30c35d6ef84daed1c3781e367f4360171b90598c02468b0db2fc3d","impliedFormat":99},{"version":"79c0d32274ccfd45fae74ac61d17a2be27aea74c70806d22c43fc625b7e9f12a","impliedFormat":99},{"version":"1b7e3958f668063c9d24ac75279f3e610755b0f49b1c02bb3b1c232deb958f54","impliedFormat":99},{"version":"779d4022c3d0a4df070f94858a33d9ebf54af3664754536c4ce9fd37c6f4a8db","impliedFormat":99},{"version":"e662f063d46aa8c088edffdf1d96cb13d9a2cbf06bc38dc6fc62b4d125fb7b49","impliedFormat":99},{"version":"d1d612df1e41c90d9678b07740d13d4f8e6acec2f17390d4ff4be5c889a6d37d","impliedFormat":99},{"version":"c95933fe140918892d569186f17b70ef6b1162f851a0f13f6a89e8f4d599c5a1","impliedFormat":99},{"version":"1d8d30677f87c13c2786980a80750ac1e281bdb65aa013ea193766fe9f0edd74","impliedFormat":99},{"version":"4661673cbc984b8a6ee5e14875a71ed529b64e7f8e347e12c0db4cecc25ad67d","impliedFormat":99},{"version":"7f980a414274f0f23658baa9a16e21d828535f9eac538e2eab2bb965325841db","impliedFormat":99},{"version":"20fb747a339d3c1d4a032a31881d0c65695f8167575e01f222df98791a65da9b","impliedFormat":99},{"version":"dd4e7ebd3f205a11becf1157422f98db675a626243d2fbd123b8b93efe5fb505","impliedFormat":99},{"version":"43ec6b74c8d31e88bb6947bb256ad78e5c6c435cbbbad991c3ff39315b1a3dba","impliedFormat":99},{"version":"b27242dd3af2a5548d0c7231db7da63d6373636d6c4e72d9b616adaa2acef7e1","impliedFormat":99},{"version":"e0ee7ba0571b83c53a3d6ec761cf391e7128d8f8f590f8832c28661b73c21b68","impliedFormat":99},{"version":"072bfd97fc61c894ef260723f43a416d49ebd8b703696f647c8322671c598873","impliedFormat":99},{"version":"e70875232f5d5528f1650dd6f5c94a5bed344ecf04bdbb998f7f78a3c1317d02","impliedFormat":99},{"version":"8e495129cb6cd8008de6f4ff8ce34fe1302a9e0dcff8d13714bd5593be3f7898","impliedFormat":99},"c9cf8cce260ece149e7d2e96a102a7c99444cb91c14db2f2d54e73b78d7fd076","e1c78d311bd30252f30ad81e2bd4fa013d414760fe40ffc990176b43b1b3412b","6ffd1c2526e0fcc44538bb16a78560c2171db164ca6d6fba6643581d13aa7721","9cd1737318e7a6410eae583df541c659b47136fa199d4eb79cd97de12e72ecbd",{"version":"e421da4533e02196e467f6abe99d4d4cbf392e8e34ef850e71fe5881e26231df","signature":"5d5d7431f8fb6272d667272357f68f869b227dd5adf056b7034f8152db0d4a74"},"228a005d97624d493ee3c7fd883a2208ba6df3c57dc390e193b3652b09b284da","d0a791b6701baa4557a0fb3fb07d71f2d82b7c3f08acad77904266ad8e835e61",{"version":"4a5aa16151dbec524bb043a5cbce2c3fec75957d175475c115a953aca53999a9","impliedFormat":99},"17f2390d98e8ce4d9e90155eac1918266914d6a9ada7c276b5d1c917cef0e969","83d5055e4a4e350bbda6d0eb4c00dc2ba51aea094fd751400b36e5c777913df5","af1985f089828db9448bd1dd7dec3f6076c3c4baba5be445e1d381ca96d1bca8",{"version":"8079d851ffa1dbe193fe36643b3d67f4fdf8d360df4c900065788eff44bc15a7","impliedFormat":1},"d3d285231164bfc03ee6def25bdc59625ca6445292b31d12549e3a24f8870735","fae83103898526e9671aea70cfcaaf4649cb870878b0e2ac78049c363690fdfd","e4149b27233976ba0f5db99f6a861f2d13682ca868cd84c52b94e76358d8722d",{"version":"9e4bbb62d0aebc695e3445084104306ad07da16eb2ad09521ede34e552903711","signature":"481d23e4aabbd6b4fa50afa41aa5f29bc6eae7309ca22a3618234a2e7954a4dd"},"83414e9acbf2886fafe2259bbf90f83129606543ee28297cd1de5b96477a1bd3","66f3aab2271eb6e9d1afbc61cac0838e4f652c3e6eba2871e0fcb7d091c9097f",{"version":"0ccda75a0e25f27e39befbc7b755e59980034ea31a7d1758e98986fa8488e1e8","signature":"f1f04608f039092167bbe4174ff32249f82efb45665924a16822acc7e811b520"},"8cbe53ce5edb79830ebccc6a976a11ff4a483502ab4c871c045e37650ca0422b","8a721f43056776c10bb6bb5a242e68b24eea1657faccefe3c28b123db69a2240","2eb1a0a733296a69ca8c9b2304e70e2a87e71fd29437f2f66f4355eebaf74522","02d788e5a3c8b028f116d90ad6e758979e7833a8adf73d69f92dbdef7f892051","2d0dd7e37dbe8f1762b684c3bd1a592112bdae100477a6ed36e2243cb8f79ef3",{"version":"2aa1a8ece7c8ecddd64e5dc5d756527ecf0fa1edd8229d600cde44c925abbc44","signature":"de0335639db1ae77469e845dcd1a912d002b897fddb057d19a257d86516b3f4f"},"af7c2663c0a0439e431a40a026d1960126789bd62d741ad69ca14c26d887df62","ec08a8033013c0c8f5b2d8d3abb750db12fc67f8353215f8a230f0df9c7eca8a","07f4abe6bd36d2d275488c388a29523ecc250bafbc43c2658602923ee69f368e","a6a61f2002d5f84a427149db435ce6d396db224e52061d1c542e2b0357f7f12d","c9509fef1035864fe9dc87ee98fb6bb2c96da92e0ec9aaff62de0f902e49a411","0f1e17b6306d78bb066723a788dc1830cb3ac5e2bcb029bf66d61f9af056075b","dba4c1da28a7d1cf331e805ff38ace324b985dd6ef2d6eb36be6895b1be49c62","d511f4c120212e4bc4b85e31d235c301fb430b1365a2348f3e42e46d31f87854","d75f010068e2ded4e65dcc1c6c27e78e7bc0f31e05b9d1af452b5f9d7f731245","092f5115445d82fb99850b621d67a5a933a7ef5ac8eb08b4182d13928d11e047","53e4a86c620743f093b81b7c04a39c42d4c611993062d9f721c13bb870b36cc3","ec07c6afa4cc394b9b2d8953b652f40a1c3e7bd2fe0f8fa3a540cb76292642a4",{"version":"afe6ee392d3ebaaa62bfeab9f78bd92116cb5f2e749380210103b776c64b52ff","signature":"bdf55fce854f98cc2af9ce99e13a9b127d5502e2b034f5bd80a53594e0547e2a"},"3f2c387718189a212a034084fec9a56509d0a3dfe2779452157ddc03d3e8100e","f9b9ab9a17755e7bca6185c753497451491c3208354510dbc022334ad755c6d5","310995f73edd9248ad8e6f75be361faec5bcf6d284a98be442fd31dfbf90b489","7df255ef1efa2e351c864f69994e511885c2ee0f9ab1736dbfa94f2bf0f0b891","00fbea5ed1c9f6f76b2ba8633a49f690b024be4c994cf1caf19504cd5de35f74","dfa469162511df8cc3153481b07e60acdf4740de809322d2105cd93b79043fe9","fd2f381ff3eeac807b89f842034e79e960a19a378b6a059e0ff276f487e20d20",{"version":"d30e67059f5c545c5f8f0cc328a36d2e03b8c4a091b4301bc1d6afb2b1491a3a","impliedFormat":1},{"version":"2817e777d32ed02544ce8d9b646edb96f8b92ace024005ef9417d3535f7b8936","impliedFormat":1},"1cbcd4b714a7c91ad83c3c71b572e8b492fbd32445e963376880eba9732b4606",{"version":"980ce2b93e7a6acb3ddf674ef7ce38190048c532e51e21f91fa0b4e76bd9da24","impliedFormat":99},{"version":"782d3adbf885a766ca59ac64614b94be24ddf43364aee8fcf0aaeac78f22c409","impliedFormat":99},{"version":"9a3563739f42de842bf6416a4291fd974f41247cf536ce9a46f8e2d27ff3c9ac","impliedFormat":99},{"version":"8fcbab45a764abd33e19fde93b7bbafdd7a84f7eaf24c4d75a8b47a1153c2367","impliedFormat":99},{"version":"7e462fd642d79001523b2750ee16b439dfee35e3fc8d29befd9c9b85a8473555","impliedFormat":99},{"version":"b0c2fde8e0877c3d412550846ae6eb32c5be23bcade4db9752680fdfc8ee2912","impliedFormat":99},{"version":"4528dccc5a895a9f83e4a5d374d13f974d4e7dd5b767b9255db3a16c4a8b6af1","impliedFormat":99},{"version":"35d4cc70e2aebadb8983c4ebee05fb39b2d4251f283626cf2d877777878a25f1","impliedFormat":99},{"version":"3a8e5767ddb941a6e3a3349be35372ba82741e48b2ad0bc5012096f01259271a","impliedFormat":99},{"version":"877eebb657ae8f9ff4fea6d6160d7dbd7cb86c44b4e5969a34faa0f6bb178281","impliedFormat":99},{"version":"7d4cbd66f135c4dee1dc0e8e83d1c64012afd1e60b3e9fb0c614837614c2150e","impliedFormat":99},{"version":"0e85b2d7628363eea950d41358445a657fd52e5c90c665f89d85ded309a8513d","impliedFormat":99},{"version":"113aef5576cd65f310927b17ae5f6ac8745c542a660bace5f019034d536fbd04","impliedFormat":99},{"version":"c3eadb01eeb845c16e05003ba361c48ffaa5aa282b0cc3391cd1f512716cb8f7","impliedFormat":99},{"version":"a2c1678ec68c42795e2ac068a7d026b61680357d2a881c9df211dd0f83d077fd","impliedFormat":99},{"version":"d913ea1d0389ac20bd683211b0189f2fe4b50daf1aec40579a9de9adcaac321c","impliedFormat":99},{"version":"a7af5f01007f450dc8cf2cdbbb11f4d4bf8bf3faa869d21267db5de74ebf665a","impliedFormat":99},{"version":"723ac403322245c7270585a8f878f9a835f4da110f3b0b23e7971d404587685b","impliedFormat":99},{"version":"092ce9ed3440c57a829d2b47f767d6ab08828bc63fd9a4fa2aaec93e905eb9dd","impliedFormat":99},{"version":"8e34268962765c29f02f67e508ae6fb4485533675b316e3624c45f3b4f4d4a59","impliedFormat":99},{"version":"e02ed9f98527f807856ac9dc722a076064cb59f798b28106597527eb36f6ec88","impliedFormat":99},{"version":"0b67d1d5f611d99afc9ba55060a37e947664d61a5152469895ed5b64551c5e12","impliedFormat":99},{"version":"ce4088bd3b3fed9def201b87d072fcbdc8e0b43366a9489949abeca20c55464e","impliedFormat":99},{"version":"f3d31927b7a3d0f2f119a05a102af2bdd1fc4f759fe43d508a64a80b3b341f6b","impliedFormat":99},{"version":"9af1ebdf1ad0f65d11b952adc31dca4b56344c9ab41a5d0fb75dc6c3279e14b1","impliedFormat":99},{"version":"b3d7be31ee4d5386773e05a57ff97f74fc2559116cec17d21a6d0e26065d4b8c","impliedFormat":99},{"version":"9a4496ad6d48bc801a122c11e94ee1e3f0710bda38b125573f67f5cb0add1733","impliedFormat":99},{"version":"7c8d0fe14db06e4c48dc3697f26975e209fc0ac05480c1502e62af6ada3137a5","impliedFormat":99},{"version":"3f51976480d40cb1b00bd5ce27fbb8c8d6c72ff06e5203c2c06d83ec060d7052","impliedFormat":99},{"version":"dc21879e45f3a023b5fe459c3da5f2f3cf995f21a1ac533049d8950ce394c045","impliedFormat":99},{"version":"622d6ce66ac838d5d7e968daf4ae760cf49797e3fbfaa2b21d01e0fb5d625bc9","impliedFormat":99},{"version":"ecfa30418b2200ba6496b5f59b4c09a95cce9ea37c1daaf5a5db9bb306ee038f","impliedFormat":99},{"version":"01e02b5605d954a0329fe44d775c8fde41fa1b494b2506b524f461def33b3d7b","impliedFormat":99},{"version":"d6e7c7254b9a5168f868503a28d54368537783c4989dc060176de6f8d3042bf7","impliedFormat":99},{"version":"b5fced0ac3ffee12413503b6887a047181054a5a133ab2946b81e7d252f09181","impliedFormat":99},{"version":"c874e98cd875727ea62fdcd978ac9e067ce07cf7493aa4b8b193fdc3b7318eea","impliedFormat":99},{"version":"455e843c1f8e0df452f101c9ec0b63ab8e749f296c947249f8bbc29bff58c83c","impliedFormat":99},{"version":"dc52fbf76167f89ba36d883dae3935675700a59f9977d063a8b781947fae76b0","impliedFormat":99},{"version":"f2c5a01d18de21ad039c0eaed43c8ef57b02f4de1f4d85223eaa0c562f124736","impliedFormat":99},{"version":"fc741907f6d8158b2c4722932d745b11dd41f9355a5b325c8cd3cdfbd966d76d","impliedFormat":99},"755699272887a8420d24792e9dbab2e787d05de73e4db02356d257dcadd9fdbb","c801d640d3716d853fba2af26a8518448fa34ce141356088505798b7d9841a41","47fc6b04b42103b68b3ef4f732fbbf2719a87b89ad2c52211691d1e51be78d00","3f071eca321375402dd1eca118315d1dfe165488e0db94e999af19b16b967021","84fd7a787f6fdebf74945671b2c3a884f35575ed073fe78dcebb0fe9d4618130","2eb33689f87c67ca7b759c1fc4d053c5234baec6848f4a2f14b31982e0bd4d9b","351fb6f83b1d796e8493eb02eeb3fd2905912a70bbc175f23f9eaa0d495a95ba","3ac8f79a79fe4f66062d79ba9a52a6ab5cd9b1a5badeaa2a60b3b0e7523ad27d","1fb85107b6d1b897f0fb511d08edf5493a631e61aa94ccd3a9788c91542ede6b","514ed36338eb8a87c6d5901c6cdb3dbd94895f9abbbea0e25a23ef31b0e1fdc0",{"version":"82ad333eaa79041918defd3128a3ae059520d9888535f88530c0a9905f56d24c","signature":"57708b8f7656b6d4567283fa0ffe8dece44e15f23be2f6d4eb481cd0657bd660"},"e4edfa754ff557facb739d91b3177b33d441413334f32c65a65f19763dffebdd","33734f0b0db3b32881cfe972978cddb56efad341268a9a2b8530005d8c04fb99","17c81ccaf299051c39c1247cd2d62c6b9252200425e42ab9414f07438ca5ea68","cd5bd5920f8437a33c06bf8a5513ae16d1ac07f7eccfe8ea8ab020311c7699cc","f6c4afdee4b7a17da232d8feffe38a337bf3ee8bc8fcd5a51a24036e48a1f591","95e4361bd80576170eda7f256475410a0be89e2e8f6fb105692b934b3929f93f","20a4469fcc67372e7836a01f5ed063f228011fbe5e6b516162984d8b1c211b5f","23664c46e0f040ea971e2159a127e09de52afc2cd9df72d9de6ca4f72ce75028","04a553ab81866917edffb8641edb1be81c2e1a3b149eb34cd09c1ee86676ab57","a73bb5e366e8bb6b1cfe3466d2a5f5f386f5b9bde44dde97129cb5af90537daa","f6045a151ce1d67d874217b397380b1380292c581f0ae734ba265f019f6d0f1f",{"version":"93234e7d9beb78e656f16699f045a6e669bdd7cdab40c9ac24ca8f32fc0a578a","signature":"5b72f0ef8d32371f19744a10563a8366fbdbadd8595f28726f6901347b103572"},{"version":"9ff2cf98712b1027e08f8bc97b27eb882a993784375af7a4af124855fb4a6758","signature":"0f5674f1ea5fbcf38354231c715a320638854d6c7ffde582cdf6bb339a2425b9"},"c74b57d610a916792c2c2bf91c773a398142c44353f5efc63090a0c630f03805","ad2b2169f777c740c91d8eab4a298ec0141fb6e667926b247e0f003eee680a51","ba79d341421622dcc6b274edcc903e1394a29dc6b0e0702e06daeb8afb06b141",{"version":"a4890298f4a041eeacb051ae51709028dd3ff34432e41a28c11a177c19681f3a","signature":"ca94ec3300bfc8a27280427bc50c950d6b06088cce9c0a385e22bb3cd83b1f1f"},{"version":"10da10566d79193af4650eb47c71245cc1a0a27d324497cec4f0a4bcd223d0ff","signature":"007ce977a8d9a2b9b25645cba306b3403ce0c77ab7137894a2222a4a1c6df4b6"},{"version":"f5dd9d49c4d834256bfe4c3889b217250ef01038621d21a5722c6831171eda8d","signature":"a1b601c2d57302bf6f8e892b20394a71e35fd97cd7b3f570d0957eaff27719f5"},"5a4542a4af6e753f2f2d4cad68b14623e281735b8669cc7f5153ff16f07368f5","4bb8037c60214c24504ad80d0051dbbf06e49204f85f76b35a0e2a23643f11bb","a6650b3432cc4109666cda184cdf0c6b5d73453c0403a17f5b9f5f8bb410a6aa",{"version":"5f9d27e8e3e59d8cca2d3fdff58097d5369beb8f5788d2b14cd3e0731639e2a2","signature":"0c694586521cb6749e398fffd7a65f010e682ed6f11754fc868857eb0c63ff4a"},"e742dcbe9217ce6f71b52c8ab16ae5434ba3cb84c24e15ed7048fb5c20081293",{"version":"0943a6e4e026d0de8a4969ee975a7283e0627bf41aa4635d8502f6f24365ac9b","impliedFormat":99},{"version":"1461efc4aefd3e999244f238f59c9b9753a7e3dfede923ebe2b4a11d6e13a0d0","impliedFormat":99},"7251e973cc6896411e3348c1e9cd10bb359934b0e766055c9a3439b07b775edc",{"version":"42e31734e24486c16846d4a536ca37034d952224b04b6bc34907b4e403528f39","signature":"200e5651505b9c5953cc842b442a894195e07003e944551c31b99a0e9668c430"},"2b31d58fcb9a114004d0a768f4679e4900aaee0f22b52be9a13bbfea4d77fab4","dc64a21b7936310434e5ce9cd84ea42cda339b35865fd8622922a4501324f0b0",{"version":"cc3738ba01d9af5ba1206a313896837ff8779791afcd9869e582783550f17f38","impliedFormat":99},"55140ef92c201c82d530dede076603611fbfb2cdc899e4d8459b58f6cbb2b235",{"version":"76595c0e5a532556431fbda63e041df8a34902f4ed3404064d0f846bc19fa98d","impliedFormat":99},"b12ca5cef859dd75b274337234bae66e413b0f97845243254a1dedcb2d7a7237","4f5f0feadd256df897ecf34ce4f72618e720036eefffc13c2598a03bcb7e27a0",{"version":"aac975c6ce95358fbfdc40599f6078ae0bf723fc185f320de5f8ea9936b61e88","signature":"2d4c48431b3c0152db29236737da04d2e3e0ece3dbfdd772b9699bce0f03a638"},{"version":"841ef709838bcc3ae3d260e387f44a05d52975b135dc4b919721db8e41be06a0","signature":"dd01ef9126b7148dd114420d0123dd84cc6c67f59bc43096cc6291dba93d717c"},{"version":"62d49350fccb6d48aa433bb6e661b956ff9f042540ea0e7284d61f385ba56b8c","signature":"c7043af9c4e62ef82e3bb2b2735887ef48066cc923b2dfb7befd6a12c95b56ff"},"249dbd5e29160135f4e41ac518ff1cb9f6ae6b61ae8feaeb8460fc7829c7caa8",{"version":"f91ad5871c7fa11fddd8d0fcef9935226a997d2d81bb246ca8dde4941a5fcb45","signature":"0d9b0c18c06de774e7a47a4735dad07e3305988a81e3f955f032b9d623cbb28a"},{"version":"5462257e3b7fe0eb4463313b8e6292dcd0a9ce108a51fb12fc0e57dd3566fe39","signature":"8b0469e340e81a366f4b3f268f22ca84bc9d55fa1d9265997db2c4d0993aaf6d"},{"version":"9059ec36eaecb6269e03897f2ac071929904d7203ff923305eee8d3d4ebb4e82","signature":"6b11cb474f38cd1b81fe857f83e9eadc13a2651607121b9939964dddeeae7d88"},"c941b6b5b0a3632861d000cee69c2c4263814a17db0fd9a1100610d4843b86bb","e580dfd0a22df57524ab9c7c8da2e7830b3ec05973e2ac386ae224b3faac610e","b881fd3d228fb5010f613071304a6bd23d4c680f6a948a6603843e7a4241b1fe","15431b38063ed52747521a13f49eb2f2d7bd493d03b29f955036d328db21278f",{"version":"bd32ea0504662d9e392e4d459e4daa0387da8cabc4f9b607a28fec5a2a5c84be","signature":"57fe17c132094f139cd05a3ce91d4e04c425b780fe15c1d6df1fa938c66e579b"},{"version":"4bb1cf3ad64cd942316f3ef532dad85d095bc3eb29cf5fee1b82515c93dfce21","signature":"39df16477e972ef734b1738055c29311149bc032dcd9494fbfba41d977fcab88"},{"version":"5daf2fe9ee5b17d9bdc8f92704d618a42814161dc6eb8e0c066570a8a029d9bd","signature":"4723db2be4f814f75cf75fc9e9336bb34ca248e1868a33d704fcd29bb7d407f2"},"08fa002fcf25ad0f95e812089110514492cf49cc8214a5063d2258fbebb25d0c",{"version":"c0c7bb7a8e2e528b7920a308afb37cb15513b6883768033596a94de6ac6fbb17","signature":"0bec5e6ff2e230e9c79d0ddc6cd8dd0a4fd9f308698cced99d0705dd5af3fc08"},{"version":"6cd8f43ebbc4a0cb6565911888e9c01c3cc1b2d1594248cdbd81dc3814a12b41","signature":"cba83175b795446d712d77bc8bbd3c2ec54f2ab86b08d973014659ae08bd1768"},{"version":"c3875a40de3608b2c4eeda2a7708760a868dae1e6b1dbd75c7da24d414d37cd1","signature":"ea13c9b4546bf672dc48cf610383ba03da543fbe8c1bc58dd4e26b53ed3d1991"},{"version":"672ad72ad7ed1b04385f86f6031a14f62dab6a1f4a26247901ba1c8016bd98e2","signature":"47e7e6a8ae7de619ea5a9ca92afce5f1448f264c42cdfd7b2a75b0c650722083"},{"version":"03432aa5e97633d005e92fbbf4f94cedadf7b4c8e4116fe9bcf877c95dc15431","signature":"dad5541e1b3a4349d2ed63a406a15a2f1038ac851690eda5bf586019262bb3d3"},{"version":"fc99eb8c410f20390493b860f0cb771423c85f3968fc853e1db0dc56ceefd1d9","signature":"165845c22db517261fc233e76787af763b545d3209592f1a79e945df54cb1948"},{"version":"fee3d5d6e80797590faf68c18f11a1936231daa5d5927dc958485f6aa7a4fbf1","signature":"ce10437ad841efe8f4266941f83ddd3f728c6a74a8ccb28e6fb04bb4f40505c5"},{"version":"c712757cfed201ce2d81359f843545ba2bc70207cc1b462fa323bca4ef8f528e","signature":"05c702b40e39e21227be45a9ceb5e5d48d7c0ac7847283a6c3308852eef1854e"},{"version":"4045a157e0b150179a37c7cc29ea81233288fbac0f1afb6ba25b589fb7b2679b","signature":"08b833a15175d5e760582ee0fef8aa2582e1d398a07fce12f2e6acd332762f4d"},"b70049588ede0a2b97103b62334bc58b2415c5e2337aec154f21bd58fdeeed41","039ff332f997914e6b03615a7ee2391fa8db0985ae99820a394360e42ce63a93",{"version":"d7092971aa3c371016d5c0e947b72f9b6bcd16aa7b5d1c04b74e5f837e6b5095","signature":"af54fc9769ada7677c603fd1c8fc3e69a18d6f858e20392d8d352ee9a655f1f1"},{"version":"49324ee4c2e91fff2c9d0925fc37cad6ad06d2866819229085b02d1baf2f505c","signature":"adce4224a3a7208c9a0657be9409df3231ba947a5429482e31be98c103ce725f"},{"version":"dd2c64d7a82432780b67166688ff02fa76304db6cddcdecfa2915bafe7ec28b8","signature":"6eead058dd9aab0605ff60d0c7639df58168ce4fffebd286d7674c066807aa55"},{"version":"83b0b5e61e8489e54146d7242d2d8c19bf0953a691b334eceaaef140d0af3b5a","signature":"bcd5897fa731d091c7aeeb7217ed7242bc8d9a18872b50903dc8ef1826d19e9f"},{"version":"2d98b024af14d6a5edeea4282f3a4cd9d0693cea757163830a3af998f8f94a45","signature":"4d9633cffbbea5d72fdfb78299c1bd09a8f306f9f4e3a91b228c36989ade9896"},{"version":"71e4a499d73d20038943555ebb1787d791e28c9bf20ec13078e7c5d4da576445","signature":"eca3a5aa46a71db3ce5d949d8fbba72e256b7c17b5f8b7c72048864cdb3c1bd7"},{"version":"3df8a506379116efcfeaa72a82aa9b6a214464ee6685c12da45890d91206f178","signature":"7e35f89e76ead9883babae08962140374f486d76f03826eed6daa16c8972df84"},"e1087ca66b90df90968d382b110cee28b430038238643e02e6303b7e48a3c346","24a200c3ed970eb320070f96ac49efd974e42f2991432c0a784f9a8afcebb0b4","6e053cad40d2a15b1e568bccc390adef135a59da2a5dc5178a74ea6ff9f7b97a","4d560c5a63ee677508047a59078e54223303095c622fb297e4ea283eae4272cf","6c42be4baa9686598e8b617fd31306c367b5c0d61c2f49ecbabd1f64d0273af9","7c1631768e4b1c21b91481c94e036c3abf9e38d63fa969dd30663658f309c069","45c543d0c71449dafceb3919aff649e9222283214da6233514bffab7ea09c8e8","8cdd0f95df2036010b215e5f3d0c08e567adba5289ea9151913219d6d4afe8a1","251dd6efacb3eae16bd6ecc927b73bcc503018e060973bf6c85c06415a9f7ca7","0273a909e06a76f67fcc1ed0f8b402bab9542ed5c70aa97d377e2671f2892373","7c04c9481e6c1242fc48928d96f589950a6dc10b2d34ec55a275177b55ffc7ad",{"version":"f41eb629f39287437265341472d1856131d4f0f92f71a60a0684eeb117feb140","signature":"428ca7b5a61f4a1bf483c6b910377306f6d009efc3e5dc7f82d8ea5557ae1824"},"7ae698c765141162232421823887a28367248ce036bce0e556bac35cacdc860e","cd05b684d832eab04ed740f30d06d1a9bec603ee0094a877dfd6f8169700a539","5b188a91ba9170e6d30dd666ce695b1ea72db158087818946c9ef418158ec059",{"version":"cbfd5ef0c8fdb4983202252b5f5758a579f4500edc3b9ad413da60cffb5c3564","impliedFormat":99},"e7a89220fb49e18d6613956781cfd5eb38d5da36379e93f5fc90ccec127dc871","a8edd894b8ddd392063e51e5002ced878d44ceab34191c848e35c1a5f66d1c9e","c3085aa7c267e4a12c37d1330a7a4a29c38f8626db50456302ec5a79c215f656",{"version":"b621922d338d09d48c95f5f04af890b44b337b7db56939dad01e5ef7cc605bbb","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"bd5a4c723c342e8b290d0b63dd156b3c38613cce64c003ef096d407fcf8abba5","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"161fbbddbe39528f7241c7d499f1bf55e846b7d229ab332c56b92b07f328c900","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"25fba0cafc0bd1834d23fd454a7bb91991089a3579903bc0166f855b78319ed5","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"828212ea51be321cc7501eeb518386ad0450a8ff38f412b7ae892d761b454041","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"b082f0af98e1e2562292a08cf9c4f49e6c6214b3706d314a831d30363fd1c556","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"c7c4f2001e786d78d237138b567bf13acc1012a1cf3e201a588423a86cc132df","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"b4d6612e96f098690c9a5ab61506eca59997a8a4952386dd3971ab274eacdd4e","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"aa12fcbd82dcdca3fae5fc0c46f6202850a8019b808f965eeb8bf6f0a72c0f14","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"993652d7472739cdab33005bcedff5e081e820526abbd546d87b2810286db6fe","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"1c31582d8772ed46acea20602f841bc9253593bee77ad7e925d522324f2785b1","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"024a4cea9f420cef34bf408a195d16e7fcf00fd757e251507c0640d3dd5aa3bf","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"af4f089a182bc45af0aa5a37778d5de03a831efa7949bb58acab7d571c386f50","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"b4db4fb843c72a52b53f78f78cdc67f9d7b7086a7e29d07760d5c657543173eb","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"40f2cd8cc3358d2973e45dbb7c8943865e866e2e91fac848879676f31cfdaec9","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"b6f168955e8e735cd1d2526adc0f49647910b2701299f58ace5b79c192bff915","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"017addc3f74218f3d7c96cf68090d811b307084fb707c9254fc98d58ecd06403","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"ccffc3cf1636398a3532445731c3ccc80e72ae2cae66c9e3f5d493b8f59a355c","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"6812deda5713200d8683c7ee2550ea1257a2a8d28f39d6b093324b427b18a3e8","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"57a1a8243ab1f245bde3aef5d758ddd932027df6af2aa5c8076542b26403a12d","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"ad7dbbb3ff3e7bc30580bdc9347e9911d30162ed8d591764cd39d25495aaa43f","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"c16ea26b2827e67b1f0a409922739b8e366bdd4b79734f6ccabcfdf7ec022ce4","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"a5ad0938946a50829e76aed78c8e29e0775f0169b3acd78a96c11835df42eb14","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"3b862a94b11ed619f865be6fde3aa70e5e71a4db3fca7839e3be512b9dfd9fc9","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"cf868a417c22e02a518a7fc858fff5a92b958658cadb1577dd9b452175c8250a","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"2115be767ad9a486d1726d27ce3ac9a14b58490d777ed59efe08fc1cf03f0f17","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"55cc9e9206a22e2790e314e1e57981b8b9415a80f10c514113eb08e10038910e","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"d33e852cbe70710d592003c4c6e0b3c5934373d8c2379afe7f3a1627e891678e","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"a6b290cf4388b8f23c7075bb0167a4804aaa42ea45bbbeecccd86f80a032f9b8","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"134fd99f8b23cf3fd8325d282ecfd034c883cf80ad3303d29ac4dbc00f36cab7","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"2ce0be95b1d256481791f8141f629aaffd07ccdc3eb1642961021dd22cb1f464","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"35e16abd3c30a55615f7a3b1949ebd7ade9986cea480bded93e409eced1b540a","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"64ad8e4e04182e9e3f9dbb8386af9e1459faee07957ec992c3610c950673e5e8","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"6a9d9c1a557da634d016b0cf9621b979a558588277da66d1587fcf480a5ddf70","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"2fc711cc4d00a5e6dfe71e2edb6501e1f376c2444a917ff81b37a07d4e465b44","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"c67b3043eae7ccd1ccb4d0b48ad15ffadc67f88526378dc8b4b695da627a57bf","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"d8337239eae2adc39a13a06472ac8f9a174f7a53d38aede3bc0608b43ce926cb","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"dfbb5b8bb137ab6c6acb87077716daf2481bacf24ed9050ae64cdb4f565583d9","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"0aa7d5d5f3ad791e4753250cbf882632c29018c9a3eed88a27a2e423da342863","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"37305ad4d1d86feaed8a0c641c6b2be040e40e34c1b5bfe96104f355d2318e8d","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"b5ef9a51bdb4446c96102ee7c5f4c025d786c39dd16f0c9b87c2f7972b385736","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"d173c94f21870cf095eef6b543b4ee7bd9527929721a584c4142fbe9d461da51","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"9d17defed5a4c3050cf56268dfc0df32622662a23dbb94d566c2887006fed22c","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"67599b4cf04e2ad90b38a83988dd2b5e0468fb7ebe52a604aa7f68fc63141e93","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"841c85044382c3ee92762dac2575fe5800b68cc5a1b30ad997a25484b04c6704","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"1cb71c770ef2e4b20edce00be848af1fff6802105c61a3e442890995ef137553","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"72a9bb5001df7be72e0507083f8cb5805dfaa956c5c21eec82fc273cb9c8d8f3","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"096c7a88e4e373c1bcdf2679369d37b2eb4a1a5eef40018eccda25264041c4f4","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"a576f79dd0e3b363c71ca1fdeb4a1ec69b19d575fbe1948cb36d639bcc7f476b","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"3ca468e3d7257dfdecd46369ef412b7b66f19c0edafcdb485ccfca41a1afa041","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"b4a65df6cc9ae605c3cb8e7aab5fc0f1d80829a320d75ed23f3b9cb3a3b2ff2e","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"63221a661abcb26e9d81a1905b9cdb84a92cfe0ec3d39f82ef43ccd06991345c","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"be9ca07b7c5ad6cc60e8e39e36a6749ba5f8b4ce1fea3907017704770a03556a","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"d49d8406edfa29426d269b7b7b4923afa47b929aba9e666902833b40f6e08aab","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"854e00dc7bb57a2c914e54c050bfdcaea8ff3f4919dd9bd3819d91310819a665","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"c4f29e9ce1d8863988c276fe8d7d09e81363c458adcacec9bd40f06e3b775676","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"a49488875d7568397949cb0e922ca6d25b1ff1a68c6b9fef00191cdce8efa8de","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"1aae6329b407d1642eaf8cdc2743f627c46b4d9991b4ea56e956e2b7aac77f30","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"6b2f0d8f545925603e117ae9a430bb2be4bec6011a55498e75c6d1e6d865e321","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"0eb95ff4b67b1bbb55972182eecc451bcd49e3c815088a0256a69e701f028e9a","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"89fa1d2b7c636ac954773f0c6ca3d093e244d0740a38442af7b3c90dc9e2559f","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"4965838def80c5071a8f4ab55f624ba6aa7644fc01d17c28e917a4eb4732866c","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"db9d33fe70b33b3d7e35c0ce5d6fdfaff36cd608fb97d5e24e9429c2c5cc2ece","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"ca047ade0ff3d145506073405d71e4137b30257a0aa25bb5ac8f3c11ef20dee6","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"2f9b7a2bd3375f5358e0fac7bfe30c724ff0a2c7660755ef13ff9aafee3d465b","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"6940896886e1561d04da928d2bd8e8ffbaed73ac5058c1c30d2940d54aa5a523","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"c01b42e14b5c4e05bea6e41a1657c03520dd641ebc07eb7636426934d807acb0","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"1a3a6fe6f2c6685af5dfb74284d53d9a852060bf9cee3728a9a5685e71e3379b","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"64338d334f80d37ed4e05851a2af2fb1e04c800fd720eecad19506cda3be4766","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"78c80822fd9c153be5d00cff9b7331919f6f0ad7fa7b8904eb31a34875dd10bf","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"ec271aac5e500ad544c8cb8fbcb955b37a05318668d29ddde4373c80e5bb3e1e","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"8b2bc702863824109bc1f80ef557e58bb377a901fdff916f540c9cbe47a096ad","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"5a63b11eeef8ac21844ab37b07c54d3c0b341be1a7c541ad8fb5eb7c88bc39e2","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"6c6e4ac2d14c58ac0fe29a61caa054dba0fc9e4d97b06654b057c4c3666a6a48","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"4afdfb7ccc0e3b48cdece2b3b1df7e9e4a0b32d2878850879a3d8bb879571d92","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"83434869fb4ee1f2c05d3f788564b8baf3207d6856c5c7bd262d13b31582cff0","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"8a0fdf91bc5218cc291fe0f772d802fa2af6ef9cf1cff045f814380d3221c074","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"528daf74451884dd9a8bd837ff933c9c8bd48a1c132d108218d3a406ed8eddc3","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"8820e44c2cdb9f5e331ec15c0934ecb22e2434acde1ef292fe77e4c75527d8cf","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"8f2c2d9656a464f51ff6c4e2e04a2dc0420562f5cf678e9a0b7a2a086d285326","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"662e31267760394947abf3d2808383b8e81015369d1c1b8edb664d938000f617","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"e4c29dfca3858d685b1906ca0ca7582785194856e15fe81b2989941555edaf56","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"ab301078524d633a8b48661cb903401e6c4e3a9c1f43ca396f66773a711edbdd","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"b68c1a18f4f5d30e9ef6980e2a348836d8e093bf8adef730bb3421b70d5b2963","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"3367d24600f1e90962662affe61565ca42d376ab5d2b58c913b3ec5ddae4b81a","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"a2bd81979864e867c5acd9ff6bdb3bc5707144cea1b3455e1579ea598e7a8355","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"49bdf8d5a67edab20ab9325f04332058c776a39add6f67857c959d176831f251","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"38174b0ca8e0206c7622489f8f755ef901dd71ea509258775e9a134b7c2a3686","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"f444da08b1d2e5682c04a9e1296c6f5fc2d46dcff54bf8658a6968eedc52052a","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"356d151119a0bc995c9ef6a9c58be9345d78dbdead28271aae472e67d04420e7","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"9cc8920bb937242c406de2f7116f96459c6e35dc72ebaafa734f7058ecc7b08f","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"7b3a788b4d982989ced1738e1779666c453a6717dffe419ee3473b3fd670fcd6","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"8e2569f9e15f79fce9de542b80b2b7ffbb6d5bdad29f6f44fef59efe0d6ab9ad","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"4d32a12f112cb9d5fd1eecb746add62d4980d406115a117fb5a21685c27994cc","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"f3a5270c84faedb8f0a9cd9181aed4e99cb54783e8d44655e562e7727b374114","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"8d2dfbc98a15527dc192d56004048e0aba1764d617126e0a406dcda6e39e8ed3","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"226ae9d5445a296304f9c9d488a03b560f5a3606ebb484fec93e012a254c973b","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"7e3e2633affa622c7c78ddd01e4a372761571c12c22edd6e8c61301f9e6747a5","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"b9bb2b4c97e506b0b324e91411ad425cba74134e00e941fd167de82c804d3a15","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"5514a8cc603cdf0da15e1df62dd3692f14e63b093ac56b33bba165860b4d0536","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"08e648d5c31b01f6b0905cbbb45074a84cac547585b94a3d7b7e627c867961c0","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"70f9942a18a51cac1734d2229ae5c8a6533be3db28ed528114f5ffed94596b33","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"62329e4968fbe9edd408a0ec0317c87cce220d21e7c3e048adb3217c4209e471","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"f3097cde343893c69869be88a526c7e689435b2a4a7d9e5af0dffae70435bd2f","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"afcfab91b7413799524f48d370f39eaa7f0f9be4fb6575e3d76e335545f5a65c","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"a2ae8a62756a1621b770fbacb05c6f7b68e0d4f737f8b98ecf07061d70540195","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"da9571aee7e4008067ed4ff638e7231fb4ed404682b438f866a5a3e7bad0ba39","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"568960e8f76906246803a0171a53b98fbe2a84272de69e5bae082bb898746c3f","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"44aaa8cb4f1632ff205d5b07338c963178b639f08f9ad0259a5d8d4b34b17f70","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"0a12fec8109f20beb9c9a089b127b4e568c2a2d0f8c1bdcdcf8501646e5400d2","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"c03b3c4739410b8f67fdd09a1f2c13262bc2d9fa24a0a0c448994e9a66d30334","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"78f4cc6a17c0da95622373601cb9b7a9fd91562b5db2379a0ef5407e3f895c64","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"2e8ed979cc349dd2703a4f58c32c0287b776e7ffc2be4e0e3e262a48b857f615","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"db34697b8abaebd2d8fe938318ad34171bc3e6eb94eb36b92f418ffa249c9a22","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"865fc3fbf762663ba631c921fca287621c178d32cb705f70d5e579ddcca5375b","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"1468f7a00b0b819e1394f14e01eb213abfbe4cabd22c6faa15438b315d56eaed","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"d3c97f6ad5f64c3cea1b7087eddcc6fd6aa27374e2fa6c4fded0d36e466218c1","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"7654ed6791d7bda1151834d45b8fc957e60d327be90d39f95c5a2ece727b9556","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"799ca4f63a2179bf67765e7d496fd421cbb26393a10e794d12342b95ad8d16a7","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"694f3bc7b9f9851a1929f99fbdc57f6d67c49f7776d71b601ddfa2f5e77ae38d","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"073aafff0dc1d572b4120d1b15e9024f242de50c1dc0f2122fccc54a5c73c8aa","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"0e8fc30210c56302b23b3a97abae7f62520b2eb66d5954636538901f712bc269","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"917e7b9c0ce51553eeed5795e6bd61acdc5c5240a5f971d84c3c2a52c2f6e9c6","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"27a7c0683c213961e25b6374a2a46f2267ef29b30251fa47d0945d3864d969d6","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"a8d6ad69e0e7d269dc8a7a314b9b576fac0b1615bb3b71cdb68a77719aac1c0e","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"70c9d759f245ed229a33f5901957a64fe82cda2a0c33b88e4d5048caa4246236","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"cf3308ba7c914e570e78f7f3d898d1f96caebd1b8410dfbf789d5cae40030f23","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"cf57bc7ee8a608095c7d558a66ef142756640dbd6a7c767c1a68382e83ef64ed","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"4ac05a30e4effa7b8ec8ed0e147d60d6c60e72e1b59d60a62264333578ef9137","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"0050ec632f65237d2283c7afe2b563ec8995690d43cbb670ec78ccc8055c7eda","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"c1e7279dbae86bc0138a070ebb78a144b447bb5aa419956d77333f10b4bd67ac","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"e3af0439b9b5829d35c7488a790763bf1166fbb452cd1626bc15a4c3a888f1e2","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"228c6554690df2c04c068c221eca16ab02cfac92ac3c7653387fc5270292fd34","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"5f34d800253f07f80dbbdcb3469a686beb885789088bcc5cc3ec26c11004f272","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"f04d472db8206cf4e544a1e346ff0a39082c6c881958de65c94d5598ce6d64bd","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"7129d9c31396e14a7bf23bb818889e8987561923c5c124cbf6a2f284c5985fb9","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"8e3103f3d29fbf35920abb060ed35d8d73e0f8d5b9f89f375d1a0a66d9ec8f2b","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"216537b25c8df0b64ca628fdef09c09ad200f4ed5e8727fbfdbe08f1ad7f4a75","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"bffbdd810a3d3500b56e571b859ece54bd922df903b732ebccaa81674a70b7d4","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"9192486bf211d0691ece00f284b78b316860fa75bf209b9724dd4c0065cf75f5","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"e199ad1167ce90ebf5a26dcbe79b93c8290ca82b585e62ac67d64b4ac0f862c5","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"7f5bf66c20a5584cfc9b4e68684a53d00bef02f05be5777771bb119ec476c394","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"4dcf6d21de8264f3227a0e3e394f2db5fd924360ef7f8c7f477d1d4f1ae0e413","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"0523b2dac8cb67440a587850b757766dafaee749b1660acaed5166a869314c63","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"a4ef0c018e8e63118c78ab1f75801de87262772091e6b1fce7bee517c6f8677e","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"4353148188439bbc57131c4535d5e73aa3909911e53f776a98cb07840ad88525","signature":"89b0f68f8f0b901f9dfff2b9e7255520283a783d6af7f2bc2953d771232317a2"},{"version":"160b24efb5a868df9c54f337656b4ef55fcbe0548fe15408e1c0630ec559c559","impliedFormat":1},{"version":"726b49e3a411c1b819d8ec7d71b5598dd34aea9aa5c782c1b1204e71c90a07db","impliedFormat":1},{"version":"b327b3bc080c2bd8a78229e8dd4b81dbc2beae52368a351449e43ad42368e1e5","affectsGlobalScope":true,"impliedFormat":1},{"version":"94bd31fe2f766d07be7e067967b7dfd4531b560eba84f447db78a2b8920774a1","impliedFormat":1},{"version":"3937b50a4de68f6d21614461e9d47af0d8421ca80fc2a72b667ca2151f492120","impliedFormat":1}],"root":[472,[524,529],531,[535,556],[559,637],[677,691],[706,711],716,[725,728],733,1054,1055,1060,1061,[1063,1066],[1099,1101],[1103,1112],1114,1115,[1117,1122],1124,1125,[1127,1129],[1131,1135],1143,[1145,1157],[1159,1166],[1237,1243],[1245,1248],[1250,1272],[1531,1537],[1539,1541],[1543,1575],1578,[1619,1653],[1656,1659],1661,[1663,1712],[1714,1862]],"options":{"allowJs":true,"esModuleInterop":true,"jsx":1,"module":99,"skipLibCheck":true,"strict":false,"target":9},"referencedMap":[[1719,1],[1718,2],[1720,3],[1721,4],[1722,5],[1724,6],[1725,7],[1727,8],[1728,9],[1726,10],[1729,11],[1730,12],[1731,13],[1732,14],[1733,15],[1734,16],[1735,17],[1723,18],[1738,19],[1739,20],[1737,21],[1740,22],[1741,23],[1742,24],[1744,25],[1745,26],[1743,27],[1746,28],[1736,29],[1747,30],[1748,31],[1749,32],[1750,33],[1751,34],[1752,35],[1753,36],[1754,37],[1755,38],[1756,39],[1757,40],[1758,41],[1759,42],[1760,43],[1761,44],[1762,45],[1763,46],[1764,47],[1765,48],[1766,49],[1767,50],[1768,51],[1769,52],[1770,53],[1771,54],[1772,55],[1773,56],[1774,57],[1775,58],[1776,59],[1777,60],[1778,61],[1779,62],[1780,63],[1783,64],[1782,65],[1781,66],[1786,67],[1785,68],[1784,69],[1789,70],[1788,71],[1787,72],[1790,73],[1792,74],[1791,75],[1793,76],[1794,77],[1798,78],[1797,79],[1796,80],[1799,81],[1795,82],[1800,83],[1802,84],[1803,85],[1801,86],[1804,87],[1806,88],[1805,89],[1807,90],[1809,91],[1808,92],[1810,93],[1811,94],[1812,95],[1813,96],[1814,97],[1815,98],[1821,99],[1822,100],[1820,101],[1824,102],[1825,103],[1823,104],[1827,105],[1826,106],[1819,107],[1829,108],[1828,109],[1830,110],[1832,111],[1833,112],[1831,113],[1818,114],[1835,115],[1834,116],[1837,117],[1836,118],[1838,119],[1839,120],[1840,121],[1842,122],[1841,123],[1844,124],[1843,125],[1846,126],[1845,127],[1848,128],[1847,129],[1817,130],[1850,131],[1849,132],[1851,133],[1853,134],[1852,135],[1855,136],[1856,137],[1857,138],[1854,139],[1858,140],[1859,141],[1816,142],[1860,143],[1861,144],[1862,145],[1717,146],[1716,147],[1107,148],[1066,149],[1109,150],[1111,151],[1134,152],[1164,153],[1165,154],[1239,155],[1240,156],[1252,157],[1253,158],[1254,159],[1247,160],[1248,161],[1255,162],[1260,163],[1259,164],[1265,165],[1264,166],[1270,167],[1269,168],[1271,169],[1272,170],[1532,171],[1533,172],[1135,173],[1547,174],[1548,175],[1537,176],[1552,177],[1553,178],[1557,179],[1558,180],[1559,181],[1560,182],[1563,157],[1564,183],[1565,159],[1561,160],[1562,184],[1566,162],[1534,185],[1571,186],[1570,187],[1572,188],[1628,189],[1627,190],[1633,191],[1632,192],[1635,193],[1634,194],[1637,195],[1636,196],[1638,188],[1640,197],[1639,198],[1645,199],[1644,200],[1646,201],[1649,202],[1650,169],[1651,170],[1652,203],[1653,170],[1657,204],[1658,205],[1659,169],[1133,206],[1664,207],[1666,208],[1665,209],[1667,210],[1668,169],[1669,211],[1672,212],[1670,213],[1673,214],[1674,215],[1675,216],[1677,217],[1676,218],[1678,219],[1679,170],[1680,220],[1681,221],[1682,222],[1683,223],[1684,224],[1685,225],[1686,226],[1687,227],[1688,228],[1689,169],[1690,229],[1692,230],[1691,231],[1693,220],[1695,232],[1694,233],[1696,234],[1699,235],[1697,236],[1698,237],[1700,170],[545,238],[550,239],[549,239],[548,239],[553,239],[552,239],[551,239],[556,239],[555,239],[554,239],[559,240],[561,241],[560,241],[562,240],[563,241],[567,241],[566,241],[565,241],[568,242],[564,241],[569,243],[571,241],[572,241],[570,241],[573,241],[576,239],[575,244],[577,239],[579,239],[578,239],[580,242],[581,242],[582,239],[583,239],[584,245],[585,245],[591,239],[592,239],[590,239],[594,239],[595,239],[593,239],[597,239],[596,239],[589,239],[599,239],[598,239],[600,239],[602,239],[603,239],[601,239],[588,239],[605,239],[604,239],[607,239],[606,239],[608,239],[609,239],[610,246],[612,239],[611,239],[614,239],[613,239],[616,239],[615,239],[618,239],[617,239],[587,239],[620,239],[619,239],[621,239],[623,239],[622,239],[625,239],[626,239],[627,239],[624,239],[628,246],[629,246],[586,244],[630,247],[631,248],[632,242],[728,249],[1055,250],[1065,251],[526,252],[527,252],[1550,253],[1551,254],[1549,255],[1704,234],[1064,256],[1100,257],[1106,258],[1108,259],[1110,260],[1671,261],[1132,262],[1706,263],[1707,264],[1708,265],[1709,266],[1238,267],[1710,268],[1531,269],[1237,270],[1166,271],[1701,272],[1128,273],[1619,274],[1578,275],[1620,276],[1061,277],[1054,278],[1702,279],[1625,280],[1541,281],[1545,282],[1536,283],[1546,284],[1544,285],[1120,286],[1121,287],[1535,213],[1556,288],[1554,289],[1555,290],[1624,291],[1147,255],[1148,253],[1163,292],[1242,213],[1243,293],[1251,294],[1540,295],[1623,296],[1621,297],[1573,298],[1575,299],[1574,300],[1647,283],[1648,213],[1622,301],[1118,286],[1119,302],[1568,290],[1569,288],[1567,254],[1626,303],[1629,304],[1630,305],[1631,254],[1256,255],[1257,253],[1258,292],[1261,255],[1262,253],[1263,306],[1266,255],[1267,253],[1268,292],[1641,213],[1642,307],[1643,308],[727,309],[1711,310],[1156,311],[1122,312],[1703,313],[1129,314],[1656,315],[1143,316],[1105,317],[1124,318],[1241,319],[733,319],[1543,320],[1099,321],[1145,322],[1131,323],[1151,324],[1146,325],[1246,326],[1153,327],[1152,328],[1150,329],[1114,330],[1060,331],[1155,268],[1160,332],[1161,333],[1104,334],[1705,335],[1250,336],[1101,321],[1103,337],[1154,338],[1712,339],[1157,321],[1245,340],[1714,341],[1663,342],[1117,343],[1127,344],[1063,345],[1115,346],[1661,347],[716,348],[1539,349],[1149,321],[1159,350],[1162,321],[725,351],[1125,352],[1715,353],[1112,354],[726,355],[633,356],[634,356],[635,356],[636,356],[538,357],[537,358],[531,359],[539,360],[529,358],[540,361],[547,362],[574,363],[682,364],[680,365],[681,365],[679,366],[686,367],[684,368],[685,369],[683,370],[544,371],[542,372],[543,373],[541,374],[690,375],[688,376],[689,377],[687,378],[637,379],[677,380],[691,381],[706,382],[524,383],[472,384],[525,381],[1098,385],[1097,386],[416,381],[1655,387],[1142,388],[720,389],[1123,390],[1144,390],[1654,390],[717,356],[1136,356],[1141,391],[1113,392],[1138,393],[719,389],[1059,394],[1056,389],[1139,393],[735,395],[736,395],[737,395],[738,395],[739,395],[740,395],[741,395],[742,395],[743,395],[744,395],[745,395],[746,395],[747,395],[748,395],[749,395],[750,395],[751,395],[752,395],[753,395],[754,395],[755,395],[756,395],[757,395],[758,395],[759,395],[760,395],[761,395],[763,395],[762,395],[764,395],[765,395],[766,395],[767,395],[768,395],[769,395],[770,395],[771,395],[772,395],[773,395],[774,395],[775,395],[776,395],[777,395],[778,395],[779,395],[780,395],[781,395],[782,395],[783,395],[784,395],[785,395],[786,395],[787,395],[788,395],[789,395],[791,395],[790,395],[792,395],[793,395],[794,395],[795,395],[796,395],[798,395],[797,395],[800,395],[799,395],[801,395],[802,395],[803,395],[804,395],[805,395],[806,395],[807,395],[808,395],[809,395],[810,395],[811,395],[812,395],[813,395],[814,395],[815,395],[816,395],[817,395],[818,395],[819,395],[820,395],[821,395],[822,395],[823,395],[824,395],[825,395],[826,395],[827,395],[828,395],[829,395],[830,395],[831,395],[832,395],[833,395],[834,395],[835,395],[836,395],[837,395],[838,395],[839,395],[840,395],[841,395],[843,395],[842,395],[844,395],[845,395],[846,395],[847,395],[848,395],[849,395],[850,395],[851,395],[852,395],[853,395],[854,395],[856,395],[855,395],[857,395],[859,395],[858,395],[860,395],[861,395],[862,395],[863,395],[865,395],[864,395],[866,395],[867,395],[868,395],[869,395],[870,395],[871,395],[872,395],[873,395],[874,395],[875,395],[876,395],[877,395],[878,395],[879,395],[880,395],[881,395],[882,395],[883,395],[884,395],[885,395],[886,395],[887,395],[888,395],[889,395],[890,395],[891,395],[892,395],[893,395],[895,395],[894,395],[896,395],[897,395],[898,395],[899,395],[900,395],[901,395],[902,395],[903,395],[904,395],[905,395],[906,395],[907,395],[908,395],[909,395],[910,395],[911,395],[912,395],[913,395],[914,395],[915,395],[916,395],[917,395],[918,395],[919,395],[920,395],[921,395],[922,395],[923,395],[924,395],[925,395],[926,395],[927,395],[928,395],[929,395],[930,395],[931,395],[932,395],[933,395],[935,395],[934,395],[936,395],[937,395],[938,395],[939,395],[940,395],[941,395],[942,395],[943,395],[944,395],[945,395],[946,395],[947,395],[948,395],[949,395],[950,395],[951,395],[952,395],[953,395],[954,395],[955,395],[956,395],[957,395],[958,395],[959,395],[961,395],[960,395],[963,395],[962,395],[964,395],[965,395],[966,395],[967,395],[968,395],[969,395],[970,395],[971,395],[972,395],[973,395],[974,395],[975,395],[976,395],[977,395],[979,395],[978,395],[980,395],[981,395],[982,395],[983,395],[984,395],[985,395],[986,395],[987,395],[988,395],[989,395],[990,395],[991,395],[992,395],[993,395],[994,395],[995,395],[996,395],[997,395],[998,395],[999,395],[1000,395],[1002,395],[1001,395],[1003,395],[1004,395],[1005,395],[1006,395],[1007,395],[1008,395],[1009,395],[1010,395],[1011,395],[1012,395],[1013,395],[1015,395],[1016,395],[1017,395],[1018,395],[1019,395],[1020,395],[1021,395],[1014,395],[1022,395],[1023,395],[1024,395],[1025,395],[1026,395],[1027,395],[1028,395],[1029,395],[1030,395],[1031,395],[1032,395],[1033,395],[1034,395],[1035,395],[1036,395],[1037,395],[1038,395],[1039,395],[1040,395],[1041,395],[1042,395],[1043,395],[1044,395],[1045,395],[1046,395],[1047,395],[1048,395],[1049,395],[1050,395],[1051,395],[1052,395],[1053,396],[734,356],[1102,389],[1058,397],[1244,398],[722,399],[723,389],[1140,393],[718,356],[1137,356],[1713,390],[1662,400],[1057,390],[1116,390],[1126,398],[1062,389],[1660,390],[730,401],[1538,390],[1158,400],[724,402],[721,381],[1581,403],[1587,404],[1589,405],[1582,406],[1590,407],[1588,408],[1591,381],[1583,409],[1584,407],[1592,410],[1593,403],[1596,411],[1585,412],[1594,413],[1595,414],[1586,415],[638,381],[674,416],[653,417],[663,418],[660,418],[661,419],[645,419],[659,419],[640,418],[646,420],[649,421],[654,422],[642,420],[643,419],[656,423],[641,420],[647,420],[650,420],[655,420],[657,419],[644,419],[658,419],[652,424],[648,425],[673,426],[651,427],[662,428],[639,419],[664,419],[665,419],[666,419],[667,419],[668,419],[669,419],[670,419],[671,419],[672,419],[1863,429],[1187,381],[1170,430],[1188,431],[1169,381],[1576,381],[1865,381],[1577,432],[1864,381],[136,433],[137,433],[138,434],[97,435],[139,436],[140,437],[141,438],[92,381],[95,439],[93,381],[94,381],[142,440],[143,441],[144,442],[145,443],[146,444],[147,445],[148,445],[150,446],[149,447],[151,448],[152,449],[153,450],[135,451],[96,381],[154,452],[155,453],[156,454],[188,455],[157,456],[158,457],[159,458],[160,459],[161,460],[162,461],[163,462],[164,463],[165,464],[166,465],[167,465],[168,466],[169,381],[170,467],[172,468],[171,469],[173,470],[174,471],[175,472],[176,473],[177,474],[178,475],[179,476],[180,477],[181,478],[182,479],[183,480],[184,481],[185,482],[186,483],[187,484],[192,485],[193,486],[191,356],[1866,487],[189,488],[190,489],[81,381],[83,490],[265,356],[558,491],[557,381],[1249,381],[732,492],[731,493],[675,381],[1130,494],[82,381],[1361,495],[1340,496],[1437,381],[1341,497],[1277,495],[1278,495],[1279,495],[1280,495],[1281,495],[1282,495],[1283,495],[1284,495],[1285,495],[1286,495],[1287,495],[1288,495],[1289,495],[1290,495],[1291,495],[1292,495],[1293,495],[1294,495],[1273,381],[1295,495],[1296,495],[1297,381],[1298,495],[1299,495],[1300,495],[1301,495],[1302,495],[1303,495],[1304,495],[1305,495],[1306,495],[1307,495],[1308,495],[1309,495],[1310,495],[1311,495],[1312,495],[1313,495],[1314,495],[1315,495],[1316,495],[1317,495],[1318,495],[1319,495],[1320,495],[1321,495],[1322,495],[1323,495],[1324,495],[1325,495],[1326,495],[1327,495],[1328,495],[1329,495],[1330,495],[1331,495],[1332,495],[1333,495],[1334,495],[1335,495],[1336,495],[1337,495],[1338,495],[1339,495],[1342,498],[1343,495],[1344,495],[1345,499],[1346,500],[1347,495],[1348,495],[1349,495],[1350,495],[1351,495],[1352,495],[1353,495],[1275,381],[1354,495],[1355,495],[1356,495],[1357,495],[1358,495],[1359,495],[1360,495],[1362,501],[1363,495],[1364,495],[1365,495],[1366,495],[1367,495],[1368,495],[1369,495],[1370,495],[1371,495],[1372,495],[1373,495],[1374,495],[1375,495],[1376,495],[1377,495],[1378,495],[1379,495],[1380,495],[1381,381],[1382,381],[1383,381],[1530,502],[1384,495],[1385,495],[1386,495],[1387,495],[1388,495],[1389,495],[1390,381],[1391,495],[1392,381],[1393,495],[1394,495],[1395,495],[1396,495],[1397,495],[1398,495],[1399,495],[1400,495],[1401,495],[1402,495],[1403,495],[1404,495],[1405,495],[1406,495],[1407,495],[1408,495],[1409,495],[1410,495],[1411,495],[1412,495],[1413,495],[1414,495],[1415,495],[1416,495],[1417,495],[1418,495],[1419,495],[1420,495],[1421,495],[1422,495],[1423,495],[1424,495],[1425,381],[1426,495],[1427,495],[1428,495],[1429,495],[1430,495],[1431,495],[1432,495],[1433,495],[1434,495],[1435,495],[1436,495],[1438,503],[1274,495],[1439,495],[1440,495],[1441,381],[1442,381],[1443,381],[1444,495],[1445,381],[1446,381],[1447,381],[1448,381],[1449,381],[1450,495],[1451,495],[1452,495],[1453,495],[1454,495],[1455,495],[1456,495],[1457,495],[1462,504],[1460,505],[1459,506],[1461,507],[1458,495],[1463,495],[1464,495],[1465,495],[1466,495],[1467,495],[1468,495],[1469,495],[1470,495],[1471,495],[1472,495],[1473,381],[1474,381],[1475,495],[1476,495],[1477,381],[1478,381],[1479,381],[1480,495],[1481,495],[1482,495],[1483,495],[1484,501],[1485,495],[1486,495],[1487,495],[1488,495],[1489,495],[1490,495],[1491,495],[1492,495],[1493,495],[1494,495],[1495,495],[1496,495],[1497,495],[1498,495],[1499,495],[1500,495],[1501,495],[1502,495],[1503,495],[1504,495],[1505,495],[1506,495],[1507,495],[1508,495],[1509,495],[1510,495],[1511,495],[1512,495],[1513,495],[1514,495],[1515,495],[1516,495],[1517,495],[1518,495],[1519,495],[1520,495],[1521,495],[1522,495],[1523,495],[1524,495],[1525,495],[1276,508],[1526,381],[1527,381],[1528,381],[1529,381],[506,509],[475,510],[485,510],[476,510],[486,510],[477,510],[478,510],[493,510],[492,510],[494,510],[495,510],[487,510],[479,510],[488,510],[480,510],[489,510],[481,510],[483,510],[491,511],[484,510],[490,511],[496,511],[482,510],[497,510],[502,510],[503,510],[498,510],[474,381],[504,381],[500,510],[499,510],[501,510],[505,510],[729,356],[473,512],[532,513],[512,514],[511,515],[519,516],[521,517],[516,518],[515,519],[523,520],[520,515],[522,521],[513,522],[510,523],[514,524],[508,381],[509,525],[534,526],[533,527],[517,381],[715,356],[90,528],[419,529],[424,147],[426,530],[214,531],[367,532],[394,533],[225,381],[206,381],[212,381],[356,534],[293,535],[213,381],[357,536],[396,537],[397,538],[344,539],[353,540],[263,541],[361,542],[362,543],[360,544],[359,381],[358,545],[395,546],[215,547],[300,381],[301,548],[210,381],[226,549],[216,550],[238,549],[269,549],[199,549],[366,551],[376,381],[205,381],[322,552],[323,553],[317,401],[447,381],[325,381],[326,401],[318,554],[338,356],[452,555],[451,556],[446,381],[266,557],[399,381],[352,558],[351,381],[445,559],[319,356],[241,560],[239,561],[448,381],[450,562],[449,381],[240,563],[440,564],[443,565],[250,566],[249,567],[248,568],[455,356],[247,569],[288,381],[458,381],[713,570],[712,381],[461,381],[460,356],[462,571],[195,381],[363,572],[364,573],[365,574],[388,381],[204,575],[194,381],[197,576],[337,577],[336,578],[327,381],[328,381],[335,381],[330,381],[333,579],[329,381],[331,580],[334,581],[332,580],[211,381],[202,381],[203,549],[418,582],[427,583],[431,584],[370,585],[369,381],[284,381],[463,586],[379,587],[320,588],[321,589],[314,590],[306,381],[312,381],[313,591],[342,592],[307,593],[343,594],[340,595],[339,381],[341,381],[297,596],[371,597],[372,598],[308,599],[309,600],[304,601],[348,602],[378,603],[381,604],[286,605],[200,606],[377,607],[196,533],[400,381],[401,608],[412,609],[398,381],[411,610],[91,381],[386,611],[272,381],[302,612],[382,381],[201,381],[233,381],[410,613],[209,381],[275,614],[368,615],[409,381],[403,616],[404,617],[207,381],[406,618],[407,619],[389,381],[408,606],[231,620],[387,621],[413,622],[218,381],[221,381],[219,381],[223,381],[220,381],[222,381],[224,623],[217,381],[278,624],[277,381],[283,625],[279,626],[282,627],[281,627],[285,625],[280,626],[237,628],[267,629],[375,630],[465,381],[435,631],[437,632],[311,381],[436,633],[373,597],[464,634],[324,597],[208,381],[268,635],[234,636],[235,637],[236,638],[232,639],[347,639],[244,639],[270,640],[245,640],[228,641],[227,381],[276,642],[274,643],[273,644],[271,645],[374,646],[346,647],[345,648],[316,649],[355,650],[354,651],[350,652],[262,653],[264,654],[261,655],[229,656],[296,381],[423,381],[295,657],[349,381],[287,658],[305,572],[303,659],[289,660],[291,661],[459,381],[290,662],[292,662],[421,381],[420,381],[422,381],[457,381],[294,663],[259,356],[89,381],[242,664],[251,381],[299,665],[230,381],[429,356],[439,666],[258,356],[433,401],[257,667],[415,668],[256,666],[198,381],[441,669],[254,356],[255,356],[246,381],[298,381],[253,670],[252,671],[243,672],[310,464],[380,464],[405,381],[384,673],[383,381],[425,381],[260,356],[315,356],[417,674],[84,356],[87,675],[88,676],[85,356],[86,381],[402,677],[393,678],[392,381],[391,679],[390,381],[414,680],[428,681],[430,682],[432,683],[714,684],[434,685],[438,686],[471,687],[442,687],[470,688],[444,689],[453,690],[454,691],[456,692],[466,693],[469,575],[468,381],[467,429],[507,694],[1542,695],[1067,381],[1082,696],[1083,696],[1096,697],[1084,698],[1085,698],[1086,699],[1080,700],[1078,701],[1069,381],[1073,702],[1077,703],[1075,704],[1081,705],[1070,706],[1071,707],[1072,708],[1074,709],[1076,710],[1079,711],[1087,698],[1088,698],[1089,698],[1090,696],[1091,698],[1092,698],[1068,698],[1093,381],[1095,712],[1094,698],[1580,406],[1597,713],[1598,713],[1600,714],[1601,715],[1602,713],[1599,713],[1603,406],[1604,406],[1605,713],[1606,356],[1607,713],[1608,716],[1609,713],[1610,713],[1612,713],[1611,406],[1613,713],[1614,713],[1615,713],[1616,713],[1617,406],[1579,403],[1618,717],[1210,718],[1212,719],[1202,720],[1207,721],[1208,722],[1214,723],[1209,724],[1206,725],[1205,726],[1204,727],[1215,728],[1172,721],[1173,721],[1213,721],[1218,729],[1228,730],[1222,730],[1230,730],[1234,730],[1221,730],[1223,730],[1226,730],[1229,730],[1225,731],[1227,730],[1231,356],[1224,721],[1220,732],[1219,733],[1181,356],[1185,356],[1175,721],[1178,356],[1183,721],[1184,734],[1177,735],[1180,356],[1182,356],[1179,736],[1168,356],[1167,356],[1236,737],[1233,738],[1199,739],[1198,721],[1196,356],[1197,721],[1200,740],[1201,741],[1194,356],[1190,742],[1193,721],[1192,721],[1191,721],[1186,721],[1195,742],[1232,721],[1211,743],[1217,744],[1235,381],[1203,381],[1216,745],[1176,381],[1174,746],[385,747],[530,356],[676,381],[79,381],[80,381],[13,381],[14,381],[16,381],[15,381],[2,381],[17,381],[18,381],[19,381],[20,381],[21,381],[22,381],[23,381],[24,381],[3,381],[25,381],[26,381],[4,381],[27,381],[31,381],[28,381],[29,381],[30,381],[32,381],[33,381],[34,381],[5,381],[35,381],[36,381],[37,381],[38,381],[6,381],[42,381],[39,381],[40,381],[41,381],[43,381],[7,381],[44,381],[49,381],[50,381],[45,381],[46,381],[47,381],[48,381],[8,381],[54,381],[51,381],[52,381],[53,381],[55,381],[9,381],[56,381],[57,381],[58,381],[60,381],[59,381],[61,381],[62,381],[10,381],[63,381],[64,381],[65,381],[11,381],[66,381],[67,381],[68,381],[69,381],[70,381],[1,381],[71,381],[72,381],[12,381],[76,381],[74,381],[78,381],[73,381],[77,381],[75,381],[113,748],[123,749],[112,748],[133,750],[104,751],[103,752],[132,429],[126,753],[131,754],[106,755],[120,756],[105,757],[129,758],[101,759],[100,429],[130,760],[102,761],[107,762],[108,381],[111,762],[98,381],[134,763],[124,764],[115,765],[116,766],[118,767],[114,768],[117,769],[127,429],[109,770],[110,771],[119,772],[99,773],[122,764],[121,762],[125,381],[128,774],[1171,775],[1189,776],[705,777],[694,778],[696,779],[703,780],[698,381],[699,381],[697,781],[700,777],[692,381],[693,381],[704,782],[695,783],[701,381],[702,784],[708,785],[528,381],[707,381],[678,381],[536,381],[709,786],[535,381],[710,381],[711,381],[546,381],[518,381],[1867,787]],"affectedFilesPendingEmit":[1719,1718,1720,1721,1722,1724,1725,1727,1728,1726,1729,1730,1731,1732,1733,1734,1735,1723,1738,1739,1737,1740,1741,1742,1744,1745,1743,1746,1736,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1783,1782,1781,1786,1785,1784,1789,1788,1787,1790,1792,1791,1793,1794,1798,1797,1796,1799,1795,1800,1802,1803,1801,1804,1806,1805,1807,1809,1808,1810,1811,1812,1813,1814,1815,1821,1822,1820,1824,1825,1823,1827,1826,1819,1829,1828,1830,1832,1833,1831,1818,1835,1834,1837,1836,1838,1839,1840,1842,1841,1844,1843,1846,1845,1848,1847,1817,1850,1849,1851,1853,1852,1855,1856,1857,1854,1858,1859,1816,1860,1861,1862,1717,1107,1066,1109,1111,1134,1164,1165,1239,1240,1252,1253,1254,1247,1248,1255,1260,1259,1265,1264,1270,1269,1271,1272,1532,1533,1135,1547,1548,1537,1552,1553,1557,1558,1559,1560,1563,1564,1565,1561,1562,1566,1534,1571,1570,1572,1628,1627,1633,1632,1635,1634,1637,1636,1638,1640,1639,1645,1644,1646,1649,1650,1651,1652,1653,1657,1658,1659,1133,1664,1666,1665,1667,1668,1669,1672,1670,1673,1674,1675,1677,1676,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1692,1691,1693,1695,1694,1696,1699,1697,1698,1700,545,550,549,548,553,552,551,556,555,554,559,561,560,562,563,567,566,565,568,564,569,571,572,570,573,576,575,577,579,578,580,581,582,583,584,585,591,592,590,594,595,593,597,596,589,599,598,600,602,603,601,588,605,604,607,606,608,609,610,612,611,614,613,616,615,618,617,587,620,619,621,623,622,625,626,627,624,628,629,586,630,631,632,728,1055,1065,526,527,1550,1551,1549,1704,1064,1100,1106,1108,1110,1671,1132,1706,1707,1708,1709,1238,1710,1531,1237,1166,1701,1128,1619,1578,1620,1061,1054,1702,1625,1541,1545,1536,1546,1544,1120,1121,1535,1556,1554,1555,1624,1147,1148,1163,1242,1243,1251,1540,1623,1621,1573,1575,1574,1647,1648,1622,1118,1119,1568,1569,1567,1626,1629,1630,1631,1256,1257,1258,1261,1262,1263,1266,1267,1268,1641,1642,1643,727,1711,1156,1122,1703,1129,1656,1143,1105,1124,1241,733,1543,1099,1145,1131,1151,1146,1246,1153,1152,1150,1114,1060,1155,1160,1161,1104,1705,1250,1101,1103,1154,1712,1157,1245,1714,1663,1117,1127,1063,1115,1661,716,1539,1149,1159,1162,725,1125,1715,1112,726,633,634,635,636,538,537,531,539,529,540,547,574,682,680,681,679,686,684,685,683,544,542,543,541,690,688,689,687,637,677,691,706,524,525,708,528,707,678,536,535,710,711,546],"version":"5.8.2"}// END OF FILE: tsconfig.tsbuildinfo

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/address.ts

import { Auditable } from "@/types/common";
import { AddressableType } from "@/types/organization";

// --- Addresses ---
export interface CreateAddressRequest {
  address_line_1?: string;
  address_line_2?: string;
  city?: string;
  state?: string;
  locality?: string;
  country_id?: string; // format: uuid
  zip_code?: string;
  neighbor_hood?: string;
  latitude?: number; // format: double
  longitude?: number; // format: double
}
export interface UpdateAddressRequest extends Partial<CreateAddressRequest> { }

export interface AddressDto extends Auditable {
  addressable_type?: AddressableType;
  addressable_id?: string; // format: uuid
  address_id?: string; // format: uuid
  address_line_1?: string;
  address_line_2?: string;
  city?: string;
  state?: string;
  locality?: string;
  country_id?: string; // format: uuid
  zip_code?: string;
  is_default?: boolean;
  neighbor_hood?: string;
  latitude?: number;
  longitude?: number;
}// END OF FILE: types/address.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/auth.ts

// types/auth.ts

// --- Schemas from OpenAPI ---
export interface UpdateRoleRequest {
  name: string;
  description?: string; // maxLength: 255, minLength: 0
}

export interface RoleDto {
  id?: string; // format: uuid, readOnly: true
  name: string;
  description?: string;
}

export interface UpdatePermissionRequest {
  resource_id: string; // format: uuid
  operation_id: string; // format: uuid
  name: string;
  description?: string; // maxLength: 255, minLength: 0
}

export interface PermissionDto {
  created_at?: string; // format: date-time
  updated_at?: string; // format: date-time
  deleted_at?: string | null; // format: date-time
  created_by?: string; // format: uuid
  updated_by?: string; // format: uuid
  id?: string; // format: uuid
  resource_id?: string; // format: uuid
  operation?: string; // format: uuid (OpenAPI spec says "operation_id" in request, "operation" in DTO)
  name?: string;
  description?: string;
}

export interface CreateRoleRequest {
  name: string;
  description?: string; // maxLength: 255, minLength: 0
}

export interface RolePermissionDto {
  role_id?: string; // format: uuid
  permission_id?: string; // format: uuid
}

export interface RbacResource { // For /api/resources/save
  name?: string;
  value?: string;
  service?: string;
  description?: string;
  roles?: string[];
  permissions?: string[];
  publicAccess?: boolean;
}

export interface ApiResponseBoolean { // For /api/resources/save response
  status?: "SUCCESS" | "FAILED" | "UNKNOWN";
  message?: string;
  data?: boolean;
  errors?: Record<string, string>;
  ok?: boolean;
}

export interface AuthorityDto {
  name?: string;
}

export interface CreateUserRequest {
  username: string;
  email?: string;
  password?: string; // minLength: 6
  first_name: string; // minLength: 3, maxLength: 50
  last_name?: string; // minLength: 0, maxLength: 50
  phone_number?: string;
  authorities?: AuthorityDto[]; // uniqueItems: true
}

export interface UserDto { // Response for /api/register and items in /api/users
  created_at?: string; // format: date-time
  updated_at?: string; // format: date-time
  deleted_at?: string | null; // format: date-time
  created_by?: string; // format: uuid
  updated_by?: string; // format: uuid
  id?: string; // format: uuid
  name?: string; // Seems like a computed full name
  first_name?: string;
  last_name?: string;
  email?: string;
  phone_number?: string;
  password_reset_token?: string | null;
  password_reset_expiration?: string | null; // format: date-time
  username?: string;
  email_verified?: boolean;
  phone_number_verified?: boolean;
  is_enabled?: boolean;
  password_hash?: string; // Internal representation for mock, not in API DTO
}

export interface CreatePermissionRequest {
  resource_id: string; // format: uuid
  operation_id: string; // format: uuid
  name: string;
  description?: string; // maxLength: 255, minLength: 0
}

export interface AuthRequest {
  username: string;
  password: string;
}

export interface AccessToken {
  token?: string;
  type?: string; // e.g., "Bearer"
  expire_in?: number; // int64 (milliseconds or seconds)
}

export interface OAuth2TokenResponse {
  access_token: string;
  // type: string;
  expires_in: number;
  // scope?: string;
}

export interface UserInfo { // Response for /api/user and user part of LoginResponse
  id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  username?: string;
  email?: string;
  phone_number?: string;
  email_verified?: boolean;
  phone_number_verified?: boolean;
}

export interface LoginResponse {
  access_token?: AccessToken;
  user?: UserInfo;
  roles?: string[];
  permissions?: string[];
}// END OF FILE: types/auth.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/common.ts

export interface Timestamps {
  created_at?: string; // format: date-time
  updated_at?: string; // format: date-time
  deleted_at?: string | null; // format: date-time
}

export interface Auditable extends Timestamps {
  created_by?: string; // format: uuid
  updated_by?: string; // format: uuid
}

export type ViewMode = "list" | "grid";

// END OF FILE: types/common.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/map.ts

// types/map.ts

// Simplified structure for Nominatim reverse geocoding response
export interface ReverseGeocodeResponse {
  place_id: number;
  licence: string;
  osm_type: string;
  osm_id: number;
  lat: string;
  lon: string;
  display_name: string;
  address: {
    road?: string;
    suburb?: string;
    city?: string;
    municipality?: string;
    state_district?: string;
    state?: string;
    postcode?: string;
    country?: string;
    country_code?: string;
    house_number?: string;
  };
  boundingbox: string[];
}

// Simplified structure for Nominatim forward geocoding (search) response
export interface GeocodeResponse {
  place_id: number;
  licence: string;
  osm_type: string;
  osm_id: number;
  boundingbox: string[];
  lat: string;
  lon: string;
  display_name: string;
  class: string;
  type: string;
  importance: number;
  icon?: string;
}// END OF FILE: types/map.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/media.ts

// types/media.ts

export type ServiceType =
  | "auth" | "business-actor" | "product" | "resource"
  | "organization" | "snappy" | "review" | "point-of-interest" | "location" | "unknown";

export type MediaType = "pdf" | "file" | "audio" | "video" | "image" | "unknown";

export interface UploadRequest {
  is_primary?: boolean;
  description?: string;
}

export interface UploadMediaResponse {
  id?: string; // format: uuid
  resourceId?: string; // format: uuid
  uri?: string;
  url?: string;
}

export interface MediaDto {
  created_at?: string; // format: date-time
  updated_at?: string; // format: date-time
  deleted_at?: string | null; // format: date-time
  created_by?: string; // format: uuid
  updated_by?: string; // format: uuid
  name?: string;
  real_name?: string;
  size?: number; // format: int64
  mime?: string;
  extension?: string;
  is_primary?: boolean;
  type?: MediaType;
  description?: string;
  location?: string;
  headers?: Record<string, string>;
  id?: string; // format: uuid
  resource_id?: string; // format: uuid
  service?: ServiceType;
}// END OF FILE: types/media.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/next-auth.d.ts

import NextAuth, { DefaultSession, DefaultUser } from "next-auth";
import { JWT as DefaultJWT } from "next-auth/jwt";

// Extend the User object to include all fields from our LoginResponse and authorize callback
interface ExtendedUser extends DefaultUser {
  id: string; // id is required and is a string
  username?: string;
  first_name?: string;
  last_name?: string;
  phone_number?: string;
  email_verified?: boolean;
  phone_number_verified?: boolean;
  accessToken?: string;
  roles?: string[];
  permissions?: string[];
  businessActorId?: string | null;
}

declare module "next-auth" {
  /**
   * Returned by `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context
   */
  interface Session {
    user: ExtendedUser & {
      // Ensure the user property in session is of type ExtendedUser
      name?: string | null;
      email?: string | null;
      image?: string | null;
    };
    error?: "RefreshAccessTokenError"; // For refresh token rotation error handling
  }

  /** The OAuth profile returned from your provider */
  interface User extends ExtendedUser { }
}

declare module "next-auth/jwt" {
  /** Returned by the `jwt` callback and GSSP functions */
  interface JWT extends DefaultJWT, ExtendedUser { }
}// END OF FILE: types/next-auth.d.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/organization.ts

// types/organization.ts

/**
 * Base interface for auditable entities, containing creation and update timestamps and user IDs.
 */
export interface Auditable {
  created_at?: string; // format: date-time
  updated_at?: string; // format: date-time
  deleted_at?: string; // format: date-time
  created_by?: string; // format: uuid
  updated_by?: string; // format: uuid
}

/**
 * Standard API response wrapper.
 */
export interface ApiResponse<T = any> {
  status?: "SUCCESS" | "FAILED" | "UNKNOWN";
  message?: string;
  data?: T;
  errors?: Record<string, string>;
  ok?: boolean;
}

// --- Contactable & Addressable Enums ---
export type ContactableType =
  | "BUSINESS_ACTOR"
  | "ORGANIZATION"
  | "AGENCY"
  | "BUSINESS_PARTNER"
  | "SALES_PERSON"
  | "PROVIDER"
  | "CUSTOMER"
  | "PROSPECT"
  | "DRIVER"
  | "DELIVERER";

export type AddressableType = ContactableType | "DELIVERY";

// --- Organization ---
export type OrganizationLegalForm =
  | "11" | "21" | "22" | "23" | "24" | "31" | "32" | "33" | "34" | "35"
  | "41" | "42" | "51" | "52" | "53" | "54" | "61" | "62" | "63" | "64"
  | "71" | "72" | "73" | "81" | "82" | "83" | "84" | "85";

export type OrganizationStatus =
  | "ACTIVE"
  | "INACTIVE"
  | "SUSPENDED"
  | "TERMINATED"
  | "PENDING_APPROVAL"
  | "UNDER_REVIEW"
  | "DISSOLVED";

export interface CreateOrganizationRequest {
  long_name: string;
  short_name: string;
  email: string;
  description: string; // maxLength: 500
  business_domains: string[]; // array of uuid, uniqueItems
  logo_url?: string;
  legal_form: OrganizationLegalForm;
  web_site_url?: string;
  social_network?: string;
  business_registration_number?: string;
  tax_number?: string;
  capital_share?: number;
  registration_date?: string; // format: date-time
  ceo_name?: string;
  year_founded?: string; // format: date-time
  keywords?: string[]; // uniqueItems
  number_of_employees?: number; // format: int32
}

export interface UpdateOrganizationRequest {
  long_name: string;
  short_name: string;
  email: string;
  description: string; // maxLength: 500, minLength: 0
  business_domains: string[]; // array of uuid, uniqueItems
  logo_url?: string;
  legal_form: OrganizationLegalForm;
  web_site_url?: string;
  social_network?: string;
  business_registration_number?: string;
  tax_number?: string;
  capital_share?: number;
  registration_date?: string; // format: date-time
  ceo_name?: string;
  year_founded?: string; // format: date-time
  keywords?: string[]; // uniqueItems
  number_of_employees?: number; // format: int32
}

// export interface OrganizationDto extends Auditable {
//   organization_id?: string; // format: uuid
//   business_domains?: string[]; // array of uuid, uniqueItems
//   email?: string;
//   short_name?: string;
//   long_name?: string;
//   description?: string;
//   logo_url?: string;
//   is_individual_business?: boolean;
//   legal_form?: OrganizationLegalForm;
//   is_active?: boolean;
//   website_url?: string;
//   social_network?: string;
//   business_registration_number?: string;
//   tax_number?: string;
//   capital_share?: number;
//   registration_date?: string; // format: date-time
//   ceo_name?: string;
//   year_founded?: string; // format: date-time
//   keywords?: string[]; // uniqueItems
//   status?: OrganizationStatus;
// }

export interface OrganizationDto extends Auditable {
  organization_id?: string; // format: uuid
  business_actor_id?: string; // format: uuid
  business_domains?: string[]; // array of uuid, uniqueItems
  email?: string;
  short_name?: string;
  long_name?: string;
  description?: string;
  logo_url?: string;
  is_individual_business?: boolean;
  legal_form?: OrganizationLegalForm;
  is_active?: boolean;
  website_url?: string;
  social_network?: string;
  business_registration_number?: string;
  tax_number?: string;
  capital_share?: number;
  registration_date?: string; // format: date-time
  ceo_name?: string;
  year_founded?: string; // format: date-time
  keywords?: string[]; // uniqueItems
  status?: OrganizationStatus;
}

export interface UpdateOrganizationStatusRequest {
  status: OrganizationStatus;
}

// --- Contacts ---
export interface CreateContactRequest {
  first_name?: string;
  last_name?: string;
  title?: string;
  phone_number?: string;
  secondary_phone_number?: string;
  fax_number?: string;
  email?: string;
  secondary_email?: string;
}

export interface UpdateContactRequest {
  first_name?: string;
  last_name?: string;
  title?: string;
  phone_number?: string;
  secondary_phone_number?: string;
  fax_number?: string;
  email?: string;
  secondary_email?: string;
}

export interface ContactDto extends Auditable {
  contact_id?: string; // format: uuid
  contactable_type?: ContactableType;
  contactable_id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  title?: string;
  is_email_verified?: boolean;
  is_phone_number_verified?: boolean;
  is_favorite?: boolean;
  phone_number?: string;
  secondary_phone_number?: string;
  fax_number?: string;
  email?: string;
  secondary_email?: string;
  verified_at?: string; // format: date-time
}

// --- Addresses ---
export interface CreateAddressRequest {
  address_line_1?: string;
  address_line_2?: string;
  city?: string;
  state?: string;
  locality?: string;
  country_id?: string; // format: uuid
  zip_code?: string;
  neighbor_hood?: string;
  latitude?: number; // format: double
  longitude?: number; // format: double
}

export interface UpdateAddressRequest {
  address_line_1?: string;
  address_line_2?: string;
  city?: string;
  state?: string;
  locality?: string;
  country_id?: string; // format: uuid
  zip_code?: string;
  neighbor_hood?: string;
  latitude?: number; // format: double
  longitude?: number; // format: double
}

export interface AddressDto extends Auditable {
  addressable_type?: AddressableType;
  addressable_id?: string; // format: uuid
  address_id?: string; // format: uuid
  address_line_1?: string;
  address_line_2?: string;
  city?: string;
  state?: string;
  locality?: string;
  country_id?: string; // format: uuid
  zip_code?: string;
  is_default?: boolean;
  neighbor_hood?: string;
  latitude?: number; // format: double
  longitude?: number; // format: double
}

// --- Practical Information ---
export interface CreatePracticalInformationRequest {
  type?: string;
  value?: string;
  notes?: string;
}

export interface UpdatePracticalInformationRequest {
  type?: string;
  value?: string;
  notes?: string;
}

export interface PracticalInformationDto extends Auditable {
  organization_id?: string; // format: uuid
  information_id?: string; // format: uuid
  type?: string;
  value?: string;
  notes?: string;
}

// --- Agency ---
export interface CreateAgencyRequest {
  short_name: string;
  long_name: string;
  description?: string; // maxLength: 500
  location: string;
  business_domains: string[]; // array of uuid, uniqueItems
  transferable?: boolean;
  images?: string[]; // uniqueItems
  greeting_message?: string;
  registration_date?: string; // format: date-time
  average_revenue?: number;
  capital_share?: number;
  registration_number?: string;
  social_network?: string;
  tax_number?: string;
}

export interface UpdateAgencyRequest {
  short_name: string;
  long_name: string;
  description?: string; // maxLength: 500
  location: string;
  business_domains: string[]; // array of uuid, uniqueItems
  transferable?: boolean;
  images?: string[]; // uniqueItems
  greeting_message?: string;
  registration_date?: string; // format: date-time
  average_revenue?: number;
  capital_share?: number;
  registration_number?: string;
  social_network?: string;
  tax_number?: string;
}

export interface AgencyDto extends Auditable {
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  owner_id?: string; // format: uuid
  name?: string;
  location?: string;
  description?: string;
  transferable?: boolean;
  business_domains?: string[]; // array of uuid, uniqueItems
  is_active?: boolean;
  logo?: string;
  short_name?: string;
  long_name?: string;
  is_individual_business?: boolean;
  is_headquarter?: boolean;
  images?: string[]; // uniqueItems
  greeting_message?: string;
  year_created?: string; // format: date-time
  manager_name?: string;
  registration_date?: string; // format: date-time
  average_revenue?: number;
  capital_share?: number;
  registration_number?: string;
  social_network?: string;
  tax_number?: string;
  keywords?: string[]; // uniqueItems
  is_public?: boolean;
  is_business?: boolean;
  operation_time_plan?: Record<string, string>;
  total_affiliated_customers?: number; // format: int32
}

export interface UpdateAgencyStatusRequest {
  active: boolean;
}

// --- Employee ---
export type EmployeeRole =
  | "CEO" | "ENGINEER" | "MARKETING" | "FINANCE" | "HR" | "SALES"
  | "CUSTOMERSERVICE" | "OWNER" | "SALESPERSON" | "CUSTOMER" | "PROVIDER"
  | "MANAGER" | "SUPERADMIN" | "ADMIN" | "SUPPORT" | "OTHER";

export interface CreateEmployeeRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  department?: string;
  employee_role?: EmployeeRole;
}

export interface UpdateEmployeeRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  department?: string;
  employee_role?: EmployeeRole;
}

export interface AffectEmployeeRequest {
  employee_id?: string; // format: uuid
}

// Response from Create/Update Employee endpoints
export interface EmployeeResponse extends Auditable {
  employee_id?: string; // format: uuid
  last_name?: string;
  first_name?: string;
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  employee_role?: EmployeeRole;
  department?: string;
}

// DTO for listing/getting employee details
export interface EmployeeDto extends Auditable {
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  partner_type?: "CUSTOMER" | "SUPPLIER" | "SALE" | "PROSPECT";
  partner_details?: string;
  logo?: string;
  employee_id?: string; // format: uuid
  is_manager?: boolean;
  employee_role?: EmployeeRole;
  department?: string;
}

// --- ThirdParty ---
export type ThirdPartyType =
  | "11" | "12" | "21" | "22" | "23" | "24" | "25" | "31" | "32" | "33" | "34"
  | "41" | "42" | "43" | "51" | "52" | "61" | "62" | "63" | "71" | "72";

export interface CreateThirdPartyRequest {
  legal_form?: OrganizationLegalForm;
  unique_identification_number?: string;
  trade_registration_number?: string;
  name?: string;
  acronym?: string;
  long_name?: string;
  logo?: string;
  images?: string[];
  accounting_account_numbers?: string[];
  authorized_payment_methods?: string[]; // uniqueItems
  authorized_credit_limit?: number;
  max_discount_rate?: number;
  vat_subject?: boolean;
  operations_balance?: number;
  opening_balance?: number;
  pay_term_number?: number; // format: int32
  pay_term_type?: string;
  third_party_family?: string;
  classification?: Record<string, string>;
  tax_number?: string;
  loyalty_points?: number; // format: int32
  loyalty_points_used?: number; // format: int32
  loyalty_points_expired?: number; // format: int32
}

export interface UpdateThirdPartyRequest {
  legal_form?: OrganizationLegalForm;
  unique_identification_number?: string;
  trade_registration_number?: string;
  name?: string;
  acronym?: string;
  long_name?: string;
  logo?: string;
  images?: string[];
  accounting_account_numbers?: string[];
  authorized_payment_methods?: string[]; // uniqueItems
  authorized_credit_limit?: number;
  max_discount_rate?: number;
  vat_subject?: boolean;
  operations_balance?: number;
  opening_balance?: number;
  pay_term_number?: number; // format: int32
  pay_term_type?: string;
  third_party_family?: string;
  classification?: Record<string, string>;
  tax_number?: string;
  loyalty_points?: number; // format: int32
  loyalty_points_used?: number; // format: int32
  loyalty_points_expired?: number; // format: int32
}

export interface ThirdPartyDto extends Auditable {
  organization_id?: string; // format: uuid
  id?: string; // format: uuid
  type?: ThirdPartyType;
  legal_form?: OrganizationLegalForm;
  unique_identification_number?: string;
  trade_registration_number?: string;
  name?: string;
  acronym?: string;
  long_name?: string;
  logo?: string;
  images?: string[];
  accounting_account_numbers?: string[];
  authorized_payment_methods?: string[]; // uniqueItems
  authorized_credit_limit?: number;
  max_discount_rate?: number;
  vat_subject?: boolean;
  operations_balance?: number;
  opening_balance?: number;
  pay_term_number?: number; // format: int32
  pay_term_type?: string;
  third_party_family?: string;
  classification?: Record<string, string>;
  tax_number?: string;
  loyalty_points?: number; // format: int32
  loyalty_points_used?: number; // format: int32
  loyalty_points_expired?: number; // format: int32
}

export interface UpdateThirdPartyStatusRequest {
  active: boolean;
}

export interface GetThirdPartyRequest {
  status?: boolean;
  type?: ThirdPartyType;
  page?: number; // format: int32, minimum: 1
  size?: number; // format: int32, minimum: 1
}

// --- Supplier (Provider) ---
export interface CreateProviderRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  contact_info?: string;
  address?: string;
  product_service_type?: string;
}

export interface UpdateProviderRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  contact_info?: string;
  address?: string;
  product_service_type?: string;
}

export interface AffectProviderRequest {
  provider_id?: string; // format: uuid
}

export interface ProviderDto extends Auditable {
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  partner_type?: "CUSTOMER" | "SUPPLIER" | "SALE" | "PROSPECT";
  partner_details?: string;
  logo?: string;
  provider_id?: string; // format: uuid
  contact_info?: string;
  address?: string;
  is_active?: boolean;
  product_service_type?: string;
}

// --- SalesPerson ---
export interface CreateSalesPersonRequest {
  name?: string;
  commission_rate?: number; // format: float
  credit?: number; // format: float
  current_balance?: number; // format: float
}

export interface UpdateSalesPersonRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  commission_rate?: number; // format: float
  credit?: number; // format: float
  current_balance?: number; // format: float
}

export interface SalesPersonDto extends Auditable {
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  partner_type?: "CUSTOMER" | "SUPPLIER" | "SALE" | "PROSPECT";
  partner_details?: string;
  logo?: string;
  sales_person_id?: string; // format: uuid
  name?: string;
  commission_rate?: number; // format: float
  credit?: number; // format: float
  current_balance?: number; // format: float
}

// --- Prospect ---
export interface CreateProspectRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  transaction_id?: number; // format: float
  payment_method?: string;
  amount_paid?: string;
  interest_level?: string;
}

export interface UpdateProspectRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  transaction_id?: number; // format: float
  payment_method?: string;
  amount_paid?: string;
  interest_level?: string;
}

export interface ProspectDto extends Auditable {
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  partner_type?: "CUSTOMER" | "SUPPLIER" | "SALE" | "PROSPECT";
  partner_details?: string;
  logo?: string;
  prospect_id?: string; // format: uuid
  transaction_id?: number; // format: float
  payment_method?: string;
  amount_paid?: string;
  interest_level?: string;
}

// --- Customer ---
export interface CreateCustomerRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  transaction_id?: number; // format: float
  payment_method?: string;
  amount_paid?: string;
}

export interface UpdateCustomerRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  transaction_id?: number; // format: float
  payment_method?: string;
  amount_paid?: string;
}

export interface AffectCustomerRequest {
  customer_id?: string; // format: uuid
}

export interface CustomerDto extends Auditable {
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  partner_type?: "CUSTOMER" | "SUPPLIER" | "SALE" | "PROSPECT";
  partner_details?: string;
  logo?: string;
  customer_id?: string; // format: uuid
  transaction_id?: number; // format: float
  payment_method?: string;
  amount_paid?: string;
}

// --- Certification ---
export interface CreateCertificationRequest {
  type?: string;
  name?: string;
  description?: string;
  obtainment_date?: string; // format: date-time
}

export interface UpdateCertificationRequest {
  type?: string;
  name?: string;
  description?: string;
  obtainment_date?: string; // format: date-time
}

export interface CertificationDto extends Auditable {
  organization_id?: string; // format: uuid
  certification_id?: string; // format: uuid
  type?: string;
  name?: string;
  description?: string;
  obtainment_date?: string; // format: date-time
}

// --- Proposed Activity ---
export interface CreateProposedActivityRequest {
  type?: string;
  name?: string;
  rate?: number;
  description?: string;
}

export interface UpdateProposedActivityRequest {
  type?: string;
  name?: string;
  rate?: number;
  description?: string;
}

export interface ProposedActivityDto extends Auditable {
  activity_id?: string; // format: uuid
  organization_id?: string; // format: uuid
  type?: string;
  name?: string;
  rate?: number;
  description?: string;
}

// --- Business Domain ---
export interface CreateBusinessDomainRequest {
  parent_domain_id?: string; // format: uuid
  name: string;
  image?: string;
  galleries?: string[];
  type: string;
  type_label: string;
  description?: string; // maxLength: 255
  metadata?: Record<string, any>;
}

export interface UpdateBusinessDomainRequest {
  parent_domain_id?: string; // format: uuid
  name: string;
  image?: string;
  galleries?: string[];
  type: string;
  type_label: string;
  description?: string; // maxLength: 255
  metadata?: Record<string, any>;
}

export interface BusinessDomainDto extends Auditable {
  id?: string; // format: uuid
  organization_id?: string; // format: uuid
  parent_domain_id?: string; // format: uuid
  name?: string;
  image?: string;
  galleries?: string[];
  type?: string;
  type_label?: string;
  description?: string;
  metadata?: Record<string, any>;
}

export interface GetBusinessDomainRequest {
  organization_id?: string; // format: uuid
  parent_domain_id?: string; // format: uuid
  name?: string;
  page?: number; // format: int32, minimum: 1
  size?: number; // format: int32, minimum: 1
}

// --- Business Actor ---
export type BusinessActorType =
  | "PROVIDER" | "CUSTOMER" | "SALESPERSON" | "CLIENT"
  | "FREELANCE_DRIVER" | "FARMER" | "AGENCY" | "VEHICLE_RENTAL" | "GUEST";

export type Gender = "MALE" | "FEMALE";

export interface CreateBusinessActorRequest {
  phone_number?: string;
  email?: string;
  avatar_picture?: string;
  profile_picture?: string;
  first_name: string;
  last_name?: string;
  is_individual?: boolean;
  birth_date?: string; // format: date-time
  gender?: Gender;
  nationality?: string;
  profession?: string;
  biography?: string;
  type?: BusinessActorType;
}

export interface UpdateBusinessActorRequest {
  phone_number?: string;
  email?: string;
  avatar_picture?: string;
  profile_picture?: string;
  first_name?: string;
  last_name?: string;
  is_individual?: boolean;
  birth_date?: string; // format: date-time
  gender?: Gender;
  nationality?: string;
  profession?: string;
  biography?: string;
  type?: BusinessActorType;
}

export interface BusinessActorDto extends Auditable {
  business_actor_id?: string; // format: uuid
  phone_number?: string;
  email?: string;
  avatar_picture?: string;
  profile_picture?: string;
  first_name?: string;
  last_name?: string;
  is_individual?: boolean;
  is_available?: boolean;
  birth_date?: string; // format: date-time
  role?: EmployeeRole;
  gender?: Gender;
  nationality?: string;
  profession?: string;
  qualifications?: string[];
  payment_methods?: string[]; // uniqueItems
  addresses?: string[]; // array of uuid, uniqueItems
  is_verified?: boolean;
  is_active?: boolean;
  biography?: string;
  type?: BusinessActorType;
}

// --- Images ---
export interface ImageDto {
  id?: string;
  name?: string;
  size?: number; // format: int64
  fileType?: string;
}

// --- Application & Keys ---
export interface CreateApplicationRequest {
  name: string;
  description?: string;
  success_url?: string; // pattern: ^(https?://).*
  cancel_url?: string; // pattern: ^(https?://).*
  failed_url?: string; // pattern: ^(https?://).*
  callback_url?: string; // pattern: ^(https?://).*
}

export interface ApplicationDto extends Auditable {
  id?: string; // format: uuid
  business_actor_id?: string; // format: uuid
  name?: string;
  description?: string;
  is_active?: boolean;
  success_url?: string;
  cancel_url?: string;
  failed_url?: string;
  callback_url?: string;
}

export interface ApplicationKeyDto extends Auditable {
  application_id?: string; // format: uuid
  public_key?: string;
  secret_key?: string;
}

// --- Enum Value Arrays for UI Controls ---

// --- Enum Value Arrays for UI Controls (as Non-Empty Tuples) ---

export const OrganizationLegalFormValues: [OrganizationLegalForm, ...OrganizationLegalForm[]] = [
  "11", "21", "22", "23", "24", "31", "32", "33", "34", "35",
  "41", "42", "51", "52", "53", "54", "61", "62", "63", "64",
  "71", "72", "73", "81", "82", "83", "84", "85"
];

export const OrganizationStatusValues: [OrganizationStatus, ...OrganizationStatus[]] = [
  "ACTIVE", "INACTIVE", "SUSPENDED", "TERMINATED",
  "PENDING_APPROVAL", "UNDER_REVIEW", "DISSOLVED"
];

export const ContactableTypeValues: [ContactableType, ...ContactableType[]] = [
  "BUSINESS_ACTOR", "ORGANIZATION", "AGENCY", "BUSINESS_PARTNER",
  "SALES_PERSON", "PROVIDER", "CUSTOMER", "PROSPECT", "DRIVER", "DELIVERER"
];

export const AddressableTypeValues: [AddressableType, ...AddressableType[]] = [
  "BUSINESS_ACTOR", "ORGANIZATION", "AGENCY", "BUSINESS_PARTNER",
  "SALES_PERSON", "PROVIDER", "CUSTOMER", "PROSPECT", "DRIVER", "DELIVERER", "DELIVERY"
];

export const EmployeeRoleValues: [EmployeeRole, ...EmployeeRole[]] = [
  "CEO", "ENGINEER", "MARKETING", "FINANCE", "HR", "SALES",
  "CUSTOMERSERVICE", "OWNER", "SALESPERSON", "CUSTOMER", "PROVIDER",
  "MANAGER", "SUPERADMIN", "ADMIN", "SUPPORT", "OTHER"
];

export const ThirdPartyTypeValues: [ThirdPartyType, ...ThirdPartyType[]] = [
  "11", "12", "21", "22", "23", "24", "25", "31", "32", "33", "34",
  "41", "42", "43", "51", "52", "61", "62", "63", "71", "72"
];

export const BusinessActorTypeValues: [BusinessActorType, ...BusinessActorType[]] = [
  "PROVIDER", "CUSTOMER", "SALESPERSON", "CLIENT", "FREELANCE_DRIVER",
  "FARMER", "AGENCY", "VEHICLE_RENTAL", "GUEST"
];

export const GenderValues: [Gender, ...Gender[]] = [
  "MALE", "FEMALE"
];// END OF FILE: types/organization.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/product.ts

// types/product.ts

export interface BusinessActorInfo {
  id: string;
  name: string;
  logoUrl?: string; // Optional logo for the BA
}

export type ProductType = "RESOURCE" | "SERVICE";
export interface ProductListItemData {
  id: string;
  name: string;
  productType: ProductType,
  description?: string;
  basePrice?: number;
  currentState: string; // e.g., PUBLISHED for Service, AVAILABLE for Resource (for customer view)
  createdAt: string; // ISO date string
  updatedAt: string; // ISO date string
  isScheduled?: boolean; // Less relevant for customer view of published items
  scheduledAt?: string; // Less relevant for customer view
  imageUrl?: string; // Optional image for the product/service
  baInfo?: BusinessActorInfo; // Information about the BA offering this
  category?: string;
  tags?: string[];
  additionnalInfo?: JSON;
  // additional custom attributes relevant for customer display
  // For example, if it a "ConsultationSlot"
  // duration?: string;
  // location?: string;
}

// Potentially a more detailed type if clicking a product shows more info
export interface ProductDetailData extends ProductListItemData {
  // more specific details
  specifications?: Record<string, string | number>;
  availabilityCalendar?: string; // e.g., link or embedded data for service availability
};// END OF FILE: types/product.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/resourceManagement.ts.txt

// types/resourceManagement.ts

// --- General ---
export type ProductAccessibility = "PUBLIC" | "PRIVATE";
export type ProductPackagingType = "KG" | "CARTON" | "PIECE" | "METER";
export type ProductStateType = "AVAILABLE" | "UNAVAILABLE" | "RESERVED" | "SOLD"; // From Resource/Service DTOs
export type ProductPostStatusType = "AVAILABLE" | "UNAVAILABLE"; // From ProductPostDto
export type ProductTypeType = "TANGIBLE" | "INTANGIBLE"; // Differentiates physical vs digital/service aspects


// --- Resources & Services (Core Product Definitions) ---
interface BaseProductRequest {
  brand_id?: string; // uuid
  immatriculation?: string;
  serial_number?: string;
  sku_code?: string;
  bar_code?: string;
  qr_code?: string;
  name?: string;
  short_description?: string;
  long_description?: string;
  storage_condition?: string;
  model_id?: string; // uuid
  iot_number?: string;
  available_quantity?: number; // int32
  product_type?: ProductTypeType;
  base_price?: number;
  accessibility?: ProductAccessibility;
  organisation_id?: string; // uuid (Note: spec uses 'organisation_id')
  default_agency_id?: string; // uuid
  sell_packaging?: ProductPackagingType;
  purchase_packaging?: ProductPackagingType;
  category_id?: string; // uuid
  number_usage?: number; // int32
  transferable?: boolean;
  state?: ProductStateType; // This state seems specific to this service's view of product
  max_reservation?: number; // int32
  is_tangible?: boolean;
  expires_at?: string; // date-time
}

export interface CreateResourceRequest extends BaseProductRequest {
  product_compositions?: CreateProductCompositionRequest[];
}
export interface UpdateResourceRequest extends Partial<CreateResourceRequest> { }

export interface CreateServiceRequest extends BaseProductRequest { }
export interface UpdateServiceRequest extends Partial<CreateServiceRequest> { }


interface BaseProductDto extends Auditable {
  brand_id?: string; // uuid
  immatriculation?: string;
  serial_number?: string;
  sku_code?: string;
  bar_code?: string;
  qr_code?: string;
  name?: string;
  short_description?: string;
  long_description?: string;
  storage_condition?: string;
  model_id?: string; // uuid
  category_id?: string; // uuid
  iot_number?: string;
  available_quantity?: number; // int32
  product_type?: ProductTypeType;
  base_price?: number;
  accessibility?: ProductAccessibility;
  organisation_id?: string; // uuid
  default_agency_id?: string; // uuid
  sell_product_id?: string; // uuid (sell_packaging in request, sell_product_id in DTO?) - CLARIFY
  purchase_unit_id?: string; // uuid (purchase_packaging in request, purchase_unit_id in DTO?) - CLARIFY
  parent_id?: string; // uuid
  number_usage?: number; // int32
  transferable?: boolean;
  state?: ProductStateType;
  max_reservation?: number; // int32
  is_tangible?: boolean;
  expires_at?: string | null; // date-time
  // organization_id also appears at the end of DTO in spec, might be redundant or context specific.
}

export interface ResourceDto extends BaseProductDto {
  resource_id?: string; // uuid
  // product_compositions are in request but not DTO in spec
}

export interface ServiceDto extends BaseProductDto {
  service_id?: string; // uuid
}

export interface CreateProductCompositionRequest {
  id?: string; // uuid (optional in create)
  label?: string;
  value_range?: string;
  comment?: string;
}
// No ProductCompositionDto in spec


// --- Product Posts ---
export interface CreateProductPostRequest {
  // createdAt, updatedAt, deletedAt typically not in create requests
  marchand_id?: string; // uuid
  variation_id?: string; // uuid
  product_id?: string; // uuid (Resource or Service ID it's posting)
  category_id?: string; // uuid
  name?: string; // Often derived from product, but can be overridden for the post
  long_description?: string;
  short_description?: string;
  sale_unit_id?: string; // uuid (references UnitDto)
  base_price?: number; // Can be different from product's base_price
  weight?: number;
  default_currency?: string; // e.g., "USD"
  next_available_time?: string; // date-time
  life_span?: number; // int32 (e.g., days for a perishable item post)
  quantity?: number; // int32 (quantity specifically for this post/listing)
  status?: ProductPostStatusType;
  expired_at?: string; // date-time
  brand_id?: string; // uuid
  immatriculation?: string;
  model_id?: string; // uuid
  // organisation_id is path param for create, not in body
  default_agency_id?: string; // uuid
  default_price?: number; // Might be final price after variations/options for this post
  alert_quantity?: number; // int32
  is_tax_exempt_for_com_transactions?: boolean;
}
export interface UpdateProductPostRequest extends Partial<Omit<CreateProductPostRequest, 'product_id' | 'marchand_id'>> {
  // Some fields might be immutable on update
  id?: string; // uuid for the ProductPost itself
}

export interface ProductPostDto { // Properties seem same as Create request + timestamps
  id?: string; // uuid of the ProductPost
  createdAt?: string; // date-time
  updatedAt?: string; // date-time
  deletedAt?: string | null; // date-time
  marchand_id?: string;
  variation_id?: string;
  product_id?: string;
  category_id?: string;
  name?: string;
  long_description?: string;
  short_description?: string;
  sale_unit_id?: string;
  base_price?: number;
  weight?: number;
  default_currency?: string;
  next_available_time?: string | null;
  life_span?: number;
  quantity?: number;
  status?: ProductPostStatusType;
  expired_at?: string | null;
  brand_id?: string;
  immatriculation?: string;
  model_id?: string;
  organisation_id?: string; // Present in DTO
  default_agency_id?: string;
  default_price?: number;
  alert_quantity?: number;
  is_tax_exempt_for_com_transactions?: boolean;
}

// --- Variations ---
export interface CreateVariationRequest { // Based on spec, seems to take full set of fields
  name?: string;
  default_purchase_price?: number; // double
  default_purchase_price_in_tax?: number; // double
  default_sell_price?: number; // double
  default_sell_price_in_tax?: number; // double
  profit_percent?: number; // double
  //Timestamps in create request is unusual, usually set by backend.
  createdAt?: string; // date-time
  updatedAt?: string; // date-time
  deletedAt?: string | null; // date-time
}
export interface UpdateVariationRequest extends CreateVariationRequest { } // Full update seems to be the case

export interface VariationRequest { // For saveVariations array
  vairation_id?: string; // uuid (Typo in spec: 'vairation_id') - assuming it means existing ID for update
  name?: string;
  default_purchase_price?: number;
  default_purchase_price_in_tax?: number;
  default_sell_price?: number;
  default_sell_price_in_tax?: number;
  profit_percent?: number;
  // Timestamps here too
  createdAt?: string;
  updatedAt?: string;
  deletedAt?: string | null;
}

export interface VariationDto {
  id?: string; // uuid
  product_id?: string; // uuid
  name?: string;
  default_purchase_price?: number;
  default_purchase_price_in_tax?: number;
  default_sell_price?: number;
  default_sell_price_in_tax?: number;
  profit_percent?: number;
  createdAt?: string;
  updatedAt?: string;
  deletedAt?: string | null;
}

// --- Sale Prices ---
export type SalePriceType = "RETAIL" | "WHOLESALE" | "SEMI_WHOLESALE" | "SUPER_WHOLESALE" | "DELIVERY" | "PURCHASE" | "OTHER_PRICE";
export interface CreateSalePriceRequest {
  // product_post_id is path param
  sale_price_type?: SalePriceType;
  min_quantity?: number; // int32
  max_quantity?: number; // int32
  value?: number;
  max_reduction?: number;
  currency?: string; // e.g. "USD"
  is_negociable?: boolean;
  validity_date?: string; // date-time
  notes?: string;
}
export interface UpdateSalePriceRequest extends Partial<CreateSalePriceRequest> {
  product_post_id?: string; // uuid (included in spec for update, though it's a path param)
}
export interface SalePriceDto extends Auditable {
  id?: string; // uuid
  product_post_id?: string; // uuid
  sale_price_type?: SalePriceType;
  min_quantity?: number;
  max_quantity?: number;
  value?: number;
  max_reduction?: number;
  currency?: string;
  is_negociable?: boolean;
  validity_date?: string | null; // date-time
  notes?: string;
}

// --- Units (Pricing Mode) ---
export interface CreateUnitRequest {
  base_unit_id?: string | null; // uuid (can be null for a base unit itself)
  actual_name?: string;
  short_name?: string;
  base_unit_multiplier?: number; // float
  allow_decimal?: boolean;
}
export interface UpdateUnitRequest extends Partial<CreateUnitRequest> { }
export interface UnitDto extends Auditable {
  id?: string; // uuid
  organization_id?: string; // uuid
  base_unit_id?: string | null; // uuid
  actual_name?: string;
  short_name?: string;
  base_unit_multiplier?: number;
  allow_decimal?: boolean;
}

// --- Categories, Brands, Models, Attributes ---
export type CategoryState = "AVAILABLE" | "UNAVAILABLE";
export interface CreateCategoryRequest {
  name?: string;
  description?: string;
  owner_id?: string; // uuid (likely organization_id or user_id)
  image_icon_id?: string; // uuid
  parent_id?: string | null; // uuid
  short_code?: string;
  state?: CategoryState;
}
export interface UpdateCategoryRequest extends Partial<CreateCategoryRequest> { }
export interface CategoryDto extends Auditable {
  id?: string; // uuid
  name?: string;
  description?: string;
  short_code?: string;
  owner_id?: string; // uuid
  image_icon_id?: string; // uuid
  parent_id?: string | null; // uuid
  root?: boolean;
  state?: CategoryState;
}
export interface CreateCategoryResponse extends Auditable { // Matches DTO structure but with sub_categories
  id?: string;
  name?: string;
  description?: string;
  short_code?: string;
  state?: CategoryState;
  sub_categories?: CategoryDto[];
}


export interface CreateProductBrandRequest {
  name?: string;
  description?: string;
  code?: string;
  image_id?: string; // uuid
  created_by_user_id?: string; // uuid
  notes?: string;
}
export interface UpdateProductBrandRequest extends Partial<CreateProductBrandRequest> { }
export interface ProductBrandDto extends Auditable {
  id?: string; // uuid
  name?: string;
  description?: string;
  code?: string;
  image_id?: string; // uuid
  created_by_user_id?: string; // uuid
  notes?: string;
}

export interface CreateModelRequest { // Timestamps in request is odd
  created_by_user_id?: string; // uuid
  name?: string;
  description?: string;
}
export interface UpdateModelRequest extends Partial<Omit<CreateModelRequest, 'created_by_user_id'>> { }
export interface ModelDto extends Auditable { // Based on UpdateModelResponse and common DTO patterns
  id?: string; // uuid
  created_by_user_id?: string; // uuid
  name?: string;
  description?: string;
}
// UpdateModelResponse in spec is same as ModelDto


export interface CreateAttributeRequest {
  name?: string;
  description?: string;
}
export interface UpdateAttributeRequest extends Partial<CreateAttributeRequest> { }
export interface AttributeDto extends Auditable { // Based on UpdateAttributeResponse and common DTO patterns
  id?: string; // uuid
  name?: string;
  description?: string;
}
// UpdateAttributeResponse in spec is same as AttributeDto

export interface AttributeValueDto extends Auditable {
  id?: string; // uuid
  product_id?: string; // uuid
  attribut_id?: string; // uuid (Typo in spec: 'attribut_id')
  value?: string;
}
// AttributeValueResponse in spec is same as AttributeValueDto


// --- Reviews & Reactions ---
export type ReactionType = "LIKE" | "LOVE" | "HAHA" | "WOW" | "SAD" | "ANGRY" | "CELEBRATE";
export interface CreateReviewRequest {
  user_id?: string; // uuid
  targe_id?: string; // uuid (Typo in spec: 'targe_id') -> target_id
  rating?: number; // int32
  comment?: string;
}
export interface UpdateReviewRequest {
  rating?: number; // int32
  comment?: string;
}
export interface ReviewDto extends Auditable {
  id?: string; // uuid
  user_id?: string; // uuid
  targe_id?: string; // uuid -> target_id
  rating?: number; // int32
  comment?: string;
}

export interface CreateReactionRequest {
  target_id?: string; // uuid
  user_id?: string; // uuid
  reaction_type?: ReactionType;
}
export interface ReactionDto extends Auditable {
  id?: string; // uuid
  target_id?: string; // uuid
  user_id?: string; // uuid
  reaction_type?: ReactionType;
}

// --- Media ---
export interface MediaDto { // From spec
  id?: string; // uuid
  target_id?: string; // uuid
  name?: string; // Original filename
  real_name?: string; // Stored filename (often a UUID or hash)
  size?: number; // int64
  file_type?: string; // MIME type
  is_primary?: boolean;
  // Timestamps from spec for MediaDto are unusual (createdAt etc.)
  createdAt?: string; // date-time
  updatedAt?: string; // date-time
  deletedAt?: string | null; // date-time
}
export interface MediaResponse extends MediaDto { } // As per spec for POST /media/add/product/{productId}// END OF FILE: types/resourceManagement.ts.txt

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/table.ts

export interface DataTableFilterOption {
  label: string;
  value: string;
  icon?: React.ComponentType<{ className?: string }>;
}

export interface DataTableSearchableColumn {
  id: string;
  title: string;
}

export interface DataTableFilterableColumn<TData = any> extends DataTableSearchableColumn {
  options: DataTableFilterOption[];
}// END OF FILE: types/table.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/user-preferences.ts

// types/user-preferences.ts

export interface UserNotificationPreferences {
  email: boolean;
  push: boolean;
  sms: boolean;
  accountActivity: boolean;
  newFeatures: boolean;
  marketing: boolean;
  frequency: string;
  quietHoursStart?: string;
  quietHoursEnd?: string;
}

export interface UserPrivacyPreferences {
  analyticsSharing: boolean;
  personalizedAds: boolean;
  visibility:string;
  dataRetention: string;
}

export interface UserDisplayPreferences {
  language: string;
  currency: string;
  dateFormat: string;
  fontSize: number;
  theme: string;
  layout: string;
  timezone?: string;
  profilePhotoUrl?: string; // NEW: For user uploaded photo
}

export interface UserPreferencesDto {
  user_id: string;
  display: UserDisplayPreferences;
  notifications: UserNotificationPreferences;
  privacy: UserPrivacyPreferences;
  updated_at?: string;
}

export interface UpdateUserPreferencesRequest {
  display?: Partial<UserDisplayPreferences>;
  notifications?: Partial<UserNotificationPreferences>;
  privacy?: Partial<UserPrivacyPreferences>;
}// END OF FILE: types/user-preferences.ts

