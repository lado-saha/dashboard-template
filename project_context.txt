Project Context From: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template
Generated On: Tue May 13 01:08:40 PM WAT 2025
===============================================
Ignored Directory Patterns: .* node_modules vendor build dist target __pycache__ .next cache target storage
Ignored File Patterns: *.log *.jar *.pdf *.png *.jpg *.class *.sqlite project_context.txt package-lock.json yarn.lock composer.lock *.ico pnpm-lock.yaml
===============================================

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/auth/[...nextauth]/route.ts

// FILE: app/api/auth/[...nextauth]/route.ts
import NextAuth, { type NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
// bcrypt is no longer needed for this temporary logic
// import bcrypt from "bcryptjs";

// Placeholder user data - NOT USED in the temporary authorize logic below
const users = [
  {
    id: "1",
    name: "Demo User",
    email: "user@example.com",
    hashedPassword: "...", // Not relevant for temp logic
  },
  // ... other users ...
];

// getUserByEmail is NOT USED in the temporary authorize logic below
async function getUserByEmail(email: string) {
  return users.find((user) => user.email === email) || null;
}

export const authOptions: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email or Phone", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        // --- TEMPORARY DEVELOPMENT LOGIN ---
        // WARNING: Allows any non-empty email/password. FOR DEV ONLY!

        if (credentials?.email && credentials.email.length > 0 && credentials?.password && credentials.password.length > 0) {
          console.warn(
            `[DEV AUTH] Bypassing password check for: ${credentials.email}`
          );
          // Return a dummy user object.
          // Use the provided email if possible, otherwise default.
          return {
            id: "dev-user-123", // Static ID for dev user
            name: "Dev User",
            email: credentials.email, // Use the email they entered
            // You can add a role here if needed for testing role-based UI
            // role: 'admin',
          };
        }

        // If email or password is empty, deny login
        console.error("Missing credentials for DEV AUTH");
        return null;

        // --- END OF TEMPORARY DEVELOPMENT LOGIN ---

        /* --- ORIGINAL LOGIC (Commented Out) ---
        if (!credentials?.email || !credentials?.password) {
          console.error("Missing credentials");
          return null;
        }
        const user = await getUserByEmail(credentials.email);
        if (!user || !user.hashedPassword) {
          console.log("No user found or user has no password set.");
          return null;
        }
        const isValidPassword = await bcrypt.compare(
          credentials.password,
          user.hashedPassword
        );
        if (!isValidPassword) {
          console.log("Password mismatch for user:", user.email);
          return null;
        }
        console.log("Authorization successful for:", user.email);
        return {
          id: user.id,
          name: user.name,
          email: user.email,
        };
        */
      },
    }),
  ],
  session: {
    strategy: "jwt",
  },
  pages: {
    signIn: "/login",
    // Keep other pages definitions if needed
    // signOut: '/auth/signout',
    // error: '/auth/error',
  },
  callbacks: {
    async session({ session, token }) {
      if (token && session.user) {
        session.user.id = token.sub ?? session.user.id;
        // If you added a role in the dummy user above, pass it here
        // session.user.role = token.role;
      }
      return session;
    },
    async jwt({ token, user, account, profile, isNewUser }) {
      if (user) {
        token.sub = user.id;
        // If you added a role in the dummy user above, pass it here
        // token.role = user.role;
      }
      return token;
    },
  },
  secret: process.env.NEXTAUTH_SECRET,
  debug: process.env.NODE_ENV === "development",
};

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };// END OF FILE: app/api/auth/[...nextauth]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(auth)/forgot-password/page.tsx

import { ForgotPasswordForm } from "@/components/auth/forgot-password-form";

export default function ForgotPasswordPage() {
  return (
    // Use a consistent container style for auth pages
    <div className="flex min-h-screen items-center justify-center p-4 bg-gradient-to-br from-background via-background to-muted/30 dark:to-muted/10">
      {/* Apply entry animation to the form card */}
      <div className="animate-fade-in-up">
        <ForgotPasswordForm />
      </div>
    </div>
  );
}// END OF FILE: app/(auth)/forgot-password/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(auth)/login/page.tsx

import { LoginForm } from "@/components/auth/login-form";

export default function LoginPage() {
  return (
    // Use a consistent container style for auth pages
    <div className="flex min-h-screen items-center justify-center p-4 bg-gradient-to-br from-background via-background to-muted/30 dark:to-muted/10">
      {/* Apply entry animation to the form card */}
      <div className="animate-fade-in-up">
        <LoginForm />
      </div>
    </div>
  );
}// END OF FILE: app/(auth)/login/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(auth)/signup/page.tsx

import { SignUpForm } from "@/components/auth/signup-form";

export default function SignUpPage() {
  return (
     // Use a consistent container style for auth pages
    <div className="flex min-h-screen items-center justify-center p-4 bg-gradient-to-br from-background via-background to-muted/30 dark:to-muted/10">
       {/* Apply entry animation to the form card */}
      <div className="animate-fade-in-up">
        <SignUpForm />
      </div>
    </div>
  );
}// END OF FILE: app/(auth)/signup/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/bonus/page.tsx


import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function BusinessActorBonusPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Bonus Configuration</h1>
       <Tabs defaultValue="rules" className="space-y-4">
        <TabsList>
          <TabsTrigger value="rules">Rules</TabsTrigger>
          <TabsTrigger value="transactions">Bonus Transactions</TabsTrigger>
          <TabsTrigger value="point_value">Point Value</TabsTrigger>
          <TabsTrigger value="campaigns">Campaigns</TabsTrigger>
          {/* Add more tabs for advanced features like loyalty tiers */}
        </TabsList>

        <TabsContent value="rules">
          <Card>
            <CardHeader>
              <CardTitle>Bonification Rules</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Define rules for awarding bonus points based on Bonification API.</p>
              {/* TODO: Implement rule creation/management interface */}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="transactions">
          <Card>
            <CardHeader>
              <CardTitle>Bonus Transactions History</CardTitle>
            </CardHeader>
            <CardContent>
              <p>View a detailed log of all bonus points awarded and redeemed.</p>
              {/* TODO: Implement bonus transaction table/log */}
            </CardContent>
          </Card>
        </TabsContent>

         <TabsContent value="point_value">
          <Card>
            <CardHeader>
              <CardTitle>Monetary Value per Point</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Set the conversion rate for points to currency.</p>
              {/* TODO: Implement setting for point value */}
            </CardContent>
          </Card>
        </TabsContent>

         <TabsContent value="campaigns">
          <Card>
            <CardHeader>
              <CardTitle>Bonus Campaigns</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Create and manage special bonus campaigns (e.g., based on sales targets, referrals).</p>
              {/* TODO: Implement campaign management UI */}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/bonus/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/business/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

export default function BusinessActorBusinessPage() {
  // Note: Some items from the spec (Transactions, Invoices, Payments, Subscription)
  // have their own top-level pages based on the sidebar.
  // This page can group the remaining or provide an overview.
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Business Operations</h1>
      <Tabs defaultValue="wishlist" className="space-y-4">
        <TabsList>
          <TabsTrigger value="wishlist">Wishlist</TabsTrigger>
          <TabsTrigger value="planning">Planning/Scheduling</TabsTrigger>
          <TabsTrigger value="posts">Posts/Published</TabsTrigger>
          <TabsTrigger value="reservations">Reservations</TabsTrigger>
          <TabsTrigger value="manage">Manage...</TabsTrigger>
          {/* Add more tabs for advanced features like Market Analysis, Partners */}
        </TabsList>

        <TabsContent value="wishlist">
          <Card>
            <CardHeader><CardTitle>Wishlist</CardTitle></CardHeader>
            <CardContent><p>Manage items saved to the wishlist.</p></CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="planning">
          <Card>
            <CardHeader><CardTitle>Planning/Scheduling</CardTitle></CardHeader>
            <CardContent><p>View and manage business schedules and plans.</p></CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="posts">
          <Card>
            <CardHeader><CardTitle>Posts/Published Content</CardTitle></CardHeader>
            <CardContent><p>Manage published posts or announcements.</p></CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="reservations">
          <Card>
            <CardHeader><CardTitle>Reservations</CardTitle></CardHeader>
            <CardContent><p>View and manage reservations made by customers.</p></CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="manage">
          <Card>
            <CardHeader><CardTitle>Other Management</CardTitle></CardHeader>
            <CardContent><p>Placeholder for other business management features (e.g., partners, market analysis).</p></CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/business/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/chat/page.tsx


import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function BusinessActorChatPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Chat & Chatbot</h1>
      <Card>
        <CardHeader>
          <CardTitle>Messaging Center</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Integrated chat interface for communication with customers, team, or support. Includes chatbot functionality.</p>
          {/* TODO: Implement Chat component, potentially integrating a third-party service or building custom */}
          <div className="mt-4 h-96 border rounded-md flex items-center justify-center text-muted-foreground">
            Chat Interface Placeholder
          </div>
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/chat/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/dashboard/page.tsx

// FILE: app/(dashboard)/(business-actor)/dashboard/page.tsx
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function BusinessActorDashboardPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Business Actor Dashboard</h1>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
         <Card>
           <CardHeader>
             <CardTitle>Welcome!</CardTitle>
           </CardHeader>
           <CardContent>
             <p>This is your main dashboard. Add widgets and content here.</p>
             {/* TODO: Add dashboard widgets */}
           </CardContent>
         </Card>
         {/* Add more placeholder cards */}
      </div>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/dashboard/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/invoices/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function BusinessActorInvoicesPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Invoices Overview</h1>
      <Card>
        <CardHeader>
          <CardTitle>Manage Invoices</CardTitle>
        </CardHeader>
        <CardContent>
          <p>View, manage, and generate invoices (for subscriptions, sales, etc.).</p>
          {/* TODO: Implement Invoice Table, filtering, creation/automation */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/invoices/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/organization/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

export default function BusinessActorOrganizationPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Organization Management</h1>

      <Tabs defaultValue="analytics" className="space-y-4">
        <TabsList>
          <TabsTrigger value="analytics">Analytics/Statistics</TabsTrigger>
          <TabsTrigger value="headquarter">Headquarter</TabsTrigger>
          <TabsTrigger value="personnel">Personnel & Roles</TabsTrigger>
          <TabsTrigger value="agencies">Agencies</TabsTrigger>
          <TabsTrigger value="products">Products</TabsTrigger>
          {/* Add more tabs for advanced features if needed */}
        </TabsList>

        <TabsContent value="analytics">
          <Card>
            <CardHeader>
              <CardTitle>Organization Analytics</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Organization-wide statistics and analytics will be displayed here.</p>
              {/* TODO: Implement Analytics/Statistics components */}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="headquarter">
          <Card>
            <CardHeader>
              <CardTitle>Headquarter Details</CardTitle>
            </CardHeader>
            <CardContent>
              <p>View and manage headquarter information.</p>
              {/* TODO: Implement Headquarter form/details */}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="personnel">
          <Card>
            <CardHeader>
              <CardTitle>Personnel & Roles</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Manage organization staff, roles, and permissions.</p>
              {/* TODO: Implement Personnel/User table, role management */}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="agencies">
          <Card>
            <CardHeader>
              <CardTitle>Agencies</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Manage and view performance of different agencies/branches.</p>
              {/* TODO: Implement Agency list/management */}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="products">
          <Card>
            <CardHeader>
              <CardTitle>Products</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Manage the products or services offered by the organization.</p>
              {/* TODO: Implement Product list/management, inventory (advanced) */}
            </CardContent>
          </Card>
        </TabsContent>

      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/organization/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/payments/page.tsx


import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

export default function BusinessActorPaymentsPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Payments</h1>
      <Tabs defaultValue="details">
        <TabsList>
          <TabsTrigger value="details">Payment Details/Modes</TabsTrigger>
          <TabsTrigger value="statistics">Payment Statistics</TabsTrigger>
          <TabsTrigger value="refunds">Manage Refunds</TabsTrigger>
          {/* <TabsTrigger value="crypto">Crypto Payments</TabsTrigger> */}
        </TabsList>
        <TabsContent value="details">
          <Card>
            <CardHeader><CardTitle>Accepted Payment Methods</CardTitle></CardHeader>
            <CardContent>
              <p>Configure and manage the payment methods you accept.</p>
              {/* TODO: Implement Payment method configuration */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="statistics">
          <Card>
            <CardHeader><CardTitle>Payment Statistics</CardTitle></CardHeader>
            <CardContent>
              <p>Visualize payment trends, popular methods, delays, etc.</p>
              {/* TODO: Implement Payment statistics charts */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="refunds">
          <Card>
            <CardHeader><CardTitle>Manage Refunds</CardTitle></CardHeader>
            <CardContent>
              <p>Process and track customer refund requests.</p>
              {/* TODO: Implement Refund management interface */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="crypto">
          <Card>
            <CardHeader><CardTitle>Cryptocurrency Payments</CardTitle></CardHeader>
            <CardContent>
              <p>Enable and manage cryptocurrency transactions.</p>
              { }
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/payments/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/planning/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function BusinessActorPlanningPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Planning & Scheduling</h1>
      <Card>
        <CardHeader>
          <CardTitle>Calendar & Tasks</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Manage schedules, appointments, tasks, and automated reminders.</p>
          {/* TODO: Implement Calendar component, Task Management board/list */}
           <div className="mt-4 h-96 border rounded-md flex items-center justify-center text-muted-foreground">
             Calendar/Task Manager Placeholder
           </div>
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/planning/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/posts/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function BusinessActorPostsPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Published Posts</h1>
      <Card>
        <CardHeader>
          <CardTitle>Manage Content</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Create, edit, and manage published posts or announcements.</p>
          {/* TODO: Implement Post editor and list */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/posts/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/products/page.tsx

"use client";

import React, { useState, useCallback, useMemo, useEffect } from "react";
// ... (all other imports remain the same)
import { ProductForm } from "@/components/products/ProductForm";
import { ProductList } from "@/components/products/ProductList";
import { ProductGridView } from "@/components/products/ProductGridView";
import { ProductDetailView } from "@/components/products/ProductDetailView";
import { ProductDataTableToolbar } from "@/components/products/data-table-toolbar";
import { DataTablePagination } from "@/components/ui/data-table-pagination";
import { Button } from "@/components/ui/button";
import { ProductListItemData } from "@/types/product";
import { ProductFormData } from "@/lib/validators/productValidator";
import { PlusCircle, ArrowLeft, LayoutList, LayoutGrid, Loader2, AlertTriangle, Inbox } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { resourceApi, serviceApi } from "@/lib/apiClient";
import { toast } from "sonner";
import {
  SortingState, ColumnFiltersState, VisibilityState, PaginationState, RowSelectionState,
  Table as TanstackTableInstance, useReactTable, getCoreRowModel, getFilteredRowModel,
  getPaginationRowModel, getSortedRowModel, getFacetedRowModel, getFacetedUniqueValues, ColumnDef,
  FilterFn
} from "@tanstack/react-table";
import { rankItem } from '@tanstack/match-sorter-utils';
import { cn } from "@/lib/utils"; // Import cn for conditional classes
import { getProductColumns } from "@/components/products/columns";

type PageMode = "list" | "create" | "edit" | "detail";
type ViewMode = "list" | "grid";

const resourceStateTransitions: Record<string, string[]> = { FREE: ["AFFECTED"], AFFECTED: ["FREE", "IN_USE"], IN_USE: ["FREE"] };
const serviceStateTransitions: Record<string, string[]> = { PLANNED: ["PUBLISHED", "CANCELLED"], PUBLISHED: ["PLANNED", "ONGOING", "CANCELLED"], ONGOING: ["FINISHED"], FINISHED: [], CANCELLED: [] };

const fuzzyGlobalFilterFn: FilterFn<any> = (row, columnId, value, addMeta) => {
  const itemRank = rankItem(row.getValue(columnId), value);
  addMeta({ itemRank });
  return itemRank.passed;
};

export default function ManageProductsPage() {
  const [pageMode, setPageMode] = useState<PageMode>("list");
  const [viewMode, setViewMode] = useState<ViewMode>("list");
  // ... (all other state and functions remain the same as your last correct version)
  const [activeProductForForm, setActiveProductForForm] = useState<Partial<Omit<ProductFormData, 'scheduledAt'> & { id?: string; scheduledAt?: string | Date; productType?: "RESOURCE" | "SERVICE"; currentState?: string; }> | undefined>(undefined);
  const [activeProductForDetail, setActiveProductForDetail] = useState<ProductListItemData | undefined>(undefined);
  const [allProducts, setAllProducts] = useState<ProductListItemData[]>([]);
  const [processedAndPaginatedProducts, setProcessedAndPaginatedProducts] = useState<ProductListItemData[]>([]);
  const [isListLoading, setIsListLoading] = useState(true);
  const [listError, setListError] = useState<string | null>(null);
  const [itemActionLoading, setItemActionLoading] = useState<{ [productId: string]: boolean }>({});
  const [dataVersion, setDataVersion] = useState(0);
  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [globalFilter, setGlobalFilter] = useState<string>("");
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [pagination, setPagination] = useState<PaginationState>({ pageIndex: 0, pageSize: 10 });
  const [pageCount, setPageCount] = useState(0);

  const refreshData = useCallback(() => setDataVersion(v => v + 1), []);
  const fetchAllProducts = useCallback(async () => { /* ... as before ... */
    setIsListLoading(true); setListError(null);
    try {
      await new Promise(resolve => setTimeout(resolve, 700));
      const now = Date.now();
      const dayMs = 24 * 60 * 60 * 1000;
      const mockData: ProductListItemData[] = [
        { id: "res1", name: "Premium Office Chair", productType: "RESOURCE", currentState: "FREE", basePrice: 299.99, createdAt: new Date(now - 2 * dayMs).toISOString(), updatedAt: new Date(now - 1 * dayMs).toISOString(), description: "Ergonomic office chair, black leather." },
        { id: "srv1", name: "Consultation Session (1hr)", productType: "SERVICE", currentState: "PLANNED", basePrice: 150, createdAt: new Date(now - 3 * dayMs).toISOString(), updatedAt: new Date(now - 1 * dayMs).toISOString(), description: "One hour expert consultation on marketing strategy.", isScheduled: true, scheduledAt: new Date(now + 5 * dayMs).toISOString() },
        { id: "res2", name: "Wireless Keyboard & Mouse Combo", productType: "RESOURCE", currentState: "AFFECTED", basePrice: 79.50, createdAt: new Date(now - 10 * dayMs).toISOString(), updatedAt: new Date(now - 2 * dayMs).toISOString(), description: "Full-size wireless keyboard and ergonomic mouse." },
        { id: "srv2", name: "Website Design Package - Basic", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 1200, createdAt: new Date(now - 30 * dayMs).toISOString(), updatedAt: new Date(now - 5 * dayMs).toISOString(), description: "Basic 5-page website design and deployment." },
        { id: "srv3", name: "Monthly Maintenance Retainer", productType: "SERVICE", currentState: "ONGOING", basePrice: 99, createdAt: new Date(now - 60 * dayMs).toISOString(), updatedAt: new Date(now - 3 * dayMs).toISOString(), description: "Ongoing website updates and security checks." },
        { id: "res3", name: "Ergonomic Mouse Pad", productType: "RESOURCE", currentState: "IN_USE", basePrice: 25.00, createdAt: new Date(now - 7 * dayMs).toISOString(), updatedAt: new Date(now - 1 * dayMs).toISOString(), description: "Gel wrist support mouse pad." },
        { id: "srv4", name: "SEO Audit & Report", productType: "SERVICE", currentState: "FINISHED", basePrice: 450.00, createdAt: new Date(now - 90 * dayMs).toISOString(), updatedAt: new Date(now - 30 * dayMs).toISOString(), description: "Comprehensive SEO audit with actionable report." },
        { id: "res4", name: "Standing Desk Converter XL", productType: "RESOURCE", currentState: "FREE", basePrice: 199.00, createdAt: new Date(now - 15 * dayMs).toISOString(), updatedAt: new Date(now - 4 * dayMs).toISOString(), description: "Large standing desk converter for dual monitors." },
        { id: "srv5", name: "Cloud Migration Strategy Workshop", productType: "SERVICE", currentState: "CANCELLED", basePrice: 2500.00, createdAt: new Date(now - 45 * dayMs).toISOString(), updatedAt: new Date(now - 20 * dayMs).toISOString(), description: "2-day workshop for cloud migration planning." },
        { id: "res5", name: "High-Speed HDMI Cable (2m)", productType: "RESOURCE", currentState: "AFFECTED", basePrice: 15.99, createdAt: new Date(now - 5 * dayMs).toISOString(), updatedAt: new Date(now - 1 * dayMs).toISOString(), description: "Supports 4K resolution and high refresh rates." },
        { id: "srv6", name: "Graphic Design - Logo Package", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 350, createdAt: new Date(now - 20 * dayMs).toISOString(), updatedAt: new Date(now - 6 * dayMs).toISOString(), description: "Custom logo design with 3 revisions." },
        { id: "res6", name: "Portable SSD 1TB", productType: "RESOURCE", currentState: "IN_USE", basePrice: 120.00, createdAt: new Date(now - 40 * dayMs).toISOString(), updatedAt: new Date(now - 10 * dayMs).toISOString(), description: "Fast and reliable portable solid state drive." },
        { id: "srv7", name: "Social Media Management (Basic)", productType: "SERVICE", currentState: "ONGOING", basePrice: 250, createdAt: new Date(now - 25 * dayMs).toISOString(), updatedAt: new Date(now - 2 * dayMs).toISOString(), description: "Management of 2 social media platforms, 3 posts/week." },
        { id: "res7", name: "USB-C Hub Multiport Adapter", productType: "RESOURCE", currentState: "FREE", basePrice: 45.50, createdAt: new Date(now - 8 * dayMs).toISOString(), updatedAt: new Date(now - 3 * dayMs).toISOString(), description: "7-in-1 USB-C hub with HDMI, USB 3.0, SD card reader." },
        { id: "srv8", name: "Technical Writing Service (per page)", productType: "SERVICE", currentState: "PLANNED", basePrice: 75, createdAt: new Date(now - 12 * dayMs).toISOString(), updatedAt: new Date(now - 5 * dayMs).toISOString(), description: "Professional technical documentation writing.", isScheduled: true, scheduledAt: new Date(now + 10 * dayMs).toISOString() },
        { id: "res8", name: "Office Plant - Snake Plant", productType: "RESOURCE", currentState: "AFFECTED", basePrice: 30.00, createdAt: new Date(now - 3 * dayMs).toISOString(), updatedAt: new Date(now - 1 * dayMs).toISOString(), description: "Low maintenance air-purifying office plant." },
        { id: "srv9", name: "Custom Software Development (Hourly)", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 120, createdAt: new Date(now - 50 * dayMs).toISOString(), updatedAt: new Date(now - 15 * dayMs).toISOString(), description: "Bespoke software solutions at an hourly rate." },
        { id: "res9", name: "Noise-Cancelling Headphones", productType: "RESOURCE", currentState: "FREE", basePrice: 199.00, createdAt: new Date(now - 18 * dayMs).toISOString(), updatedAt: new Date(now - 7 * dayMs).toISOString(), description: "Over-ear headphones with active noise cancellation." },
        { id: "srv10", name: "IT Support Ticket (Single Incident)", productType: "SERVICE", currentState: "FINISHED", basePrice: 80, createdAt: new Date(now - 35 * dayMs).toISOString(), updatedAt: new Date(now - 25 * dayMs).toISOString(), description: "Remote IT support for a single issue resolution." },
        { id: "res10", name: "Monitor Arm - Single", productType: "RESOURCE", currentState: "IN_USE", basePrice: 65.00, createdAt: new Date(now - 22 * dayMs).toISOString(), updatedAt: new Date(now - 9 * dayMs).toISOString(), description: "Adjustable single monitor arm for ergonomic setup." },
        { id: "srv11", name: "Online Course: Advanced JavaScript", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 199, createdAt: new Date(now - 14 * dayMs).toISOString(), updatedAt: new Date(now - 4 * dayMs).toISOString(), description: "Comprehensive online course for advanced JS developers." },
        { id: "res11", name: "Webcam HD 1080p", productType: "RESOURCE", currentState: "FREE", basePrice: 49.99, createdAt: new Date(now - 6 * dayMs).toISOString(), updatedAt: new Date(now - 2 * dayMs).toISOString(), description: "Full HD webcam with built-in microphone." },
        { id: "srv12", name: "QuickBook Setup & Training", productType: "SERVICE", currentState: "PLANNED", basePrice: 300, createdAt: new Date(now - 4 * dayMs).toISOString(), updatedAt: new Date(now - 1 * dayMs).toISOString(), description: "QuickBooks Online setup and basic user training session.", isScheduled: true, scheduledAt: new Date(now + 12 * dayMs).toISOString() },
      ];
      setAllProducts(mockData);
    } catch (err) { setListError("Could not load products."); toast.error("Could not load products."); }
    finally { setIsListLoading(false); }
  }, []);
  const handleViewProductDetails = useCallback((product: ProductListItemData) => { setActiveProductForDetail(product); setPageMode("detail"); }, []);
  const handleCloseDetailViewAndGoToList = useCallback(() => { setPageMode("list"); setActiveProductForDetail(undefined); }, []);
  const handleSwitchToCreateMode = useCallback(() => { setActiveProductForForm(undefined); setPageMode("create"); }, []);
  const handleSwitchToListMode = useCallback(() => { setActiveProductForForm(undefined); setActiveProductForDetail(undefined); setPageMode("list"); }, []);
  const handleDeleteProduct = useCallback(async (product: ProductListItemData) => { /* ... */
    if (!confirm(`Delete "${product.name}"?`)) return; setItemActionLoading(prev => ({ ...prev, [product.id]: true }));
    try {
      if (product.productType === "RESOURCE") await resourceApi.delete(product.id); else await serviceApi.delete(product.id);
      toast.success(`"${product.name}" deleted.`); refreshData();
    } finally { setItemActionLoading(prev => ({ ...prev, [product.id]: false })); }
  }, [refreshData]);

  const handleChangeProductState = useCallback(async (product: ProductListItemData, newState: string) => { /* ... */
    if (!confirm(`Change state of "${product.name}" to ${newState.toUpperCase()}?`)) return; setItemActionLoading(prev => ({ ...prev, [product.id]: true }));
    try {
      const payload = { currentState: newState.toUpperCase() };
      if (product.productType === "RESOURCE") await resourceApi.update(product.id, payload); else await serviceApi.update(product.id, payload);
      toast.success(`State changed to ${newState.toUpperCase()}.`); refreshData();
    } catch (error: any) { if (error.status === 409) toast.error(`Cannot change state: Transition not allowed.`); }
    finally { setItemActionLoading(prev => ({ ...prev, [product.id]: false })); }
  }, [refreshData]);

  const handleInitiateEdit = useCallback((product: ProductListItemData) => {
    const formDataForEdit: Partial<Omit<ProductFormData, 'scheduledAt'> & { id?: string; scheduledAt?: string | Date }> = {
      id: product.id, productType: product.productType, name: product.name, description: product.description,
      basePrice: product.basePrice, isScheduled: product.isScheduled, scheduledAt: product.scheduledAt,
      isCustomAction: (product as any).isCustomAction || false, customActionQuery: (product as any).customActionQuery || "",
    };
    setActiveProductForForm(formDataForEdit); setPageMode("edit");
  }, []);

  useEffect(() => { fetchAllProducts(); }, [fetchAllProducts, dataVersion]);
  const columns = useMemo<ColumnDef<ProductListItemData>[]>(() => getProductColumns({
    onEdit: handleInitiateEdit, onDelete: handleDeleteProduct, onChangeState: handleChangeProductState,
    onViewDetails: handleViewProductDetails, resourceStateTransitions, serviceStateTransitions,
    getIsItemActionLoading: (productId: string) => !!itemActionLoading[productId],
  }), [handleInitiateEdit, handleDeleteProduct, handleChangeProductState, handleViewProductDetails, itemActionLoading]); // Ensure all deps are here

  const table = useReactTable({
    data: allProducts, columns, state: { sorting, columnFilters, globalFilter, columnVisibility, rowSelection, pagination },
    onSortingChange: setSorting, onColumnFiltersChange: setColumnFilters, onGlobalFilterChange: setGlobalFilter,
    onColumnVisibilityChange: setColumnVisibility, onRowSelectionChange: setRowSelection, onPaginationChange: setPagination,
    getCoreRowModel: getCoreRowModel(), getFilteredRowModel: getFilteredRowModel(), getSortedRowModel: getSortedRowModel(),
    getPaginationRowModel: getPaginationRowModel(), getFacetedRowModel: getFacetedRowModel(), getFacetedUniqueValues: getFacetedUniqueValues(),
    globalFilterFn: fuzzyGlobalFilterFn, // Corrected to pass the function itself
    manualPagination: false, manualSorting: false, manualFiltering: false, pageCount,
  });


  useEffect(() => { /* ... client-side processing for processedAndPaginatedProducts ... */
    if (isListLoading) { setProcessedAndPaginatedProducts([]); return; }
    const sortedAndFilteredRowModel = table.getSortedRowModel();
    const currentViewRows = sortedAndFilteredRowModel.rows.map(row => row.original);
    const totalFilteredItems = table.getFilteredRowModel().rows.length;
    const calculatedPageCount = Math.ceil(totalFilteredItems / pagination.pageSize);
    setPageCount(calculatedPageCount);
    let currentPageIndex = pagination.pageIndex;
    if (pagination.pageIndex >= calculatedPageCount && calculatedPageCount > 0) currentPageIndex = calculatedPageCount - 1;
    else if (calculatedPageCount === 0) currentPageIndex = 0;
    if (currentPageIndex !== pagination.pageIndex) setPagination(p => ({ ...p, pageIndex: currentPageIndex }));
    const pageStart = currentPageIndex * pagination.pageSize;
    setProcessedAndPaginatedProducts(currentViewRows.slice(pageStart, pageStart + pagination.pageSize));
  }, [allProducts, globalFilter, columnFilters, sorting, pagination, table, isListLoading]);

  const handleFormSuccess = useCallback(() => { setPageMode("list"); setActiveProductForForm(undefined); refreshData(); }, [refreshData]);

  const pageTitle = useMemo(() => { /* ... */ return "Product Management"; }, [pageMode, activeProductForForm, activeProductForDetail]);
  const pageDescription = useMemo(() => { /* ... */ return "Browse, filter..."; }, [pageMode, activeProductForForm, activeProductForDetail]);

  const commonActionHandlersForChildren = {
    onEdit: handleInitiateEdit, onDelete: handleDeleteProduct, onChangeState: handleChangeProductState,
    onViewDetails: handleViewProductDetails, resourceStateTransitions, serviceStateTransitions,
    itemActionLoading,
  };

  const renderMainContent = () => { /* ... (same as before, no changes needed here) ... */
    if (pageMode === "create") return <ProductForm mode="create" onFormSubmitSuccess={handleFormSuccess} />;
    if (pageMode === "edit" && activeProductForForm) return <ProductForm mode="edit" initialData={activeProductForForm} onFormSubmitSuccess={handleFormSuccess} />;
    if (isListLoading && allProducts.length === 0) { /* ... skeleton ... */
      return (<div className="space-y-4 mt-4"> <div className="flex justify-between"><Skeleton className="h-9 w-1/3" /><Skeleton className="h-9 w-1/4" /></div> <Skeleton className="h-[400px] w-full rounded-md" /> <div className="flex justify-between"><Skeleton className="h-8 w-1/4" /><Skeleton className="h-8 w-1/2" /></div> </div>);
    }
    if (listError) { /* ... error ... */
      return (<div className="mt-4 p-10 border border-destructive/50 bg-destructive/10 rounded-lg text-center"> <AlertTriangle className="h-12 w-12 text-destructive mx-auto mb-4" /> <p className="text-destructive-foreground font-semibold">{listError}</p> <Button onClick={fetchAllProducts} variant="destructive" className="mt-6">Try Again</Button> </div>);
    }
    if (viewMode === "grid") {
      return <ProductGridView products={processedAndPaginatedProducts} isLoading={isListLoading && allProducts.length > 0} error={null} getActionLoadingState={(productId) => !!itemActionLoading[productId]} {...commonActionHandlersForChildren} />;
    }
    return (<ProductList data={processedAndPaginatedProducts} pageCount={pageCount} sorting={sorting} setSorting={setSorting} columnFilters={columnFilters} setColumnFilters={setColumnFilters} globalFilter={globalFilter} setGlobalFilter={setGlobalFilter} columnVisibility={columnVisibility} setColumnVisibility={setColumnVisibility} rowSelection={rowSelection} setRowSelection={setRowSelection} pagination={pagination} setPagination={setPagination} itemActionLoading={itemActionLoading} onEditProduct={handleInitiateEdit} onViewProductDetails={handleViewProductDetails} onDeleteProduct={handleDeleteProduct} onChangeProductState={handleChangeProductState} />);
  };

  return (
    <div className="container mx-auto py-6 sm:py-8">
      <header className="mb-6 sm:mb-8">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div className="flex-1">
            <h1 className="text-2xl sm:text-3xl font-bold tracking-tight text-foreground">{pageTitle}</h1>
            <p className="text-sm sm:text-base text-muted-foreground mt-1">{pageDescription}</p>
          </div>
          <div className="flex items-center gap-x-2 flex-shrink-0"> {/* Changed gap to gap-x-2 */}
            {pageMode === "list" && (
              <>
                {/* Segmented Control for View Mode */}
                <div className="flex items-center p-0.5 bg-muted rounded-md">
                  <Button
                    variant={viewMode === 'list' ? 'default' : 'ghost'}
                    size="sm"
                    onClick={() => setViewMode('list')}
                    aria-label="Switch to list view"
                    className={cn(
                      "h-8 px-3 rounded-sm data-[state=active]:shadow-sm",
                      viewMode === 'list' ? "bg-background text-foreground" : "text-muted-foreground hover:bg-background/50 hover:text-foreground"
                    )}
                    data-state={viewMode === 'list' ? 'active' : 'inactive'}
                  >
                    <LayoutList className="h-4 w-4" />
                    <span className="ml-1.5 hidden sm:inline">List</span>
                  </Button>
                  <Button
                    variant={viewMode === 'grid' ? 'default' : 'ghost'}
                    size="sm"
                    onClick={() => setViewMode('grid')}
                    aria-label="Switch to grid view"
                    className={cn(
                      "h-8 px-3 rounded-sm data-[state=active]:shadow-sm",
                      viewMode === 'grid' ? "bg-background text-foreground" : "text-muted-foreground hover:bg-background/50 hover:text-foreground"
                    )}
                    data-state={viewMode === 'grid' ? 'active' : 'inactive'}
                  >
                    <LayoutGrid className="h-4 w-4" />
                    <span className="ml-1.5 hidden sm:inline">Grid</span>
                  </Button>
                </div>
                {/* End Segmented Control */}

                <Button onClick={handleSwitchToCreateMode} size="sm" className="h-9"> {/* Matched height */}
                  <PlusCircle className="mr-2 h-4 w-4" /> New
                </Button>
              </>
            )}
            {(pageMode === "create" || pageMode === "edit" || pageMode === "detail") && (
              <Button variant="outline" onClick={handleSwitchToListMode} size="sm" className="h-9"> {/* Matched height */}
                <ArrowLeft className="mr-2 h-4 w-4" /> Back to List
              </Button>
            )}
          </div>
        </div>
      </header>

      <main>
        {pageMode === "list" && (
          <ProductDataTableToolbar
            table={table}
            globalFilter={globalFilter}
            setGlobalFilter={setGlobalFilter}
          />
        )}
        {renderMainContent()}
        {pageMode === "list" && !isListLoading && !listError && allProducts.length > 0 && (
          <DataTablePagination table={table} />
        )}
        {pageMode === "list" && !isListLoading && !listError && allProducts.length === 0 && !globalFilter && columnFilters.length === 0 && (
          <div className="min-h-[200px] text-center flex flex-col items-center justify-center text-muted-foreground border rounded-md p-6 mt-4">
            <Inbox className="h-16 w-16 text-muted-foreground/70 mb-6" />
            <h3 className="text-lg font-semibold">Your Product Catalog is Empty</h3>
            <p className="text-sm">Get started by clicking the "Create New" button above.</p>
          </div>
        )}
      </main>

      {pageMode === "detail" && activeProductForDetail && (
        <ProductDetailView
          product={activeProductForDetail}
          onClose={handleCloseDetailViewAndGoToList}
          onEdit={() => { if (activeProductForDetail) handleInitiateEdit(activeProductForDetail); }}
        />
      )}
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/products/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/referrals/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function BusinessActorReferralsPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Referrals & Invites</h1>
      <Card>
        <CardHeader>
          <CardTitle>Referral Program</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Manage your referral program, track invites, and view rewards.</p>
          {/* TODO: Implement Referral stats, invite links/form, reward tracking */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/referrals/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/reservations/page.tsx


import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function BusinessActorReservationsPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Reservations</h1>
      <Card>
        <CardHeader>
          <CardTitle>Manage Reservations</CardTitle>
        </CardHeader>
        <CardContent>
          <p>View and manage customer reservations and their statuses.</p>
          {/* TODO: Implement Reservations table/calendar view */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/reservations/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/reviews/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function BusinessActorReviewsPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Customer Reviews</h1>
      <Card>
        <CardHeader>
          <CardTitle>Manage Reviews</CardTitle>
        </CardHeader>
        <CardContent>
          <p>View and respond to customer reviews and ratings.</p>
          {/* TODO: Implement Reviews display, filtering, response mechanism */}
        </CardContent>
      </Card>
      {/* Also include Rate App functionality if managed here */}
      <Card className='mt-4'>
        <CardHeader>
          <CardTitle>App Rating Prompt</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Configure when and how users are prompted to rate the app.</p>
          {/* TODO: Implement Rate App configuration */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/reviews/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/settings/page.tsx

"use client"

import { UserSettings, useSettings } from "@/contexts/settings-context"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Slider } from "@/components/ui/slider"
import { Checkbox } from "@/components/ui/checkbox"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Laptop, Smartphone, Tablet } from "lucide-react"
import { useState, useCallback } from "react" // Import useCallback
import { toast } from "sonner"
import { useTheme } from "next-themes"; // Import useTheme for theme radio group

const defaultAvatars = [
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/9439775.jpg-4JVJWOjPksd3DtnBYJXoWHA5lc1DU9.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/375238645_11475210.jpg-lU8bOe6TLt5Rv51hgjg8NT8PsDBmvN.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/375238208_11475222.jpg-poEIzVHAGiIfMFQ7EiF8PUG1u0Zkzz.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/dd.jpg-4MCwPC2Bec6Ume26Yo1kao3CnONxDg.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/9334178.jpg-Y74tW6XFO68g7N36SE5MSNDNVKLQ08.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/5295.jpg-fLw0wGGZp8wuTzU5dnyfjZDwAHN98a.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/9720029.jpg-Yf9h2a3kT7rYyCb648iLIeHThq5wEy.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/27470341_7294795.jpg-XE0zf7R8tk4rfA1vm4fAHeZ1QoVEOo.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/799.jpg-0tEi4Xvg5YsFoGoQfQc698q4Dygl1S.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/9334228.jpg-eOsHCkvVrVAwcPHKYSs5sQwVKsqWpC.jpeg",
];

export default function SettingsPage() {
  const { settings, updateSettings, updateNotificationSettings, updatePrivacySettings } = useSettings();
  const { theme, setTheme } = useTheme(); // Get theme setter from next-themes
  const [selectedAvatar, setSelectedAvatar] = useState(settings.avatar);
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [enable2FA, setEnable2FA] = useState(false); // Placeholder state for 2FA switch

  // --- Event Handlers ---
  const handleSaveAccount = useCallback(() => {
    // Add validation if needed before updating
    updateSettings({
      avatar: selectedAvatar,
      fullName: settings.fullName,
      email: settings.email,
      phone: settings.phone,
      timezone: settings.timezone,
    });
    toast.success("Account settings saved successfully");
  }, [selectedAvatar, settings, updateSettings]);

  const handleSaveSecurity = useCallback(() => {
    // TODO: Implement actual security logic (API call)
    // 1. Validate passwords (match, strength)
    // 2. Send currentPassword, newPassword to backend API for verification and update
    console.log("Saving Security:", { currentPassword, newPassword, confirmPassword, enable2FA });
    if (newPassword && newPassword !== confirmPassword) {
      toast.error("New passwords do not match.");
      return;
    }
    // Reset fields after attempted save (or on success)
    setCurrentPassword("");
    setNewPassword("");
    setConfirmPassword("");
    toast.info("Save security settings action triggered (implementation pending).");
  }, [currentPassword, newPassword, confirmPassword, enable2FA]); // Added dependencies

  const handleSavePreferences = useCallback(() => {
    // All preference updates are directly handled by onValueChange/onCheckedChange now
    // This button might just provide user feedback
    toast.success("Preferences settings saved successfully");
    // Or call updateSettings with the full preferences object if needed for a single API call
    // updateSettings({ language: settings.language, currency: settings.currency, ... });
  }, []); // No dependencies needed if updates happen onChange

  const handleSaveNotifications = useCallback(() => {
    // TODO: Potentially save quiet hours if managed by local state
    updateNotificationSettings(settings.notifications); // Context already holds the latest state
    toast.success("Notification settings saved successfully");
  }, [settings.notifications, updateNotificationSettings]); // Dependency added

  const handleSavePrivacy = useCallback(() => {
    updatePrivacySettings(settings.privacy); // Context already holds the latest state
    toast.success("Privacy settings saved successfully");
  }, [settings.privacy, updatePrivacySettings]); // Dependency added

  // Placeholder handlers for other buttons
  const handleLogoutOtherSessions = useCallback(() => {
    toast.info("Log out all other sessions action triggered (implementation pending).");
    // TODO: API call to invalidate other sessions
  }, []);

  const handleManageIntegrations = useCallback(() => {
    toast.info("Manage integrations action triggered (implementation pending).");
    // TODO: Open modal or navigate to integrations page
  }, []);

  const handleDownloadData = useCallback(() => {
    toast.info("Download your data action triggered (implementation pending).");
    // TODO: API call to request data export
  }, []);

  const handleDeleteAccount = useCallback(() => {
    if (confirm("Are you sure you want to delete your account? This action cannot be undone.")) {
      toast.warning("Delete account action triggered (implementation pending).");
      // TODO: API call to initiate account deletion process
    }
  }, []);

  // Handler for font size slider - updates context on commit (release)
  const handleFontSizeChange = useCallback((value: number[]) => {
    updateSettings({ fontSize: value[0] });
  }, [updateSettings]);

  // Handler for theme change - uses next-themes and updates context
  const handleThemeChange = useCallback((value: string) => {
    const newTheme = value as "light" | "dark" | "system";
    setTheme(newTheme); // Update next-themes
    updateSettings({ theme: newTheme }); // Update context
  }, [setTheme, updateSettings]);


  return (
    <div className="container mx-auto pb-10"> {/* Added padding-bottom */}
      <h1 className="text-3xl font-bold mb-6">Settings</h1>
      <Tabs defaultValue="account" className="space-y-4">
        <TabsList className="grid w-full grid-cols-2 sm:grid-cols-3 md:grid-cols-5"> {/* Responsive grid */}
          <TabsTrigger value="account">Account</TabsTrigger>
          <TabsTrigger value="security">Security</TabsTrigger>
          <TabsTrigger value="preferences">Preferences</TabsTrigger>
          <TabsTrigger value="notifications">Notifications</TabsTrigger>
          <TabsTrigger value="privacy">Privacy</TabsTrigger>
        </TabsList>

        {/* --- Account Tab --- */}
        <TabsContent value="account">
          <Card>
            <CardHeader>
              <CardTitle>Account Settings</CardTitle>
              <CardDescription>Manage your account information</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Avatar Section */}
              <div className="space-y-4">
                <Label>Current Avatar</Label>
                <div className="flex items-center space-x-4">
                  <Avatar className="h-20 w-20">
                    <AvatarImage src={selectedAvatar} alt={settings.fullName || "User"} />
                    <AvatarFallback>
                      {settings.fullName
                        ?.split(" ")
                        .map((n) => n[0])
                        .join("") || "U"}
                    </AvatarFallback>
                  </Avatar>
                </div>
                <Label>Choose a new avatar</Label>
                <div className="flex gap-4 overflow-x-auto pb-2 scrollbar-hide">
                  {defaultAvatars.map((avatar, index) => (
                    <Avatar
                      key={index}
                      className={`h-16 w-16 sm:h-20 sm:w-20 rounded-lg cursor-pointer hover:ring-2 hover:ring-primary shrink-0 ${selectedAvatar === avatar ? "ring-2 ring-primary" : ""
                        }`}
                      onClick={() => setSelectedAvatar(avatar)}
                    >
                      <AvatarImage src={avatar} alt={`Avatar ${index + 1}`} className="object-cover" />
                      <AvatarFallback>{index + 1}</AvatarFallback>
                    </Avatar>
                  ))}
                </div>
                <div>
                  <Label htmlFor="custom-avatar">Or upload a custom avatar</Label>
                  {/* TODO: Implement file upload logic */}
                  <Input id="custom-avatar" type="file" accept="image/*" className="mt-1" />
                </div>
              </div>
              {/* User Details Inputs */}
              <div className="space-y-2">
                <Label htmlFor="full-name">Full Name</Label>
                <Input
                  id="full-name"
                  value={settings.fullName || ""} // Ensure controlled component
                  onChange={(e) => updateSettings({ fullName: e.target.value })}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={settings.email || ""}
                  onChange={(e) => updateSettings({ email: e.target.value })}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="phone">Phone Number</Label>
                <Input
                  id="phone"
                  type="tel"
                  value={settings.phone || ""}
                  onChange={(e) => updateSettings({ phone: e.target.value })}
                />
              </div>
              {/* Timezone Select */}
              <div className="space-y-2">
                <Label htmlFor="timezone">Timezone</Label>
                <Select value={settings.timezone} onValueChange={(value) => updateSettings({ timezone: value })}>
                  <SelectTrigger id="timezone">
                    <SelectValue placeholder="Select Timezone" />
                  </SelectTrigger>
                  <SelectContent>
                    {/* Timezone Options */}
                    <SelectItem value="utc-12">International Date Line West (UTC-12)</SelectItem>
                    <SelectItem value="utc-11">Samoa Standard Time (UTC-11)</SelectItem>
                    <SelectItem value="utc-10">Hawaii-Aleutian Standard Time (UTC-10)</SelectItem>
                    <SelectItem value="utc-9">Alaska Standard Time (UTC-9)</SelectItem>
                    <SelectItem value="utc-8">Pacific Time (UTC-8)</SelectItem>
                    <SelectItem value="utc-7">Mountain Time (UTC-7)</SelectItem>
                    <SelectItem value="utc-6">Central Time (UTC-6)</SelectItem>
                    <SelectItem value="utc-5">Eastern Time (UTC-5)</SelectItem>
                    <SelectItem value="utc-4">Atlantic Time (UTC-4)</SelectItem>
                    <SelectItem value="utc-3">Argentina Standard Time (UTC-3)</SelectItem>
                    <SelectItem value="utc-2">South Georgia Time (UTC-2)</SelectItem>
                    <SelectItem value="utc-1">Azores Time (UTC-1)</SelectItem>
                    <SelectItem value="utc+0">Greenwich Mean Time (UTC+0)</SelectItem>
                    <SelectItem value="utc+1">Central European Time (UTC+1)</SelectItem>
                    <SelectItem value="utc+2">Eastern European Time (UTC+2)</SelectItem>
                    <SelectItem value="utc+3">Moscow Time (UTC+3)</SelectItem>
                    <SelectItem value="utc+4">Gulf Standard Time (UTC+4)</SelectItem>
                    <SelectItem value="utc+5">Pakistan Standard Time (UTC+5)</SelectItem>
                    <SelectItem value="utc+5.5">Indian Standard Time (UTC+5:30)</SelectItem>
                    <SelectItem value="utc+6">Bangladesh Standard Time (UTC+6)</SelectItem>
                    <SelectItem value="utc+7">Indochina Time (UTC+7)</SelectItem>
                    <SelectItem value="utc+8">China Standard Time (UTC+8)</SelectItem>
                    <SelectItem value="utc+9">Japan Standard Time (UTC+9)</SelectItem>
                    <SelectItem value="utc+10">Australian Eastern Standard Time (UTC+10)</SelectItem>
                    <SelectItem value="utc+11">Solomon Islands Time (UTC+11)</SelectItem>
                    <SelectItem value="utc+12">New Zealand Standard Time (UTC+12)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
            <CardFooter>
              <Button onClick={handleSaveAccount}>Save Account Settings</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        {/* --- Security Tab --- */}
        <TabsContent value="security">
          <div className="grid gap-4 md:grid-cols-2">
            {/* Password Change Card */}
            <Card className="md:col-span-2">
              <CardHeader>
                <CardTitle>Security Settings</CardTitle>
                <CardDescription>Manage your account's security settings</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Password Fields */}
                <div className="space-y-2">
                  <Label htmlFor="current-password">Current Password</Label>
                  <Input id="current-password" type="password" value={currentPassword} onChange={(e) => setCurrentPassword(e.target.value)} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="new-password">New Password</Label>
                  <Input id="new-password" type="password" value={newPassword} onChange={(e) => setNewPassword(e.target.value)} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="confirm-password">Confirm New Password</Label>
                  <Input id="confirm-password" type="password" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} />
                </div>
                {/* 2FA Switch */}
                <div className="flex items-center space-x-2 pt-2">
                  {/* TODO: Connect 2FA state properly (e.g., fetch initial state) */}
                  <Switch id="two-factor" checked={enable2FA} onCheckedChange={setEnable2FA} />
                  <Label htmlFor="two-factor">Enable Two-Factor Authentication</Label>
                </div>
              </CardContent>
              <CardFooter>
                {/* Fixed: Added onClick handler */}
                <Button onClick={handleSaveSecurity}>Save Security Settings</Button>
              </CardFooter>
            </Card>

            {/* Login History Card (Static Example) */}
            <Card>
              <CardHeader>
                <CardTitle>Login History</CardTitle>
                <CardDescription>Recent login activities</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {[
                  { date: "2023-07-20", time: "14:30 UTC", ip: "192.168.1.1", location: "New York, USA" },
                  { date: "2023-07-19", time: "09:15 UTC", ip: "10.0.0.1", location: "London, UK" },
                ].map((login, index) => ( /* Shortened example */
                  <div key={index} className="flex justify-between items-center text-sm text-muted-foreground">
                    <span>{login.date} {login.time}</span>
                    <span>{login.ip}</span>
                    <span className="truncate ml-2">{login.location}</span>
                  </div>
                ))}
                {/* TODO: Implement dynamic loading */}
                <p className="text-xs text-muted-foreground text-center pt-2">More history available...</p>
              </CardContent>
            </Card>

            {/* Active Sessions Card (Static Example) */}
            <Card>
              <CardHeader>
                <CardTitle>Active Sessions</CardTitle>
                <CardDescription>Currently logged in devices</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {[
                  { device: "Laptop", browser: "Chrome", os: "Windows 10", icon: Laptop },
                  { device: "Smartphone", browser: "Safari", os: "iOS 15", icon: Smartphone },
                ].map((session, index) => ( /* Shortened example */
                  <div key={index} className="flex items-center justify-between text-sm">
                    <span className="flex items-center gap-2">
                      <session.icon className="h-4 w-4 text-muted-foreground" />
                      {session.device}
                    </span>
                    <span className="text-muted-foreground">{session.browser}</span>
                    <span className="text-muted-foreground truncate ml-2">{session.os}</span>
                  </div>
                ))}
                {/* TODO: Implement dynamic loading */}
              </CardContent>
              <CardFooter>
                {/* Fixed: Added onClick handler */}
                <Button variant="outline" onClick={handleLogoutOtherSessions}>Log Out All Other Sessions</Button>
              </CardFooter>
            </Card>
          </div>
        </TabsContent>

        {/* --- Preferences Tab --- */}
        <TabsContent value="preferences">
          <Card>
            <CardHeader>
              <CardTitle>Preferences</CardTitle>
              <CardDescription>Customize your dashboard experience</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6"> {/* Increased spacing */}
              <div className="grid gap-6 md:grid-cols-2"> {/* Increased gap */}
                {/* Language Select */}
                <div className="space-y-2">
                  <Label htmlFor="language">Language</Label>
                  {/* Fixed: Use value and onValueChange */}
                  <Select value={settings.language} onValueChange={(value) => updateSettings({ language: value })}>
                    <SelectTrigger id="language">
                      <SelectValue placeholder="Select Language" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="en">English</SelectItem>
                      <SelectItem value="es">Español</SelectItem>
                      <SelectItem value="fr">Français</SelectItem>
                      <SelectItem value="de">Deutsch</SelectItem>
                      <SelectItem value="zh">中文</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                {/* Currency Select */}
                <div className="space-y-2">
                  <Label htmlFor="currency">Currency</Label>
                  {/* Fixed: Use value and onValueChange */}
                  <Select value={settings.currency} onValueChange={(value) => updateSettings({ currency: value })}>
                    <SelectTrigger id="currency">
                      <SelectValue placeholder="Select Currency" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="usd">USD ($)</SelectItem>
                      <SelectItem value="eur">EUR (€)</SelectItem>
                      <SelectItem value="gbp">GBP (£)</SelectItem>
                      <SelectItem value="jpy">JPY (¥)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                {/* Date Format Select */}
                <div className="space-y-2">
                  <Label htmlFor="date-format">Date Format</Label>
                  {/* Fixed: Use value and onValueChange */}
                  <Select value={settings.dateFormat} onValueChange={(value) => updateSettings({ dateFormat: value })}>
                    <SelectTrigger id="date-format">
                      <SelectValue placeholder="Select Date Format" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="mm-dd-yyyy">MM-DD-YYYY</SelectItem>
                      <SelectItem value="dd-mm-yyyy">DD-MM-YYYY</SelectItem>
                      <SelectItem value="yyyy-mm-dd">YYYY-MM-DD</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                {/* Font Size Slider */}
                <div className="space-y-2">
                  <Label htmlFor="font-size">Font Size ({settings.fontSize}px)</Label>
                  {/* Fixed: Use value and onValueCommit */}
                  <Slider
                    id="font-size"
                    value={[settings.fontSize]}
                    max={24} min={12} step={1}
                    onValueCommit={handleFontSizeChange} // Update on release
                  />
                </div>
              </div>
              {/* Theme Radio Group */}
              <div className="space-y-2">
                <Label>Theme</Label>
                {/* Fixed: Use value and onValueChange, integrated with next-themes */}
                <RadioGroup value={theme} onValueChange={handleThemeChange}>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="light" id="theme-light" />
                    <Label htmlFor="theme-light">Light</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="dark" id="theme-dark" />
                    <Label htmlFor="theme-dark">Dark</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="system" id="theme-system" />
                    <Label htmlFor="theme-system">System</Label>
                  </div>
                </RadioGroup>
              </div>
              {/* Dashboard Layout Radio Group */}
              <div className="space-y-2">
                <Label>Dashboard Layout</Label>
                {/* Fixed: Use value and onValueChange */}
                <RadioGroup value={settings.layout} onValueChange={(value) => updateSettings({ layout: value as UserSettings["layout"] })}>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="default" id="layout-default" />
                    <Label htmlFor="layout-default">Default</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="compact" id="layout-compact" />
                    <Label htmlFor="layout-compact">Compact</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="expanded" id="layout-expanded" />
                    <Label htmlFor="layout-expanded">Expanded</Label>
                  </div>
                </RadioGroup>
              </div>
            </CardContent>
            <CardFooter>
              {/* Fixed: Added onClick handler */}
              <Button onClick={handleSavePreferences}>Save Preferences</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        {/* --- Notifications Tab --- */}
        <TabsContent value="notifications">
          <Card>
            <CardHeader>
              <CardTitle>Notification Settings</CardTitle>
              <CardDescription>Manage how you receive notifications</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6"> {/* Increased spacing */}
              <div className="grid gap-6 md:grid-cols-2"> {/* Increased gap */}
                {/* Notification Channels */}
                <div className="space-y-3"> {/* Increased spacing */}
                  <Label>Notification Channels</Label>
                  <div className="flex items-center space-x-2">
                    {/* Fixed: Use onCheckedChange */}
                    <Checkbox
                      id="email-notifications"
                      checked={settings.notifications.email}
                      onCheckedChange={(checked) =>
                        updateNotificationSettings({ ...settings.notifications, email: !!checked }) // Ensure boolean
                      }
                    />
                    <Label htmlFor="email-notifications">Email Notifications</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    {/* Fixed: Use onCheckedChange */}
                    <Checkbox
                      id="push-notifications"
                      checked={settings.notifications.push}
                      onCheckedChange={(checked) =>
                        updateNotificationSettings({ ...settings.notifications, push: !!checked })
                      }
                    />
                    <Label htmlFor="push-notifications">Push Notifications (App)</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    {/* Correct: Already using onCheckedChange */}
                    <Checkbox
                      id="sms-notifications"
                      checked={settings.notifications.sms}
                      onCheckedChange={(checked) => updateNotificationSettings({ ...settings.notifications, sms: !!checked })}
                    />
                    <Label htmlFor="sms-notifications">SMS Notifications</Label>
                  </div>
                </div>
                {/* Notification Types */}
                <div className="space-y-3"> {/* Increased spacing */}
                  <Label>Notification Types</Label>
                  <div className="flex items-center space-x-2">
                    {/* Fixed: Use onCheckedChange */}
                    <Checkbox
                      id="account-activity"
                      checked={settings.notifications.accountActivity}
                      onCheckedChange={(checked) =>
                        updateNotificationSettings({ ...settings.notifications, accountActivity: !!checked })
                      }
                    />
                    <Label htmlFor="account-activity">Account Activity</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    {/* Fixed: Use onCheckedChange */}
                    <Checkbox
                      id="new-features"
                      checked={settings.notifications.newFeatures}
                      onCheckedChange={(checked) =>
                        updateNotificationSettings({ ...settings.notifications, newFeatures: !!checked })
                      }
                    />
                    <Label htmlFor="new-features">New Features & Updates</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    {/* Fixed: Use onCheckedChange */}
                    <Checkbox
                      id="marketing"
                      checked={settings.notifications.marketing}
                      onCheckedChange={(checked) =>
                        updateNotificationSettings({ ...settings.notifications, marketing: !!checked })
                      }
                    />
                    <Label htmlFor="marketing">Marketing & Promotions</Label>
                  </div>
                </div>
              </div>
              {/* Notification Frequency */}
              <div className="space-y-2">
                <Label htmlFor="notification-frequency">Notification Frequency</Label>
                <Select
                  value={settings.notifications.frequency}
                  // Ensure type safety for value
                  onValueChange={(value) => updateNotificationSettings({ ...settings.notifications, frequency: value as UserSettings["notifications"]["frequency"] })}
                >
                  <SelectTrigger id="notification-frequency" className="w-full md:w-[250px]">
                    <SelectValue placeholder="Select Frequency" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="real-time">Real-time</SelectItem>
                    <SelectItem value="daily">Daily Digest</SelectItem>
                    <SelectItem value="weekly">Weekly Summary</SelectItem>
                    <SelectItem value="never">Never</SelectItem> {/* Added option */}
                  </SelectContent>
                </Select>
              </div>
              {/* Quiet Hours */}
              <div className="space-y-2">
                <Label>Quiet Hours (Notifications Paused)</Label>
                {/* TODO: Connect these inputs to context/state and save logic */}
                <div className="flex items-center space-x-2">
                  <Input id="quiet-hours-start" type="time" defaultValue={settings.notifications.quietHoursStart} className="w-[120px]" />
                  <span>to</span>
                  <Input id="quiet-hours-end" type="time" defaultValue={settings.notifications.quietHoursEnd} className="w-[120px]" />
                </div>
                <p className="text-xs text-muted-foreground">Set a time range to pause non-critical notifications.</p>
              </div>
            </CardContent>
            <CardFooter>
              <Button onClick={handleSaveNotifications}>Save Notification Settings</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        {/* --- Privacy Tab --- */}
        <TabsContent value="privacy">
          <Card>
            <CardHeader>
              <CardTitle>Privacy Settings</CardTitle>
              <CardDescription>Manage your privacy and data settings</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid gap-4 md:grid-cols-2">
                {/* Data Sharing Card */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg font-medium">Data Sharing</CardTitle> {/* Adjusted font */}
                  </CardHeader>
                  <CardContent className="space-y-4"> {/* Added spacing */}
                    <div className="flex items-center justify-between">
                      <Label htmlFor="analytics-sharing" className="flex-1 pr-4">Share usage data for improvement</Label>
                      {/* Fixed: Use onCheckedChange */}
                      <Switch
                        id="analytics-sharing"
                        checked={settings.privacy.analyticsSharing}
                        onCheckedChange={(checked) =>
                          updatePrivacySettings({ ...settings.privacy, analyticsSharing: !!checked })
                        }
                      />
                    </div>
                    <div className="flex items-center justify-between">
                      <Label htmlFor="personalized-ads" className="flex-1 pr-4">Allow personalized ads based on activity</Label>
                      {/* Fixed: Use onCheckedChange */}
                      <Switch
                        id="personalized-ads"
                        checked={settings.privacy.personalizedAds}
                        onCheckedChange={(checked) =>
                          updatePrivacySettings({ ...settings.privacy, personalizedAds: !!checked })
                        }
                      />
                    </div>
                  </CardContent>
                </Card>
                {/* Account Visibility Card */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg font-medium">Account Visibility</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <RadioGroup
                      value={settings.privacy.visibility}
                      onValueChange={(value) => updatePrivacySettings({ ...settings.privacy, visibility: value as UserSettings["privacy"]["visibility"] })}
                    >
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="public" id="visibility-public" />
                        <Label htmlFor="visibility-public">Public</Label>
                      </div>
                      <p className="text-xs text-muted-foreground pl-6">Your profile might be visible to others.</p>
                      <div className="flex items-center space-x-2 mt-2">
                        <RadioGroupItem value="private" id="visibility-private" />
                        <Label htmlFor="visibility-private">Private</Label>
                      </div>
                      <p className="text-xs text-muted-foreground pl-6">Your profile is hidden.</p>
                    </RadioGroup>
                  </CardContent>
                </Card>
              </div>
              <div className="grid gap-4 md:grid-cols-2">
                {/* Data Retention Card */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg font-medium">Data Retention</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <Label htmlFor="data-retention" className="block mb-2 text-sm">Account Data Retention Period</Label>
                    <Select
                      value={settings.privacy.dataRetention}
                      onValueChange={(value) => updatePrivacySettings({ ...settings.privacy, dataRetention: value as UserSettings["privacy"]["dataRetention"] })}
                    >
                      <SelectTrigger id="data-retention">
                        <SelectValue placeholder="Select Data Retention Period" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="6-months">6 Months</SelectItem>
                        <SelectItem value="1-year">1 Year</SelectItem>
                        <SelectItem value="2-years">2 Years</SelectItem> {/* Fixed: Removed "... other" */}
                        <SelectItem value="indefinite">Indefinite</SelectItem>
                      </SelectContent>
                    </Select>
                    <p className="text-xs text-muted-foreground mt-2">How long we keep your data after inactivity.</p>
                  </CardContent>
                </Card>
                {/* Third-Party Integrations Card */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg font-medium">Third-Party Integrations</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <p className="text-sm text-muted-foreground">Connected: Google Analytics, Facebook Pixel</p> {/* Static example */}
                    {/* Fixed: Added onClick handler */}
                    <Button variant="outline" onClick={handleManageIntegrations}>Manage Integrations</Button>
                  </CardContent>
                </Card>
              </div>
              {/* Data Actions */}
              <div className="flex flex-col sm:flex-row justify-between gap-4 border-t pt-6 mt-6">
                {/* Fixed: Added onClick handlers */}
                <Button variant="outline" onClick={handleDownloadData}>Download Your Data</Button>
                <Button variant="destructive" onClick={handleDeleteAccount}>Delete My Account</Button>
              </div>
            </CardContent>
            <CardFooter>
              <Button onClick={handleSavePrivacy}>Save Privacy Settings</Button>
            </CardFooter>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/settings/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/subscription/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function BusinessActorSubscriptionPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Subscription Plan</h1>
      <Card>
        <CardHeader>
          <CardTitle>Manage Your Subscription</CardTitle>
        </CardHeader>
        <CardContent>
          <p>View your current pricing plan, usage limits, and manage subscription details.</p>
          {/* TODO: Implement Subscription details display, upgrade/downgrade options, usage meters */}
        </CardContent>
      </Card>
      {/* Add sections for Usage, Limits if not included above */}
       <Card className="mt-4">
        <CardHeader>
          <CardTitle>Usage & Limits</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Track your usage against plan limits.</p>
          {/* TODO: Implement Usage meters */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/subscription/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/transactions/page.tsx


import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

export default function BusinessActorTransactionsPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Transactions</h1>
      <Tabs defaultValue="sales" className='space-y-4'>
        <TabsList>
            <TabsTrigger value="sales">Sales</TabsTrigger>
            {/* Add other relevant transaction types if needed */}
            <TabsTrigger value="history">Activity History</TabsTrigger>
        </TabsList>
        <TabsContent value="sales">
            <Card>
                <CardHeader>
                <CardTitle>Sales Transactions</CardTitle>
                </CardHeader>
                <CardContent>
                <p>Detailed view of sales transactions.</p>
                {/* TODO: Implement Sales Table/List */}
                </CardContent>
            </Card>
        </TabsContent>
         <TabsContent value="history">
            <Card>
                <CardHeader>
                <CardTitle>User Activity History</CardTitle>
                </CardHeader>
                <CardContent>
                <p>Log of recent user actions (logins, profile changes, etc.).</p>
                {/* TODO: Implement Activity Log Component */}
                </CardContent>
            </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/transactions/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/wallet/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function BusinessActorWalletPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Portefeuille / Wallet</h1>
      <Tabs defaultValue="overview" className='space-y-4'>
        <TabsList>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="revenue">Revenue</TabsTrigger>
          <TabsTrigger value="balance">Balance</TabsTrigger>
          <TabsTrigger value="withdraw">Withdraw</TabsTrigger>
          {/* Add more tabs as needed */}
        </TabsList>
        <TabsContent value="overview">
          <Card>
            <CardHeader><CardTitle>Wallet Overview</CardTitle></CardHeader>
            <CardContent>
              <p>Summary of wallet status, recent activity.</p>
              {/* TODO: Add Wallet summary widgets */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="revenue">
          <Card>
            <CardHeader><CardTitle>Revenue Details</CardTitle></CardHeader>
            <CardContent>
              <p>Detailed breakdown of income sources.</p>
              {/* TODO: Implement Revenue charts/tables */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="balance">
          <Card>
            <CardHeader><CardTitle>Current Balance</CardTitle></CardHeader>
            <CardContent>
              <p>View current available balance.</p>
              {/* TODO: Display Balance, transaction history */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="withdraw">
          <Card>
            <CardHeader><CardTitle>Withdraw Funds</CardTitle></CardHeader>
            <CardContent>
              <p>Manage payout settings and initiate withdrawals.</p>
              {/* TODO: Implement Withdrawal form/history */}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/wallet/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/webhooks/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

export default function BusinessActorWebhooksPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Webhooks & Alerts</h1>
      <Tabs defaultValue="manage" className="space-y-4">
        <TabsList>
          <TabsTrigger value="manage">Manage Webhooks</TabsTrigger>
          <TabsTrigger value="templates">Alert Templates</TabsTrigger>
          <TabsTrigger value="logs">Logs</TabsTrigger>
        </TabsList>
        <TabsContent value="manage">
          <Card>
            <CardHeader><CardTitle>Configure Webhooks</CardTitle></CardHeader>
            <CardContent>
              <p>Set up webhooks to receive notifications for specific events.</p>
              {/* TODO: Implement webhook creation/management form and list */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="templates">
          <Card>
            <CardHeader><CardTitle>Notification Templates</CardTitle></CardHeader>
            <CardContent>
              <p>Customize the templates used for webhook alerts.</p>
              {/* TODO: Implement template editor/manager */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="logs">
          <Card>
            <CardHeader><CardTitle>Webhook Delivery Logs</CardTitle></CardHeader>
            <CardContent>
              <p>View the history and status of webhook deliveries.</p>
              {/* TODO: Implement webhook log viewer */}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/webhooks/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/wishlist/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function BusinessActorWishlistPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Wishlist</h1>
      <Card>
        <CardHeader>
          <CardTitle>Manage Wishlist</CardTitle>
        </CardHeader>
        <CardContent>
          <p>View and manage items added to the business wishlist.</p>
          {/* TODO: Implement Wishlist display and management */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/wishlist/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/customer/bonus/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from '@/components/ui/button';

export default function CustomerBonusPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Mes Bonus / My Bonus</h1>
      <div className="grid gap-4 md:grid-cols-2">
          <Card>
            <CardHeader>
              <CardTitle>Consulter mes Points / Check My Points</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-4xl font-bold">1,234 Pts</p> {/* TODO: Fetch dynamically */}
              <p className="text-sm text-muted-foreground mt-2">Valeur en monnaie / Monetary Value: $12.34</p> {/* TODO: Fetch/Calculate dynamically */}
               {/* TODO: Show history of points earned/spent */}
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Convertir mes points / Convert My Points</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Redeem your points for rewards or discounts.</p>
              <Button className="mt-4" disabled>Convert Points</Button> {/* TODO: Implement conversion logic */}
              {/* TODO: Show available rewards/conversion options */}
            </CardContent>
          </Card>
      </div>
    </div>
  );
}// END OF FILE: app/(dashboard)/customer/bonus/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/customer/chat/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function CustomerChatPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Chat & Support</h1>
      <Card>
        <CardHeader>
          <CardTitle>Get Help</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Chat with support or use the chatbot for assistance.</p>
          {/* TODO: Implement Customer Chat component */}
          <div className="mt-4 h-96 border rounded-md flex items-center justify-center text-muted-foreground">
             Customer Chat Interface Placeholder
           </div>
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/customer/chat/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/customer/dashboard/page.tsx

"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { ArrowRight, Building, Gift, HandCoins, History, Megaphone, Star } from 'lucide-react';
import Link from 'next/link';
import { useSettings } from '@/contexts/settings-context'; // To get user name

export default function CustomerDashboardPage() {
  const { settings } = useSettings(); // Get user settings for personalization
  const businessActorName = "Business"; // Placeholder - Make dynamic if possible later

  // Placeholder data - replace with actual data fetching
  const upcomingReservations = 0;
  const bonusPoints = 1234;
  const recentFavorites = 2;

  return (
    <div className="space-y-8">
      {/* Welcome Header */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
            <h1 className="text-3xl font-bold tracking-tight">Welcome back, {settings.fullName || "Customer"}!</h1>
            <p className="text-muted-foreground">Here's a quick overview of your account.</p>
        </div>
         {/* CTA to Become Business Actor */}
         {/* TODO: Add logic to hide this if the user is already a BA */}
        <Button size="lg" asChild className="animate-pulse bg-gradient-to-r from-primary to-primary/80 hover:from-primary/80 hover:to-primary/70 text-primary-foreground shadow-lg hover:shadow-primary/40 transition-shadow duration-300">
          <Link href="/business-actor/signup"> {/* Or link to an upgrade flow */}
            Become a {businessActorName} Actor <Building className="ml-2 h-5 w-5" />
          </Link>
        </Button>
      </div>

      {/* Key Metric Cards */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
         <Card className="hover:shadow-md transition-shadow">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">My Bonus Points</CardTitle>
            <HandCoins className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
            <div className="text-2xl font-bold">{bonusPoints.toLocaleString()} Pts</div>
            <p className="text-xs text-muted-foreground">Value: ~$ {(bonusPoints * 0.01).toFixed(2)}</p> {/* Example conversion */}
            </CardContent>
             <CardFooter className="pt-0">
                 <Button variant="link" size="sm" className="p-0 h-auto" asChild>
                     <Link href="/customer/bonus">View Details</Link>
                 </Button>
             </CardFooter>
        </Card>

        <Card className="hover:shadow-md transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Upcoming Reservations</CardTitle>
            <History className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{upcomingReservations}</div>
            <p className="text-xs text-muted-foreground">Check your schedule</p>
          </CardContent>
           <CardFooter className="pt-0">
                 <Button variant="link" size="sm" className="p-0 h-auto" asChild>
                     <Link href="/customer/services?tab=transactions">View Transactions</Link>
                 </Button>
             </CardFooter>
        </Card>

         <Card className="hover:shadow-md transition-shadow">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">My Favorites</CardTitle>
            <Star className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
            <div className="text-2xl font-bold">{recentFavorites}</div>
            <p className="text-xs text-muted-foreground">Recently saved items</p>
            </CardContent>
             <CardFooter className="pt-0">
                 <Button variant="link" size="sm" className="p-0 h-auto" asChild>
                     <Link href="/customer/favorites">Manage Favorites</Link>
                 </Button>
             </CardFooter>
        </Card>

        <Card className="hover:shadow-md transition-shadow bg-secondary/30 dark:bg-secondary/20 border-secondary">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Invite Friends</CardTitle>
            <Gift className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
            <div className="text-lg font-semibold">Earn Rewards!</div>
            <p className="text-xs text-muted-foreground">Share your link & get bonuses.</p>
            </CardContent>
             <CardFooter className="pt-0">
                 <Button variant="link" size="sm" className="p-0 h-auto" asChild>
                     <Link href="/customer/invite">Get Invite Link</Link>
                 </Button>
             </CardFooter>
        </Card>
      </div>

      {/* Quick Actions / Recent Activity */}
      <div className="grid gap-6 lg:grid-cols-2">
         <Card>
           <CardHeader>
             <CardTitle className="flex items-center gap-2"><Megaphone className="h-5 w-5" /> Latest Announcements</CardTitle>
              <CardDescription>Updates and offers from businesses you follow.</CardDescription>
           </CardHeader>
           <CardContent>
             {/* Placeholder Content */}
             <div className="space-y-3">
                <p className="text-sm text-muted-foreground p-4 border rounded-md text-center italic">No recent announcements.</p>
                {/* TODO: Replace with a list/feed of actual announcements */}
                {/* Example Item:
                <div className="flex items-start gap-3 p-3 border rounded-md hover:bg-accent">
                    <Avatar className="h-8 w-8 border">
                        <AvatarImage src="/placeholder-biz-logo.png" alt="Biz Name" />
                        <AvatarFallback>BZ</AvatarFallback>
                    </Avatar>
                    <div>
                        <p className="text-sm font-medium">Summer Sale Announced!</p>
                        <p className="text-xs text-muted-foreground">Get 20% off all services until Aug 31st.</p>
                    </div>
                </div>
                */}
             </div>
             <Button variant="outline" size="sm" className="mt-4" asChild>
                 <Link href="/customer/services?tab=announcements">View All Announcements</Link>
             </Button>
           </CardContent>
         </Card>

         <Card>
           <CardHeader>
             <CardTitle className="flex items-center gap-2"><History className="h-5 w-5" /> Recent Activity</CardTitle>
             <CardDescription>Your latest reservations or purchases.</CardDescription>
           </CardHeader>
           <CardContent>
                {/* Placeholder Content */}
             <div className="space-y-3">
                <p className="text-sm text-muted-foreground p-4 border rounded-md text-center italic">No recent transactions.</p>
                {/* TODO: Replace with a list/feed of actual transactions */}
                 {/* Example Item:
                 <div className="flex items-center justify-between p-3 border rounded-md hover:bg-accent">
                     <div>
                         <p className="text-sm font-medium">Booking: City Center Spa</p>
                         <p className="text-xs text-muted-foreground">July 25, 2024 - 2:00 PM</p>
                     </div>
                     <Badge variant="outline">Confirmed</Badge>
                 </div>
                 */}
             </div>
              <Button variant="outline" size="sm" className="mt-4" asChild>
                  <Link href="/customer/services?tab=transactions">View All Transactions</Link>
              </Button>
           </CardContent>
         </Card>
      </div>
    </div>
  );
}// END OF FILE: app/(dashboard)/customer/dashboard/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/customer/favorites/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function CustomerFavoritesPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">My Favorites</h1>
      <Card>
        <CardHeader>
          <CardTitle>Saved Items/Services</CardTitle>
        </CardHeader>
        <CardContent>
          <p>View and manage your favorited items or services.</p>
          {/* TODO: Implement Favorites list, organization (folders), sharing */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/customer/favorites/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/customer/invite/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

export default function CustomerInvitePage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Invite Friends & Referrals</h1>
      <Card>
        <CardHeader>
          <CardTitle>Share & Earn Rewards</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p>Invite friends to join and earn rewards through our referral program.</p>
          <div className='space-y-2'>
            <Label htmlFor='referral-link'>Your Referral Link</Label>
            <div className='flex gap-2'>
              <Input id="referral-link" readOnly value="https://yowyob.com/ref/cust123" />{/* TODO: Generate dynamically */}
              <Button>Copy Link</Button> {/* TODO: Add copy functionality */}
            </div>
          </div>
          {/* TODO: Add social sharing buttons */}
          {/* TODO: Display referral statistics (invited friends, rewards earned) */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/customer/invite/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/customer/invoices/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function CustomerInvoicesPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">My Invoices</h1>
        <Tabs defaultValue="overview" className="space-y-4">
            <TabsList>
                <TabsTrigger value="overview">Overview</TabsTrigger>
                <TabsTrigger value="payment_details">Payment Details</TabsTrigger>
            </TabsList>
            <TabsContent value="overview">
                <Card>
                    <CardHeader><CardTitle>Invoice History</CardTitle></CardHeader>
                    <CardContent>
                    <p>View your past invoices and their payment status.</p>
                    {/* TODO: Implement Invoice list/table for customer */}
                    </CardContent>
                </Card>
            </TabsContent>
             <TabsContent value="payment_details">
                <Card>
                    <CardHeader><CardTitle>Saved Payment Methods</CardTitle></CardHeader>
                    <CardContent>
                    <p>Manage your saved payment details (e.g., credit cards).</p>
                    {/* TODO: Implement payment method management UI */}
                    </CardContent>
                </Card>
            </TabsContent>
        </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/customer/invoices/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/customer/services/page.tsx

"use client";

import React, { useState, useEffect, useCallback, useMemo } from "react";
import { ProductListItemData } from "@/types/product";
import { CustomerProductCard } from "@/components/customer/CustomerProductCard";
import { getCustomerProductColumns } from "@/components/customer/columns";
import { CustomerProductDataTableToolbar } from "@/components/customer/CustomerProductDataTableToolbar";
import { DataTable } from "@/components/ui/data-table";
import { DataTablePagination } from "@/components/ui/data-table-pagination";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { AlertTriangle, LayoutGrid, LayoutList, Frown, ShoppingBag, Search } from "lucide-react";
import { toast } from "sonner";
import { cn } from "@/lib/utils";
import {
  ColumnDef, SortingState, ColumnFiltersState, VisibilityState, PaginationState, RowSelectionState,
  useReactTable, getCoreRowModel, getFilteredRowModel, getPaginationRowModel,
  getSortedRowModel, getFacetedRowModel, getFacetedUniqueValues, FilterFn, Table, Row
} from "@tanstack/react-table";
import { rankItem } from '@tanstack/match-sorter-utils';
import { Dialog, DialogContent } from "@/components/ui/dialog";
import { ProductDetailView } from "@/components/products/ProductDetailView";
import { ReservationModal } from "@/components/customer/ReservationModal"; // Import ReservationModal

import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card";
type ViewMode = "grid" | "list";

// Mock API call (Keep your existing mock data and fetch function here)
const fetchCustomerProducts = async (): Promise<ProductListItemData[]> => {
  console.log("Simulating API: Fetching ALL customer products for client-side filtering.");
  await new Promise(resolve => setTimeout(resolve, 600));
  const placeholderImageUrl = "";
  const mockData: ProductListItemData[] = [
    { id: "srv1", name: "Zen Garden Yoga Class (Single Session)", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 25, description: "Find your inner peace with our guided yoga session. Suitable for all levels.", imageUrl: placeholderImageUrl, baInfo: { id: "ba1", name: "Zenith Wellness", logoUrl: "" }, createdAt: new Date(Date.now() - 86400000 * 2).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 1).toISOString() },
    { id: "res1", name: "Artisan Handcrafted Coffee Mug", productType: "RESOURCE", currentState: "AVAILABLE", basePrice: 35, description: "Beautifully handcrafted ceramic mug, perfect for your morning brew. Limited stock!", imageUrl: placeholderImageUrl, baInfo: { id: "ba2", name: "Crafty Corner", logoUrl: "" }, createdAt: new Date(Date.now() - 86400000 * 5).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 2).toISOString() },
    { id: "srv2", name: "Pro Photography Session (1 Hour)", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 150, description: "Capture your special moments with a professional 1-hour photo shoot. Includes 20 edited digital images.", imageUrl: placeholderImageUrl, baInfo: { id: "ba3", name: "Shutter Speed Inc.", logoUrl: "" }, createdAt: new Date(Date.now() - 86400000 * 10).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 3).toISOString() },
    { id: "res2", name: "Organic Fruit Basket - Weekly", productType: "RESOURCE", currentState: "AVAILABLE", basePrice: 45, description: "Weekly subscription for a basket of fresh, seasonal organic fruits delivered to your doorstep.", imageUrl: placeholderImageUrl, baInfo: { id: "ba4", name: "FarmFresh Goods", logoUrl: "" }, createdAt: new Date(Date.now() - 86400000 * 15).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 4).toISOString() },
    { id: "srv4", name: "Online Coding Bootcamp", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 499, description: "Intensive 12-week online coding bootcamp covering full-stack development.", imageUrl: placeholderImageUrl, baInfo: { id: "ba5", name: "CodeAcademy Plus", logoUrl: "" }, createdAt: new Date(Date.now() - 86400000 * 20).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 5).toISOString() },
    { id: "res3", name: "Premium Bluetooth Headphones", productType: "RESOURCE", currentState: "AVAILABLE", basePrice: 120, description: "High-fidelity sound with noise cancellation and long battery life.", imageUrl: placeholderImageUrl, baInfo: { id: "ba6", name: "AudioPhile Gear", logoUrl: "" }, createdAt: new Date(Date.now() - 86400000 * 8).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 2).toISOString() },
    { id: "srv5", name: "Home Cleaning Service (3 hours)", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 90, description: "Professional home cleaning service for up to 3 hours. All supplies included.", imageUrl: placeholderImageUrl, baInfo: { id: "ba7", name: "Sparkle Clean Co.", logoUrl: "" }, createdAt: new Date(Date.now() - 86400000 * 12).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 3).toISOString() },
    { id: "res4", name: "Smart Home Security Camera", productType: "RESOURCE", currentState: "AVAILABLE", basePrice: 75, description: "1080p HD security camera with night vision and two-way audio.", imageUrl: placeholderImageUrl, baInfo: { id: "ba6", name: "AudioPhile Gear" }, createdAt: new Date(Date.now() - 86400000 * 18).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 6).toISOString() },
    { id: "srv6", name: "Graphic Design: Logo Package", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 250, description: "Custom logo design package with multiple concepts and revisions.", imageUrl: placeholderImageUrl, baInfo: { id: "ba8", name: "Creative Canvas Studio", logoUrl: "" }, createdAt: new Date(Date.now() - 86400000 * 25).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 7).toISOString() },
    { id: "res5", name: "Portable Power Bank 20000mAh", productType: "RESOURCE", currentState: "AVAILABLE", basePrice: 40, description: "High-capacity power bank to keep your devices charged on the go.", imageUrl: placeholderImageUrl, baInfo: { id: "ba6", name: "AudioPhile Gear" }, createdAt: new Date(Date.now() - 86400000 * 4).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 1).toISOString() },
    { id: "srv7", name: "Personalized Nutrition Plan", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 60, description: "Diet plan created by a certified nutritionist based on your needs.", imageUrl: placeholderImageUrl, baInfo: { id: "ba1", name: "Zenith Wellness" }, createdAt: new Date(Date.now() - 86400000 * 30).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 10).toISOString() },
    { id: "res6", name: "Indoor Herb Garden Kit", productType: "RESOURCE", currentState: "AVAILABLE", basePrice: 30, description: "Grow your own fresh herbs indoors with this easy-to-use kit.", imageUrl: placeholderImageUrl, baInfo: { id: "ba4", name: "FarmFresh Goods" }, createdAt: new Date(Date.now() - 86400000 * 7).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 2).toISOString() },
    { id: "srv8", name: "Virtual Assistant Services (10hr block)", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 200, description: "Delegate your tasks to a professional virtual assistant. 10 hours per month.", imageUrl: placeholderImageUrl, baInfo: { id: "ba9", name: "TaskMasters VA", logoUrl: "" }, createdAt: new Date(Date.now() - 86400000 * 40).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 10).toISOString() },
    { id: "res7", name: "Adjustable Dumbbell Set", productType: "RESOURCE", currentState: "AVAILABLE", basePrice: 180, description: "Space-saving adjustable dumbbell set, perfect for home workouts.", imageUrl: placeholderImageUrl, baInfo: { id: "ba10", name: "HomeFit Gear", logoUrl: "" }, createdAt: new Date(Date.now() - 86400000 * 10).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 3).toISOString() },
    { id: "srv9", name: "Language Tutoring: Spanish (1hr)", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 30, description: "Personalized Spanish language tutoring with a native speaker.", imageUrl: placeholderImageUrl, baInfo: { id: "ba11", name: "LinguaLearn", logoUrl: "" }, createdAt: new Date(Date.now() - 86400000 * 22).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 5).toISOString() },
    { id: "res8", name: "Professional Artist Paint Set", productType: "RESOURCE", currentState: "AVAILABLE", basePrice: 65, description: "High-quality acrylic paint set with a variety of brushes for artists.", imageUrl: placeholderImageUrl, baInfo: { id: "ba2", name: "Crafty Corner" }, createdAt: new Date(Date.now() - 86400000 * 6).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 1).toISOString() },
    { id: "srv10", name: "Career Coaching Session", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 120, description: "Guidance and strategies to advance your career and achieve professional goals.", imageUrl: placeholderImageUrl, baInfo: { id: "ba12", name: "Career Path Pro", logoUrl: "" }, createdAt: new Date(Date.now() - 86400000 * 35).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 8).toISOString() },
    { id: "res9", name: "Electric Gooseneck Kettle", productType: "RESOURCE", currentState: "AVAILABLE", basePrice: 50, description: "Precision pour electric kettle, ideal for coffee and tea enthusiasts.", imageUrl: placeholderImageUrl, baInfo: { id: "ba2", name: "Crafty Corner" }, createdAt: new Date(Date.now() - 86400000 * 3).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 1).toISOString() },
    { id: "srv11", name: "Custom Web Component Development", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 350, description: "Development of a bespoke web component tailored to your specific requirements.", imageUrl: placeholderImageUrl, baInfo: { id: "ba5", name: "CodeAcademy Plus" }, createdAt: new Date(Date.now() - 86400000 * 28).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 9).toISOString() },
    { id: "res10", name: "Yoga Mat - Eco Friendly", productType: "RESOURCE", currentState: "AVAILABLE", basePrice: 40, description: "Durable and eco-friendly yoga mat with excellent grip.", imageUrl: placeholderImageUrl, baInfo: { id: "ba1", name: "Zenith Wellness" }, createdAt: new Date(Date.now() - 86400000 * 11).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 4).toISOString() },
    { id: "srv12", name: "Mobile App UI/UX Review", productType: "SERVICE", currentState: "PUBLISHED", basePrice: 180, description: "Expert review of your mobile app's UI/UX with actionable feedback.", imageUrl: placeholderImageUrl, baInfo: { id: "ba8", name: "Creative Canvas Studio" }, createdAt: new Date(Date.now() - 86400000 * 16).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 6).toISOString() },
    { id: "res11", name: "French Press Coffee Maker", productType: "RESOURCE", currentState: "AVAILABLE", basePrice: 28, description: "Classic French press for a rich and flavorful coffee experience.", imageUrl: placeholderImageUrl, baInfo: { id: "ba2", name: "Crafty Corner" }, createdAt: new Date(Date.now() - 86400000 * 9).toISOString(), updatedAt: new Date(Date.now() - 86400000 * 2).toISOString() },
  ];
  return mockData;
};

const fuzzyGlobalFilterFn: FilterFn<ProductListItemData> = (row, columnId, value, addMeta) => {
  const itemRank = rankItem(row.getValue(columnId), value);
  addMeta({ itemRank } as any);
  return itemRank.passed;
};

export default function CustomerServicesPage() {
  const [allProducts, setAllProducts] = useState<ProductListItemData[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [viewMode, setViewMode] = useState<ViewMode>("grid");

  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [globalFilter, setGlobalFilter] = useState<string>("");
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [pagination, setPagination] = useState<PaginationState>({ pageIndex: 0, pageSize: 12 });

  const [selectedProductForDetail, setSelectedProductForDetail] = useState<ProductListItemData | null>(null);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);

  const [selectedProductForReservation, setSelectedProductForReservation] = useState<ProductListItemData | null>(null);
  const [isReservationModalOpen, setIsReservationModalOpen] = useState(false);

  const loadProducts = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const fetchedProducts = await fetchCustomerProducts();
      setAllProducts(fetchedProducts);
    } catch (err: any) {
      const errorMessage = err.message || "Failed to load products. Please try again.";
      setError(errorMessage);
      toast.error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    loadProducts();
  }, [loadProducts]);

  const handleViewDetails = useCallback((product: ProductListItemData) => {
    setSelectedProductForDetail(product);
    setIsDetailModalOpen(true);
  }, []);

  // This function will now open the ReservationModal
  const handleReserveOrEnquire = useCallback((product: ProductListItemData) => {
    setSelectedProductForReservation(product);
    setIsReservationModalOpen(true);
  }, []);

  const handleReservationSuccess = () => {
    // Potentially refresh data or show a more persistent success message
    // For now, ReservationModal handles its own toast.
    console.log("Reservation successful callback received.");
  };

  const columns = useMemo<ColumnDef<ProductListItemData>[]>(
    () => getCustomerProductColumns({ onViewDetails: handleViewDetails, onReserve: handleReserveOrEnquire }),
    [handleViewDetails, handleReserveOrEnquire] // Updated handler
  );

  const table = useReactTable({
    data: allProducts,
    columns,
    state: { sorting, columnFilters, globalFilter, columnVisibility, rowSelection, pagination },
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onGlobalFilterChange: setGlobalFilter,
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    onPaginationChange: setPagination,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getFacetedRowModel: getFacetedRowModel(),
    getFacetedUniqueValues: getFacetedUniqueValues(),
    globalFilterFn: fuzzyGlobalFilterFn,
    manualPagination: false,
    manualSorting: false,
    manualFiltering: false,
    enableRowSelection: true,
  });

  useEffect(() => {
    const newPageSize = viewMode === 'grid' ? 12 : 10;
    if (table.getState().pagination.pageSize !== newPageSize) {
      table.setPageSize(newPageSize);
    }
  }, [viewMode, table]);

  const currentTablePageRows: Row<ProductListItemData>[] = table.getRowModel().rows;

  return (
    <div className="container mx-auto py-6 sm:py-8">
      <header className="mb-6 sm:mb-8">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div className="flex-1">
            <h1 className="text-2xl sm:text-3xl font-bold tracking-tight text-foreground flex items-center">
              <ShoppingBag className="mr-3 h-7 w-7 text-primary flex-shrink-0" />
              Discover Services & Products
            </h1>
            <p className="text-sm sm:text-base text-muted-foreground mt-1">Browse offerings from our trusted Business Actors.</p>
          </div>
          <div className="flex items-center gap-x-2 flex-shrink-0">
            <div className="flex items-center p-0.5 bg-muted rounded-md">
              <Button
                variant={viewMode === 'list' ? 'default' : 'ghost'} size="sm"
                onClick={() => setViewMode('list')} aria-label="List view"
                className={cn("h-9 px-3 rounded-sm data-[state=active]:shadow-sm", viewMode === 'list' ? "bg-background text-foreground" : "text-muted-foreground hover:bg-background/50 hover:text-foreground")}
                data-state={viewMode === 'list' ? 'active' : 'inactive'}
              ><LayoutList className="h-4 w-4" /><span className="ml-1.5 hidden sm:inline">List</span></Button>
              <Button
                variant={viewMode === 'grid' ? 'default' : 'ghost'} size="sm"
                onClick={() => setViewMode('grid')} aria-label="Grid view"
                className={cn("h-9 px-3 rounded-sm data-[state=active]:shadow-sm", viewMode === 'grid' ? "bg-background text-foreground" : "text-muted-foreground hover:bg-background/50 hover:text-foreground")}
                data-state={viewMode === 'grid' ? 'active' : 'inactive'}
              ><LayoutGrid className="h-4 w-4" /><span className="ml-1.5 hidden sm:inline">Grid</span></Button>
            </div>
          </div>
        </div>
      </header>

      <CustomerProductDataTableToolbar
        table={table}
        globalFilter={globalFilter}
        setGlobalFilter={setGlobalFilter}
      />

      <main className="mt-2">
        {/* ... Skeletons and Error/NoData states remain the same ... */}
        {isLoading && ( /* Skeletons Logic */
          viewMode === 'grid' ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6">
              {Array.from({ length: table.getState().pagination.pageSize }).map((_, i) => (
                <Card key={i}><Skeleton className="aspect-[16/10] w-full rounded-t-lg" /><CardHeader className="pb-2 pt-3"><Skeleton className="h-5 w-3/4" /><Skeleton className="h-3 w-1/2 mt-1.5" /></CardHeader><CardContent className="space-y-2 py-2"><Skeleton className="h-3 w-full" /><Skeleton className="h-3 w-5/6" /></CardContent><CardFooter className="pt-2 pb-3"><Skeleton className="h-8 w-full" /></CardFooter></Card>
              ))}
            </div>
          ) : (
            <div className="rounded-md border">
              <div className="p-4 border-b"><Skeleton className="h-6 w-1/3" /></div>
              <div className="divide-y">
                {Array.from({ length: table.getState().pagination.pageSize }).map((_, i) =>
                  <div key={i} className="flex items-center gap-3 p-4">
                    <Skeleton className="h-12 w-12 rounded-md flex-shrink-0" />
                    <div className="space-y-1.5 flex-1"><Skeleton className="h-4 w-3/4" /><Skeleton className="h-3 w-1/2" /></div>
                    <Skeleton className="h-8 w-20 rounded-md" />
                    <Skeleton className="h-8 w-24 rounded-md ml-auto" />
                  </div>
                )}
              </div>
            </div>
          )
        )}

        {!isLoading && error && ( /* Error Display */
          <div className="min-h-[300px] flex flex-col justify-center items-center p-10 border border-destructive/50 bg-destructive/10 rounded-lg text-center">
            <AlertTriangle className="h-12 w-12 text-destructive mb-4" /><p className="text-destructive-foreground font-semibold">{error}</p>
            <Button onClick={loadProducts} variant="destructive" className="mt-6">Try Again</Button>
          </div>
        )}

        {!isLoading && !error && table.getRowModel().rows.length === 0 && allProducts.length > 0 && (
          <div className="min-h-[300px] text-center flex flex-col items-center justify-center text-muted-foreground border rounded-lg p-10">
            <Search className="h-16 w-16 text-muted-foreground/70 mb-6" />
            <h3 className="text-xl font-semibold">No Products Match Your Filters</h3>
            <p className="text-sm mt-1">Try adjusting your search or filter criteria.</p>
            <Button variant="outline" onClick={() => { setGlobalFilter(""); table.resetColumnFilters(); }} className="mt-4">Clear Filters</Button>
          </div>
        )}
        {!isLoading && !error && allProducts.length === 0 && ( /* No products at all */
          <div className="min-h-[300px] text-center flex flex-col items-center justify-center text-muted-foreground border rounded-lg p-10">
            <Frown className="h-16 w-16 text-muted-foreground/70 mb-6" /><h3 className="text-xl font-semibold">No Products Available</h3>
            <p className="text-sm mt-1">Please check back later, or try a broader search.</p>
          </div>
        )}

        {!isLoading && !error && table.getRowModel().rows.length > 0 && (
          viewMode === "grid" ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6">
              {currentTablePageRows.map((row) => (
                <CustomerProductCard key={row.original.id} product={row.original} onViewDetailsClick={handleViewDetails} onReserveClick={handleReserveOrEnquire} />
              ))}
            </div>
          ) : (
            <DataTable
              columns={columns}
              data={allProducts}
              pageCount={table.getPageCount()}
              sorting={sorting} onSortingChange={setSorting}
              columnFilters={columnFilters} onColumnFiltersChange={setColumnFilters}
              globalFilter={globalFilter} onGlobalFilterChange={setGlobalFilter}
              columnVisibility={columnVisibility} onColumnVisibilityChange={setColumnVisibility}
              rowSelection={rowSelection} onRowSelectionChange={setRowSelection}
              pagination={pagination} onPaginationChange={setPagination}
              manualPagination={false} manualSorting={false} manualFiltering={false}
            />
          )
        )}

        {!isLoading && !error && table.getPageCount() > 0 && (
          <div className="mt-6">
            <DataTablePagination table={table} />
          </div>
        )}
      </main>

      <Dialog open={isDetailModalOpen} onOpenChange={setIsDetailModalOpen}>
        <DialogContent className="sm:max-w-2xl max-h-[90vh] flex flex-col p-0">
          {selectedProductForDetail && (
            <ProductDetailView
              product={selectedProductForDetail}
              onClose={() => setIsDetailModalOpen(false)}
              showReserveButton={true} // Show reserve button in detail view
              onReserve={handleReserveOrEnquire} // Pass the handler
            // isBAView is false by default, so Edit button won't show
            />
          )}
        </DialogContent>
      </Dialog>

      <ReservationModal
        product={selectedProductForReservation}
        isOpen={isReservationModalOpen}
        onOpenChange={setIsReservationModalOpen}
        onReservationSuccess={handleReservationSuccess}
      />
    </div>
  );
}// END OF FILE: app/(dashboard)/customer/services/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/customer/settings/page.tsx

// NOTE: This might be very similar to the BA settings, but could be simplified.
// Reusing the BA settings component structure is a good starting point.
// You might hide tabs not relevant to the customer.

"use client"

import { useSettings } from "@/contexts/settings-context"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Button } from "@/components/ui/button"
// Import other necessary components from BA settings if needed (Select, Checkbox, etc.)
import { toast } from "sonner"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { useState } from "react"

// Assuming defaultAvatars is accessible or defined here as well

const defaultAvatars = [
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/9439775.jpg-4JVJWOjPksd3DtnBYJXoWHA5lc1DU9.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/375238645_11475210.jpg-lU8bOe6TLt5Rv51hgjg8NT8PsDBmvN.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/375238208_11475222.jpg-poEIzVHAGiIfMFQ7EiF8PUG1u0Zkzz.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/dd.jpg-4MCwPC2Bec6Ume26Yo1kao3CnONxDg.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/9334178.jpg-Y74tW6XFO68g7N36SE5MSNDNVKLQ08.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/5295.jpg-fLw0wGGZp8wuTzU5dnyfjZDwAHN98a.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/9720029.jpg-Yf9h2a3kT7rYyCb648iLIeHThq5wEy.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/27470341_7294795.jpg-XE0zf7R8tk4rfA1vm4fAHeZ1QoVEOo.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/799.jpg-0tEi4Xvg5YsFoGoQfQc698q4Dygl1S.jpeg",
  "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/9334228.jpg-eOsHCkvVrVAwcPHKYSs5sQwVKsqWpC.jpeg",
]


export default function CustomerSettingsPage() {
  // Using the same shared settings context
  const { settings, updateSettings, updateNotificationSettings, updatePrivacySettings } = useSettings()
  const [selectedAvatar, setSelectedAvatar] = useState(settings.avatar)

  const handleSaveAccount = () => {
    updateSettings({
      avatar: selectedAvatar,
      fullName: settings.fullName,
      email: settings.email,
      phone: settings.phone,
      // Timezone might be less relevant for customer? Keep or remove.
      // timezone: settings.timezone,
    })
    toast.success("Account settings saved successfully")
  }

  const handleSaveSecurity = () => {
    // TODO: Implement actual password change and 2FA logic via API call
    toast.info("Security settings update not implemented yet.");
  }

  const handleSaveNotifications = () => {
    updateNotificationSettings(settings.notifications)
    toast.success("Notification settings saved successfully")
  }

  const handleSavePrivacy = () => {
    updatePrivacySettings(settings.privacy)
    toast.success("Privacy settings saved successfully")
  }

  const handleDeleteAccount = () => {
    // TODO: Implement account deletion flow
    if (confirm("Are you sure you want to delete your account? This action cannot be undone.")) {
      toast.warning("Account deletion not implemented yet.");
      // Call API endpoint for deletion here
    }
  }


  return (
    <div className="container mx-auto">
      <h1 className="text-3xl font-bold mb-6">Settings</h1>
      {/* Simplified Tabs for Customer */}
      <Tabs defaultValue="account" className="space-y-4">
        <TabsList className="grid w-full grid-cols-4"> {/* Adjust grid cols */}
          <TabsTrigger value="account">Account</TabsTrigger>
          <TabsTrigger value="security">Security</TabsTrigger>
          <TabsTrigger value="notifications">Notifications</TabsTrigger>
          <TabsTrigger value="privacy">Privacy</TabsTrigger>
          {/* Removed 'Preferences' tab as example simplification */}
        </TabsList>

        {/* Account Tab (Similar to BA, maybe simplified) */}
        <TabsContent value="account">
          <Card>
            <CardHeader>
              <CardTitle>Account Settings</CardTitle>
              <CardDescription>Manage your account information</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Avatar Selection (reuse BA logic) */}
              <div className="space-y-4">
                <Label>Current Avatar</Label>
                <div className="flex items-center space-x-4">
                  <Avatar className="h-20 w-20">
                    <AvatarImage src={selectedAvatar || settings.avatar} alt={settings.fullName} />
                    <AvatarFallback>
                      {settings.fullName?.split(" ").map((n) => n[0]).join("") || 'C'}
                    </AvatarFallback>
                  </Avatar>
                </div>
                {/* Consider simplifying avatar choice for customer */}
                <Label>Choose a new avatar (Optional)</Label>
                <div className="flex gap-2 overflow-x-auto pb-2">
                  {defaultAvatars.slice(0, 5).map((avatar, index) => ( // Show fewer options maybe
                    <Avatar
                      key={index}
                      className={`h-16 w-16 rounded-lg cursor-pointer hover:ring-2 hover:ring-primary shrink-0 ${selectedAvatar === avatar ? "ring-2 ring-primary" : ""
                        }`}
                      onClick={() => setSelectedAvatar(avatar)}
                    >
                      <AvatarImage src={avatar} alt={`Avatar ${index + 1}`} className="object-cover" />
                      <AvatarFallback>{index + 1}</AvatarFallback>
                    </Avatar>
                  ))}
                </div>
              </div>
              {/* Basic Info Inputs */}
              <div className="space-y-2">
                <Label htmlFor="full-name">Full Name</Label>
                <Input
                  id="full-name"
                  value={settings.fullName}
                  onChange={(e) => updateSettings({ fullName: e.target.value })}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={settings.email}
                  onChange={(e) => updateSettings({ email: e.target.value })}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="phone">Phone Number</Label>
                <Input
                  id="phone"
                  type="tel"
                  value={settings.phone}
                  onChange={(e) => updateSettings({ phone: e.target.value })}
                />
              </div>
              {/* Other profile fields like Contact details, DPA, Newsletter can go here */}
              <div className="flex items-center space-x-2 pt-4">
                <Switch id="newsletter" /> {/* TODO: Connect state */}
                <Label htmlFor="newsletter">Subscribe to Newsletter</Label>
              </div>
              <div className="pt-4">
                <Button variant="link" className="p-0 h-auto">View Data Processing Agreement</Button> {/* TODO: Link to DPA */}
              </div>
            </CardContent>
            <CardFooter>
              <Button onClick={handleSaveAccount}>Save Account Settings</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        {/* Security Tab (Similar to BA) */}
        <TabsContent value="security">
          <Card>
            <CardHeader>
              <CardTitle>Security Settings</CardTitle>
              <CardDescription>Manage your password and authentication</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Password Change */}
              <div className="space-y-2">
                <Label htmlFor="current-password">Current Password</Label>
                <Input id="current-password" type="password" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="new-password">New Password</Label>
                <Input id="new-password" type="password" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="confirm-password">Confirm New Password</Label>
                <Input id="confirm-password" type="password" />
              </div>
              <Button onClick={handleSaveSecurity} className="mt-2">Change Password</Button>
              <div className="border-t pt-4 mt-4"></div>
              {/* 2FA */}
              <div className="flex items-center space-x-2">
                <Switch id="two-factor" /> {/* TODO: Connect state & setup flow */}
                <Label htmlFor="two-factor">Enable Two-Factor Authentication</Label>
              </div>
              {/* OTP Support (if different from 2FA) */}
              <div className="flex items-center space-x-2">
                <Switch id="otp-support" /> {/* TODO: Connect state & setup flow */}
                <Label htmlFor="otp-support">Enable OTP Support</Label>
              </div>
            </CardContent>
            {/* Optional: Add active sessions/login history if needed for customer */}
          </Card>
        </TabsContent>

        {/* Notifications Tab (Reuse BA structure, maybe fewer options) */}
        <TabsContent value="notifications">
          <Card>
            <CardHeader>
              <CardTitle>Notification Settings</CardTitle>
              <CardDescription>Manage how you receive notifications</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Reuse notification controls from BA settings */}
              {/* Example: */}
              <div className="flex items-center space-x-2">
                <Switch
                  id="email-notifications"
                  checked={settings.notifications.email}
                  onCheckedChange={(checked) =>
                    updateNotificationSettings({ ...settings.notifications, email: !!checked })
                  }
                />
                <Label htmlFor="email-notifications">Email Notifications</Label>
              </div>
              <div className="flex items-center space-x-2">
                <Switch
                  id="push-notifications"
                  checked={settings.notifications.push}
                  onCheckedChange={(checked) =>
                    updateNotificationSettings({ ...settings.notifications, push: !!checked })
                  }
                />
                <Label htmlFor="push-notifications">Push Notifications (App)</Label>
              </div>
              {/* Add other relevant notification types */}
            </CardContent>
            <CardFooter>
              <Button onClick={handleSaveNotifications}>Save Notification Settings</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        {/* Privacy Tab (Reuse BA structure) */}
        <TabsContent value="privacy">
          <Card>
            <CardHeader>
              <CardTitle>Privacy Settings</CardTitle>
              <CardDescription>Manage your privacy and data settings</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Reuse privacy controls from BA settings */}
              {/* Example: */}
              <div className="flex items-center justify-between">
                <Label htmlFor="analytics-sharing">Share usage data for improvement</Label>
                <Switch
                  id="analytics-sharing"
                  checked={settings.privacy.analyticsSharing}
                  onCheckedChange={(checked) =>
                    updatePrivacySettings({ ...settings.privacy, analyticsSharing: !!checked })
                  }
                />
              </div>
              {/* Add other relevant privacy controls */}
              <div className="border-t pt-6 mt-6 flex justify-between">
                <Button variant="outline">Download Your Data</Button> {/* TODO: Implement data export */}
                <Button variant="destructive" onClick={handleDeleteAccount}>Delete My Account</Button>
              </div>
            </CardContent>
            <CardFooter>
              <Button onClick={handleSavePrivacy}>Save Privacy Settings</Button>
            </CardFooter>
          </Card>
        </TabsContent>

      </Tabs>
      {/* Other Sections from Spec (could be modals or separate cards) */}
      <div className="mt-6 grid gap-4">
        <Card>
          <CardHeader><CardTitle>Fault Reports</CardTitle></CardHeader>
          <CardContent>
            <Button variant="outline">Report an Issue</Button> {/* TODO: Implement fault report form/modal */}
            <p className="text-sm text-muted-foreground mt-2">View your past fault reports here.</p> {/* TODO: Display report history */}
          </CardContent>
        </Card>
        <Card>
          <CardHeader><CardTitle>Rate App</CardTitle></CardHeader>
          <CardContent>
            <Button variant="outline">Rate Us Now</Button> {/* TODO: Link to app store or feedback form */}
          </CardContent>
        </Card>
        <Card>
          <CardHeader><CardTitle>What's New?</CardTitle></CardHeader>
          <CardContent>
            <p>Check out the latest updates and features.</p>
            {/* TODO: Display changelog or link to it */}
          </CardContent>
        </Card>
        <Card>
          <CardHeader><CardTitle>Help Center</CardTitle></CardHeader>
          <CardContent>
            <Button variant="outline">Visit Support / Help Center</Button> {/* TODO: Link to help center */}
          </CardContent>
        </Card>
        <Card>
          <CardHeader><CardTitle>Privacy Policy</CardTitle></CardHeader>
          <CardContent>
            <Button variant="link" className="p-0 h-auto">View Privacy Policy</Button> {/* TODO: Link to policy */}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
// END OF FILE: app/(dashboard)/customer/settings/page.tsx// END OF FILE: app/(dashboard)/customer/settings/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/layout.tsx

// FILE: app/(dashboard)/layout.tsx
import { Sidebar } from "@/components/sidebar"; // Check this import path
import { TopNav } from "@/components/top-nav";   // Check this import path
import React from "react";

interface DashboardLayoutProps {
  children: React.ReactNode;
}

export default function DashboardLayout({ children }: DashboardLayoutProps) {
  // Ensure this structure is correct
  return (
    <div className="flex min-h-screen">
      <Sidebar /> {/* Is Sidebar component okay? */}
      <div className="flex flex-1 flex-col overflow-auto">
        <TopNav /> {/* Is TopNav component okay? */}
        <main className="flex-1 p-4 pt-20 sm:p-6 md:p-8">
          <div className="container mx-auto">
            {children}
          </div>
        </main>
      </div>
    </div>
  );
}// END OF FILE: app/(dashboard)/layout.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/bonus/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function SuperAdminBonusPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Bonus System Overview</h1>
        <Tabs defaultValue="overview" className="space-y-4">
            <TabsList>
                <TabsTrigger value="overview">Points Overview</TabsTrigger>
                <TabsTrigger value="point_value">Monetary Value</TabsTrigger>
                 <TabsTrigger value="config">Global Config</TabsTrigger>
                {/* Add more tabs if needed */}
            </TabsList>
             <TabsContent value="overview">
                <Card>
                    <CardHeader><CardTitle>Total Points Issued/Redeemed</CardTitle></CardHeader>
                    <CardContent>
                        <p>Platform-wide statistics on bonus points.</p>
                        {/* TODO: Implement Bonus system stats and charts */}
                    </CardContent>
                </Card>
             </TabsContent>
            <TabsContent value="point_value">
                <Card>
                    <CardHeader><CardTitle>Point Monetary Value Setting</CardTitle></CardHeader>
                    <CardContent>
                        <p>View or set the global monetary value per bonus point.</p>
                        {/* TODO: Display/Edit global point value */}
                    </CardContent>
                </Card>
            </TabsContent>
             <TabsContent value="config">
                <Card>
                    <CardHeader><CardTitle>Global Bonus Configuration</CardTitle></CardHeader>
                    <CardContent>
                        <p>Manage default rules or settings for the bonus system.</p>
                         {/* TODO: Implement global bonus settings */}
                    </CardContent>
                </Card>
            </TabsContent>
        </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/bonus/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-actors/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function SuperAdminBusinessActorsPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Business Actors Management</h1>
      <Tabs defaultValue="list" className="space-y-4">
        <TabsList>
          <TabsTrigger value="list">List & Status</TabsTrigger>
          <TabsTrigger value="stats">Stats & Analytics</TabsTrigger>
          <TabsTrigger value="activities">Activities</TabsTrigger>
          {/* Add more tabs if needed, e.g., Approvals */}
        </TabsList>
        <TabsContent value="list">
          <Card>
            <CardHeader><CardTitle>Business Actor List</CardTitle></CardHeader>
            <CardContent>
              <p>View, search, and manage all Business Actors.</p>
              {/* TODO: Implement BA Table with status, filtering, actions (suspend, approve, etc.) */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="stats">
          <Card>
            <CardHeader><CardTitle>BA Analytics</CardTitle></CardHeader>
            <CardContent>
              <p>Aggregate statistics about Business Actors.</p>
              {/* TODO: Implement BA stats dashboard */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="activities">
          <Card>
            <CardHeader><CardTitle>BA Activities</CardTitle></CardHeader>
            <CardContent>
              <p>Log of significant activities related to BAs.</p>
              {/* TODO: Implement BA activity log */}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/business-actors/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/chat/page.tsx


import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function SuperAdminChatPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Admin Chat & Support</h1>
       <Card>
        <CardHeader>
          <CardTitle>Admin Communication</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Interface for Super Admin communication or monitoring support channels.</p>
          {/* TODO: Implement Admin Chat/Support Monitoring component */}
           <div className="mt-4 h-96 border rounded-md flex items-center justify-center text-muted-foreground">
             Admin Chat Interface Placeholder
           </div>
        </CardContent>
      </Card>
       {/* Add sections for Reviews Stats, Rate App overview, Notification Info */}
        <Card className="mt-4">
            <CardHeader><CardTitle>Reviews Statistics</CardTitle></CardHeader>
            <CardContent><p>Overall statistics on customer reviews.</p></CardContent>{/* TODO */}
        </Card>
        <Card className="mt-4">
            <CardHeader><CardTitle>App Rating Overview</CardTitle></CardHeader>
            <CardContent><p>Platform-wide app rating data.</p></CardContent>{/* TODO */}
        </Card>
         <Card className="mt-4">
            <CardHeader><CardTitle>Notification Info / System Alerts</CardTitle></CardHeader>
            <CardContent><p>View or manage system-wide notifications.</p></CardContent>{/* TODO */}
        </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/chat/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/customers/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function SuperAdminCustomersPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Customer Management</h1>
      <Card>
        <CardHeader>
          <CardTitle>Customer List</CardTitle>
        </CardHeader>
        <CardContent>
          <p>View, search, and manage all customer accounts.</p>
          {/* TODO: Implement Customer Table with filtering, status, actions */}
        </CardContent>
      </Card>
       {/* Add cards for stats/activities if needed */}
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/customers/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/dashboard/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function SuperAdminDashboardPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Super Admin Dashboard</h1>
       <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
         <Card>
           <CardHeader>
             <CardTitle>Platform Overview</CardTitle>
           </CardHeader>
           <CardContent>
             <p>Key metrics across all platforms.</p>
             {/* TODO: Add high-level stats (Total BAs, Customers, Subscriptions) */}
           </CardContent>
         </Card>
          <Card>
           <CardHeader>
             <CardTitle>Recent Activities</CardTitle>
           </CardHeader>
           <CardContent>
             <p>Platform-wide significant events.</p>
             {/* TODO: Add important activity feed */}
           </CardContent>
         </Card>
         <Card>
           <CardHeader>
             <CardTitle>System Health</CardTitle>
           </CardHeader>
           <CardContent>
             <p>Status of key services.</p>
             {/* TODO: Add system status indicators */}
           </CardContent>
         </Card>
      </div>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/dashboard/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/platforms/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function SuperAdminPlatformsPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Platform Management</h1>
       <Tabs defaultValue="stats" className="space-y-4">
            <TabsList>
                <TabsTrigger value="stats">Stats & Analytics</TabsTrigger>
                <TabsTrigger value="activities">Activities</TabsTrigger>
                <TabsTrigger value="subscribers">Subscribers</TabsTrigger>
                {/* Add more tabs if needed, e.g., Configuration */}
            </TabsList>
             <TabsContent value="stats">
                <Card>
                    <CardHeader><CardTitle>Platform Statistics</CardTitle></CardHeader>
                    <CardContent>
                        <p>Detailed statistics for each managed platform.</p>
                        {/* TODO: Implement platform stats display (table/charts) */}
                    </CardContent>
                </Card>
            </TabsContent>
            <TabsContent value="activities">
                <Card>
                    <CardHeader><CardTitle>Platform Activities</CardTitle></CardHeader>
                    <CardContent>
                        <p>Logs of significant activities occurring on the platforms.</p>
                        {/* TODO: Implement platform activity log viewer */}
                    </CardContent>
                </Card>
            </TabsContent>
             <TabsContent value="subscribers">
                <Card>
                    <CardHeader><CardTitle>Platform Subscribers</CardTitle></CardHeader>
                    <CardContent>
                        <p>Overview of subscribers (BAs, Customers) per platform.</p>
                        {/* TODO: Implement subscriber overview */}
                    </CardContent>
                </Card>
            </TabsContent>
       </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/platforms/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/profile/page.tsx

import React from 'react';
import { redirect } from 'next/navigation';

export default function SuperAdminProfilePage() {
  // Redirecting to the main settings page's account tab
  // Adjust the target tab if needed (e.g., using query params if implemented)
  redirect('/super-admin/settings');

  // Or, if you want a dedicated page, keep simple content:
  /*
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Admin Profile</h1>
      <p>This page displays admin profile details. Consider consolidating with Settings.</p>
      {}
    </div>
  );
  */
}
// END OF FILE: app/(dashboard)/super-admin/profile/page.tsx// END OF FILE: app/(dashboard)/super-admin/profile/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/settings/page.tsx

"use client"

import { useSettings } from "@/contexts/settings-context" // Using shared settings for the logged-in admin user
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Button } from "@/components/ui/button"
import { toast } from "sonner"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { useState } from "react"

export default function SuperAdminSettingsPage() {
  // Using the same shared settings context for the ADMIN's own profile/security
  const { settings, updateSettings } = useSettings();
  const [selectedAvatar, setSelectedAvatar] = useState(settings.avatar); // Admin's avatar

  const handleSaveAccount = () => {
    updateSettings({
      avatar: selectedAvatar,
      fullName: settings.fullName, // Admin's name
      email: settings.email,       // Admin's email
    });
    toast.success("Admin account settings saved successfully");
  }

  const handleSaveSecurity = () => {
    // TODO: Implement actual password change and 2FA logic for admin via API call
    toast.info("Admin security settings update not implemented yet.");
  }

  const handleDeleteAccount = () => {
    // TODO: Implement admin account deletion flow (use with extreme caution!)
    if (confirm("Are you sure you want to delete YOUR Super Admin account? This action cannot be undone.")) {
      toast.warning("Admin account deletion not implemented yet.");
      // Call API endpoint for deletion here
    }
  }

  return (
    <div className="container mx-auto">
      <h1 className="text-3xl font-bold mb-6">Admin Account Settings</h1>
      <Tabs defaultValue="account" className="space-y-4">
        <TabsList className="grid w-full grid-cols-2"> {/* Simplified for admin */}
          <TabsTrigger value="account">My Account</TabsTrigger>
          <TabsTrigger value="security">Security</TabsTrigger>
          {/* Add other relevant admin-specific settings if needed */}
        </TabsList>

        {/* Account Tab */}
        <TabsContent value="account">
          <Card>
            <CardHeader>
              <CardTitle>My Admin Profile</CardTitle>
              <CardDescription>Manage your admin account information</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Admin Avatar */}
              <div className="space-y-2">
                <Label>Your Avatar</Label>
                <Avatar className="h-16 w-16">
                  <AvatarImage src={selectedAvatar || settings.avatar} alt={settings.fullName} />
                  <AvatarFallback>
                    {settings.fullName?.split(" ").map((n) => n[0]).join("") || 'SA'}
                  </AvatarFallback>
                </Avatar>
                {/* Simplified avatar change, maybe just upload? */}
              </div>
              {/* Admin Info */}
              <div className="space-y-2">
                <Label htmlFor="full-name">Full Name</Label>
                <Input
                  id="full-name"
                  value={settings.fullName}
                  onChange={(e) => updateSettings({ fullName: e.target.value })}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={settings.email}
                  onChange={(e) => updateSettings({ email: e.target.value })}
                />
              </div>
              {/* Add admin-specific profile fields if any (e.g., Contact Details, DPA agreement) */}
              <div className="flex items-center space-x-2 pt-4">
                <Switch id="newsletter" /> {/* Admin Newsletter? */}
                <Label htmlFor="newsletter">Subscribe to Admin Newsletter</Label>
              </div>
              <div className="pt-4">
                <Button variant="link" className="p-0 h-auto">View Admin Data Processing Agreement</Button> {/* TODO: Link */}
              </div>
              <div className="pt-4">
                <Button variant="outline">View My Fault Reports</Button> {/* TODO: Link/Modal */}
              </div>
            </CardContent>
            <CardFooter>
              <Button onClick={handleSaveAccount}>Save My Account Settings</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        {/* Security Tab */}
        <TabsContent value="security">
          <Card>
            <CardHeader>
              <CardTitle>Admin Security</CardTitle>
              <CardDescription>Manage your admin password and authentication</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Password Change */}
              <div className="space-y-2">
                <Label htmlFor="current-password">Current Password</Label>
                <Input id="current-password" type="password" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="new-password">New Password</Label>
                <Input id="new-password" type="password" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="confirm-password">Confirm New Password</Label>
                <Input id="confirm-password" type="password" />
              </div>
              <Button onClick={handleSaveSecurity} className="mt-2">Change My Password</Button>
              <div className="border-t pt-4 mt-4"></div>
              {/* 2FA */}
              <div className="flex items-center space-x-2">
                <Switch id="two-factor" /> {/* TODO: Connect state & setup flow */}
                <Label htmlFor="two-factor">Enable Two-Factor Authentication for Admin Login</Label>
              </div>
              {/* OTP Support */}
              <div className="flex items-center space-x-2">
                <Switch id="otp-support" /> {/* TODO: Connect state & setup flow */}
                <Label htmlFor="otp-support">Enable OTP Support for Admin Login</Label>
              </div>
              <div className="border-t pt-6 mt-6">
                <Button variant="destructive" onClick={handleDeleteAccount}>Delete My Admin Account</Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

      </Tabs>
      {/* Other Admin-specific items */}
      <Card className="mt-4">
        <CardHeader><CardTitle>Admin Invite/Referral</CardTitle></CardHeader>
        <CardContent>
          <Button>Invite another Admin</Button> {/* TODO */}
        </CardContent>
      </Card>
      <Card className="mt-4">
        <CardHeader><CardTitle>Admin Support</CardTitle></CardHeader>
        <CardContent>
          <Button variant="outline">Access Admin Help Center</Button> {/* TODO */}
        </CardContent>
      </Card>
    </div>
  )
}// END OF FILE: app/(dashboard)/super-admin/settings/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/webhooks/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function SuperAdminWebhooksPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Webhooks Configuration</h1>
      <Card>
        <CardHeader>
          <CardTitle>Platform Webhooks</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Configure global or platform-wide webhook settings and monitor deliveries.</p>
          {/* TODO: Implement Super Admin webhook configuration interface and logs */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/webhooks/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/globals.css

/* @import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@layer utilities {
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(10px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 0.5s ease-out forwards;
  }
}


@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.141 0.005 285.823);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.141 0.005 285.823);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.141 0.005 285.823);
  --primary: oklch(0.21 0.006 285.885);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.967 0.001 286.375);
  --secondary-foreground: oklch(0.21 0.006 285.885);
  --muted: oklch(0.967 0.001 286.375);
  --muted-foreground: oklch(0.552 0.016 285.938);
  --accent: oklch(0.967 0.001 286.375);
  --accent-foreground: oklch(0.21 0.006 285.885);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.92 0.004 286.32);
  --input: oklch(0.92 0.004 286.32);
  --ring: oklch(0.705 0.015 286.067);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.141 0.005 285.823);
  --sidebar-primary: oklch(0.21 0.006 285.885);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.967 0.001 286.375);
  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);
  --sidebar-border: oklch(0.92 0.004 286.32);
  --sidebar-ring: oklch(0.705 0.015 286.067);
}

.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.21 0.006 285.885);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.21 0.006 285.885);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.92 0.004 286.32);
  --primary-foreground: oklch(0.21 0.006 285.885);
  --secondary: oklch(0.274 0.006 286.033);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.274 0.006 286.033);
  --muted-foreground: oklch(0.705 0.015 286.067);
  --accent: oklch(0.274 0.006 286.033);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.552 0.016 285.938);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.006 285.885);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.274 0.006 286.033);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.552 0.016 285.938);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }

  body {
    @apply bg-background text-foreground;
  }
} */

@import "tailwindcss";
/* Consider removing tw-animate-css if not actively used or if using tailwindcss-animate */
/* @import "tw-animate-css"; */

/* Define the custom variant for dark mode (keep as is) */
@custom-variant dark (&:is(.dark *));

/* Keep existing fade-in-up animation */
@layer utilities {
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(10px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 0.5s ease-out forwards;
  }
}

/* @theme inline - This block seems specific to a build tool/plugin.
   The core definitions are in :root and .dark, which is what we'll modify.
   Keep this block if your build process relies on it. */
@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  /* Assuming these font vars are set elsewhere */
  --font-mono: var(--font-geist-mono);
  /* Assuming these font vars are set elsewhere */
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  /* Remove sidebar-primary? Not used often, accent usually covers active state */
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

/* --- Light Theme --- */
:root {
  /* Slightly larger radius for a softer feel */
  --radius: 0.75rem;
  /* 12px */

  /* Base */
  --background: oklch(0.985 0.006 240);
  /* Very light, slightly cool grey */
  --foreground: oklch(0.25 0.03 245);
  /* Dark, slightly muted blue-grey */

  /* Cards & Popovers - Slightly elevated */
  --card: oklch(1 0 0);
  /* Pure white */
  --card-foreground: var(--foreground);
  --popover: var(--card);
  --popover-foreground: var(--card-foreground);

  /* Primary - A confident, modern blue */
  --primary: oklch(0.5 0.16 255);
  /* Vibrant but deep blue */
  --primary-foreground: oklch(0.98 0.01 255);
  /* Very light, almost white */

  /* Secondary - Subtle interaction background */
  --secondary: oklch(0.94 0.02 250);
  /* Light cool grey, distinct from bg */
  --secondary-foreground: oklch(0.35 0.04 250);
  /* Slightly darker than main fg */

  /* Muted - For less important text/elements */
  --muted: oklch(0.95 0.015 240);
  /* Very similar to secondary */
  --muted-foreground: oklch(0.55 0.03 245);
  /* Mid-tone blue-grey */

  /* Accent - For hover states, active tabs (can be same as secondary or slightly different) */
  --accent: var(--secondary);
  --accent-foreground: var(--secondary-foreground);

  /* Destructive - Standard red */
  --destructive: oklch(0.6 0.2 25);
  /* Clear red */
  --destructive-foreground: oklch(0.98 0.01 25);
  /* Light text for contrast */

  /* Borders & Inputs */
  --border: oklch(0.9 0.02 245);
  /* Soft, slightly visible cool grey */
  --input: oklch(0.96 0.01 245);
  /* Slightly darker than background for inputs */
  --ring: oklch(0.6 0.1 255 / 70%);
  /* Primary color for focus rings, slightly transparent */

  /* Charts - A vibrant, distinct palette */
  --chart-1: oklch(0.7 0.18 150);
  /* Teal */
  --chart-2: oklch(0.65 0.2 280);
  /* Purple */
  --chart-3: oklch(0.75 0.15 50);
  /* Orange */
  --chart-4: oklch(0.6 0.15 220);
  /* Sky Blue */
  --chart-5: oklch(0.8 0.1 100);
  /* Lime Green */

  /* Sidebar - Slightly different background, uses primary for accent */
  --sidebar: oklch(0.96 0.01 245);
  /* Slightly darker/cooler than main background */
  --sidebar-foreground: var(--foreground);
  --sidebar-border: var(--border);
  /* Use Primary for active/hover states in sidebar */
  --sidebar-accent: oklch(0.5 0.16 255 / 15%);
  /* Primary color, low opacity bg */
  --sidebar-accent-foreground: var(--primary);
  /* Primary color text */
  --sidebar-ring: var(--ring);
  /* --sidebar-primary: var(--primary); */
  /* Removed - accent covers it */
  /* --sidebar-primary-foreground: var(--primary-foreground); */
  /* Removed */
}

/* --- Dark Theme --- */
.dark {
  /* Use same radius */
  --radius: 0.75rem;

  /* Base - Deep, cool background */
  --background: oklch(0.18 0.025 245);
  /* Very dark, slightly saturated blue */
  --foreground: oklch(0.92 0.015 240);
  /* Light grey, slightly cool */

  /* Cards & Popovers - Slightly lighter than background */
  --card: oklch(0.22 0.03 245);
  /* A bit lighter dark blue */
  --card-foreground: var(--foreground);
  --popover: var(--card);
  --popover-foreground: var(--card-foreground);

  /* Primary - Brighter, more vibrant for dark mode */
  --primary: oklch(0.7 0.18 255);
  /* Brighter, saturated blue */
  --primary-foreground: oklch(0.15 0.03 255);
  /* Very dark blue for contrast */

  /* Secondary - Subtle interaction background */
  --secondary: oklch(0.28 0.04 250);
  /* Darker cool tone, distinct from bg */
  --secondary-foreground: oklch(0.95 0.01 250);
  /* Slightly brighter than main fg */

  /* Muted - For less important text/elements */
  --muted: oklch(0.26 0.03 245);
  /* Similar to secondary */
  --muted-foreground: oklch(0.65 0.04 245);
  /* Mid-tone grey-blue */

  /* Accent - For hover states, active tabs */
  --accent: var(--secondary);
  --accent-foreground: var(--secondary-foreground);

  /* Destructive */
  --destructive: oklch(0.65 0.22 25);
  /* Brighter red for dark mode */
  --destructive-foreground: oklch(0.98 0.01 25);
  /* Light text for contrast */

  /* Borders & Inputs - Use subtle transparency or slightly offset colors */
  --border: oklch(0.3 0.04 245 / 70%);
  /* Translucent darker blue-grey */
  --input: oklch(0.24 0.03 245);
  /* Slightly darker than card */
  --ring: oklch(0.75 0.15 255 / 70%);
  /* Brighter primary for focus rings, slightly transparent */

  /* Charts - Adjust for dark background, maintain vibrancy */
  --chart-1: oklch(0.75 0.17 150);
  /* Teal */
  --chart-2: oklch(0.7 0.19 280);
  /* Purple */
  --chart-3: oklch(0.8 0.14 50);
  /* Orange */
  --chart-4: oklch(0.65 0.14 220);
  /* Sky Blue */
  --chart-5: oklch(0.85 0.09 100);
  /* Lime Green */

  /* Sidebar - Matches main background, uses primary accent */
  --sidebar: var(--background);
  /* Match main dark background */
  --sidebar-foreground: var(--foreground);
  --sidebar-border: var(--border);
  /* Use Primary for active/hover states in sidebar */
  --sidebar-accent: oklch(0.7 0.18 255 / 15%);
  /* Primary color, low opacity bg */
  --sidebar-accent-foreground: var(--primary);
  /* Primary color text */
  --sidebar-ring: var(--ring);
  /* --sidebar-primary: var(--primary); */
  /* Removed */
  /* --sidebar-primary-foreground: var(--primary-foreground); */
  /* Removed */
}

/* --- Base Styles --- */
@layer base {
  * {
    /* Apply the subtle border defined in variables */
    @apply border-border;
    /* Remove the default browser outline and rely on the focus ring variable */
    /* The outline-ring/50 might be too light, rely on the --ring variable via focus-visible utilities */
    /* outline: none; */
  }

  body {
    @apply bg-background text-foreground;
    /* Smoother font rendering */
    @apply antialiased;
    /* Optional: Add a subtle transition for theme changes */
    @apply transition-colors duration-200 ease-in-out;
  }

  /* Optional: Enhance base input/button styles if needed */
  /* Example: Apply base input background universally */
  input,
  textarea,
  select {
    @apply bg-input;
  }

  .bg-grid-pattern {
    background-image: linear-gradient(to right, hsl(var(--border) / 0.07) 1px, transparent 1px),
      linear-gradient(to bottom, hsl(var(--border) / 0.07) 1px, transparent 1px);
    background-size: 20px 20px;
  }
}// END OF FILE: app/globals.css

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/help/page.tsx

"use client"; // Needed for interactive elements like search input state

import React, { useState } from "react";
import Link from "next/link";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Search, LifeBuoy, BookOpen, MessageSquare, Mail, Ticket, Info } from "lucide-react";
import { toast } from "sonner"; // For placeholder actions

// Placeholder FAQ data - replace with actual content later
const faqData = [
  {
    category: "Getting Started",
    questions: [
      { q: "How do I create an account?", a: "Navigate to the Sign Up page and fill in your details. You'll receive a confirmation email." },
      { q: "What's the difference between Business Actor and Customer roles?", a: "Business Actors manage services, products, and organization details. Customers interact with services, manage their profile, and view bonuses." },
      { q: "How do I navigate the dashboard?", a: "Use the sidebar on the left to access different sections. The top navigation provides quick access to notifications and user settings." },
    ],
  },
  {
    category: "Account Management",
    questions: [
      { q: "How do I change my password?", a: "Go to Settings > Security tab. Enter your current password and your desired new password, then confirm and save." },
      { q: "How do I update my profile information?", a: "Go to Settings > Account tab. You can update your name, email, phone, and avatar there." },
      { q: "How do I enable Two-Factor Authentication (2FA)?", a: "Go to Settings > Security tab and toggle the 'Enable Two-Factor Authentication' switch. Follow the on-screen instructions." },
    ],
  },
  {
    category: "Billing & Subscriptions (BA)",
    questions: [
      { q: "How can I view my invoices?", a: "Business Actors can find their invoices under the 'Invoices' section in the sidebar." },
      { q: "How do I upgrade my subscription plan?", a: "Navigate to the 'Subscription' section in the sidebar to view available plans and upgrade options." },
    ],
  },
   {
    category: "Bonus Points (Customer)",
    questions: [
      { q: "How do I check my bonus points?", a: "Customers can view their bonus points balance and history in the 'My Bonus' section." },
      { q: "How can I redeem my points?", a: "Redemption options, if available, will be shown in the 'My Bonus' section under 'Convert My Points'." },
    ],
  },
];

export default function HelpPage() {
  const [searchQuery, setSearchQuery] = useState("");

  // TODO: Implement actual search filtering logic
  const handleSearch = () => {
      if (!searchQuery.trim()) {
          toast.info("Please enter a search term.");
          return;
      }
      toast.info(`Search functionality for "${searchQuery}" is not yet implemented.`);
      // Implement filtering of FAQs or linking to relevant docs based on searchQuery
  };

  const handleContactAction = (method: string) => {
      toast.info(`Contacting support via ${method} is not yet implemented.`);
      // TODO: Implement actual action (open chat, link to ticket form, mailto link)
  };


  return (
    // Using container similar to settings page for consistency
    <div className="container mx-auto py-8 pb-10">
      <div className="flex flex-col md:flex-row items-start md:items-center justify-between mb-8">
        <div className="flex items-center gap-3 mb-4 md:mb-0">
           <LifeBuoy className="h-8 w-8 text-primary" />
           <h1 className="text-3xl font-bold">Help & Support</h1>
        </div>
         {/* Optional: Link back to dashboard */}
         {/* <Button variant="outline" asChild><Link href="/business-actor/dashboard">Back to Dashboard</Link></Button> */}
      </div>

      {/* Search Section */}
      <Card className="mb-8 shadow-sm">
        <CardHeader>
          <CardTitle className="text-xl">How can we help?</CardTitle>
          <CardDescription>Search our knowledge base or browse FAQs.</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex w-full items-center space-x-2">
            <Input
              type="text"
              placeholder="Search help articles..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
              className="flex-1"
            />
            <Button type="button" onClick={handleSearch}>
              <Search className="h-4 w-4 mr-2" /> Search
            </Button>
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* FAQ Section */}
        <div className="lg:col-span-2">
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle className="text-xl">Frequently Asked Questions</CardTitle>
            </CardHeader>
            <CardContent>
              <Accordion type="single" collapsible className="w-full">
                {faqData.map((category) => (
                  <div key={category.category} className="mb-4 last:mb-0">
                     <h3 className="text-lg font-semibold mb-2 px-1">{category.category}</h3>
                      {category.questions.map((item, index) => (
                          <AccordionItem value={`${category.category}-${index}`} key={index} className="border-b">
                              <AccordionTrigger className="text-left hover:no-underline px-1">
                                  {item.q}
                              </AccordionTrigger>
                              <AccordionContent className="px-1 text-muted-foreground">
                                  {item.a}
                              </AccordionContent>
                          </AccordionItem>
                      ))}
                  </div>
                ))}
              </Accordion>
            </CardContent>
          </Card>
        </div>

        {/* Contact & Resources Section */}
        <div className="space-y-6">
          {/* Contact Card */}
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle className="text-xl">Contact Support</CardTitle>
              <CardDescription>Can't find an answer? Get in touch.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
               <Button variant="outline" className="w-full justify-start gap-3" onClick={() => handleContactAction('Ticket')}>
                 <Ticket className="h-5 w-5 text-primary" /> Submit a Ticket
               </Button>
               <Button variant="outline" className="w-full justify-start gap-3" onClick={() => handleContactAction('Chat')}>
                 <MessageSquare className="h-5 w-5 text-primary" /> Start Live Chat
               </Button>
               <Button variant="outline" className="w-full justify-start gap-3" onClick={() => handleContactAction('Email')}>
                 <Mail className="h-5 w-5 text-primary" /> Send us an Email
               </Button>
            </CardContent>
          </Card>

           {/* Documentation Card */}
           <Card className="shadow-sm">
            <CardHeader>
              <CardTitle className="text-xl">Documentation</CardTitle>
              <CardDescription>Explore detailed guides and resources.</CardDescription>
            </CardHeader>
            <CardContent>
              <Button variant="outline" asChild className="w-full justify-start gap-3">
                 {/* TODO: Update this link */}
                <Link href="/docs">
                    <BookOpen className="h-5 w-5 text-primary" /> Browse Guides
                </Link>
              </Button>
            </CardContent>
          </Card>

            {/* What's New Card */}
            <Card className="shadow-sm">
                <CardHeader>
                <CardTitle className="text-xl">What's New?</CardTitle>
                <CardDescription>See the latest platform updates.</CardDescription>
                </CardHeader>
                <CardContent>
                <Button variant="outline" asChild className="w-full justify-start gap-3">
                    {/* TODO: Update this link */}
                    <Link href="/whats-new">
                        <Info className="h-5 w-5 text-primary" /> View Changelog
                    </Link>
                </Button>
                </CardContent>
            </Card>

        </div>
      </div>
    </div>
  );
}// END OF FILE: app/help/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/layout.tsx

import "./globals.css"; // Ensure globals are imported first
import { Inter } from "next/font/google";
import type React from "react";
import { ThemeProvider } from "next-themes";
import { Toaster } from "@/components/ui/sonner" // Import Sonner Toaster for notifications

import { TooltipProvider } from "@/components/ui/tooltip";
import { SettingsProvider } from "@/contexts/settings-context";
import { SessionProvider } from "@/components/providers/session-provider";
import { ModeToggle } from "@/components/mode-toggle";

const inter = Inter({ subsets: ["latin"] });

// Metadata remains the same
export const metadata = {
  title: "Dashboard Template",
  description: "A modern, adaptable responsive dashboard",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    // Add 'dark' class handling for ThemeProvider
    <html lang="en" suppressHydrationWarning>
      {/* Apply base font and ensure full height */}
      <body className={`${inter.className} antialiased min-h-screen flex flex-col`}>
        {/* SessionProvider wraps everything needing session access */}
        <SessionProvider>
          {/* ThemeProvider enables light/dark/system themes */}
          <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
            {/* SettingsProvider manages user display preferences */}
            <SettingsProvider>
              {/* TooltipProvider enables tooltips across the app */}
              <TooltipProvider delayDuration={0}>
                 {/* Main container */}
                <div className="relative flex-1">
                   {/* ModeToggle positioned globally */}
                   <div className="fixed top-4 right-4 z-50 print:hidden"> {/* Hide toggle when printing */}
                    {/* <ModeToggle /> */}
                  </div>

                  {/* Render the active page content */}
                  {children}
                </div>

                {/* Sonner Toaster for displaying brief notifications */}
                 <Toaster position="top-right" richColors closeButton />
              </TooltipProvider>
            </SettingsProvider>
          </ThemeProvider>
        </SessionProvider>
      </body>
    </html>
  );
}// END OF FILE: app/layout.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/not-found.tsx

// ===============================================
// FILE: app/not-found.tsx
// PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/not-found.tsx
// ===============================================
import { getServerSession } from 'next-auth/next';
import { AlertTriangle } from 'lucide-react'; // Using a more relevant icon

import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import { NotFoundButtons } from '@/components/not-found-buttons';

export default async function NotFound() {
  const session = await getServerSession(authOptions);
  const isAuthenticated = !!session;

  // Determine primary link props (remains same)
  const primaryLinkHref = isAuthenticated ? '/business-actor/dashboard' : '/';
  const primaryLinkText = isAuthenticated ? 'Return to Dashboard' : 'Go to Homepage';

  return (
    // Consistent background with auth pages
    <div className="flex min-h-screen flex-col items-center justify-center p-8 text-center bg-gradient-to-br from-background via-background to-muted/30 dark:to-muted/10">

      {/* Card styling similar to AuthCardWrapper, apply animation */}
      <div className="max-w-lg w-full rounded-xl bg-card p-8 sm:p-10 shadow-xl border border-border/60 space-y-6 animate-fade-in-up">

        <AlertTriangle className="mx-auto h-16 w-16 text-destructive opacity-70" /> {/* Changed Icon and color */}

        <h1 className="text-6xl font-extrabold tracking-tighter text-destructive lg:text-8xl">
          404
        </h1>

        <h2 className="text-2xl font-semibold tracking-tight text-foreground sm:text-3xl">
          Page Not Found
        </h2>

        <p className="text-base text-muted-foreground">
          Sorry, the page you requested could not be found. It might have been moved, deleted,
          or the URL might be incorrect.
        </p>

        {/* Use the Client Component for buttons */}
        <NotFoundButtons
          isAuthenticated={isAuthenticated}
          primaryLinkHref={primaryLinkHref}
          primaryLinkText={primaryLinkText}
        />

      </div>
      <p className="mt-12 text-xs text-muted-foreground animate-fade-in-up [animation-delay:0.2s]">
        If you believe this is an error, please <a href="/help" className="underline hover:text-primary">contact support</a>. {/* Added link */}
      </p>
    </div>
  );
}
// END OF FILE: app/not-found.tsx
// END OF FILE: app/not-found.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/page.tsx

// ===============================================
// FILE: app/page.tsx
// PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/page.tsx
// ===============================================
"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import Image from "next/image";
import {
    ArrowRight, BarChartBig, Palette, ShieldCheck, Zap,
    Workflow, Building2, User, ShieldAlert, Cpu, MessagesSquare, Layers
} from "lucide-react";
import { useMousePosition } from "@/hooks/use-mouse-position"; // Assuming this hook exists
import { cn } from "@/lib/utils";

export default function LandingPage() {
   const { x, y } = useMousePosition();

  // Define delays for staggered animation simulation
  const delay = {
      logo: "delay-[100ms]",
      headline: "delay-[200ms]",
      subheadline: "delay-[300ms]",
      buttons: "delay-[400ms]",
      showcase: "delay-[500ms]", // Dashboard showcase placeholder
      featuresTitle: "delay-[600ms]", // Title before feature cards
      featureCards: "delay-[700ms]", // Start delay for feature cards group
      rolesTitle: "delay-[800ms]", // Title before role cards
      roleCards: "delay-[900ms]", // Start delay for role cards group
      footer: "delay-[1000ms]"
  };


  return (
    // Background using theme colors
    <div className={cn(
        "relative flex min-h-screen w-full flex-col items-center justify-center overflow-hidden p-6 text-center",
        "bg-gradient-to-br from-background via-background to-muted/30 dark:from-slate-950 dark:via-background dark:to-primary/5" // Use theme vars via classes
    )}>

       {/* Background Elements: Adjusted opacity for better light mode visibility */}
       <div aria-hidden="true" className="pointer-events-none absolute inset-0 z-0 opacity-80 dark:opacity-40 transition-opacity duration-500">
            {/* Interactive Mouse Glow - Using Primary Color */}
            <div
                className={cn(
                    "absolute h-[350px] w-[350px] rounded-full bg-primary/30 dark:bg-primary/25 blur-3xl", // More visible primary glow
                    "transition-transform duration-300 ease-out"
                 )}
                style={{
                    transform: `translate(${x ? x - 175 : -9999}px, ${y ? y - 175 : -9999}px)`,
                    left: x ? '0' : '-9999px', top: y ? '0' : '-9999px'
                 }}
            ></div>

            {/* Animated Shapes - Using Theme Colors */}
            <div className="absolute top-[-25%] left-[-15%] h-[550px] w-[550px] rounded-full bg-gradient-radial from-primary/15 via-primary/5 to-transparent dark:from-primary/10 dark:via-primary/5 blur-3xl animate-spin [animation-duration:30s] [animation-timing-function:linear]"></div>
            <div className="absolute bottom-[-35%] right-[-20%] h-[650px] w-[650px] rounded-full bg-gradient-radial from-secondary/20 via-secondary/10 to-transparent dark:from-secondary/15 dark:via-secondary/5 blur-3xl opacity-80 animate-pulse [animation-duration:9s]"></div>
            <div className="absolute top-[5%] right-[10%] h-[400px] w-[400px] rounded-lg bg-gradient-to-br from-muted/20 via-transparent to-transparent dark:from-muted/10 blur-2xl opacity-70 animate-spin [animation-duration:40s] [animation-timing-function:linear]"></div>
        </div>


      {/* Main content container */}
      <main className="z-10 flex w-full max-w-5xl flex-col items-center pt-16 pb-20">

        {/* Logo */}
        <div className={`mb-10 animate-fade-in-up ${delay.logo}`}>
          <div className="relative group cursor-pointer">
              <Image
                src="/logo.svg" alt="App Logo" width={100} height={100} priority
                className="transition-transform duration-300 group-hover:scale-110 drop-shadow-lg"
              />
              <div className={cn(
                  "absolute inset-[-12px] -z-10 rounded-full bg-primary/50 dark:bg-primary/40 blur-2xl", // More visible glow base
                  "animate-pulse opacity-80 [animation-duration:3s]",
                  "group-hover:opacity-100 group-hover:scale-110 group-hover:[animation-duration:1.5s]",
                  "transition-all duration-300"
              )}></div>
          </div>
        </div>

        {/* Headline: Gradient Text adjusted for light mode */}
        <h1 className={`text-4xl font-extrabold tracking-tight sm:text-5xl md:text-6xl lg:text-7xl mb-6 animate-fade-in-up ${delay.headline} leading-tight drop-shadow-sm`}>
            <span className="text-foreground">Unified Control.</span> {/* Use foreground for better contrast */}
            <br className="hidden sm:block" />
            {/* Gradient needs to be strong enough for light bg */}
            <span className="bg-gradient-to-r from-primary via-primary/90 to-secondary/90 dark:to-secondary bg-clip-text text-transparent">
                Unmatched Insight.
            </span>
        </h1>

        {/* Subheading */}
        <p className={`max-w-2xl mx-auto text-lg text-muted-foreground sm:text-xl md:text-2xl mb-12 animate-fade-in-up ${delay.subheadline}`}>
          The complete dashboard suite built for peak performance. Seamlessly manage operations, engage customers, and administer your platform—all in one place. Ready when you are.
        </p>

        {/* Call to Action Buttons */}
        <div className={`flex flex-col sm:flex-row gap-5 mb-24 animate-fade-in-up ${delay.buttons}`}>
          <Button
              size="lg" asChild
              className={cn(
                  "transition-all duration-500 hover:scale-105 shadow-lg hover:shadow-primary/50 group",
                  "bg-primary hover:bg-primary/85", // Solid primary bg
                  "text-primary-foreground px-8 py-3 text-base rounded-full font-semibold"
              )}>
            <Link href="/login">
              Explore Dashboards <ArrowRight className="ml-2 h-5 w-5 transition-transform group-hover:translate-x-1" />
            </Link>
          </Button>
          <Button
             size="lg" variant="outline" asChild
             className={cn(
                 "transition-all duration-300 hover:scale-105 hover:bg-accent hover:text-accent-foreground", // Use accent hover from theme
                 "border-border dark:border-foreground/30", // Use border color from theme
                 "px-8 py-3 text-base rounded-full font-semibold backdrop-blur-sm bg-background/50 dark:bg-slate-900/50"
              )}>
            <Link href="/signup">Create Free Account</Link>
          </Button>
        </div>


         {/* --- Dashboard Showcase --- */}
         {/* This section appears slightly later */}
         <div className={`w-full max-w-4xl mb-24 animate-fade-in-up ${delay.showcase}`}>
            <h2 className="text-2xl sm:text-3xl font-bold mb-6 text-center text-foreground">See It In Action</h2>
             <div className={cn(
                 "aspect-video w-full rounded-xl p-4 relative overflow-hidden backdrop-blur-md",
                 "bg-gradient-to-br from-muted/50 via-background/70 to-muted/60 dark:from-slate-800/60 dark:via-slate-900/80 dark:to-slate-950/90", // Lighter gradient for light mode
                 "border border-border dark:border-white/10 shadow-xl" // Use theme border
                )}>
                <div className="absolute inset-0 bg-grid-pattern opacity-10 dark:opacity-5"></div>
                 <div className="flex items-center justify-center h-full">
                    <p className="text-muted-foreground italic text-lg">
                       [ Dashboard Animation / Screenshot Placeholder ]
                     </p>
                     <div className="absolute top-4 left-4 h-8 w-32 rounded bg-primary/30 dark:bg-primary/20 animate-pulse [animation-delay:0.5s]"></div>
                     <div className="absolute bottom-4 right-4 h-16 w-48 rounded bg-secondary/30 dark:bg-secondary/20 animate-pulse [animation-delay:0.8s]"></div>
                 </div>
             </div>
             <p className="text-center text-muted-foreground text-sm mt-4">Experience the streamlined interface firsthand.</p>
         </div>


        {/* Feature Showcase Section */}
        {/* Appears later than showcase */}
        <div className={`w-full mb-24 animate-fade-in-up ${delay.featuresTitle}`}>
             <h2 className="text-2xl sm:text-3xl font-bold mb-10 text-center text-foreground">Packed with Power</h2>
            {/* Add a subtle delay to the container of the cards */}
            <div className={`grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 sm:gap-8 animate-fade-in-up ${delay.featureCards}`}>
                {/* Feature Cards - Updated Styling */}
                <FeatureCard icon={Cpu} title="AI Predictive Analysis" description="Anticipate trends and make data-driven decisions." />
                <FeatureCard icon={Workflow} title="Workflow Automation" description="Streamline repetitive tasks and boost efficiency." />
                <FeatureCard icon={Layers} title="Multi-Role Architecture" description="Tailored experiences for BAs, Customers & Admins." />
                <FeatureCard icon={Palette} title="Custom Dashboards" description="Tailor your view with widgets and KPIs that matter." />
                <FeatureCard icon={MessagesSquare} title="Unified Messaging" description="Communicate easily with teams and customers." />
                <FeatureCard icon={BarChartBig} title="Advanced Analytics" description="Deep dive into performance metrics & reports." />
                <FeatureCard icon={ShieldCheck} title="Robust Security" description="Secure authentication and data protection." />
                <FeatureCard icon={Zap} title="Blazing Fast UI" description="Optimized for a smooth and responsive experience." />
            </div>
        </div>

        {/* Role Focus Section */}
        {/* Appears after features */}
        <div className={`w-full mb-20 animate-fade-in-up ${delay.rolesTitle}`}>
             <h2 className="text-2xl sm:text-3xl font-bold mb-10 text-center">Dashboards Designed for <span className="text-primary">You</span></h2>
            {/* Add subtle delay */}
            <div className={`grid grid-cols-1 md:grid-cols-3 gap-8 animate-fade-in-up ${delay.roleCards}`}>
                 {/* Role Cards - Updated Styling */}
                <RoleCard icon={Building2} title="Business Actors" description="Manage your organization, products, transactions, scheduling, bonuses, and customer interactions." />
                <RoleCard icon={User} title="Customers" description="View services, track transactions, manage your profile, check bonus points, and interact easily." />
                <RoleCard icon={ShieldAlert} title="Super Admins" description="Oversee platforms, manage users (BAs & Customers), configure system settings, and monitor overall health." />
            </div>
        </div>

      </main>

      {/* Footer */}
      <footer className={`absolute bottom-6 text-xs text-muted-foreground/70 z-10 animate-fade-in-up ${delay.footer}`}>
        © {new Date().getFullYear()} YowYob Inc. Powering Connections.
      </footer>

    </div>
  );
}

// --- Helper Components - Refined Styling ---

const FeatureCard: React.FC<FeatureCardProps> = ({ icon: Icon, title, description }) => (
    <div className={cn(
        "flex flex-col items-center text-center p-4 rounded-lg",
        "bg-background/60 dark:bg-slate-900/60 backdrop-blur-sm", // Use background with opacity
        "border border-border dark:border-white/10", // Use theme border
        "hover:border-primary/50 dark:hover:border-primary/40", // Use primary border on hover
        "transition-all duration-300 group",
        "transform-gpu hover:-translate-y-1 hover:shadow-xl hover:shadow-primary/10 dark:hover:shadow-primary/5" // Lift and themed shadow
    )}>
        <div className="p-3 rounded-full bg-primary/10 dark:bg-primary/15 mb-3 group-hover:bg-primary/20 transition-colors duration-300">
            <Icon className="h-6 w-6 text-primary" />
        </div>
        <h3 className="font-semibold mb-1 text-sm sm:text-base text-foreground">{title}</h3>
        <p className="text-xs sm:text-sm text-muted-foreground">{description}</p>
    </div>
);
interface FeatureCardProps { icon: React.ElementType; title: string; description: string;}


const RoleCard: React.FC<RoleCardProps> = ({ icon: Icon, title, description }) => (
     <div className={cn(
        "flex flex-col items-center text-center p-6 rounded-xl",
        "bg-card/80 dark:bg-card/70", // Use card color with opacity
        "backdrop-blur-sm border border-border dark:border-white/10 shadow-md", // Theme border
        "transition-all duration-300 transform-gpu hover:scale-[1.03] hover:shadow-lg"
     )}>
        <Icon className="h-10 w-10 text-primary mb-4" />
        <h3 className="font-bold text-lg mb-2 text-foreground">{title}</h3>
        <p className="text-sm text-muted-foreground">{description}</p>
    </div>
);
interface RoleCardProps { icon: React.ElementType; title: string; description: string;}

// Add this CSS to globals.css if you haven't already
/*

*/

// END OF FILE: app/page.tsx/ END OF FILE: app/page.tsx// END OF FILE: app/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/auth/auth-card-wrapper.tsx

import React from "react";
import Link from "next/link";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Image from "next/image";

interface AuthCardWrapperProps {
  children: React.ReactNode;
  title: string;
  description?: string;
  backButtonLabel: string;
  backButtonHref: string;
  showSocial?: boolean;
}

export const AuthCardWrapper = ({
  children,
  title,
  description,
  backButtonLabel,
  backButtonHref,
  showSocial,
}: AuthCardWrapperProps) => {
  return (
    // Added slightly more padding (py-8) and refined shadow/border
    <Card className="w-full max-w-md shadow-lg border border-border/40 py-2 sm:py-4">
      <CardHeader className="text-center px-6 sm:px-8 pt-6 pb-4"> {/* Adjusted padding */}
        <div className="mx-auto mb-4">
          <Image src="/logo.svg" alt="Logo" width={48} height={48} />
        </div>
        <CardTitle className="text-2xl font-semibold tracking-tight">{title}</CardTitle>
        {description && (
          <CardDescription className="text-sm text-muted-foreground pt-1">
            {description}
          </CardDescription>
        )}
      </CardHeader>
      {/* Adjusted content padding */}
      <CardContent className="px-6 sm:px-8">{children}</CardContent>
      {showSocial && (
        // Keep social section padding consistent
        <CardFooter className="flex-col px-6 sm:px-8 pt-4 pb-0">
          <div className="w-full">
            <div className="relative my-4">
              <div className="absolute inset-0 flex items-center">
                <span className="w-full border-t border-border/60" />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-card px-2 text-muted-foreground">
                  Or continue with
                </span>
              </div>
            </div>
            {/* Placeholder for Social Buttons */}
            <p className="text-center text-sm text-muted-foreground py-4">Social logins coming soon!</p>
          </div>
        </CardFooter>
      )}
       {/* Adjusted footer padding and button style */}
      <CardFooter className="flex justify-center px-6 sm:px-8 pt-2 pb-6">
        <Button variant="link" className="px-0 font-normal text-sm text-muted-foreground hover:text-primary" size="sm" asChild>
          <Link href={backButtonHref}>{backButtonLabel}</Link>
        </Button>
      </CardFooter>
    </Card>
  );
};// END OF FILE: components/auth/auth-card-wrapper.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/auth/forgot-password-form.tsx

// FILE: components/auth/forgot-password-form.tsx
"use client";

import React, { useState, useTransition } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";

import { AuthCardWrapper } from "./auth-card-wrapper";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertTriangle, CheckCircle } from "lucide-react";

const ForgotPasswordSchema = z.object({
  email: z.string().email({ message: "Please enter a valid email address." }),
});

type ForgotPasswordFormValues = z.infer<typeof ForgotPasswordSchema>;

export const ForgotPasswordForm = () => {
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [isPending, startTransition] = useTransition();

  const form = useForm<ForgotPasswordFormValues>({
    resolver: zodResolver(ForgotPasswordSchema),
    defaultValues: {
      email: "",
    },
  });

  const onSubmit = (values: ForgotPasswordFormValues) => {
    setError(null);
    setSuccess(null);

    startTransition(async () => {
      // !!! IMPORTANT: Replace this with an API call to your backend !!!
      // Your backend should:
      // 1. Check if the email exists.
      // 2. Generate a secure password reset token.
      // 3. Store the token (with expiry) associated with the user.
      // 4. Send an email to the user with a link containing the token.
      console.log("Simulating password reset request for:", values.email);
      try {
        // --- Start Placeholder ---
        await new Promise(resolve => setTimeout(resolve, 1000));
        // Simulate success
        console.log("Simulated password reset email sent to:", values.email);
        // --- End Placeholder ---

        setSuccess("Password reset email sent! Please check your inbox.");

      } catch (err) {
        console.error("Forgot Password Simulation Error:", err);
        setError("Something went wrong. Please try again.");
      }
      // !!! END OF REPLACEMENT BLOCK !!!
    });
  };

  return (
    <AuthCardWrapper
      title="Forgot Your Password?"
      description="Enter your email to receive reset instructions"
      backButtonLabel="Back to Sign In"
      backButtonHref="/login"
    >
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-4">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email Address</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="email"
                      placeholder="you@example.com"
                      disabled={isPending}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          {error && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          {success && (
            <Alert variant="default" className="bg-green-100 dark:bg-green-900/30 border-green-300 dark:border-green-700">
              <CheckCircle className="h-4 w-4 text-green-600 dark:text-green-400" />
              <AlertTitle className="text-green-800 dark:text-green-300">Success!</AlertTitle>
              <AlertDescription className="text-green-700 dark:text-green-400">
                {success}
              </AlertDescription>
            </Alert>
          )}

          <Button type="submit" className="w-full" disabled={isPending || !!success}>
            {isPending ? "Sending..." : "Send Reset Instructions"}
          </Button>
        </form>
      </Form>
    </AuthCardWrapper>
  );
};// END OF FILE: components/auth/forgot-password-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/auth/login-form.tsx

// FILE: components/auth/login-form.tsx
"use client";

import React, { useState, useTransition } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { signIn } from "next-auth/react";
import { useRouter, useSearchParams } from "next/navigation";
import Link from "next/link";

import { AuthCardWrapper } from "./auth-card-wrapper";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"; // For errors
import { AlertTriangle, CheckCircle } from "lucide-react";

const LoginSchema = z.object({
  email: z.string().email({ message: "Please enter a valid email address." }),
  password: z.string().min(1, { message: "Password is required." }),
});

type LoginFormValues = z.infer<typeof LoginSchema>;

export const LoginForm = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const callbackUrl = searchParams.get("callbackUrl"); // Get redirect URL if exists
  const [error, setError] = useState<string | null>(null);
  const [isPending, startTransition] = useTransition();

  const form = useForm<LoginFormValues>({
    resolver: zodResolver(LoginSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  const onSubmit = (values: LoginFormValues) => {
    setError(null); // Clear previous errors

    startTransition(async () => {
      try {
        const result = await signIn("credentials", {
          redirect: false, // Handle redirect manually
          email: values.email,
          password: values.password,
        });

        if (result?.error) {
          // Handle specific errors or show a generic message
          // Note: NextAuth might return generic errors like "CredentialsSignin"
          console.error("SignIn Error:", result.error);
          setError("Invalid email or password. Please try again.");
        } else if (result?.ok) {
          // Successful login
          // Redirect to dashboard or the callbackUrl if provided
          router.push(callbackUrl || "/business-actor/dashboard"); // Default redirect
          // Optionally refresh to ensure session state is updated everywhere
          router.refresh();
        } else {
          setError("An unexpected error occurred. Please try again.");
        }

      } catch (err) {
        console.error("Login Submit Error:", err);
        setError("An unexpected error occurred. Please try again.");
      }
    });
  };

  return (
    <AuthCardWrapper
      title="Welcome Back"
      description="Sign in to access your dashboard"
      backButtonLabel="Don't have an account? Sign Up"
      backButtonHref="/signup"
      showSocial={false} // Enable later if needed
    >
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-4">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="email"
                      placeholder="you@example.com"
                      disabled={isPending}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Password</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="password"
                      placeholder="••••••••"
                      disabled={isPending}
                    />
                  </FormControl>
                  <FormMessage />
                  <Button size="sm" variant="link" asChild className="px-0 font-normal text-xs h-auto py-0 mt-1">
                    <Link href="/forgot-password">
                      Forgot password?
                    </Link>
                  </Button>
                </FormItem>
              )}
            />
          </div>

          {error && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Login Failed</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          <Button type="submit" className="w-full" disabled={isPending}>
            {isPending ? "Signing In..." : "Sign In"}
          </Button>
        </form>
      </Form>
    </AuthCardWrapper>
  );
};// END OF FILE: components/auth/login-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/auth/signup-form.tsx

// FILE: components/auth/signup-form.tsx
"use client";

import React, { useState, useTransition } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useRouter } from "next/navigation";
// import bcrypt from 'bcrypt'; // Use on backend only!

import { AuthCardWrapper } from "./auth-card-wrapper";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertTriangle, CheckCircle } from "lucide-react";

const SignUpSchema = z.object({
  name: z.string().min(2, { message: "Name must be at least 2 characters." }),
  email: z.string().email({ message: "Please enter a valid email address." }),
  password: z
    .string()
    .min(8, { message: "Password must be at least 8 characters." }),
});

type SignUpFormValues = z.infer<typeof SignUpSchema>;

export const SignUpForm = () => {
  const router = useRouter();
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [isPending, startTransition] = useTransition();

  const form = useForm<SignUpFormValues>({
    resolver: zodResolver(SignUpSchema),
    defaultValues: {
      name: "",
      email: "",
      password: "",
    },
  });

  const onSubmit = (values: SignUpFormValues) => {
    setError(null);
    setSuccess(null);

    startTransition(async () => {
      // !!! IMPORTANT: Replace this with an API call to your backend !!!
      // Your backend should:
      // 1. Check if the email already exists.
      // 2. Hash the password using bcrypt.
      // 3. Save the new user to the database.
      console.log("Simulating sign up for:", values.email);
      try {
          // --- Start Placeholder ---
          // Simulate network delay and potential errors
          await new Promise(resolve => setTimeout(resolve, 1000));
          const emailExists = values.email === "existing@example.com"; // Simulate existing user

          if (emailExists) {
              setError("An account with this email already exists.");
              return;
          }
          // Simulate success
          console.log("Simulated signup successful for:", values.email);
          // --- End Placeholder ---

          setSuccess("Account created successfully! Redirecting to login...");

          // Redirect to login page after a short delay
          setTimeout(() => {
              router.push("/login");
          }, 2000);

      } catch (err) {
          console.error("Signup Simulation Error:", err);
          setError("Something went wrong during sign up. Please try again.");
      }
      // !!! END OF REPLACEMENT BLOCK !!!
    });
  };

  return (
    <AuthCardWrapper
      title="Create an Account"
      description="Enter your details to get started"
      backButtonLabel="Already have an account? Sign In"
      backButtonHref="/login"
      showSocial={false}
    >
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Full Name</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      placeholder="John Doe"
                      disabled={isPending}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="email"
                      placeholder="you@example.com"
                      disabled={isPending}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Password</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="password"
                      placeholder="••••••••"
                      disabled={isPending}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          {error && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Sign Up Failed</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
           {success && (
            <Alert variant="default" className="bg-green-100 dark:bg-green-900/30 border-green-300 dark:border-green-700">
              <CheckCircle className="h-4 w-4 text-green-600 dark:text-green-400" />
              <AlertTitle className="text-green-800 dark:text-green-300">Success!</AlertTitle>
              <AlertDescription className="text-green-700 dark:text-green-400">
                {success}
              </AlertDescription>
            </Alert>
          )}

          <Button type="submit" className="w-full" disabled={isPending || !!success}>
            {isPending ? "Creating Account..." : "Create Account"}
          </Button>
        </form>
      </Form>
    </AuthCardWrapper>
  );
};// END OF FILE: components/auth/signup-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/customer/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import Image from "next/image";
import { ProductListItemData } from "@/types/product";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  ShoppingCart, Info, Package, Combine, DollarSign,
  PlayCircle, CheckCircle2, InfoIcon as StatusInfoIcon, CircleSlash // Renamed to avoid conflict
} from "lucide-react";
import { ImagePlaceholder } from "@/components/ui/image-placeholder";

// Helper for state display (can be moved to a shared utils file if used elsewhere)
interface StateDisplayInfo {
  variant: "default" | "secondary" | "outline" | "destructive";
  icon: React.ElementType;
  label: string;
}

const getStateDisplayInfo = (state: string = ""): StateDisplayInfo => {
  const upperState = state.toUpperCase();
  const label = upperState.toLowerCase().replace(/_/g, " ");
  switch (upperState) {
    case "PUBLISHED": case "AVAILABLE": case "FINISHED":
      return { variant: "default", icon: CheckCircle2, label };
    case "PLANNED": // Assuming customers might see planned services
      return { variant: "secondary", icon: PlayCircle, label }; // Or a clock icon
    case "ONGOING": // For active services
      return { variant: "outline", icon: PlayCircle, label };
    // case "IN_USE": // For resources, might not be a primary filter for customers
    //   return { variant: "outline", icon: PlayCircle, label };
    case "CANCELLED":
      return { variant: "destructive", icon: CircleSlash, label };
    default:
      return { variant: "outline", icon: StatusInfoIcon, label: label || "Unknown" };
  }
};


export interface CustomerProductRowActionsProps {
  product: ProductListItemData;
  onViewDetails: (product: ProductListItemData) => void;
  onReserve: (product: ProductListItemData) => void;
}

const CustomerProductRowActions: React.FC<CustomerProductRowActionsProps> = ({
  product, onViewDetails, onReserve
}) => {
  return (
    <div className="flex items-center justify-end gap-2">
      <Button
        variant="outline"
        size="sm"
        className="h-8 px-2"
        onClick={() => onViewDetails(product)}
        title="View Details"
      >
        <Info className="h-3.5 w-3.5" />
        <span className="sr-only sm:not-sr-only sm:ml-1.5">Details</span>
      </Button>
      <Button
        variant="default"
        size="sm"
        className="h-8 px-2"
        onClick={() => onReserve(product)}
        title="Reserve or Enquire"
      >
        <ShoppingCart className="h-3.5 w-3.5" />
        <span className="sr-only sm:not-sr-only sm:ml-1.5">Reserve</span>
      </Button>
    </div>
  );
};

export const getCustomerProductColumns = (
  actionHandlers: Omit<CustomerProductRowActionsProps, 'product'>
): ColumnDef<ProductListItemData>[] => [
    {
      id: "select",
      header: ({ table }) => (
        <Checkbox
          checked={
            table.getIsAllPageRowsSelected() ||
            (table.getIsSomePageRowsSelected() && "indeterminate")
          }
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all rows on this page"
          className="translate-y-[2px]"
        />
      ),
      cell: ({ row }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          className="translate-y-[2px]"
        />
      ),
      enableSorting: false,
      enableHiding: false,
      size: 40,
    },
    {
      id: "imageAndName",
      accessorFn: (row) => row.name,
      header: ({ column }) => <DataTableColumnHeader column={column} title="Product / Service" />,
      cell: ({ row }) => { /* ... same as before ... */
        const product = row.original;
        return (
          <div className="flex items-center gap-3 py-1">
            <div className="h-12 w-12 flex-shrink-0 rounded-md overflow-hidden">
              {product.imageUrl && product.imageUrl !== "/placeholder.svg" ? (
                <Image
                  src={product.imageUrl}
                  alt={product.name}
                  width={48}
                  height={48}
                  className="object-cover h-full w-full"
                />
              ) : (
                <ImagePlaceholder iconType={product.productType === 'RESOURCE' ? 'resource' : 'service'} className="h-12 w-12" iconClassName="h-6 w-6" />
              )}
            </div>
            <div className="flex flex-col min-w-0">
              <span
                className="font-medium text-sm leading-snug line-clamp-2 hover:text-primary cursor-pointer truncate"
                onClick={() => actionHandlers.onViewDetails(product)}
                title={product.name}
              >
                {product.name}
              </span>
              {product.baInfo && (
                <span className="text-xs text-muted-foreground flex items-center mt-0.5 truncate" title={`Offered by ${product.baInfo.name}`}>
                  <Avatar className="h-4 w-4 mr-1.5 border flex-shrink-0">
                    <AvatarImage src={product.baInfo.logoUrl} alt={product.baInfo.name} />
                    <AvatarFallback className="text-[8px] bg-secondary text-secondary-foreground">
                      {product.baInfo.name.charAt(0)}
                    </AvatarFallback>
                  </Avatar>
                  <span className="truncate">{product.baInfo.name}</span>
                </span>
              )}
            </div>
          </div>
        );
      },
      enableHiding: false,
      size: 300,
    },
    {
      accessorKey: "productType",
      header: ({ column }) => <DataTableColumnHeader column={column} title="Type" />,
      cell: ({ row }) => { /* ... same as before ... */
        const ProductIcon = row.original.productType === "RESOURCE" ? Package : Combine;
        return (
          <Badge variant={row.original.productType === "RESOURCE" ? "outline" : "secondary"} className="capitalize text-xs items-center font-normal">
            <ProductIcon className="mr-1.5 h-3.5 w-3.5 opacity-80" />
            {row.original.productType.toLowerCase()}
          </Badge>
        );
      },
      filterFn: (row, id, value) => value.includes(row.getValue(id)),
      size: 120,
    },
    { // ADDED currentState column for filtering
      accessorKey: "currentState",
      header: ({ column }) => <DataTableColumnHeader column={column} title="Status" />,
      cell: ({ row }) => {
        const stateInfo = getStateDisplayInfo(row.original.currentState);
        const StatusIconComponent = stateInfo.icon;
        return (
          <Badge variant={stateInfo.variant} className="capitalize text-xs items-center font-normal">
            <StatusIconComponent className="mr-1.5 h-3.5 w-3.5 opacity-80" />
            {stateInfo.label}
          </Badge>
        );
      },
      filterFn: (row, id, value) => value.includes(row.getValue(id)), // Faceted filter needs this
      size: 130,
    },
    {
      accessorKey: "basePrice",
      header: ({ column }) => <DataTableColumnHeader column={column} title="Price" className="justify-end" />,
      cell: ({ row }) => { /* ... same as before ... */
        const amount = row.original.basePrice;
        if (amount === undefined || amount === null) return <div className="text-right text-sm text-muted-foreground italic">N/A</div>;
        const formatted = new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(amount);
        return <div className="text-right font-medium text-sm">{formatted}</div>;
      },
      sortingFn: "alphanumeric",
      size: 100,
    },
    {
      id: "actions",
      cell: ({ row }) => (
        <CustomerProductRowActions
          product={row.original}
          onViewDetails={actionHandlers.onViewDetails}
          onReserve={actionHandlers.onReserve}
        />
      ),
      enableSorting: false,
      enableHiding: false, // Typically keep actions visible for customers
      size: 150,
    },
  ];// END OF FILE: components/customer/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/customer/CustomerProductCard.tsx

"use client";

import React from "react";
import Image from "next/image";
import { ProductListItemData } from "@/types/product";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { DollarSign, ShoppingCart, Info, Package, Combine } from "lucide-react"; // Removed UserCircle
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { cn } from "@/lib/utils";
import { ImagePlaceholder } from "@/components/ui/image-placeholder"; // Import placeholder

interface CustomerProductCardProps {
  product: ProductListItemData;
  onViewDetailsClick: (product: ProductListItemData) => void;
  onReserveClick: (product: ProductListItemData) => void;
}

export function CustomerProductCard({ product, onViewDetailsClick, onReserveClick }: CustomerProductCardProps) {
  const ProductIcon = product.productType === "RESOURCE" ? Package : Combine;
  const baNameInitial = product.baInfo?.name ? product.baInfo.name.charAt(0).toUpperCase() : "B";

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-all duration-300 ease-in-out transform hover:-translate-y-1 group">
      <div className="relative w-full aspect-[16/10] overflow-hidden rounded-t-lg bg-muted"> {/* Added bg-muted as fallback */}
        {product.imageUrl ? (
          <Image
            src={product.imageUrl}
            alt={product.name}
            fill
            sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
            className="object-cover transition-transform duration-500 group-hover:scale-105"
          />
        ) : (
          <ImagePlaceholder iconType={product.productType === 'RESOURCE' ? 'resource' : 'service'} className="h-full w-full rounded-t-lg" iconClassName="h-16 w-16" />
        )}
        <Badge
          variant={product.productType === "RESOURCE" ? "outline" : "secondary"}
          className="absolute top-2.5 right-2.5 capitalize text-xs items-center backdrop-blur-sm bg-background/80 dark:bg-card/80 px-2.5 py-1 shadow"
        >
          <ProductIcon className="mr-1.5 h-3.5 w-3.5 opacity-90" />
          {product.productType.toLowerCase()}
        </Badge>
      </div>

      <CardHeader className="pb-2 pt-4">
        <CardTitle
          className="text-base sm:text-lg font-semibold leading-tight line-clamp-2 hover:text-primary cursor-pointer"
          onClick={() => onViewDetailsClick(product)}
          title={product.name}
        >
          {product.name}
        </CardTitle>
        {product.baInfo && (
          <CardDescription className="text-xs mt-1 flex items-center group-hover:text-foreground/90 transition-colors">
            <Avatar className="h-5 w-5 mr-1.5 border">
              <AvatarImage src={product.baInfo.logoUrl} alt={product.baInfo.name} />
              <AvatarFallback className="text-[9px] bg-secondary text-secondary-foreground">
                {baNameInitial}
              </AvatarFallback>
            </Avatar>
            By <span className="font-medium text-foreground/80 group-hover:text-foreground">{product.baInfo.name}</span>
          </CardDescription>
        )}
      </CardHeader>

      <CardContent className="flex-grow space-y-2 text-sm py-2">
        {product.description && (
          <p className="text-muted-foreground line-clamp-3 text-xs leading-relaxed min-h-[48px]">
            {product.description}
          </p>
        )}
        <div className="flex items-baseline text-xl font-bold text-primary pt-1">
          {product.basePrice != null ? (
            <>
              <DollarSign className="h-5 w-5 mr-0.5 opacity-90" />
              {product.basePrice.toFixed(2)}
              <span className="text-xs font-normal text-muted-foreground ml-1">
                {product.productType === 'SERVICE' ? '/session' : '/item'}
              </span>
            </>
          ) : (
            <span className="italic text-base text-muted-foreground">Price on enquiry</span>
          )}
        </div>
      </CardContent>

      <CardFooter className="pt-3 pb-4 flex flex-col sm:flex-row gap-2.5 items-stretch sm:items-center">
        <Button variant="outline" size="sm" onClick={() => onViewDetailsClick(product)} className="w-full sm:w-auto flex-1 group/button hover:border-primary/70">
          <Info className="mr-2 h-4 w-4 text-primary/80 group-hover/button:text-primary" /> Details
        </Button>
        <Button size="sm" onClick={() => onReserveClick(product)} className="w-full sm:w-auto flex-1 group/button">
          <ShoppingCart className="mr-2 h-4 w-4" /> Reserve
        </Button>
      </CardFooter>
    </Card>
  );
}// END OF FILE: components/customer/CustomerProductCard.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/customer/CustomerProductDataTableToolbar.tsx

"use client";

import { Table } from "@tanstack/react-table";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { ProductListItemData } from "@/types/product";
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  SlidersHorizontal,
  X,
  Package,
  Combine,
  Search,
  PlayCircle, // For ONGOING/IN_USE
  CheckCircle2, // For PUBLISHED/AVAILABLE/FINISHED
  InfoIcon, // For generic states
} from "lucide-react";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";
import { cn } from "@/lib/utils";

export const customerProductTypeOptions: DataTableFilterOption[] = [
  { label: "Resource", value: "RESOURCE", icon: Package },
  { label: "Service", value: "SERVICE", icon: Combine },
];

// Customer-facing product states - ensure these values match your data
export const customerProductStateOptions: DataTableFilterOption[] = [
  { label: "Published", value: "PUBLISHED", icon: CheckCircle2 }, // For Services
  { label: "Available", value: "AVAILABLE", icon: CheckCircle2 }, // For Resources
  { label: "Ongoing", value: "ONGOING", icon: PlayCircle },       // For Services
  // { label: "In Use", value: "IN_USE", icon: PlayCircle },      // For Resources (maybe less relevant as a filter *for* customers)
  // { label: "Finished", value: "FINISHED", icon: CheckCircle2 }, // For Services (maybe less relevant as primary filter)
  // Add other states if applicable, e.g., "PLANNED" if you show upcoming services
];


interface CustomerProductDataTableToolbarProps<TData extends ProductListItemData> {
  table: Table<TData>;
  globalFilter: string;
  setGlobalFilter: (value: string) => void;
}

export function CustomerProductDataTableToolbar<TData extends ProductListItemData>({
  table,
  globalFilter,
  setGlobalFilter,
}: CustomerProductDataTableToolbarProps<TData>) {
  const isFiltered = table.getState().columnFilters.length > 0 || !!globalFilter;

  const resetAllFilters = () => {
    table.resetColumnFilters();
    setGlobalFilter("");
  };

  return (
    <div className="flex flex-col sm:flex-row items-center justify-between gap-x-4 gap-y-2 py-4">
      <div className="flex flex-1 flex-col sm:flex-row items-center gap-2 w-full sm:w-auto">
        <div className="relative w-full sm:w-auto">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none" />
          <Input
            placeholder="Search all..."
            value={globalFilter ?? ""}
            onChange={(event) => setGlobalFilter(event.target.value)}
            className="h-10 w-full sm:w-[180px] lg:w-[250px] pl-10" // Adjusted width
          />
        </div>
        {table.getColumn("productType") && (
          <DataTableFacetedFilter
            column={table.getColumn("productType")}
            title="Type"
            options={customerProductTypeOptions}
          />
        )}
        {/* Add State Filter */}
        {table.getColumn("currentState") && (
          <DataTableFacetedFilter
            column={table.getColumn("currentState")}
            title="Status"
            options={customerProductStateOptions}
          />
        )}
      </div>

      <div className="flex items-center gap-x-2 w-full sm:w-auto justify-between sm:justify-end">
        {isFiltered && (
          <Button
            variant="ghost"
            onClick={resetAllFilters}
            className="h-10 px-2 lg:px-3 text-sm"

          >
            Reset Filters
            <X className="ml-2 h-4 w-4" />
          </Button>
        )}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" size="sm" className="h-10">
              <SlidersHorizontal className="mr-2 h-4 w-4" />
              View Columns
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-[180px]">
            <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>
            <DropdownMenuSeparator />
            {table
              .getAllColumns()
              .filter(
                (column) =>
                  typeof column.accessorFn !== "undefined" && column.getCanHide()
              )
              .map((column) => {
                const formatColumnId = (id: string) => {
                  return id
                    .replace(/([A-Z](?=[a-z]))|([A-Z]+(?=[A-Z][a-z]|$))/g, ' $1$2')
                    .replace(/_/g, " ")
                    .trim()
                    .replace(/\b\w/g, char => char.toUpperCase());
                };
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    className="capitalize"
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) => column.toggleVisibility(!!value)}
                  >
                    {formatColumnId(column.id)}
                  </DropdownMenuCheckboxItem>
                );
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </div>
  );
}// END OF FILE: components/customer/CustomerProductDataTableToolbar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/customer/ReservationModal.tsx

"use client";

import React, { useState } from "react";
import { ProductListItemData } from "@/types/product";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
import { CalendarIcon, Loader2 } from "lucide-react";
import { format, isValid } from "date-fns";
import { toast } from "sonner";
import { cn } from "@/lib/utils";
// Assume an API function for creating reservations will exist in apiClient.ts
// import { reservationApi } from "@/lib/apiClient";

interface ReservationModalProps {
  product?: ProductListItemData | null;
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  onReservationSuccess: () => void; // Callback after successful reservation
}

interface ReservationFormData {
  preferredDate?: Date;
  notes?: string;
}

export function ReservationModal({ product, isOpen, onOpenChange, onReservationSuccess }: ReservationModalProps) {
  const [formData, setFormData] = useState<ReservationFormData>({});
  const [isLoading, setIsLoading] = useState(false);

  const handleDateSelect = (date?: Date) => {
    setFormData(prev => ({ ...prev, preferredDate: date }));
  };

  const handleNotesChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setFormData(prev => ({ ...prev, notes: e.target.value }));
  };

  const handleSubmitReservation = async () => {
    if (!product) return;
    setIsLoading(true);

    // Basic validation (can be expanded with Zod)
    if (product.productType === "SERVICE" && !formData.preferredDate) {
      toast.error("Please select a preferred date for the service.");
      setIsLoading(false);
      return;
    }

    console.log("Submitting reservation for:", product.id, "with data:", formData);

    // SIMULATE API CALL
    try {
      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay
      // const reservationPayload = {
      //   productId: product.id,
      //   productType: product.productType,
      //   preferredDate: formData.preferredDate?.toISOString(),
      //   notes: formData.notes,
      //   // customerId would be added on the backend from the session/token
      // };
      // await reservationApi.create(reservationPayload); // Example API call

      toast.success(`Reservation request for "${product.name}" submitted!`);
      onReservationSuccess();
      onOpenChange(false); // Close modal
      setFormData({}); // Reset form
    } catch (error: any) {
      console.error("Reservation submission error:", error);
      toast.error(error.message || "Failed to submit reservation. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  if (!product) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>Reserve: {product.name}</DialogTitle>
          <DialogDescription>
            Confirm your interest or select preferences for this {product.productType.toLowerCase()}.
            {product.basePrice && <span className="block mt-1">Price: ${product.basePrice.toFixed(2)}</span>}
          </DialogDescription>
        </DialogHeader>

        <div className="py-4 space-y-4">
          {product.productType === "SERVICE" && ( // Date picker typically for services
            <div className="space-y-1.5">
              <Label htmlFor="preferredDate">Preferred Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant={"outline"}
                    className={cn(
                      "w-full justify-start text-left font-normal h-10",
                      !formData.preferredDate && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {formData.preferredDate && isValid(formData.preferredDate) ? format(formData.preferredDate, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={formData.preferredDate}
                    onSelect={handleDateSelect}
                    disabled={(date) => date < new Date(new Date().setDate(new Date().getDate() - 1))} // Disable past dates
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
          )}

          <div className="space-y-1.5">
            <Label htmlFor="notes">Additional Notes or Questions</Label>
            <Textarea
              id="notes"
              placeholder={`Any specific requests for ${product.name}? (Optional)`}
              value={formData.notes || ""}
              onChange={handleNotesChange}
              rows={3}
            />
          </div>
        </div>

        <DialogFooter className="gap-2 sm:gap-0">
          <DialogClose asChild>
            <Button type="button" variant="outline">Cancel</Button>
          </DialogClose>
          <Button type="button" onClick={handleSubmitReservation} disabled={isLoading}>
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isLoading ? "Submitting..." : (product.productType === "RESOURCE" ? "Express Interest" : "Submit Request")}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}// END OF FILE: components/customer/ReservationModal.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/date-range-picker.tsx

"use client"

import * as React from "react"
import { CalendarIcon } from "@radix-ui/react-icons"
import { addDays, format } from "date-fns"
import type { DateRange } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"

export function DateRangePicker({ className }: React.HTMLAttributes<HTMLDivElement>) {
  const [date, setDate] = React.useState<DateRange | undefined>({
    from: new Date(2023, 0, 20),
    to: addDays(new Date(2023, 0, 20), 20),
  })

  return (
    <div className={cn("grid gap-2", className)}>
      <Popover>
        <PopoverTrigger asChild>
          <Button
            id="date"
            variant={"outline"}
            className={cn("w-[300px] justify-start text-left font-normal", !date && "text-muted-foreground")}
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {date?.from ? (
              date.to ? (
                <>
                  {format(date.from, "LLL dd, y")} - {format(date.to, "LLL dd, y")}
                </>
              ) : (
                format(date.from, "LLL dd, y")
              )
            ) : (
              <span>Pick a date</span>
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0" align="start">
          <Calendar
            initialFocus
            mode="range"
            defaultMonth={date?.from}
            selected={date}
            onSelect={setDate}
            numberOfMonths={2}
          />
        </PopoverContent>
      </Popover>
    </div>
  )
}

// END OF FILE: components/date-range-picker.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dev/role-switcher.tsx

"use client";

import * as React from "react";
import { useRouter } from "next/navigation"; // Use App Router's router
import { Building2, User, ShieldAlert } from "lucide-react"; // Icons for roles

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { cn } from "@/lib/utils";

type Role = "business-actor" | "customer" | "super-admin";

interface RoleSwitcherProps {
  currentRole: Role | null; // The role derived from the current URL path
  className?: string;
}

const roles: { value: Role; label: string; icon: React.ElementType }[] = [
  { value: "business-actor", label: "Business Actor", icon: Building2 },
  { value: "customer", label: "Customer", icon: User },
  { value: "super-admin", label: "Super Admin", icon: ShieldAlert },
];

export function RoleSwitcher({ currentRole, className }: RoleSwitcherProps) {
  const router = useRouter();
  const [selectedValue, setSelectedValue] = React.useState<string | undefined>(currentRole ?? undefined);

  // Sync select value if the URL changes externally
  React.useEffect(() => {
    setSelectedValue(currentRole ?? undefined);
  }, [currentRole]);

  const handleRoleChange = (newRole: string) => {
    const role = newRole as Role;
    setSelectedValue(role);
    // Navigate to the dashboard of the selected role
    router.push(`/${role}/dashboard`);
  };

  // Only render in development environment
  if (process.env.NODE_ENV !== 'development') {
    return null;
  }

  return (
    <div className={cn("flex items-center gap-2", className)}>
      {/* Optional: Add a label */}
      {/* <span className="text-xs font-medium text-muted-foreground hidden sm:inline">Dev Role:</span> */}
      <Select value={selectedValue} onValueChange={handleRoleChange}>
        <SelectTrigger
          className="w-auto h-9 text-xs sm:text-sm focus:ring-0 focus:ring-offset-0 focus-visible:ring-offset-0 focus-visible:ring-0 shadow-sm border-dashed border-yellow-500"
          aria-label="Switch development role"
        >
          <SelectValue placeholder="Select Role..." />
        </SelectTrigger>
        <SelectContent>
          {roles.map((role) => (
            <SelectItem key={role.value} value={role.value} className="text-xs sm:text-sm">
              <div className="flex items-center gap-2">
                <role.icon className="h-4 w-4 text-muted-foreground" />
                <span>{role.label}</span>
              </div>
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
    </div>
  );
}// END OF FILE: components/dev/role-switcher.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components.json

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}// END OF FILE: components.json

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/mode-toggle.tsx

"use client"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>Light</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>Dark</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>System</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

// END OF FILE: components/mode-toggle.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/not-found-buttons.tsx

// FILE: components/not-found-buttons.tsx
"use client"; // <-- Mark as Client Component

import Link from 'next/link';
import { useRouter } from 'next/navigation'; // Use App Router's router
import { Home, LogIn, ArrowLeft } from 'lucide-react'; // Add ArrowLeft icon

import { Button } from '@/components/ui/button';
import { DashboardIcon } from '@radix-ui/react-icons';

interface NotFoundButtonsProps {
  isAuthenticated: boolean;
  primaryLinkHref: string;
  primaryLinkText: string;
}

export function NotFoundButtons({
  isAuthenticated,
  primaryLinkHref,
  primaryLinkText,
}: NotFoundButtonsProps) {
  const router = useRouter();

  const handleGoBack = () => {
    router.back(); // Use router.back() for navigation
  };

  return (
    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
      {/* Go Back Button */}
      <Button
        variant="outline" // Style as secondary action
        size="lg"
        onClick={handleGoBack}
        className="transition-transform hover:scale-105"
      >
        <ArrowLeft className="mr-2 h-5 w-5" />
        Go Back
      </Button>

      {/* Primary Action Button (Dashboard/Homepage) */}
      <Button asChild size="lg" className="transition-transform hover:scale-105">
        <Link href={primaryLinkHref} className="inline-flex items-center gap-2">
          <DashboardIcon className="h-5 w-5" />
          {primaryLinkText}
        </Link>
      </Button>
    </div>
  );
}// END OF FILE: components/not-found-buttons.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/notifications.tsx

"use client"

import { useState } from "react"
import { Bell, X, Info, AlertTriangle, CreditCard, TrendingUp, Gift } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"

const notifications = [
  {
    id: 1,
    title: "New Feature",
    message: "Check out our new budget tracking tool!",
    date: "2023-07-15",
    icon: Info,
    color: "text-blue-500",
  },
  {
    id: 2,
    title: "Account Alert",
    message: "Unusual activity detected on your account.",
    date: "2023-07-14",
    icon: AlertTriangle,
    color: "text-yellow-500",
  },
  {
    id: 3,
    title: "Payment Due",
    message: "Your credit card payment is due in 3 days.",
    date: "2023-07-13",
    icon: CreditCard,
    color: "text-red-500",
  },
  {
    id: 4,
    title: "Investment Update",
    message: "Your investment portfolio has grown by 5% this month.",
    date: "2023-07-12",
    icon: TrendingUp,
    color: "text-green-500",
  },
  {
    id: 5,
    title: "New Offer",
    message: "You're eligible for a new savings account with higher interest!",
    date: "2023-07-11",
    icon: Gift,
    color: "text-purple-500",
  },
]

export function Notifications() {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <div className="relative">
      <Button
        variant="ghost"
        size="icon"
        className="relative"
        onClick={() => setIsOpen(!isOpen)}
        aria-label="Notifications"
      >
        <Bell className="h-5 w-5" />
        <span className="absolute top-0 right-0 h-2 w-2 bg-red-500 rounded-full" />
      </Button>
      {isOpen && (
        <Card className="absolute right-0 mt-2 w-96 z-50">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Notifications</CardTitle>
            <Button variant="ghost" size="icon" onClick={() => setIsOpen(false)} aria-label="Close notifications">
              <X className="h-4 w-4" />
            </Button>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-[400px] pr-4">
              {notifications.map((notification) => (
                <Card key={notification.id} className="mb-4 last:mb-0 border shadow-sm">
                  <CardContent className="p-4">
                    <div className="flex items-start space-x-4">
                      <div className={`${notification.color} p-2 rounded-full bg-opacity-10`}>
                        <notification.icon className={`h-5 w-5 ${notification.color}`} />
                      </div>
                      <div className="flex-1 space-y-1">
                        <p className="text-sm font-medium leading-none">{notification.title}</p>
                        <p className="text-sm text-muted-foreground">{notification.message}</p>
                        <p className="text-xs text-muted-foreground">{notification.date}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </ScrollArea>
          </CardContent>
        </Card>
      )}
    </div>
  )
}

// END OF FILE: components/notifications.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/products/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ProductListItemData } from "@/types/product";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Eye, RefreshCw, ArrowUpDown, Clock, Package, Combine, PlayCircle, CheckCircle2, XCircle, Loader2, InfoIcon, CircleDot, CircleSlash } from "lucide-react";
import { format, parseISO, isValid } from "date-fns";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

// Helper for state badge, icon, and label (MODIFIED TO RETURN OBJECT)
interface StateDisplayInfo {
  variant: "default" | "secondary" | "outline" | "destructive";
  icon: React.ElementType;
  label: string;
}

const getStateDisplayInfo = (state: string = ""): StateDisplayInfo => {
  const upperState = state.toUpperCase();
  const label = upperState.toLowerCase().replace(/_/g, " "); // Keep underscore replacement for label
  switch (upperState) {
    case "FREE": case "AVAILABLE": return { variant: "default", icon: CheckCircle2, label };
    case "PUBLISHED": case "FINISHED": return { variant: "default", icon: CheckCircle2, label };
    case "AFFECTED": case "PLANNED": return { variant: "secondary", icon: Clock, label };
    case "IN_USE": case "ONGOING": return { variant: "outline", icon: CircleDot, label };
    case "CANCELLED": case "DELETED": return { variant: "destructive", icon: CircleSlash, label };
    default: return { variant: "outline", icon: InfoIcon, label: label || "Unknown" }; // Use formatted label or Unknown
  }
};


export interface ProductRowActionsProps {
  product: ProductListItemData;
  onEdit: (product: ProductListItemData) => void;
  onDelete: (product: ProductListItemData) => void;
  onChangeState: (product: ProductListItemData, newState: string) => void;
  onViewDetails: (product: ProductListItemData) => void;
  resourceStateTransitions: Record<string, string[]>;
  serviceStateTransitions: Record<string, string[]>;
  isItemActionLoading: boolean;
}

const ProductRowActions: React.FC<ProductRowActionsProps> = ({
  product, onEdit, onDelete, onChangeState, onViewDetails,
  resourceStateTransitions, serviceStateTransitions, isItemActionLoading
}) => {
  const getAvailableTransitions = (prod: ProductListItemData) => {
    if (prod.productType === "RESOURCE") {
      return resourceStateTransitions[prod.currentState.toUpperCase()] || [];
    }
    if (prod.productType === "SERVICE") {
      return serviceStateTransitions[prod.currentState.toUpperCase()] || [];
    }
    return [];
  };
  const availableTransitions = getAvailableTransitions(product);

  const getStateChangeIcon = (nextState: string) => {
    switch (nextState.toUpperCase()) {
      case "PUBLISHED": case "ONGOING": case "AFFECTED": case "IN_USE": return PlayCircle;
      case "FINISHED": return CheckCircle2;
      case "CANCELLED": case "FREE": return XCircle;
      default: return RefreshCw;
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted" disabled={isItemActionLoading}>
          {isItemActionLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <MoreHorizontal className="h-4 w-4" />}
          <span className="sr-only">Open menu</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[200px]">
        <DropdownMenuLabel>Actions</DropdownMenuLabel>
        <DropdownMenuItem onClick={() => onViewDetails(product)}>
          <Eye className="mr-2 h-4 w-4" /> View Details
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => onEdit(product)}>
          <Edit3 className="mr-2 h-4 w-4" /> Edit Product
        </DropdownMenuItem>
        {availableTransitions.length > 0 && <DropdownMenuSeparator />}
        {availableTransitions.map(nextState => {
          const Icon = getStateChangeIcon(nextState);
          return (
            <DropdownMenuItem key={nextState} onClick={() => onChangeState(product, nextState)}>
              <Icon className="mr-2 h-4 w-4" /> Change to {nextState.toLowerCase().replace(/_/g, " ")}
            </DropdownMenuItem>
          );
        })}
        <DropdownMenuSeparator />
        <DropdownMenuItem
          onClick={() => onDelete(product)}
          className="text-destructive focus:text-destructive focus:bg-destructive/10"
        >
          <Trash2 className="mr-2 h-4 w-4" /> Delete Product
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getProductColumns = (
  actionHandlers: Omit<ProductRowActionsProps, 'product' | 'isItemActionLoading'> & { getIsItemActionLoading: (productId: string) => boolean }
): ColumnDef<ProductListItemData>[] => [
    {
      id: "select",
      header: ({ table }) => ( /* ... Checkbox ... */
        <Checkbox
          checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all rows"
          className="border-primary data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground"
        />
      ),
      cell: ({ row }) => ( /* ... Checkbox ... */
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          className="border-primary data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground"
        />
      ),
      enableSorting: false, enableHiding: false,
    },
    {
      accessorKey: "name",
      header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
      cell: ({ row }) => { /* ... Name cell with clickable and scheduled info ... */
        const product = row.original;
        return (
          <div className="flex flex-col max-w-[200px] sm:max-w-[300px]">
            <button
              type="button"
              className="font-medium text-left truncate hover:text-primary hover:underline focus:outline-none focus:ring-1 focus:ring-primary rounded-sm"
              title={product.name}
              onClick={() => actionHandlers.onViewDetails(product)}
            > {product.name} </button>
            {product.isScheduled && product.scheduledAt && isValid(parseISO(product.scheduledAt)) && (
              <div className="text-xs text-muted-foreground flex items-center mt-0.5 whitespace-nowrap">
                <Clock className="h-3 w-3 mr-1 flex-shrink-0 text-sky-600" />
                Scheduled: {format(parseISO(product.scheduledAt), "PPp")}
              </div>
            )}
          </div>
        )
      },
      enableHiding: false,
    },
    {
      accessorKey: "productType",
      header: ({ column }) => <DataTableColumnHeader column={column} title="Type" />,
      cell: ({ row }) => { /* ... Type badge with icon ... */
        const Icon = row.original.productType === "RESOURCE" ? Package : Combine;
        return (
          <Badge variant={row.original.productType === "RESOURCE" ? "outline" : "secondary"} className="capitalize text-xs items-center">
            <Icon className="mr-1.5 h-3.5 w-3.5 opacity-80" />
            {row.original.productType.toLowerCase()}
          </Badge>
        );
      },
      filterFn: (row, id, value) => value.includes(row.getValue(id)),
    },
    {
      accessorKey: "currentState",
      header: ({ column }) => <DataTableColumnHeader column={column} title="Status" />,
      cell: ({ row }) => {
        // Use the corrected helper function
        const stateInfo = getStateDisplayInfo(row.original.currentState);
        const StatusIcon = stateInfo.icon; // Get the icon from helper
        return (
          <Badge variant={stateInfo.variant} className="capitalize text-xs items-center">
            <StatusIcon className="mr-1.5 h-3.5 w-3.5 opacity-80" />
            {stateInfo.label} {/* Use label from helper */}
          </Badge>
        );
      },
      filterFn: (row, id, value) => value.includes(row.getValue(id)),
    },
    {
      accessorKey: "basePrice",
      header: ({ column }) => <DataTableColumnHeader column={column} title="Price" className="justify-end" />,
      cell: ({ row }) => { /* ... Price cell ... */
        const amount = parseFloat(row.getValue("basePrice"));
        if (isNaN(amount)) return <div className="text-right font-medium text-muted-foreground">N/A</div>;
        const formatted = new Intl.NumberFormat("en-US", { style: "currency", currency: "USD", }).format(amount);
        return <div className="text-right font-medium">{formatted}</div>;
      },
    },
    {
      accessorKey: "updatedAt",
      header: ({ column }) => <DataTableColumnHeader column={column} title="Last Updated" />,
      cell: ({ row }) => ( /* ... UpdatedAt cell ... */
        <div className="text-sm text-muted-foreground whitespace-nowrap">
          {format(parseISO(row.original.updatedAt), "PP")}
        </div>
      ),
    },
    {
      id: "actions",
      cell: ({ row }) => (
        <div className="text-right">
          <ProductRowActions
            product={row.original}
            onEdit={actionHandlers.onEdit}
            onDelete={actionHandlers.onDelete}
            onChangeState={actionHandlers.onChangeState}
            onViewDetails={actionHandlers.onViewDetails}
            resourceStateTransitions={actionHandlers.resourceStateTransitions}
            serviceStateTransitions={actionHandlers.serviceStateTransitions}
            isItemActionLoading={actionHandlers.getIsItemActionLoading(row.original.id)}
          />
        </div>
      ),
      enableSorting: false, enableHiding: false,
    },
  ];// END OF FILE: components/products/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/products/data-table-toolbar.tsx

"use client";

import { Table } from "@tanstack/react-table";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { SlidersHorizontal, X, Package, Combine, CheckCircle, CircleDot, ClockIcon, Search } from "lucide-react"; // Added Search
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";

export const productTypeOptions = [
  { label: "Resource", value: "RESOURCE", icon: Package },
  { label: "Service", value: "SERVICE", icon: Combine },
];
export const productStatusOptions = [
  { label: "Free", value: "FREE", icon: CheckCircle }, { label: "Affected", value: "AFFECTED", icon: CircleDot },
  { label: "In Use", value: "IN_USE", icon: CircleDot }, { label: "Planned", value: "PLANNED", icon: ClockIcon },
  { label: "Published", value: "PUBLISHED", icon: CheckCircle }, { label: "Ongoing", value: "ONGOING", icon: CircleDot },
  { label: "Finished", value: "FINISHED", icon: CheckCircle }, { label: "Cancelled", value: "CANCELLED", icon: X },
];

interface DataTableToolbarProps<TData> {
  table: Table<TData>;
  globalFilter: string; // Receive global filter state
  setGlobalFilter: (value: string) => void; // Receive setter for global filter
}

export function ProductDataTableToolbar<TData>({
  table,
  globalFilter,
  setGlobalFilter,
}: DataTableToolbarProps<TData>) {
  const isFiltered = table.getState().columnFilters.length > 0 || !!globalFilter;

  const resetAllFilters = () => {
    table.resetColumnFilters();
    setGlobalFilter("");
  };

  return (
    <div className="flex flex-col sm:flex-row items-center justify-between gap-4 py-4">
      <div className="flex flex-1 flex-col sm:flex-row items-center gap-2 w-full sm:w-auto">
        <div className="relative w-full sm:w-auto">
          <Search className="absolute left-2.5 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search all fields..." // Changed placeholder
            value={globalFilter ?? ""}
            onChange={(event) => setGlobalFilter(event.target.value)} // Use lifted global filter
            className="h-9 w-full sm:w-[180px] lg:w-[280px] pl-8" // Added padding for icon
          />
        </div>
        {table.getColumn("productType") && (
          <DataTableFacetedFilter
            column={table.getColumn("productType")}
            title="Type"
            options={productTypeOptions}
          />
        )}
        {table.getColumn("currentState") && (
          <DataTableFacetedFilter
            column={table.getColumn("currentState")}
            title="Status"
            options={productStatusOptions}
          />
        )}
        {isFiltered && (
          <Button
            variant="ghost"
            onClick={resetAllFilters} // Reset both column and global filters
            className="h-9 px-2 lg:px-3"
          >
            Reset
            <X className="ml-2 h-4 w-4" />
          </Button>
        )}
      </div>

      {/* Column Visibility Toggle */}
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="outline" size="sm" className="h-9">
            <SlidersHorizontal className="mr-2 h-4 w-4" />
            Columns
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="w-[180px]">
          <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>
          <DropdownMenuSeparator />
          {table
            .getAllColumns()
            .filter(
              (column) =>
                typeof column.accessorFn !== "undefined" && column.getCanHide()
            )
            .map((column) => {
              return (
                <DropdownMenuCheckboxItem
                  key={column.id}
                  className="capitalize"
                  checked={column.getIsVisible()}
                  onCheckedChange={(value) => column.toggleVisibility(!!value)}
                >
                  {column.id.replace(/([A-Z])/g, ' $1').replace(/_/g, " ")}
                </DropdownMenuCheckboxItem>
              );
            })}
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
}// END OF FILE: components/products/data-table-toolbar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/products/ProductCard.tsx

"use client";

import React from "react";
import { ProductListItemData } from "@/types/product";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Eye, RefreshCw, Package, Combine, Clock, InfoIcon, CircleDot, CheckCircle2, CircleSlash, PlayCircle, XCircle, Loader2, DollarSign } from "lucide-react";
import { format, parseISO, isValid } from "date-fns";
import { cn } from "@/lib/utils";

// Re-use or import these helpers if they are in a shared location
interface StateDisplayInfo {
  variant: "default" | "secondary" | "outline" | "destructive";
  icon: React.ElementType;
  label: string;
}
const getStateDisplayInfo = (state: string = ""): StateDisplayInfo => {
    const upperState = state.toUpperCase();
    const label = upperState.toLowerCase().replace(/_/g, " ");
    switch (upperState) {
      case "FREE": case "AVAILABLE": return { variant: "default", icon: CheckCircle2, label };
      case "PUBLISHED": case "FINISHED": return { variant: "default", icon: CheckCircle2, label };
      case "AFFECTED": case "PLANNED": return { variant: "secondary", icon: Clock, label };
      case "IN_USE": case "ONGOING": return { variant: "outline", icon: CircleDot, label };
      case "CANCELLED": case "DELETED": return { variant: "destructive", icon: CircleSlash, label };
      default: return { variant: "outline", icon: InfoIcon, label: label || "Unknown" };
    }
};

const getStateChangeIcon = (nextState: string) => {
    switch (nextState.toUpperCase()) {
        case "PUBLISHED": case "ONGOING": case "AFFECTED": case "IN_USE": return PlayCircle;
        case "FINISHED": return CheckCircle2;
        case "CANCELLED": case "FREE": return XCircle;
        default: return RefreshCw;
    }
};

// Props for ProductCard, similar to ProductRowActionsProps but for a single card
interface ProductCardActionsProps {
  onEdit: (product: ProductListItemData) => void;
  onDelete: (product: ProductListItemData) => void;
  onChangeState: (product: ProductListItemData, newState: string) => void;
  onViewDetails: (product: ProductListItemData) => void;
  resourceStateTransitions: Record<string, string[]>;
  serviceStateTransitions: Record<string, string[]>;
  isItemActionLoading?: boolean; // Optional for card context
}

interface ProductCardProps extends ProductCardActionsProps {
  product: ProductListItemData;
}

export function ProductCard({ product, onEdit, onDelete, onChangeState, onViewDetails, resourceStateTransitions, serviceStateTransitions, isItemActionLoading }: ProductCardProps) {
  const stateInfo = getStateDisplayInfo(product.currentState);
  const ProductIcon = product.productType === "RESOURCE" ? Package : Combine;

  const getAvailableTransitions = (prod: ProductListItemData) => {
    if (prod.productType === "RESOURCE") return resourceStateTransitions[prod.currentState.toUpperCase()] || [];
    if (prod.productType === "SERVICE") return serviceStateTransitions[prod.currentState.toUpperCase()] || [];
    return [];
  };
  const availableTransitions = getAvailableTransitions(product);

  return (
    <Card className="flex flex-col h-full shadow-md hover:shadow-lg transition-shadow duration-200">
      <CardHeader className="pb-3">
        <div className="flex justify-between items-start gap-2">
          <CardTitle className="text-base sm:text-lg font-semibold leading-tight line-clamp-2 hover:text-primary cursor-pointer" onClick={() => onViewDetails(product)}>
            {product.name}
          </CardTitle>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" className="h-7 w-7 flex-shrink-0" disabled={isItemActionLoading}>
                {isItemActionLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <MoreHorizontal className="h-4 w-4" />}
                <span className="sr-only">Product actions</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-[190px]">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => onViewDetails(product)}><Eye className="mr-2 h-4 w-4" /> View Details</DropdownMenuItem>
              <DropdownMenuItem onClick={() => onEdit(product)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
              {availableTransitions.length > 0 && <DropdownMenuSeparator />}
              {availableTransitions.map(nextState => {
                  const Icon = getStateChangeIcon(nextState);
                  return ( <DropdownMenuItem key={nextState} onClick={() => onChangeState(product, nextState)}> <Icon className="mr-2 h-4 w-4" /> Change to {nextState.toLowerCase().replace(/_/g, " ")} </DropdownMenuItem> );
              })}
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={() => onDelete(product)} className="text-destructive focus:text-destructive focus:bg-destructive/10"> <Trash2 className="mr-2 h-4 w-4" /> Delete </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
        <CardDescription className="text-xs flex items-center mt-1">
            <ProductIcon className="mr-1.5 h-3.5 w-3.5 text-muted-foreground" />
            {product.productType.toLowerCase()}
            <span className="mx-1.5">·</span>
            ID: {product.id.substring(0, 8)}...
        </CardDescription>
      </CardHeader>
      <CardContent className="flex-grow space-y-2 text-sm py-3">
        <div className="flex items-center">
            <Badge variant={stateInfo.variant} className="capitalize text-xs items-center px-2 py-0.5">
                <stateInfo.icon className="mr-1.5 h-3.5 w-3.5" />
                {stateInfo.label}
            </Badge>
        </div>
        {product.description && (
          <p className="text-muted-foreground line-clamp-3 text-xs leading-relaxed">
            {product.description}
          </p>
        )}
         {product.isScheduled && product.scheduledAt && isValid(parseISO(product.scheduledAt)) && (
            <div className="text-xs text-sky-600 dark:text-sky-400 flex items-center">
                <Clock className="h-3.5 w-3.5 mr-1.5 flex-shrink-0"/>
                Scheduled: {format(parseISO(product.scheduledAt), "PPp")}
            </div>
        )}
      </CardContent>
      <CardFooter className="pt-3 pb-4 text-xs justify-between items-center">
        <div className="text-muted-foreground">
            {product.basePrice != null ? (
                <span className="font-medium text-foreground flex items-center"><DollarSign className="h-3.5 w-3.5 mr-1 text-green-600"/>${product.basePrice.toFixed(2)}</span>
            ) : (
                <span className="italic">No price set</span>
            )}
        </div>
        <div className="text-muted-foreground" title={format(parseISO(product.updatedAt), "MMMM d, yyyy 'at' h:mm a")}>
            Updated: {format(parseISO(product.updatedAt), "PP")}
        </div>
      </CardFooter>
    </Card>
  );
}// END OF FILE: components/products/ProductCard.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/products/ProductDetailView.tsx

"use client";

import React from "react";
import { ProductListItemData } from "@/types/product";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { format, parseISO, isValid } from "date-fns";
import {
  AlertTriangle, CalendarDays, Clock, DollarSign, FileText, InfoIcon as DetailInfoIcon, // Renamed to avoid conflict if needed
  TagIcon, TypeIcon, Edit3, XCircle,
  Package, Combine, CheckCircle, CircleDot, CircleSlash, ShoppingCart // Added ShoppingCart
} from "lucide-react";
import { cn } from "@/lib/utils";
import Image from "next/image"; // Added Image import

interface ProductDetailViewProps {
  product?: ProductListItemData;
  onClose: () => void;
  onEdit: (product: ProductListItemData) => void; // Retain for BA context
  onReserve?: (product: ProductListItemData) => void; // NEW: Optional for Customer context
  showReserveButton?: boolean; // NEW: To control visibility of reserve button
  isBAView?: boolean; // NEW: To control visibility of edit button (or other BA-specific actions)
}

const getStateDisplay = (state: string = ""): { variant: "default" | "secondary" | "outline" | "destructive", icon: React.ElementType, label: string } => {
  const upperState = state.toUpperCase();
  const label = upperState.toLowerCase().replace(/_/g, " ");
  switch (upperState) {
    case "FREE": case "AVAILABLE": case "PUBLISHED": case "FINISHED":
      return { variant: "default", icon: CheckCircle, label };
    case "AFFECTED": case "PLANNED":
      return { variant: "secondary", icon: Clock, label };
    case "IN_USE": case "ONGOING":
      return { variant: "outline", icon: CircleDot, label };
    case "CANCELLED": case "DELETED":
      return { variant: "destructive", icon: CircleSlash, label };
    default: return { variant: "outline", icon: DetailInfoIcon, label: label || "Unknown" };
  }
};

const DetailRow: React.FC<{ label: string; value?: string | number | React.ReactNode; icon: React.ElementType; className?: string }> = ({ label, value, icon: Icon, className }) => (
  <div className={cn("grid grid-cols-3 gap-2 py-3 items-start", className)}>
    <dt className="col-span-1 text-sm font-medium text-muted-foreground flex items-center">
      <Icon className="mr-2 h-4 w-4 flex-shrink-0 text-muted-foreground/80" />
      {label}
    </dt>
    <dd className="col-span-2 text-sm text-foreground break-words">{value ?? <span className="italic text-muted-foreground/70">N/A</span>}</dd>
  </div>
);

export function ProductDetailView({
  product,
  onClose,
  onEdit,
  onReserve, // New prop
  showReserveButton = false, // New prop
  isBAView = false // New prop to distinguish context
}: ProductDetailViewProps) {
  if (!product) {
    return (
      <div className="fixed inset-0 bg-black/60 backdrop-blur-sm z-[60] flex items-center justify-center p-4" onClick={onClose}>
        <Card className="w-full max-w-md shadow-xl" onClick={(e) => e.stopPropagation()}>
          <CardHeader>
            <CardTitle className="flex items-center text-destructive">
              <AlertTriangle className="mr-2 h-5 w-5" /> Product Not Found
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-muted-foreground">The selected product data could not be loaded or is unavailable.</p>
          </CardContent>
          <CardFooter>
            <Button variant="outline" onClick={onClose} className="w-full">Close</Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  const stateDisplay = getStateDisplay(product.currentState);
  const productTypeIcon = product.productType === "RESOURCE" ? Package : Combine;

  return (
    <div className="fixed inset-0 bg-black/60 backdrop-blur-sm z-[60] flex items-center justify-center p-4 sm:p-6" onClick={onClose}>
      <Card className="w-full max-w-xl max-h-[90vh] flex flex-col shadow-2xl rounded-lg" onClick={(e) => e.stopPropagation()}>
        <CardHeader className="border-b p-4 sm:p-6">
          <div className="flex justify-between items-start">
            <div className="space-y-1">
              <CardTitle className="text-lg sm:text-xl font-semibold flex items-center">
                {product.name}
              </CardTitle>
              <CardDescription className="text-xs sm:text-sm">
                ID: {product.id}
              </CardDescription>
            </div>
            <Button variant="ghost" size="icon" onClick={onClose} aria-label="Close detail view" className="-mt-1 -mr-1 sm:-mt-2 sm:-mr-2">
              <XCircle className="h-5 w-5 text-muted-foreground hover:text-foreground" />
            </Button>
          </div>
        </CardHeader>

        <CardContent className="p-4 sm:p-6 space-y-5 overflow-y-auto scrollbar-thin flex-1">
          {product.imageUrl && product.imageUrl !== "/placeholder.svg" && (
            <div className="relative w-full aspect-video rounded-lg overflow-hidden mb-4 bg-muted">
              <Image src={product.imageUrl} alt={product.name} fill sizes="(max-width: 768px) 100vw, 50vw" className="object-cover"/>
            </div>
          )}
          <section className="space-y-1">
            <h3 className="text-xs font-semibold uppercase text-muted-foreground tracking-wider mb-2">General Information</h3>
            <DetailRow label="Type" icon={TypeIcon} value={
              <Badge variant={product.productType === "RESOURCE" ? "outline" : "secondary"} className="capitalize text-xs font-normal">
                {React.createElement(productTypeIcon, { className: "mr-1.5 h-3.5 w-3.5" })}
                {product.productType.toLowerCase()}
              </Badge>
            } />
            <DetailRow label="Status" icon={stateDisplay.icon} value={
              <Badge variant={stateDisplay.variant} className="capitalize text-xs font-normal">
                {stateDisplay.label}
              </Badge>
            } />
            {product.basePrice !== undefined && product.basePrice !== null && (
              <DetailRow label="Base Price" icon={DollarSign} value={`$${product.basePrice.toFixed(2)}`} />
            )}
            {product.baInfo && (
                 <DetailRow label="Offered By" icon={Package} value={product.baInfo.name} />
            )}
          </section>

          <Separator />

          {product.description && (
            <section className="space-y-1">
              <h3 className="text-xs font-semibold uppercase text-muted-foreground tracking-wider mb-2">Description</h3>
              <DetailRow label="" icon={FileText} value={
                <p className="text-sm text-foreground whitespace-pre-wrap leading-relaxed">{product.description}</p>
              } className="grid-cols-[auto_1fr]" />
            </section>
          )}

          {(product.isScheduled && product.scheduledAt && isValid(parseISO(product.scheduledAt))) && (
            <>
              <Separator />
              <section className="space-y-1">
                <h3 className="text-xs font-semibold uppercase text-muted-foreground tracking-wider mb-2">Scheduling</h3>
                <DetailRow label="Scheduled For" icon={Clock} value={format(parseISO(product.scheduledAt), "MMMM d, yyyy 'at' h:mm a")} />
              </section>
            </>
          )}

          <Separator />

          <section className="space-y-1">
            <h3 className="text-xs font-semibold uppercase text-muted-foreground tracking-wider mb-2">Timestamps</h3>
            <DetailRow label="Created At" icon={CalendarDays} value={format(parseISO(product.createdAt), "MMMM d, yyyy, h:mm a")} />
            <DetailRow label="Last Updated" icon={CalendarDays} value={format(parseISO(product.updatedAt), "MMMM d, yyyy, h:mm a")} />
          </section>

          {/* Example for custom attributes if needed
          {product.customAttributes && Object.keys(product.customAttributes).length > 0 && (
            <>
              <Separator />
              <section className="space-y-1">
                <h3 className="text-xs font-semibold uppercase text-muted-foreground tracking-wider mb-2">Additional Details</h3>
                {Object.entries(product.customAttributes).map(([key, value]) => (
                  <DetailRow key={key} label={key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())} icon={TagIcon} value={String(value)} />
                ))}
              </section>
            </>
          )}
          */}
        </CardContent>

        <CardFooter className="border-t p-4 sm:p-6 flex flex-col-reverse sm:flex-row sm:justify-end gap-2">
          <Button variant="outline" onClick={onClose} className="w-full sm:w-auto">Close</Button>
          {isBAView && onEdit && ( // Show Edit button only for BA view and if onEdit is provided
            <Button onClick={() => onEdit(product)} className="w-full sm:w-auto">
              <Edit3 className="mr-2 h-4 w-4" /> Edit Product
            </Button>
          )}
          {showReserveButton && onReserve && ( // Show Reserve button if prop is true and handler exists
             <Button onClick={() => onReserve(product)} className="w-full sm:w-auto">
                <ShoppingCart className="mr-2 h-4 w-4" />
                {product.productType === "RESOURCE" ? "Enquire Now" : "Reserve Now"}
            </Button>
          )}
        </CardFooter>
      </Card>
    </div>
  );
}// END OF FILE: components/products/ProductDetailView.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/products/ProductForm.tsx

"use client";

import React, { useState, useEffect, useCallback } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  ProductTypeEnum, // Keep this if used elsewhere in the file
  fullProductFormSchema,
  ProductFormData,
} from "@/lib/validators/productValidator";
import { resourceApi, serviceApi } from "@/lib/apiClient";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Switch } from "@/components/ui/switch";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Separator } from "@/components/ui/separator";
import { CalendarIcon, Loader2, ClockIcon, Settings2Icon } from "lucide-react";
import { format, isValid, parseISO } from "date-fns";
import { cn } from "@/lib/utils";
import { toast } from "sonner";

interface ProductFormProps {
  initialData?: Partial<Omit<ProductFormData, 'scheduledAt'> & { id?: string; scheduledAt?: string | Date }>;
  onFormSubmitSuccess?: (data: any) => void;
  mode?: "create" | "edit";
}

const parseInitialScheduledAt = (scheduledAt?: string | Date): Date | undefined => {
  if (!scheduledAt) return undefined;
  if (scheduledAt instanceof Date && isValid(scheduledAt)) return scheduledAt;
  if (typeof scheduledAt === 'string') {
    const parsedDate = parseISO(scheduledAt);
    if (isValid(parsedDate)) return parsedDate;
  }
  return undefined;
};

export function ProductForm({
  initialData,
  onFormSubmitSuccess,
  mode = "create",
}: ProductFormProps) {
  const [isLoading, setIsLoading] = useState(false);
  // Local state for conditional rendering, but primary source of truth for submission is form state
  const [enableScheduling, setEnableScheduling] = useState(initialData?.isScheduled || false);
  const [enableCustomAction, setEnableCustomAction] = useState(initialData?.isCustomAction || false);

  const formSchema = fullProductFormSchema;

  const form = useForm<ProductFormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      productType: initialData?.productType || undefined,
      name: initialData?.name || "",
      description: initialData?.description || "",
      basePrice: initialData?.basePrice || undefined,
      isScheduled: initialData?.isScheduled || false,
      scheduledAt: parseInitialScheduledAt(initialData?.scheduledAt),
      isCustomAction: initialData?.isCustomAction || false,
      customActionQuery: initialData?.customActionQuery || "",
    },
  });

  // Watch the productType from react-hook-form state for conditional rendering
  const watchedProductType = form.watch("productType");

  useEffect(() => {
    const defaultVals = {
      productType: initialData?.productType || (mode === "create" ? undefined : watchedProductType),
      name: initialData?.name || "",
      description: initialData?.description || "",
      basePrice: initialData?.basePrice || undefined,
      isScheduled: initialData?.isScheduled || false,
      scheduledAt: parseInitialScheduledAt(initialData?.scheduledAt),
      isCustomAction: initialData?.isCustomAction || false,
      customActionQuery: initialData?.customActionQuery || "",
    };
    form.reset(defaultVals);

    setEnableScheduling(initialData?.isScheduled || false);
    setEnableCustomAction(initialData?.isCustomAction || false);

  }, [initialData, mode, form.reset, watchedProductType]); // Use watchedProductType from form

  const onSubmit: SubmitHandler<ProductFormData> = async (data) => {
    setIsLoading(true);
    if (mode === "edit" && !initialData?.id) {
      toast.error("Product ID is missing for update operation.");
      setIsLoading(false);
      return;
    }
    if (!data.productType) { // Should be caught by Zod, but good to have a check
        toast.error("Product type is required.");
        setIsLoading(false);
        return;
    }

    try {
      const payload: any = {
        name: data.name,
        description: data.description,
        basePrice: data.basePrice,
        productType: data.productType, // Always include productType
      };

      payload.isScheduled = data.isScheduled || false; // Ensure boolean
      if (data.isScheduled && data.scheduledAt && isValid(data.scheduledAt)) {
        payload.scheduledAt = data.scheduledAt.toISOString();
      } else if (data.isScheduled && !data.scheduledAt){
        toast.error("Scheduled date is missing for a scheduled action."); setIsLoading(false); return;
      } else {
        delete payload.scheduledAt;
      }

      payload.isCustomAction = data.isCustomAction || false; // Ensure boolean
      if (data.isCustomAction && data.customActionQuery) {
        payload.customActionQuery = data.customActionQuery;
      } else if (data.isCustomAction && !data.customActionQuery) {
        toast.error("Custom query is missing for a custom action."); setIsLoading(false); return;
      } else {
        delete payload.customActionQuery;
      }

      if (mode === "edit" && initialData?.id) payload.id = initialData.id;
      let response;

      if (data.productType === "RESOURCE") {
        if (mode === "create") {
          response = data.isScheduled ? await resourceApi.scheduleCreate(payload) : await resourceApi.create(payload);
        } else {
          response = data.isScheduled
            ? await resourceApi.scheduleUpdate({ ...payload, id: initialData!.id })
            : await resourceApi.update(initialData!.id!, payload);
        }
      } else if (data.productType === "SERVICE") {
         if (mode === "create") {
          response = data.isScheduled ? await serviceApi.scheduleCreate(payload) : await serviceApi.create(payload);
        } else {
          response = data.isScheduled
            ? await serviceApi.scheduleUpdate({ ...payload, id: initialData!.id })
            : await serviceApi.update(initialData!.id!, payload);
        }
      }
      // No else needed here because of the check at the start of onSubmit

      toast.success(`Product ${mode === "create" ? "created" : "updated"} successfully!`);
      if (onFormSubmitSuccess) onFormSubmitSuccess(response);
      if (mode === "create") {
        form.reset({ // Reset to a truly blank state for create mode
            productType: undefined, name: "", description: "", basePrice: undefined,
            isScheduled: false, scheduledAt: undefined,
            isCustomAction: false, customActionQuery: ""
        });
        // setSelectedProductType(undefined); // This is now driven by watchedProductType
        setEnableScheduling(false);
        setEnableCustomAction(false);
      }
    } catch (error: any) { console.error("Form submission error:", error);
    } finally { setIsLoading(false); }
  };

  return (
    <Card className="w-full max-w-2xl mx-auto shadow-lg">
      <CardHeader>
        <CardTitle className="text-xl sm:text-2xl">{mode === "create" ? "Create New Product/Service" : `Edit ${watchedProductType?.toLowerCase() || "Item"}`}</CardTitle>
        <CardDescription>
          Provide the necessary details for your {watchedProductType ? watchedProductType.toLowerCase() : "item"}.
          {mode === "edit" && initialData?.id && <span className="block text-xs mt-1 text-muted-foreground">Editing ID: {initialData.id}</span>}
        </CardDescription>
      </CardHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <CardContent className="space-y-6 pt-2 pb-6 px-4 sm:px-6">
            {/* Section 1: Core Information */}
            <div className="space-y-4 p-4 border rounded-md bg-background/50">
              <FormField
                control={form.control}
                name="productType"
                render={({ field }) => (
                  <FormItem className="space-y-2">
                    <FormLabel className="text-sm font-semibold">Item Type <span className="text-destructive">*</span></FormLabel>
                    <FormControl>
                      <RadioGroup
                        onValueChange={(value) => {
                          // Allow changing type only in create mode directly via UI
                          // In edit mode, type is fixed.
                          if (mode === "create") {
                            field.onChange(value);
                            // watchedProductType will update automatically due to form.watch
                          }
                        }}
                        value={field.value || ""} // Ensure value is not undefined for RadioGroup
                        className="flex gap-4"
                      >
                        <FormItem className="flex items-center space-x-2">
                          <FormControl><RadioGroupItem value="RESOURCE" disabled={mode === "edit"} /></FormControl>
                          <FormLabel className="font-normal text-sm">Resource</FormLabel>
                        </FormItem>
                        <FormItem className="flex items-center space-x-2">
                          <FormControl><RadioGroupItem value="SERVICE" disabled={mode === "edit"} /></FormControl>
                          <FormLabel className="font-normal text-sm">Service</FormLabel>
                        </FormItem>
                      </RadioGroup>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {watchedProductType && ( // Use watchedProductType for conditional rendering
                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4 pt-2">
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem className="md:col-span-2">
                        <FormLabel>Name <span className="text-destructive">*</span></FormLabel>
                        <FormControl><Input placeholder={`${watchedProductType === "RESOURCE" ? "Resource" : "Service"} name`} {...field} /></FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField /* ... description ... */
                    control={form.control} name="description"
                    render={({ field }) => (
                      <FormItem className="md:col-span-2">
                        <FormLabel>Description</FormLabel>
                        <FormControl><Textarea placeholder="Provide a detailed description..." {...field} rows={3} /></FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField /* ... basePrice ... */
                    control={form.control} name="basePrice"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Base Price (USD)</FormLabel>
                        <FormControl><Input type="number" placeholder="0.00" {...field} onChange={e => field.onChange(e.target.value === '' ? undefined : parseFloat(e.target.value))} value={field.value ?? ""} step="0.01" /></FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              )}
            </div>

            {watchedProductType && ( // Use watchedProductType here as well
              <>
                {/* Section 2: Scheduling Options */}
                <div className="space-y-4 p-4 border rounded-md bg-background/50">
                    {/* ... Scheduling FormField for isScheduled ... */}
                    <div className="flex items-center justify-between">
                        <div className="space-y-0.5">
                            <FormLabel className="text-base font-semibold flex items-center"><ClockIcon className="mr-2 h-5 w-5 text-primary"/>Scheduling Options</FormLabel>
                            <FormDescription className="text-xs">
                                Configure if this operation should occur at a future time.
                            </FormDescription>
                        </div>
                        <FormField control={form.control} name="isScheduled" render={({ field }) => (
                            <FormControl>
                                <Switch
                                    checked={field.value || false}
                                    onCheckedChange={(checked) => {
                                    field.onChange(checked); setEnableScheduling(checked);
                                    if (!checked) form.setValue("scheduledAt", undefined, { shouldValidate: true });
                                    }}
                                    aria-labelledby="scheduling-label"
                                />
                            </FormControl>
                        )}/>
                    </div>
                    {enableScheduling && ( /* ... FormField for scheduledAt ... */
                      <div className="pt-2 pl-1">
                        <FormField
                            control={form.control} name="scheduledAt"
                            render={({ field }) => (
                            <FormItem className="flex flex-col">
                                <FormLabel className="text-sm mb-1">Scheduled Date & Time <span className="text-destructive">*</span></FormLabel>
                                <Popover>
                                <PopoverTrigger asChild>
                                    <FormControl>
                                    <Button variant={"outline"} className={cn("w-full justify-start text-left font-normal h-10", !field.value && "text-muted-foreground")}>
                                        <CalendarIcon className="mr-2 h-4 w-4" />
                                        {field.value && isValid(field.value) ? format(field.value, "PPP HH:mm") : <span>Pick a date and time</span>}
                                    </Button>
                                    </FormControl>
                                </PopoverTrigger>
                                <PopoverContent className="w-auto p-0" align="start">
                                    <Calendar
                                        mode="single" selected={field.value}
                                        onSelect={(date) => { /* ... onSelect logic ... */
                                            const newDate = date || new Date(); const currentTime = field.value && isValid(field.value) ? field.value : new Date();
                                            newDate.setHours(currentTime.getHours()); newDate.setMinutes(currentTime.getMinutes()); newDate.setSeconds(0,0);
                                            field.onChange(newDate);
                                        }}
                                        disabled={(date) => date < new Date(new Date().setHours(0,0,0,0))} initialFocus
                                    />
                                    <div className="p-2 border-t"><Input type="time"
                                        defaultValue={field.value && isValid(field.value) ? format(field.value, "HH:mm") : ""}
                                        onChange={(e) => { /* ... time input onChange logic ... */
                                            const time = e.target.value; const currentDate = field.value && isValid(field.value) ? new Date(field.value) : new Date();
                                            if (time) { const [hours, minutes] = time.split(':').map(Number); currentDate.setHours(hours, minutes, 0, 0); field.onChange(currentDate); }
                                        }}
                                        className="w-full h-9" />
                                    </div>
                                </PopoverContent>
                                </Popover>
                                <FormMessage />
                            </FormItem>
                            )}
                        />
                      </div>
                    )}
                </div>

                {/* Section 3: Custom Action */}
                <div className="space-y-4 p-4 border rounded-md bg-background/50">
                    {/* ... Custom Action FormField for isCustomAction ... */}
                     <div className="flex items-center justify-between">
                        <div className="space-y-0.5">
                            <FormLabel className="text-base font-semibold flex items-center"><Settings2Icon className="mr-2 h-5 w-5 text-primary"/>Advanced: Custom Action</FormLabel>
                            <FormDescription className="text-xs"> For specific backend operations requiring a custom query. </FormDescription>
                        </div>
                        <FormField control={form.control} name="isCustomAction" render={({ field }) => (
                            <FormControl>
                                <Switch
                                    checked={field.value || false}
                                    onCheckedChange={(checked) => {
                                    field.onChange(checked); setEnableCustomAction(checked);
                                    if (!checked) form.setValue("customActionQuery", "", { shouldValidate: true });
                                    }}
                                />
                            </FormControl>
                        )}/>
                    </div>
                    {enableCustomAction && ( /* ... FormField for customActionQuery ... */
                      <div className="pt-2 pl-1">
                        <FormField
                            control={form.control} name="customActionQuery"
                            render={({ field }) => (
                            <FormItem>
                                <FormLabel className="text-sm">Custom Action Query <span className="text-destructive">*</span></FormLabel>
                                <FormControl><Input placeholder="e.g., {'action': 'applyDiscount', 'rate': 0.1}" {...field} value={field.value ?? ""} /></FormControl>
                                <FormDescription className="text-xs">Enter JSON or string query for the custom action.</FormDescription>
                                <FormMessage />
                            </FormItem>
                            )}
                        />
                      </div>
                    )}
                </div>
              </>
            )}
          </CardContent>
          <CardFooter className="border-t px-4 sm:px-6 py-4">
            <Button type="submit" disabled={isLoading || !watchedProductType} className="w-full sm:w-auto ml-auto"> {/* Use watchedProductType */}
              {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              {isLoading ? "Processing..." : (mode === "create" ? `Create ${watchedProductType?.toLocaleLowerCase() || "Item"}` : "Save Changes")}
            </Button>
          </CardFooter>
        </form>
      </Form>
    </Card>
  );
}// END OF FILE: components/products/ProductForm.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/products/ProductGridView.tsx

"use client";

import React from "react";
import { ProductListItemData } from "@/types/product";
import { ProductCard } from "./ProductCard"; // Assuming ProductCard is in the same directory
import { ProductRowActionsProps } from "./columns"; // For action handlers consistency
import { Loader2, AlertTriangle, Inbox } from "lucide-react";
import { Button } from "@/components/ui/button";

import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "../ui/skeleton";
interface ProductGridViewProps extends Omit<ProductRowActionsProps, 'product' | 'isItemActionLoading'> {
  products: ProductListItemData[];
  isLoading: boolean; // For overall loading state of the grid
  error?: string | null;
  fetchProducts?: () => void; // Optional: if grid handles its own refresh trigger
  // actionLoading state needs to be managed by the parent or this component if actions are triggered from here
  getActionLoadingState: (productId: string) => boolean;
}

export function ProductGridView({
  products,
  isLoading,
  error,
  fetchProducts,
  getActionLoadingState,
  ...actionHandlers // Spread remaining action handlers
}: ProductGridViewProps) {

  if (isLoading && products.length === 0) {
    return (
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 py-6">
        {Array.from({ length: 8 }).map((_, i) => (
          <Card key={i} className="shadow-sm">
            <CardHeader className="pb-3"><Skeleton className="h-5 w-3/4" /><Skeleton className="h-3 w-1/2 mt-1" /></CardHeader>
            <CardContent className="space-y-2 py-3"><Skeleton className="h-4 w-full" /><Skeleton className="h-4 w-5/6" /></CardContent>
            <CardFooter className="pt-3 pb-4 justify-between"><Skeleton className="h-5 w-1/4" /><Skeleton className="h-5 w-1/3" /></CardFooter>
          </Card>
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-[300px] flex flex-col justify-center items-center p-10 border border-destructive/50 bg-destructive/10 rounded-lg text-center">
        <AlertTriangle className="h-12 w-12 text-destructive mb-4" />
        <p className="text-destructive-foreground font-semibold">{error}</p>
        {fetchProducts && <Button onClick={fetchProducts} variant="destructive" className="mt-6">Try Again</Button>}
      </div>
    );
  }

  if (!isLoading && products.length === 0) {
    return (
      <div className="min-h-[300px] text-center flex flex-col items-center justify-center text-muted-foreground border rounded-lg p-10">
        <Inbox className="h-16 w-16 text-muted-foreground/70 mb-6" />
        <h3 className="text-xl font-semibold">No Products to Display</h3>
        <p className="text-sm mt-1">Your catalog is currently empty or no items match your filters.</p>
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 py-6">
      {products.map((product) => (
        <ProductCard
          key={product.id}
          product={product}
          isItemActionLoading={getActionLoadingState(product.id)}
          {...actionHandlers} // Pass down onEdit, onDelete, etc.
        />
      ))}
    </div>
  );
}// END OF FILE: components/products/ProductGridView.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/products/ProductList.tsx

"use client";

import React, { useMemo } from "react";
import { ProductListItemData } from "@/types/product";
import { getProductColumns, ProductRowActionsProps } from "./columns";
import { DataTable } from "@/components/ui/data-table";

import { ColumnDef, ColumnFiltersState, SortingState, VisibilityState, Table as TanstackTableInstance, PaginationState, RowSelectionState } from "@tanstack/react-table";

interface ProductListProps {
  data: ProductListItemData[]; // Data is now always the processed & paginated slice
  pageCount: number;
  // isLoading prop is removed

  onEditProduct: (product: ProductListItemData) => void;
  onViewProductDetails: (product: ProductListItemData) => void;
  onDeleteProduct: (product: ProductListItemData) => void;
  onChangeProductState: (product: ProductListItemData, newState: string) => void;

  sorting: SortingState;
  setSorting: React.Dispatch<React.SetStateAction<SortingState>>;
  columnFilters: ColumnFiltersState;
  setColumnFilters: React.Dispatch<React.SetStateAction<ColumnFiltersState>>;
  globalFilter: string;
  setGlobalFilter: React.Dispatch<React.SetStateAction<string>>;
  columnVisibility: VisibilityState;
  setColumnVisibility: React.Dispatch<React.SetStateAction<VisibilityState>>;
  rowSelection: RowSelectionState;
  setRowSelection: React.Dispatch<React.SetStateAction<RowSelectionState>>;
  pagination: PaginationState;
  setPagination: React.Dispatch<React.SetStateAction<PaginationState>>;

  // setTableInstance prop can be removed if parent ManageProductsPage creates the primary table instance
  // setTableInstance: (table: TanstackTableInstance<ProductListItemData> | null) => void; 
  itemActionLoading: { [productId: string]: boolean };
}

const resourceStateTransitions: Record<string, string[]> = { FREE: ["AFFECTED"], AFFECTED: ["FREE", "IN_USE"], IN_USE: ["FREE"] };
const serviceStateTransitions: Record<string, string[]> = { PLANNED: ["PUBLISHED", "CANCELLED"], PUBLISHED: ["PLANNED", "ONGOING", "CANCELLED"], ONGOING: ["FINISHED"], FINISHED: [], CANCELLED: [] };

export function ProductList({
  data,
  pageCount,
  onEditProduct,
  onViewProductDetails,
  onDeleteProduct,
  onChangeProductState,
  sorting, setSorting,
  columnFilters, setColumnFilters,
  globalFilter, setGlobalFilter,
  columnVisibility, setColumnVisibility,
  rowSelection, setRowSelection,
  pagination, setPagination,
  itemActionLoading,
}: ProductListProps) {

  const columns = useMemo<ColumnDef<ProductListItemData>[]>(() => getProductColumns({
    onEdit: onEditProduct,
    onDelete: onDeleteProduct,
    onChangeState: onChangeProductState,
    onViewDetails: onViewProductDetails,
    resourceStateTransitions,
    serviceStateTransitions,
    getIsItemActionLoading: (productId: string) => !!itemActionLoading[productId],
  }), [onEditProduct, onDeleteProduct, onChangeProductState, onViewProductDetails, itemActionLoading]);

  return (
    <DataTable
      columns={columns}
      data={data}
      pageCount={pageCount}
      sorting={sorting}
      onSortingChange={setSorting}
      columnFilters={columnFilters}
      onColumnFiltersChange={setColumnFilters}
      globalFilter={globalFilter}
      onGlobalFilterChange={setGlobalFilter}
      columnVisibility={columnVisibility}
      onColumnVisibilityChange={setColumnVisibility}
      rowSelection={rowSelection}
      onRowSelectionChange={setRowSelection}
      pagination={pagination}
      onPaginationChange={setPagination}
      // If ManageProductsPage is doing all filtering/sorting/pagination on allProducts
      // and ProductList just displays a slice, then these should be false
      // because the `data` prop is already the "final" data for the current page.
      // TanStack Table would then only sort/filter THIS current page of data if these are false.
      // For consistency with how ManageProductsPage is now set up to leverage the table instance for filtering:
      manualPagination={true} // Parent sends paginated data
      manualSorting={true}    // Parent sends sorted data (based on table state)
      manualFiltering={true}  // Parent sends filtered data (based on table state)
    // setTable is used by ManageProductsPage for its primary table instance
    />
  );
}// END OF FILE: components/products/ProductList.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/providers/session-provider.tsx

// FILE: components/providers/session-provider.tsx
"use client";

import { SessionProvider as NextAuthSessionProvider } from "next-auth/react";
import React from "react";

interface SessionProviderProps {
  children: React.ReactNode;
  // session?: any; // Optional: Pass initial session if needed (usually not for App Router)
}

export const SessionProvider = ({ children }: SessionProviderProps) => {
  return <NextAuthSessionProvider>{children}</NextAuthSessionProvider>;
};// END OF FILE: components/providers/session-provider.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/sidebar.tsx

"use client"

import { useState } from "react"
import Link from "next/link"
import Image from "next/image";
import { usePathname } from "next/navigation"
import {
  Home, BarChart2, Building2, Users2, Briefcase, Folder, Wallet, Receipt,
  CreditCard, ShoppingCart, Calendar, Send, Star, Bell, Shield, Settings,
  MessagesSquare, Gift, HelpCircle, LogOut, Menu, SidebarClose, Users, Server,
  FileText, // Added for Invoices
  LifeBuoy, // Added for Help
  UserCog, // Added for Profile/Settings link clearer icon
  Webhook, // Added for Webhooks clearer icon
  Ticket, // Added for Reservations clearer icon
  Tag, // Added for Products clearer icon
  UsersRound, // Added for Personnel clearer icon
  Share2, // Added for Invite/Referrals clearer icon
  LayoutGrid, // Added for general Dashboard clearer icon
  FolderHeart, // Added for Favorites clearer icon
  ListChecks, // Added for Wishlist clearer icon
  CalendarClock, // Added for Planning clearer icon
  Newspaper, // Added for Posts clearer icon
  HandCoins,
  Package, // Added for Bonus clearer icon
} from "lucide-react"
import { signOut } from "next-auth/react"; // Import signOut

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from "@/components/ui/tooltip"
import { Separator } from "@/components/ui/separator"; // Import Separator

// --- Navigation Arrays (Updated based on file structure & spec) ---
const baNavigation = [
  { name: "Dashboard", href: "/business-actor/dashboard", icon: LayoutGrid },
  {
    name: "Organization", href: "/business-actor/organization", icon: Building2,
    subItems: [ // Example: Add sub-items if needed later for better organization
      { name: "Analytics", href: "/business-actor/organization?tab=analytics", icon: BarChart2 },
      { name: "Headquarter", href: "/business-actor/organization?tab=headquarter", icon: Building2 },
      { name: "Personnel", href: "/business-actor/organization?tab=personnel", icon: UsersRound },
      { name: "Agencies", href: "/business-actor/organization?tab=agencies", icon: Users2 },
      { name: "Products", href: "/business-actor/organization?tab=products", icon: Tag },
    ]
  },
  { name: "Products", href: "/business-actor/products", icon: Package }, // Product ma
  { name: "Business", href: "/business-actor/business", icon: Briefcase }, // General Business Ops
  { name: "Transactions", href: "/business-actor/transactions", icon: Receipt }, // Sales focused
  { name: "Invoices", href: "/business-actor/invoices", icon: FileText },
  { name: "Reservations", href: "/business-actor/reservations", icon: Ticket },
  { name: "Payments", href: "/business-actor/payments", icon: CreditCard },
  { name: "Subscription", href: "/business-actor/subscription", icon: Star }, // Pricing Plan/Usage/Limits
  { name: "Wallet", href: "/business-actor/wallet", icon: Wallet }, // Portefeuille
  { name: "Bonus Config", href: "/business-actor/bonus", icon: HandCoins },
  { name: "Webhooks", href: "/business-actor/webhooks", icon: Webhook },
  { name: "Wishlist", href: "/business-actor/wishlist", icon: ListChecks },
  { name: "Planning", href: "/business-actor/planning", icon: CalendarClock },
  { name: "Posts", href: "/business-actor/posts", icon: Newspaper },
  { name: "Chat", href: "/business-actor/chat", icon: MessagesSquare },
  { name: "Referrals", href: "/business-actor/referrals", icon: Share2 },
  { name: "Reviews", href: "/business-actor/reviews", icon: Star },
];

const customerNavigation = [
  { name: "Dashboard", href: "/customer/dashboard", icon: LayoutGrid },
  { name: "Services", href: "/customer/services", icon: Briefcase }, // Announcements/Offers & Transactions/Wishlist
  { name: "Invoices", href: "/customer/invoices", icon: FileText },
  { name: "My Bonus", href: "/customer/bonus", icon: HandCoins },
  { name: "Favorites", href: "/customer/favorites", icon: FolderHeart },
  { name: "Invite Friends", href: "/customer/invite", icon: Share2 }, // Referrals page
  { name: "Chat", href: "/customer/chat", icon: MessagesSquare },
];

const superAdminNavigation = [
  { name: "Dashboard", href: "/super-admin/dashboard", icon: LayoutGrid },
  { name: "Platforms", href: "/super-admin/platforms", icon: Server },
  { name: "Business Actors", href: "/super-admin/business-actors", icon: Building2 }, // Changed icon
  { name: "Customers", href: "/super-admin/customers", icon: Users },
  { name: "Webhooks Config", href: "/super-admin/webhooks", icon: Webhook },
  { name: "Bonus Overview", href: "/super-admin/bonus", icon: HandCoins },
  { name: "Admin Comm.", href: "/super-admin/chat", icon: MessagesSquare }, // Renamed for clarity
  // Super Admin Profile/Settings handled by bottom nav
];

// --- Bottom Navigation (Common) ---
const bottomNavigation = [
  { name: "Help & Support", href: "/help", icon: LifeBuoy }, // Example: Shared help page
  { name: "Settings", href: "/settings", icon: Settings }, // Shared settings page link
];

export function Sidebar() {
  const pathname = usePathname();
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isMobileOpen, setIsMobileOpen] = useState(false);

  // --- Role Determination Logic ---
  let userRole = 'business-actor'; // Default assumption
  let sidebarTitle = "BA Workspace";
  let logoSrc = "/logo.svg"; // Consider making this dynamic based on role/org if needed
  let currentNavigation = baNavigation;
  let settingsHrefPrefix = "/business-actor"; // Base path for role-specific pages

  if (pathname.startsWith('/customer')) {
    userRole = 'customer';
    sidebarTitle = "My Account";
    currentNavigation = customerNavigation;
    settingsHrefPrefix = "/customer";
  } else if (pathname.startsWith('/super-admin')) {
    userRole = 'super-admin';
    sidebarTitle = "Platform Admin";
    currentNavigation = superAdminNavigation;
    settingsHrefPrefix = "/super-admin";
  } else if (pathname.startsWith('/business-actor')) {
    userRole = 'business-actor';
    sidebarTitle = "BA Workspace";
    currentNavigation = baNavigation;
    settingsHrefPrefix = "/business-actor";
  } else {
    // Handle cases like /settings, /help, or unexpected paths
    // Try to infer from the last known good path or use a default
    // This part might need refinement based on how shared pages are handled
    const segments = pathname.split('/').filter(Boolean);
    if (segments.length > 0 && ['settings', 'help'].includes(segments[0])) {
      // If on a shared page, try to guess the role from referer or session? Or keep previous role?
      // For now, let's default to BA if path is ambiguous but not auth/landing
      userRole = 'business-actor';
      sidebarTitle = "BA Workspace";
      currentNavigation = baNavigation;
      settingsHrefPrefix = "/business-actor";
      console.warn("Sidebar: Ambiguous path, defaulting role display to Business Actor.");
    }
  }
  // --- End Role Determination ---

  // --- Logout Handler ---
  const handleLogout = async () => {
    await signOut({ callbackUrl: '/login' }); // Redirect to login after sign out
  };
  // --- End Logout Handler ---


  // --- NavItem Component ---
  type NavItemProps = {
    item: {
      name: string;
      href: string;
      icon: React.ComponentType<{ className?: string }>;
    };
    isBottom?: boolean;
  };

  const NavItem = ({ item, isBottom = false }: NavItemProps) => {
    let href = item.href;

    // Adjust href based on context (bottom nav vs main nav)
    // Assumption: Settings is now a shared page at /settings
    // Assumption: Help is now a shared page at /help
    if (isBottom && (item.name === "Settings" || item.name === "Help & Support")) {
      // Keep the direct path for shared pages
      href = item.href;
    } else if (!isBottom) {
      // Main navigation items use the auto-detected prefix from their definition
      href = item.href; // Href should already include the role prefix
    }
    // else: Handle potential future role-specific bottom links if needed

    const isActive = pathname === href || pathname.startsWith(href + '/') || (item.href !== '/' && pathname.startsWith(item.href + '?')); // Improved active check

    return (
      <Tooltip delayDuration={0}>
        <TooltipTrigger asChild>
          <Link
            href={href}
            className={cn(
              "flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors h-9", // Consistent height
              isActive
                ? "bg-sidebar-accent text-sidebar-accent-foreground"
                : "text-sidebar-foreground hover:bg-sidebar-accent/80 hover:text-sidebar-accent-foreground", // Subtle hover
              isCollapsed && "justify-center px-2",
            )}
            onClick={() => isMobileOpen && setIsMobileOpen(false)}
          >
            <item.icon className={cn("h-[18px] w-[18px] shrink-0", !isCollapsed && "mr-3")} /> {/* Slightly adjusted icon size */}
            {!isCollapsed && <span className="truncate">{item.name}</span>}
          </Link>
        </TooltipTrigger>
        {isCollapsed && (
          <TooltipContent side="right" className="flex items-center gap-4">
            {item.name}
          </TooltipContent>
        )}
      </Tooltip>
    );
  };
  // --- End NavItem Component ---

  return (
    <TooltipProvider>
      <>
        {/* Mobile Menu Toggle */}
        <Button
          variant="outline"
          size="icon"
          className="lg:hidden fixed top-4 left-4 z-[60] rounded-md shadow-md bg-background/80 backdrop-blur-sm" // Ensure high z-index
          onClick={() => setIsMobileOpen(!isMobileOpen)}
          aria-label="Toggle sidebar"
        >
          <Menu className="h-5 w-5" />
        </Button>

        {/* Sidebar Container */}
        <div
          className={cn(
            "fixed inset-y-0 left-0 z-50 flex h-full flex-col border-r border-sidebar-border bg-sidebar text-sidebar-foreground transition-all duration-300 ease-in-out lg:sticky lg:top-0 lg:h-screen",
            isCollapsed ? "w-[72px]" : "w-64", // Slightly narrower width when expanded
            isMobileOpen ? "translate-x-0 shadow-xl" : "-translate-x-full lg:translate-x-0",
          )}
          data-collapsed={isCollapsed}
        >
          {/* Sidebar Header */}
          <div className={cn(
            "flex h-16 shrink-0 items-center border-b border-sidebar-border",
            isCollapsed ? "justify-center px-2" : "justify-between px-4"
          )}>
            <Link
              href={`${settingsHrefPrefix}/dashboard`} // Links to role-specific dashboard
              className={cn("flex items-center gap-2 font-semibold")}
              onClick={() => isMobileOpen && setIsMobileOpen(false)}
              aria-label={sidebarTitle}
            >
              <Image
                src={logoSrc}
                alt={`${sidebarTitle} Logo`}
                width={32}
                height={32}
                className="h-8 w-8 shrink-0"
                priority
              />
              {!isCollapsed && (
                <span className="text-lg truncate">{sidebarTitle}</span>
              )}
            </Link>

            {/* Desktop Collapse/Expand Button */}
            <Button
              variant="ghost"
              size="icon"
              className={cn("hidden h-8 w-8 lg:flex", isCollapsed ? "" : "ml-auto")}
              onClick={() => setIsCollapsed(!isCollapsed)}
              aria-label={isCollapsed ? "Expand Sidebar" : "Collapse Sidebar"}
            >
              <SidebarClose className={cn("h-4 w-4 transition-transform", isCollapsed && "rotate-180")} />
            </Button>

            {/* Mobile Close Button */}
            {isMobileOpen && (
              <Button
                variant="ghost"
                size="icon"
                className="ml-auto h-8 w-8 lg:hidden"
                onClick={() => setIsMobileOpen(false)}
                aria-label="Close Sidebar"
              >
                <SidebarClose className="h-4 w-4" />
              </Button>
            )}
          </div>

          {/* Main Navigation Area */}
          <div className="flex flex-1 flex-col overflow-y-auto overflow-x-hidden">
            <nav className={cn("flex-1 space-y-1 py-4", isCollapsed ? "px-2" : "px-4")}>
              {currentNavigation.map((item) => (
                <NavItem key={item.name} item={item} />
              ))}
            </nav>

            {/* Bottom Navigation Area */}
            <div className={cn("mt-auto border-t border-sidebar-border", isCollapsed ? "px-2" : "px-4")}>
              {/* <Separator className={cn("my-2", isCollapsed ? "-mx-2" : "-mx-4")} /> Visual separator */}
              <div className="space-y-1 py-4">
                {bottomNavigation.map((item) => (
                  // Use the correct settingsHrefPrefix for Settings link
                  <NavItem key={item.name} item={{ ...item, href: item.name === 'Settings' ? `${settingsHrefPrefix}/settings` : item.href }} isBottom />
                ))}
                {/* Logout Button */}
                <Tooltip delayDuration={0}>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost" // Use ghost variant for less emphasis
                      className={cn(
                        "flex items-center w-full rounded-md px-3 py-2 text-sm font-medium transition-colors h-9",
                        "text-sidebar-foreground hover:bg-destructive/10 hover:text-destructive", // Destructive hover
                        isCollapsed ? "justify-center px-2" : "justify-start",
                      )}
                      onClick={() => {
                        handleLogout();
                        if (isMobileOpen) setIsMobileOpen(false);
                      }}
                    >
                      <LogOut className={cn("h-[18px] w-[18px] shrink-0", !isCollapsed && "mr-3")} />
                      {!isCollapsed && <span className="truncate">Logout</span>}
                    </Button>
                  </TooltipTrigger>
                  {isCollapsed && (
                    <TooltipContent side="right" className="flex items-center gap-4">
                      Logout
                    </TooltipContent>
                  )}
                </Tooltip>
              </div>
            </div>
          </div>
        </div>

        {/* Overlay for mobile */}
        {isMobileOpen && (
          <div
            className="fixed inset-0 z-40 bg-black/50 lg:hidden" // Ensure z-index is below sidebar but above content
            aria-hidden="true"
            onClick={() => setIsMobileOpen(false)}
          />
        )}
      </>
    </TooltipProvider>
  );
}// END OF FILE: components/sidebar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/theme-toggle.tsx

"use client"

import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { useState, useEffect } from "react"

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()
  const [mounted, setMounted] = useState(false)

  // Ensure component only renders after mounting on client
  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null // or a placeholder
  }

  return (
    <button
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      className="p-2 rounded-md bg-gray-200 dark:bg-gray-700 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
    >
      {theme === "dark" ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
    </button>
  )
}// END OF FILE: components/theme-toggle.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/top-nav.tsx

"use client"

import React from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { Home } from "lucide-react"; // Removed Settings icon import as it's less relevant here now
import { signOut } from "next-auth/react";

import { Notifications } from "./notifications";
import { ModeToggle } from "./mode-toggle";
import { UserNav } from "./user-nav"; // UserNav now takes only onLogout
import { RoleSwitcher } from "./dev/role-switcher";
import { cn } from "@/lib/utils";

// Helper function (keep as is)
function formatBreadcrumbSegment(segment: string): string {
  if (!segment) return "";
  if (segment === 'super-admin') return 'Super Admin';
  if (segment === 'business-actor') return 'Business Actor';
  return segment
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

type Role = "business-actor" | "customer" | "super-admin";

export function TopNav() {
  const pathname = usePathname();

  // --- Breadcrumb and Role Logic (Still needed for breadcrumbs/home link) ---
  const pathSegments = pathname.split('/').filter(Boolean);
  let currentRole: Role | null = null;
  let homeHref = "/";

  if (pathSegments.length > 0) {
      const firstSegment = pathSegments[0] as Role;
      if (['business-actor', 'customer', 'super-admin'].includes(firstSegment)) {
          currentRole = firstSegment;
          homeHref = `/${firstSegment}/dashboard`;
          // settingsHrefPrefix is no longer needed for UserNav
      } else if (['settings', 'help'].includes(firstSegment)) {
           homeHref = "/"; // Default home for shared pages
      }
  }

  const displaySegments = pathSegments.filter((segment, index) => {
      if (index === 0 && currentRole) return false;
      if (segment === 'dashboard') return false;
      return true;
  });
  // --- End Breadcrumb and Role Logic ---

  // --- Logout Handler ---
   const handleLogout = async () => {
      await signOut({ callbackUrl: '/login' });
   };
  // --- End Logout Handler ---

  return (
    <header className="sticky top-0 z-30 border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="flex h-16 items-center justify-between px-4 sm:px-6 lg:px-8">

        {/* Left Side: Breadcrumbs (No changes needed here) */}
        <div className="hidden items-center gap-1.5 text-sm md:flex flex-wrap mr-4">
          <Link href={homeHref} className="flex items-center gap-1.5 text-muted-foreground hover:text-foreground transition-colors flex-shrink-0">
            <Home className="h-4 w-4" />
            {displaySegments.length === 0 && currentRole && (
              <span className="font-medium text-foreground">{formatBreadcrumbSegment(currentRole)}</span>
            )}
             {displaySegments.length === 0 && !currentRole && (
               <span className="font-medium text-foreground">Home</span>
             )}
          </Link>
          {(displaySegments.length > 0 || (displaySegments.length === 0 && currentRole)) && <span className="text-muted-foreground">/</span>}
          {displaySegments.map((segment, index) => {
            const pathSoFar = currentRole ? [currentRole, ...displaySegments.slice(0, index + 1)] : displaySegments.slice(0, index + 1);
            const href = `/${pathSoFar.join("/")}`;
            const isLast = index === displaySegments.length - 1;
            return (
              <React.Fragment key={segment}>
                {isLast ? (
                  <span className="font-medium text-foreground truncate max-w-[200px]" title={formatBreadcrumbSegment(segment)}>
                    {formatBreadcrumbSegment(segment)}
                  </span>
                ) : (
                  <Link
                    href={href}
                    className="text-muted-foreground hover:text-foreground transition-colors truncate max-w-[150px]"
                     title={formatBreadcrumbSegment(segment)}
                  >
                    {formatBreadcrumbSegment(segment)}
                  </Link>
                )}
                {!isLast && <span className="text-muted-foreground mx-1">/</span>}
              </React.Fragment>
            )
          })}
        </div>

        {/* Mobile Title (No changes needed here) */}
        <div className="md:hidden">
          <span className="text-sm font-medium">
            {displaySegments.length > 0
              ? formatBreadcrumbSegment(displaySegments[displaySegments.length - 1])
              : (currentRole ? formatBreadcrumbSegment(currentRole) : "Menu")
            }
          </span>
        </div>

        {/* Right Side: Actions */}
        <div className="flex items-center gap-x-3 sm:gap-x-4">
          <RoleSwitcher currentRole={currentRole} />
          <Notifications />
          <ModeToggle />
          {/* Updated UserNav call - no longer passing settingsHrefPrefix */}
          <UserNav onLogout={handleLogout} />
        </div>
      </div>
    </header>
  );
}// END OF FILE: components/top-nav.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/accordion.tsx

"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />
}

function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props}
    />
  )
}

function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180",
          className
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
}

function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn("pt-0 pb-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
// END OF FILE: components/ui/accordion.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/alert.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }
// END OF FILE: components/ui/alert.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/avatar.tsx

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }
// END OF FILE: components/ui/avatar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/badge.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }
// END OF FILE: components/ui/badge.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/button.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
// END OF FILE: components/ui/button.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/calendar.tsx

"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: React.ComponentProps<typeof DayPicker>) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row gap-2",
        month: "flex flex-col gap-4",
        caption: "flex justify-center pt-1 relative items-center w-full",
        caption_label: "text-sm font-medium",
        nav: "flex items-center gap-1",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "size-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-x-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "size-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start:
          "day-range-start aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_range_end:
          "day-range-end aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("size-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("size-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}

export { Calendar }
// END OF FILE: components/ui/calendar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/card.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
// END OF FILE: components/ui/card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/checkbox.tsx

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }
// END OF FILE: components/ui/checkbox.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/command.tsx

"use client"

import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props}
    />
  )
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  )
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
// END OF FILE: components/ui/command.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table-column-header.tsx

"use client";

import { Column } from "@tanstack/react-table";
import { ArrowDownIcon, ArrowUpIcon, ChevronsUpDownIcon, EyeOffIcon } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface DataTableColumnHeaderProps<TData, TValue>
  extends React.HTMLAttributes<HTMLDivElement> {
  column: Column<TData, TValue>;
  title: string;
}

export function DataTableColumnHeader<TData, TValue>({
  column,
  title,
  className,
}: DataTableColumnHeaderProps<TData, TValue>) {
  if (!column.getCanSort() && !column.getCanHide()) {
    return <div className={cn(className)}>{title}</div>;
  }

  return (
    <div className={cn("flex items-center space-x-2", className)}>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            size="sm"
            className="-ml-3 h-8 data-[state=open]:bg-accent"
          >
            <span>{title}</span>
            {column.getCanSort() && column.getIsSorted() === "desc" ? (
              <ArrowDownIcon className="ml-2 h-4 w-4" />
            ) : column.getCanSort() && column.getIsSorted() === "asc" ? (
              <ArrowUpIcon className="ml-2 h-4 w-4" />
            ) : column.getCanSort() ? (
              <ChevronsUpDownIcon className="ml-2 h-4 w-4" />
            ) : null}
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="start">
          {column.getCanSort() && (
            <>
              <DropdownMenuItem onClick={() => column.toggleSorting(false)}>
                <ArrowUpIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Asc
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => column.toggleSorting(true)}>
                <ArrowDownIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Desc
              </DropdownMenuItem>
            </>
          )}
          {column.getCanSort() && column.getCanHide() && <DropdownMenuSeparator />}
          {column.getCanHide() && (
            <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>
              <EyeOffIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
              Hide
            </DropdownMenuItem>
          )}
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
}// END OF FILE: components/ui/data-table-column-header.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table-faceted-filter.tsx

"use client";

import * as React from "react";
import { Column } from "@tanstack/react-table";
import { CheckIcon, PlusCircledIcon } from "@radix-ui/react-icons"; // Or use Lucide icons

import { cn } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Separator } from "@/components/ui/separator";

interface DataTableFacetedFilterProps<TData, TValue> {
  column?: Column<TData, TValue>;
  title?: string;
  options: {
    label: string;
    value: string;
    icon?: React.ComponentType<{ className?: string }>;
  }[];
}

export function DataTableFacetedFilter<TData, TValue>({
  column,
  title,
  options,
}: DataTableFacetedFilterProps<TData, TValue>) {
  const facets = column?.getFacetedUniqueValues();
  const selectedValues = new Set(column?.getFilterValue() as string[]);

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="sm" className="h-9 border-dashed">
          <PlusCircledIcon className="mr-2 h-4 w-4" /> {/* Lucide: FilterIcon or ListFilter */}
          {title}
          {selectedValues?.size > 0 && (
            <>
              <Separator orientation="vertical" className="mx-2 h-4" />
              <Badge
                variant="secondary"
                className="rounded-sm px-1 font-normal lg:hidden"
              >
                {selectedValues.size}
              </Badge>
              <div className="hidden space-x-1 lg:flex">
                {selectedValues.size > 2 ? (
                  <Badge
                    variant="secondary"
                    className="rounded-sm px-1 font-normal"
                  >
                    {selectedValues.size} selected
                  </Badge>
                ) : (
                  options
                    .filter((option) => selectedValues.has(option.value))
                    .map((option) => (
                      <Badge
                        variant="secondary"
                        key={option.value}
                        className="rounded-sm px-1 font-normal"
                      >
                        {option.label}
                      </Badge>
                    ))
                )}
              </div>
            </>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[200px] p-0" align="start">
        <Command>
          <CommandInput placeholder={title} />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>
            <CommandGroup>
              {options.map((option) => {
                const isSelected = selectedValues.has(option.value);
                return (
                  <CommandItem
                    key={option.value}
                    onSelect={() => {
                      if (isSelected) {
                        selectedValues.delete(option.value);
                      } else {
                        selectedValues.add(option.value);
                      }
                      const filterValues = Array.from(selectedValues);
                      column?.setFilterValue(
                        filterValues.length ? filterValues : undefined
                      );
                    }}
                  >
                    <div
                      className={cn(
                        "mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary",
                        isSelected
                          ? "bg-primary text-primary-foreground"
                          : "opacity-50 [&_svg]:invisible"
                      )}
                    >
                      <CheckIcon className={cn("h-4 w-4")} />
                    </div>
                    {option.icon && (
                      <option.icon className="mr-2 h-4 w-4 text-muted-foreground" />
                    )}
                    <span>{option.label}</span>
                    {facets?.get(option.value) && (
                      <span className="ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs">
                        {facets.get(option.value)}
                      </span>
                    )}
                  </CommandItem>
                );
              })}
            </CommandGroup>
            {selectedValues.size > 0 && (
              <>
                <CommandSeparator />
                <CommandGroup>
                  <CommandItem
                    onSelect={() => column?.setFilterValue(undefined)}
                    className="justify-center text-center"
                  >
                    Clear filters
                  </CommandItem>
                </CommandGroup>
              </>
            )}
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}// END OF FILE: components/ui/data-table-faceted-filter.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table-pagination.tsx

"use client"

import {
  ChevronLeftIcon,
  ChevronRightIcon,
  DoubleArrowLeftIcon,
  DoubleArrowRightIcon,
} from "@radix-ui/react-icons" // Using Radix icons as per shadcn example
import { Table } from "@tanstack/react-table"

import { Button } from "@/components/ui/button"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"

interface DataTablePaginationProps<TData> {
  table: Table<TData>
}

export function DataTablePagination<TData>({
  table,
}: DataTablePaginationProps<TData>) {
  return (
    <div className="flex items-center justify-between px-2 py-4 border-t">
      <div className="flex-1 text-sm text-muted-foreground">
        {table.getFilteredSelectedRowModel().rows.length} of{" "}
        {table.getFilteredRowModel().rows.length} row(s) selected.
      </div>
      <div className="flex items-center space-x-6 lg:space-x-8">
        <div className="flex items-center space-x-2">
          <p className="text-sm font-medium">Rows per page</p>
          <Select
            value={`${table.getState().pagination.pageSize}`}
            onValueChange={(value) => {
              table.setPageSize(Number(value))
            }}
          >
            <SelectTrigger className="h-8 w-[70px]">
              <SelectValue placeholder={table.getState().pagination.pageSize} />
            </SelectTrigger>
            <SelectContent side="top">
              {[10, 20, 30, 40, 50].map((pageSize) => (
                <SelectItem key={pageSize} value={`${pageSize}`}>
                  {pageSize}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="flex w-[100px] items-center justify-center text-sm font-medium">
          Page {table.getState().pagination.pageIndex + 1} of{" "}
          {table.getPageCount()}
        </div>
        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(0)}
            disabled={!table.getCanPreviousPage()}
          >
            <span className="sr-only">Go to first page</span>
            <DoubleArrowLeftIcon className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            className="h-8 w-8 p-0"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            <span className="sr-only">Go to previous page</span>
            <ChevronLeftIcon className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            className="h-8 w-8 p-0"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            <span className="sr-only">Go to next page</span>
            <ChevronRightIcon className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(table.getPageCount() - 1)}
            disabled={!table.getCanNextPage()}
          >
            <span className="sr-only">Go to last page</span>
            <DoubleArrowRightIcon className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  )
}// END OF FILE: components/ui/data-table-pagination.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table.tsx

"use client";

import * as React from "react";
import {
  ColumnDef, ColumnFiltersState, SortingState, VisibilityState,
  flexRender, getCoreRowModel, getFacetedRowModel, getFacetedUniqueValues,
  getFilteredRowModel, getPaginationRowModel, getSortedRowModel,
  useReactTable, Table as TanstackTable, PaginationState, RowSelectionState,
  GlobalFilterTableState, // Import this
} from "@tanstack/react-table";

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

export interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[];
  data: TData[];
  pageCount?: number;

  sorting?: SortingState;
  onSortingChange?: React.Dispatch<React.SetStateAction<SortingState>>;
  columnFilters?: ColumnFiltersState;
  onColumnFiltersChange?: React.Dispatch<React.SetStateAction<ColumnFiltersState>>;
  globalFilter?: string; // Add globalFilter prop
  onGlobalFilterChange?: React.Dispatch<React.SetStateAction<string>>; // Add globalFilter setter
  columnVisibility?: VisibilityState;
  onColumnVisibilityChange?: React.Dispatch<React.SetStateAction<VisibilityState>>;
  rowSelection?: RowSelectionState;
  onRowSelectionChange?: React.Dispatch<React.SetStateAction<RowSelectionState>>;
  pagination?: PaginationState;
  onPaginationChange?: React.Dispatch<React.SetStateAction<PaginationState>>;

  manualPagination?: boolean; manualSorting?: boolean; manualFiltering?: boolean;
  setTable?: (table: TanstackTable<TData>) => void;
}

export function DataTable<TData, TValue>({
  columns, data, pageCount,
  sorting: controlledSorting, onSortingChange,
  columnFilters: controlledColumnFilters, onColumnFiltersChange,
  globalFilter: controlledGlobalFilter, onGlobalFilterChange, // Destructure global filter
  columnVisibility: controlledColumnVisibility, onColumnVisibilityChange,
  rowSelection: controlledRowSelection, onRowSelectionChange,
  pagination: controlledPagination, onPaginationChange,
  manualPagination = false, manualSorting = false, manualFiltering = false,
  setTable: setParentTableInstance,
}: DataTableProps<TData, TValue>) {
  const [internalSorting, setInternalSorting] = React.useState<SortingState>([]);
  const [internalColumnFilters, setInternalColumnFilters] = React.useState<ColumnFiltersState>([]);
  const [internalGlobalFilter, setInternalGlobalFilter] = React.useState<string>(''); // Internal global filter
  const [internalColumnVisibility, setInternalColumnVisibility] = React.useState<VisibilityState>({});
  const [internalRowSelection, setInternalRowSelection] = React.useState<RowSelectionState>({});
  const [internalPagination, setInternalPagination] = React.useState<PaginationState>({ pageIndex: 0, pageSize: 10 });

  const sorting = controlledSorting ?? internalSorting;
  const setSorting = onSortingChange ?? setInternalSorting;
  const columnFilters = controlledColumnFilters ?? internalColumnFilters;
  const setColumnFilters = onColumnFiltersChange ?? setInternalColumnFilters;
  const globalFilter = controlledGlobalFilter ?? internalGlobalFilter; // Use controlled or internal global filter
  const setGlobalFilter = onGlobalFilterChange ?? setInternalGlobalFilter; // Use controlled or internal setter
  const columnVisibility = controlledColumnVisibility ?? internalColumnVisibility;
  const setColumnVisibility = onColumnVisibilityChange ?? setInternalColumnVisibility;
  const rowSelection = controlledRowSelection ?? internalRowSelection;
  const setRowSelection = onRowSelectionChange ?? setInternalRowSelection;
  const pagination = controlledPagination ?? internalPagination;
  const setPagination = onPaginationChange ?? setInternalPagination;

  const table = useReactTable({
    data, columns, pageCount: pageCount ?? -1,
    state: {
      sorting, columnVisibility, rowSelection, columnFilters, pagination,
      globalFilter, // Pass globalFilter to table state
    },
    enableRowSelection: true,
    onRowSelectionChange: setRowSelection,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onGlobalFilterChange: setGlobalFilter, // Handle global filter changes
    onColumnVisibilityChange: setColumnVisibility,
    onPaginationChange: setPagination,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(), // Enables global filtering
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFacetedRowModel: getFacetedRowModel(),
    getFacetedUniqueValues: getFacetedUniqueValues(),
    manualPagination, manualSorting, manualFiltering,
  });

  React.useEffect(() => { if (setParentTableInstance) setParentTableInstance(table); }, [table, setParentTableInstance]);

  return ( /* ... Table JSX (no changes needed here) ... */
    <div className="w-full space-y-0">
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id} colSpan={header.colSpan}
                    style={{ width: header.getSize() !== 150 ? header.getSize() : undefined }}
                  >
                    {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow key={row.id} data-state={row.getIsSelected() && "selected"}>
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id} style={{ width: cell.column.getSize() !== 150 ? cell.column.getSize() : undefined }}>
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={table.getAllColumns().length} className="h-24 text-center">
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}// END OF FILE: components/ui/data-table.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/dialog.tsx

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
// END OF FILE: components/ui/dialog.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/dropdown-menu.tsx

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}
// END OF FILE: components/ui/dropdown-menu.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/form.tsx

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
// END OF FILE: components/ui/form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/image-placeholder.tsx

import React from 'react';
import { Image as ImageIcon, Package, Combine } from 'lucide-react'; // Or any other generic icon
import { cn } from '@/lib/utils';

interface ImagePlaceholderProps {
  iconType?: 'resource' | 'service' | 'generic';
  className?: string;
  iconClassName?: string;
}

export function ImagePlaceholder({
  iconType = 'generic',
  className,
  iconClassName,
}: ImagePlaceholderProps) {
  let IconComponent;
  switch (iconType) {
    case 'resource':
      IconComponent = Package;
      break;
    case 'service':
      IconComponent = Combine;
      break;
    default:
      IconComponent = ImageIcon;
  }

  return (
    <div
      className={cn(
        "flex h-full w-full items-center justify-center rounded-md bg-muted aspect-square",
        className
      )}
    >
      <IconComponent
        className={cn("h-1/2 w-1/2 text-muted-foreground/50", iconClassName)}
        strokeWidth={1.5}
      />
    </div>
  );
}// END OF FILE: components/ui/image-placeholder.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/input.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }
// END OF FILE: components/ui/input.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/label.tsx

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }
// END OF FILE: components/ui/label.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/popover.tsx

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
// END OF FILE: components/ui/popover.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/progress.tsx

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }
// END OF FILE: components/ui/progress.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/radio-group.tsx

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn("grid gap-3", className)}
      {...props}
    />
  )
}

function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        "border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <CircleIcon className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
}

export { RadioGroup, RadioGroupItem }
// END OF FILE: components/ui/radio-group.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/scroll-area.tsx

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }
// END OF FILE: components/ui/scroll-area.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/select.tsx

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
// END OF FILE: components/ui/select.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/separator.tsx

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }
// END OF FILE: components/ui/separator.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/skeleton.tsx

import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }
// END OF FILE: components/ui/skeleton.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/slider.tsx

"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }
// END OF FILE: components/ui/slider.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/sonner.tsx

"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  )
}

export { Toaster }
// END OF FILE: components/ui/sonner.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/switch.tsx

"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }
// END OF FILE: components/ui/switch.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/table.tsx

"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
// END OF FILE: components/ui/table.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/tabs.tsx

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }
// END OF FILE: components/ui/tabs.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/textarea.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }
// END OF FILE: components/ui/textarea.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/tooltip.tsx

"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
// END OF FILE: components/ui/tooltip.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/user-nav.tsx

"use client"

// Removed Link and specific icons like SettingsIcon, User, CreditCard, HelpCircle
import { LogOut } from "lucide-react"
import { useSettings } from "@/contexts/settings-context"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

interface UserNavProps {
  // Removed settingsHrefPrefix as it's no longer needed here
  /** Callback function to execute on logout */
  onLogout: () => void
}

// Updated props to only include onLogout
export function UserNav({ onLogout }: UserNavProps) {
  const { settings } = useSettings()

  // Simple fallback for avatar initials
  const avatarFallback = settings.fullName
    ? settings.fullName
      .split(" ")
      .map((n) => n[0])
      .join("")
      .toUpperCase()
    : "U"

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-9 w-9 rounded-full">
          <Avatar className="h-8 w-8">
            <AvatarImage src={settings.avatar} alt={settings.fullName || "User Avatar"} />
            <AvatarFallback>{avatarFallback}</AvatarFallback>
          </Avatar>
          <span className="sr-only">Open user menu</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56" align="end" forceMount>
        {/* Display User Info */}
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{settings.fullName || "User"}</p>
            <p className="text-xs leading-none text-muted-foreground">
              {settings.email || "No email provided"}
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        {/* REMOVED DropdownMenuGroup with Profile, Billing, Settings, Help links */}
        {/* Logout Item */}
        <DropdownMenuItem onClick={onLogout} className="cursor-pointer text-destructive focus:bg-destructive/10 focus:text-destructive">
          <LogOut className="mr-2 h-4 w-4" />
          <span>Log out</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}// END OF FILE: components/user-nav.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/contexts/settings-context.tsx

"use client"

import { createContext, useContext, useEffect, useState } from "react"

export interface UserSettings {
  avatar: string
  fullName: string
  email: string
  phone: string
  timezone: string
  language: string
  currency: string
  dateFormat: string
  fontSize: number
  theme: "light" | "dark" | "system"
  layout: "default" | "compact" | "expanded"
  notifications: {
    email: boolean
    push: boolean
    sms: boolean
    accountActivity: boolean
    newFeatures: boolean
    marketing: boolean
    frequency: "real-time" | "daily" | "weekly"
    quietHoursStart: string
    quietHoursEnd: string
  }
  privacy: {
    analyticsSharing: boolean
    personalizedAds: boolean
    visibility: "public" | "private"
    dataRetention: "6-months" | "1-year" | "2-years" | "indefinite"
  }
}

const defaultSettings: UserSettings = {
  avatar: "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/38184074.jpg-M4vCjTSSWVw5RwWvvmrxXBcNVU8MBU.jpeg",
  fullName: "Dollar Singh",
  email: "dollar.singh@example.com",
  phone: "+1 (555) 123-4567",
  timezone: "utc-8",
  language: "en",
  currency: "usd",
  dateFormat: "mm-dd-yyyy",
  fontSize: 16,
  theme: "system",
  layout: "default",
  notifications: {
    email: true,
    push: true,
    sms: false,
    accountActivity: true,
    newFeatures: true,
    marketing: false,
    frequency: "real-time",
    quietHoursStart: "22:00",
    quietHoursEnd: "07:00",
  },
  privacy: {
    analyticsSharing: true,
    personalizedAds: false,
    visibility: "public",
    dataRetention: "1-year",
  },
}

interface SettingsContextType {
  settings: UserSettings
  updateSettings: (newSettings: Partial<UserSettings>) => void
  updateNotificationSettings: (settings: Partial<UserSettings["notifications"]>) => void
  updatePrivacySettings: (settings: Partial<UserSettings["privacy"]>) => void
}

const SettingsContext = createContext<SettingsContextType | undefined>(undefined)

export function SettingsProvider({ children }: { children: React.ReactNode }) {
  const [settings, setSettings] = useState<UserSettings>(() => {
    // Try to load settings from localStorage during initialization
    if (typeof window !== "undefined") {
      const savedSettings = localStorage.getItem("userSettings")
      if (savedSettings) {
        return JSON.parse(savedSettings)
      }
    }
    return defaultSettings
  })

  // Save settings to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem("userSettings", JSON.stringify(settings))
  }, [settings])

  const updateSettings = (newSettings: Partial<UserSettings>) => {
    setSettings((prev) => ({ ...prev, ...newSettings }))
  }

  const updateNotificationSettings = (notificationSettings: Partial<UserSettings["notifications"]>) => {
    setSettings((prev) => ({
      ...prev,
      notifications: { ...prev.notifications, ...notificationSettings },
    }))
  }

  const updatePrivacySettings = (privacySettings: Partial<UserSettings["privacy"]>) => {
    setSettings((prev) => ({
      ...prev,
      privacy: { ...prev.privacy, ...privacySettings },
    }))
  }

  return (
    <SettingsContext.Provider
      value={{
        settings,
        updateSettings,
        updateNotificationSettings,
        updatePrivacySettings,
      }}
    >
      {children}
    </SettingsContext.Provider>
  )
}

export function useSettings() {
  const context = useContext(SettingsContext)
  if (context === undefined) {
    throw new Error("useSettings must be used within a SettingsProvider")
  }
  return context
}

// END OF FILE: contexts/settings-context.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/.env.local

# .env.local

# Generate a strong secret: openssl rand -base64 32
NEXTAUTH_SECRET=i7Cuf9Io7Y6p0gmI1l6FdUo/WDfrqKCFAq+iWhR2Jo=

# The base URL of your application
NEXTAUTH_URL=http://localhost:3000 # Change for production

NEXT_PUBLIC_API_BASE_URL=http://your-backend-domain.com/api // END OF FILE: .env.local

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/eslint.config.mjs

import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
// END OF FILE: eslint.config.mjs

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/.gitignore

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
// END OF FILE: .gitignore

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/hooks/use-mouse-position.ts

// hooks/use-mouse-position.ts
import { useState, useEffect } from 'react';

export function useMousePosition() {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

  useEffect(() => {
    const updateMousePosition = (ev: MouseEvent) => {
      setMousePosition({ x: ev.clientX, y: ev.clientY });
    };
    window.addEventListener('mousemove', updateMousePosition);
    return () => {
      window.removeEventListener('mousemove', updateMousePosition);
    };
  }, []);

  return mousePosition;
}// END OF FILE: hooks/use-mouse-position.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/apiClient.ts

import { getSession } from "next-auth/react";
import { toast } from "sonner"; // For displaying user-friendly error messages

// Define the shape of a generic API error response from your backend
interface ApiErrorResponse {
  timestamp?: string;
  status?: number;
  error?: string;
  message?: string; // This is often the most user-friendly part
  path?: string;
  // Add any other common error fields your backend might return
}

// 1. API Base URL - Should be configured in your .env.local or .env file
const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || "http://localhost:8080"; // Default if not set

// Helper to construct full API URLs
const getApiUrl = (path: string) => `${API_BASE_URL}${path}`;

// 2. Function to get authentication token
async function getAuthToken(): Promise<string | null> {
  const session = await getSession();
  // Assuming your JWT is stored in session.accessToken or similar
  // Adjust this based on how your NextAuth session is structured
  if (session && (session as any).accessToken) {
    return (session as any).accessToken;
  }
  if (session && (session as any).jwt) { // Common alternative
    return (session as any).jwt;
  }
  // If using a different token structure in your session, adapt here
  // console.warn("No access token found in session for API client.");
  return null;
}

// 3. Generic API request function
interface RequestOptions extends RequestInit {
  // Add any custom options you might need
  isFormData?: boolean; // To handle FormData requests differently
};

async function apiRequest<T = any>(
  endpoint: string,
  options: RequestOptions = {}
): Promise<T> {
  const token = await getAuthToken();
  const headers: HeadersInit = {
    ...(options.isFormData ? {} : { "Content-Type": "application/json" }), // Don't set Content-Type for FormData
    ...options.headers,
    "Authorization": token ? `Bearer ${token}` : '', // Set Authorization header if token exists
  };
  // headers.

  // if (token) {
  //   headers = {
  //     ...headers,
  //     "Authorization": `Bearer ${token}`,
  //     // If you need to set the token in a different way, adjust here
  //   }
  //   // headers as  ["Authorization"] = `Bearer ${token}`;
  // }

  const config: RequestInit = {
    ...options,
    headers,
  };

  try {
    const response = await fetch(getApiUrl(endpoint), config);

    if (!response.ok) {
      let errorData: ApiErrorResponse | null = null;
      try {
        // Try to parse the error response from the backend
        errorData = await response.json();
      } catch (e) {
        // If parsing fails, use the status text
        console.error("Failed to parse error JSON:", e);
      }

      // Construct a user-friendly error message
      const errorMessage =
        errorData?.message ||
        response.statusText ||
        `Request failed with status ${response.status}`;

      console.error(
        `API Error: ${response.status} ${errorMessage}`,
        errorData
      );
      toast.error(errorMessage); // Display user-friendly error

      // Throw an error that can be caught by the calling function for specific handling
      const error = new Error(errorMessage) as any;
      error.status = response.status;
      error.data = errorData;
      throw error;
    }

    // If response is OK but has no content (e.g., 204 No Content for DELETE)
    if (response.status === 204) {
      return null as T; // Or an appropriate representation for no content
    }

    // For other successful responses, parse JSON
    return (await response.json()) as T;
  } catch (error: any) {
    // Handle network errors or errors thrown from the !response.ok block
    if (!error.status) { // Likely a network error if status isn't set
      console.error("Network or unhandled API error:", error);
      toast.error("A network error occurred, or the server is unreachable.");
    }
    throw error; // Re-throw the error so it can be handled by the caller
  }
}

// 4. Specific API functions (Examples based on your Yowyob docs)

// --- Resource Management ---
export const resourceApi = {
  create: async <T = any>(data: any): Promise<T> =>
    apiRequest<T>("/api/resource", { method: "POST", body: JSON.stringify(data) }),
  getById: async <T = any>(id: string): Promise<T> =>
    apiRequest<T>(`/api/resource/${id}`, { method: "GET" }),
  update: async <T = any>(id: string, data: any): Promise<T> =>
    apiRequest<T>(`/api/resource/${id}`, { method: "PUT", body: JSON.stringify(data) }),
  delete: async (id: string): Promise<void> => // DELETE often returns 204 No Content
    apiRequest<void>(`/api/resource/${id}`, { method: "DELETE" }),
  scheduleCreate: async <T = any>(data: any): Promise<T> =>
    apiRequest<T>("/api/resource/schedule/create", { method: "POST", body: JSON.stringify(data) }),
  scheduleUpdate: async <T = any>(data: any): Promise<T> => // Assuming ID is in the data or path needs adjustment
    apiRequest<T>("/api/resource/schedule/update", { method: "PUT", body: JSON.stringify(data) }),
  scheduleDelete: async (id: string): Promise<void> =>
    apiRequest<void>(`/api/resource/schedule/delete/${id}`, { method: "DELETE" }),
};

// --- Service Management ---
export const serviceApi = {
  create: async <T = any>(data: any): Promise<T> =>
    apiRequest<T>("/api/service", { method: "POST", body: JSON.stringify(data) }),
  getById: async <T = any>(id: string): Promise<T> =>
    apiRequest<T>(`/api/service/${id}`, { method: "GET" }),
  update: async <T = any>(id: string, data: any): Promise<T> =>
    apiRequest<T>(`/api/service/${id}`, { method: "PUT", body: JSON.stringify(data) }),
  delete: async (id: string): Promise<void> =>
    apiRequest<void>(`/api/service/${id}`, { method: "DELETE" }),
  scheduleCreate: async <T = any>(data: any): Promise<T> =>
    apiRequest<T>("/api/service/schedule/create", { method: "POST", body: JSON.stringify(data) }),
  scheduleUpdate: async <T = any>(data: any): Promise<T> => // Assuming ID is in the data or path needs adjustment
    apiRequest<T>("/api/service/schedule/update", { method: "PUT", body: JSON.stringify(data) }),
  scheduleDelete: async (id: string): Promise<void> =>
    apiRequest<void>(`/api/service/schedule/delete/${id}`, { method: "DELETE" }),
};

// --- Additional Endpoints ---
export const additionalApi = {
  sendKafkaMessage: async <T = any>(data: any): Promise<T> =>
    apiRequest<T>("/api/kafka/send", { method: "POST", body: JSON.stringify(data) }),
  executeStrategy: async <T = any>(data: any): Promise<T> =>
    apiRequest<T>("/api/strategy/execute", { method: "POST", body: JSON.stringify(data) }),
};

// You can also export the generic function if needed for one-off calls
export { apiRequest, getApiUrl };// END OF FILE: lib/apiClient.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/utils.ts

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
// END OF FILE: lib/utils.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/validators/productValidator.ts

import * as z from "zod"; // Ensure '*' import for Zod v3

// Base Product Schema (Common fields)
export const baseProductSchema = z.object({
  // id: z.string().optional(), // Optional for create, required for update
  name: z.string().min(3, { message: "Name must be at least 3 characters long." }).max(100),
  description: z.string().min(10, { message: "Description must be at least 10 characters long." }).max(1000).optional(),
  basePrice: z.coerce.number().positive({ message: "Base price must be a positive number." }).optional(),
});

// Enum for Product Type
export const ProductTypeEnum = z.enum(["RESOURCE", "SERVICE"], {
  required_error: "Product type is required.",
});

// Enum for Action Type (if needed elsewhere, kept for context)
export const ActionTypeEnum = z.enum(["CREATE", "READ", "UPDATE", "DELETE", "CUSTOM"]);

// Schema for the main form type selection (used to determine which other fields are relevant)
export const productFormTypeSchema = z.object({
  productType: ProductTypeEnum,
});

// Schema parts - these will be conditionally merged or processed
const coreProductFieldsSchema = baseProductSchema.extend({
  productType: ProductTypeEnum, // This must be present to discriminate
});

const schedulingFieldsBaseSchema = z.object({
  isScheduled: z.boolean().default(false).optional(),
  scheduledAt: z.date().optional(), // ISO date string
  // scheduledAt: z.string().optional().refine((date) => {
  //   const parsedDate = new Date(date);
  //   return !isNaN(parsedDate.getTime());
  // }, { message: "Invalid date format." }),
});

const customActionFieldsBaseSchema = z.object({
  isCustomAction: z.boolean().default(false).optional(),
  customActionQuery: z.string().optional(),
});

// We will now create a combined schema and apply refinements at the end.
// This is often easier than trying to merge ZodEffects.
export const fullProductFormSchema = coreProductFieldsSchema
  .merge(schedulingFieldsBaseSchema)
  .merge(customActionFieldsBaseSchema)
  .superRefine((data, ctx) => { // Use superRefine for complex cross-field validation
    // Scheduling validation
    if (data.isScheduled && !data.scheduledAt) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "Scheduled date is required when scheduling is enabled.",
        path: ["scheduledAt"],
      });
    }
    if (data.isScheduled && data.scheduledAt && data.scheduledAt < new Date(new Date().setHours(0, 0, 0, 0))) { // Compare date part only for "past"
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "Scheduled date cannot be in the past.",
        path: ["scheduledAt"],
      });
    }

    // Custom action validation
    if (data.isCustomAction && (!data.customActionQuery || data.customActionQuery.trim().length < 3)) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "Custom action query is required (min 3 characters) when custom action is enabled.",
        path: ["customActionQuery"],
      });
    }
  });

// Type inferred from the Zod schema
export type ProductFormData = z.infer<typeof fullProductFormSchema>;// END OF FILE: lib/validators/productValidator.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/middleware.ts

// FILE: middleware.ts
import { withAuth } from "next-auth/middleware";
import { NextResponse } from "next/server";

export default withAuth(
  // `withAuth` augments your `Request` with the user's token.
  function middleware(req) {
    // console.log("Token in middleware: ", req.nextauth.token);

    // Example: Role-based access (implement later)
    // if (req.nextUrl.pathname.startsWith("/admin") && req.nextauth.token?.role !== "admin") {
    //   return NextResponse.rewrite(new URL("/denied", req.url));
    // }

    // If no specific rules, just let authorized users pass
    return NextResponse.next();
  },
  {
    callbacks: {
      // This callback determines if the user is authorized *at all*.
      // If it returns false, the user is redirected to the login page.
      authorized: ({ token }) => !!token, // Allow if token exists (user is logged in)
    },
    // Redirect users to custom login page if `authorized` callback fails
    pages: {
      signIn: "/login",
      // error: "/auth-error", // Optional error page
    },
  }
);

// Configure which paths are protected by this middleware
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - login, signup, forgot-password (auth pages)
     * - The root landing page '/'
     */
    "/((?!api|_next/static|_next/image|favicon.ico|login|signup|forgot-password|$).*)", // Protects everything else including dashboard routes
    // Or be more specific:
    // "/business-actor/:path*",
    // "/customer/:path*",
    // "/super-admin/:path*",
    // "/settings/:path*" // Assuming settings is also protected
  ],
};// END OF FILE: middleware.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/next.config.ts

// next.config.js or next.config.ts
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'picsum.photos',
        // pathname: '/random/**', // This is fine
        pathname: '/**', // More permissive for any path on this host
      }

    ],
  },
  // ... other configs
};

// module.exports = nextConfig; // if JS
export default nextConfig; // if TS// END OF FILE: next.config.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/next-env.d.ts

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
// END OF FILE: next-env.d.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/package.json

{
  "name": "dashboard-template",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@tanstack/match-sorter-utils": "^8.19.4",
    "@tanstack/react-table": "^8.21.3",
    "bcrypt": "^5.1.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^4.1.0",
    "lucide-react": "^0.484.0",
    "next": "15.2.4",
    "next-auth": "^4.24.11",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.55.0",
    "recharts": "^2.15.1",
    "sonner": "^2.0.2",
    "tailwind-merge": "^3.0.2",
    "tw-animate-css": "^1.2.4",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.3.1",
    "@tailwindcss/postcss": "^4",
    "@types/bcrypt": "^5.0.2",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "bcryptjs": "^3.0.2",
    "eslint": "^9",
    "eslint-config-next": "15.2.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
// END OF FILE: package.json

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/postcss.config.mjs

const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
// END OF FILE: postcss.config.mjs

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/file.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/file.svg

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/globe.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/globe.svg

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/logo.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/logo.svg

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/next.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/next.svg

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/vercel.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/vercel.svg

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/window.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/window.svg

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/README.md

This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
// END OF FILE: README.md

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/styles/scrollbar-hide.css

.scrollbar-hide::-webkit-scrollbar {
  display: none;
}

/* Hide scrollbar for IE, Edge and Firefox */
.scrollbar-hide {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
}

// END OF FILE: styles/scrollbar-hide.css

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/tailwind.config.js

// Import default theme
const { fontFamily } = require("tailwindcss/defaultTheme") // Import default theme

module.exports = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx,js,jsx,mdx}",
    "./components/**/*.{ts,tsx,js,jsx,mdx}",
    "./app/**/*.{ts,tsx,js,jsx,mdx}",
    "./src/**/*.{ts,tsx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "1.5rem", // Adjusted default padding
      screens: {
        "2xl": "1440px", // Slightly wider max width
      },
    },
    extend: {
      fontFamily: {
        // Set 'sans' to use the Montserrat variable, with fallbacks
        sans: ["var(--font-montserrat)", ...fontFamily.sans],
      },
      colors: {
         // Add sidebar specific colors if not already defined via CSS vars
         sidebar: {
           DEFAULT: "hsl(var(--sidebar))",
           foreground: "hsl(var(--sidebar-foreground))",
           border: "hsl(var(--sidebar-border))",
           // ... add others like primary, accent if needed for sidebar theme
         },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" }, // Use string "0"
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" }, // Use string "0"
        },
         // Add fade-in-up animation if not using tw-animate-css
         "fade-in-up": {
           "0%": {
             opacity: "0",
             transform: "translateY(10px)",
           },
           "100%": {
             opacity: "1",
             transform: "translateY(0)",
           },
         },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "fade-in-up": "fade-in-up 0.5s ease-out forwards", // Add fade-in-up
      },
    },
  },
  // Ensure you have the required plugins
  plugins: [
      // require("tailwindcss-animate"), // Standard animate plugin
      // require("tw-animate-css") // Remove if using tailwindcss-animate
    ],
}// END OF FILE: tailwind.config.js

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/tsconfig.json

{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
// END OF FILE: tsconfig.json

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/product.ts

// types/product.ts

// Information about the Business Actor offering the product/service
export interface BusinessActorInfo {
  id: string;
  name: string;
  logoUrl?: string; // Optional logo for the BA
}

export interface ProductListItemData {
  id: string;
  name: string;
  productType: "RESOURCE" | "SERVICE";
  description?: string;
  basePrice?: number;
  currentState: string; // e.g., PUBLISHED for Service, AVAILABLE for Resource (for customer view)
  createdAt: string; // ISO date string
  updatedAt: string; // ISO date string
  isScheduled?: boolean; // Less relevant for customer view of published items
  scheduledAt?: string; // Less relevant for customer view
  imageUrl?: string; // Optional image for the product/service
  baInfo?: BusinessActorInfo; // Information about the BA offering this
  // category?: string;
  // tags?: string[];
  // additional custom attributes relevant for customer display
  // For example, if it's a "ConsultationSlot"
  // duration?: string;
  // location?: string;
}

// Potentially a more detailed type if clicking a product shows more info
export interface ProductDetailData extends ProductListItemData {
  // more specific details
  specifications?: Record<string, string | number>;
  availabilityCalendar?: string; // e.g., link or embedded data for service availability
}// END OF FILE: types/product.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/table.ts

export interface DataTableFilterOption {
  label: string;
  value: string;
  icon?: React.ComponentType<{ className?: string }>;
}

export interface DataTableSearchableColumn {
  id: string;
  title: string;
}

export interface DataTableFilterableColumn<TData = any> extends DataTableSearchableColumn {
  options: DataTableFilterOption[];
}// END OF FILE: types/table.ts

