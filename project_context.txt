Project Context From: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template
Generated On: Sun Jul 13 01:17:44 AM WAT 2025
===============================================
Ignored Directory Patterns: .* node_modules vendor build dist target __pycache__ .next cache target venv svgs fontawesome scss fonts webfonts images bin storage gradle out
Ignored File Patterns: *.log *.jar *.pdf *.png *.jpg *.class *.sqlite project_context.txt package-lock.json yarn.lock *.json composer.lock *.ico *.jar pnpm-lock.yaml *.puml
===============================================

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/auth/[...nextauth]/route.ts

import NextAuth, { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { authRepository } from "@/lib/data-repo/auth";
import { AuthRequest } from "@/types/auth";
import { User } from "next-auth";
import { organizationRepository } from "@/lib/data-repo/organization";

export const authOptions: NextAuthOptions = {
  session: {
    strategy: "jwt",
  },
  providers: [
    CredentialsProvider({
      id: "credentials",
      name: "Credentials",
      credentials: {
        username: { label: "Username", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials): Promise<User | null> {
        if (!credentials?.username || !credentials?.password) {
          throw new Error("Username and password are required.");
        }
        try {
          const loginRequest: AuthRequest = {
            username: credentials.username,
            password: credentials.password,
          };
          const loginResponse = await authRepository.login(loginRequest);

          if (loginResponse && loginResponse.user && loginResponse.access_token) {
            const userId = loginResponse.user.id;
            if (!userId) {
              throw new Error("User ID is missing from login response.");
            }

            // [THE FIX] Re-introduce the check for a Business Actor profile.
            let businessActorId: string | null = null;
            try {
              // Make a single, targeted request to see if a BA profile exists for this user ID.
              const businessActorProfile = await organizationRepository.getBusinessActorById(userId);
              if (businessActorProfile) {
                // If a profile is found, the user is a Business Actor.
                businessActorId = businessActorProfile.business_actor_id || userId;
              }
            } catch (error: any) {
              // A 404 is an expected, valid outcome for a user who is not a BA.
              // We can safely ignore it and proceed with login.
              if (error.status !== 404) {
                console.error("Error checking for Business Actor profile during login:", error.message);
                // For other errors (e.g., 500), we log them but don't block login.
              }
            }

            return {
              id: userId,
              name: `${loginResponse.user.first_name} ${loginResponse.user.last_name}`,
              email: loginResponse.user.email,
              username: loginResponse.user.username,
              first_name: loginResponse.user.first_name,
              last_name: loginResponse.user.last_name,
              phone_number: loginResponse.user.phone_number,
              email_verified: loginResponse.user.email_verified,
              phone_number_verified: loginResponse.user.phone_number_verified,
              accessToken: loginResponse.access_token.token,
              roles: loginResponse.roles,
              permissions: loginResponse.permissions,
              // The businessActorId will be the user's ID if they are a BA, otherwise it will be null.
              businessActorId: businessActorId,
            };
          }
          return null;
        } catch (error: any) {
          throw new Error(error.message || "An unexpected error occurred during login.");
        }
      },
    }),
  ],
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.username = user.username;
        token.accessToken = user.accessToken;
        token.roles = user.roles;
        token.permissions = user.permissions;
        token.first_name = user.first_name;
        token.last_name = user.last_name;
        token.phone_number = user.phone_number;
        token.email_verified = user.email_verified;
        token.phone_number_verified = user.phone_number_verified;
        token.businessActorId = user.businessActorId;
      }
      return token;
    },
    async session({ session, token }) {
      if (token) {
        session.user.id = token.id as string;
        session.user.username = token.username as string;
        session.user.accessToken = token.accessToken as string;
        session.user.roles = token.roles as string[];
        session.user.permissions = token.permissions as string[];
        session.user.first_name = token.first_name as string;
        session.user.last_name = token.last_name as string;
        session.user.phone_number = token.phone_number as string;
        session.user.email_verified = token.email_verified as boolean;
        session.user.phone_number_verified = token.phone_number_verified as boolean;
        session.user.businessActorId = token.businessActorId as string | null;
      }
      return session;
    },
  },
  pages: {
    signIn: "/login",
    error: "/login",
  },
};

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };// END OF FILE: app/api/auth/[...nextauth]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/addresses/[addressId]/favorite/route.ts

// app/api/mock/addresses/[addressId]/favorite/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AddressDto } from '@/types/organization';

// Spec says GET for favorite, using PUT for mock update consistency
export async function PUT(_request: NextRequest, { params }: { params: { addressId: string } }) {
  try {
    const { addressId } = await params;
    const address = dbManager.getItemById('addresses', addressId);
    if (!address) {
      return NextResponse.json({ message: `Address with ID ${addressId} not found.` }, { status: 404 });
    }
    // If setting as default, unset other defaults for the same addressable
    if (!address.is_default) {
      const allAddresses = dbManager.getCollection('addresses');
      allAddresses.forEach(addr => {
        if (addr.addressable_id === address.addressable_id && addr.addressable_type === address.addressable_type) {
          addr.is_default = false;
        }
      });
      dbManager.saveCollection('addresses', allAddresses); // Save changes first
    }
    const updatedAddress = dbManager.updateItem('addresses', addressId, { is_default: !address.is_default });
    return NextResponse.json(updatedAddress, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to toggle favorite address", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/addresses/[addressId]/favorite/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/addresses/[addressId]/route.ts

// app/api/mock/addresses/[addressId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AddressDto, UpdateAddressRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { addressId: string } }) {
  try {
    const { addressId } = await params;
    const address = dbManager.getItemById('addresses', addressId);
    if (!address) {
      return NextResponse.json({ message: `Address with ID ${addressId} not found.` }, { status: 404 });
    }
    return NextResponse.json(address);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get address", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: { addressId: string } }) {
  try {
    const { addressId } = await params;
    const body = await _request.json() as UpdateAddressRequest;
    const updatedAddress = dbManager.updateItem('addresses', addressId, body);
    if (!updatedAddress) {
      return NextResponse.json({ message: `Address with ID ${addressId} not found.` }, { status: 404 });
    }
    return NextResponse.json(updatedAddress, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update address", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: { addressId: string } }) {
  try {
    const { addressId } = await params;
    const deleted = dbManager.deleteItem('addresses', addressId);
    if (!deleted) {
      return NextResponse.json({ message: `Address with ID ${addressId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Address deleted successfully." }, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete address", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/addresses/[addressId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/addresses/route.ts

// app/api/mock/addresses/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AddressDto, CreateAddressRequest, AddressableType } from '@/types/organization';

export async function GET(_request: NextRequest) {
  try {
    const { searchParams } = new URL(_request.url);
    const addressableType = searchParams.get('entityType') as AddressableType | null;
    const addressableId = searchParams.get('entityId');

    if (!addressableType || !addressableId) {
      return NextResponse.json({ message: "addressableType and addressableId query params are required." }, { status: 400 });
    }
    const allAddresses = dbManager.getCollection('addresses');
    const filteredAddresses = allAddresses.filter(c => c.addressable_type === addressableType && c.addressable_id === addressableId);
    return NextResponse.json(filteredAddresses);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get addresses", error: error.message }, { status: 500 });
  }
}

export async function POST(_request: NextRequest) {
  try {
    const { searchParams } = new URL(_request.url);
    const addressableType = searchParams.get('entityType') as AddressableType | null;
    const addressableId = searchParams.get('entityId');
    const body = await _request.json() as CreateAddressRequest;

     if (!addressableType || !addressableId) {
      return NextResponse.json({ message: "addressableType and addressableId query params are required." }, { status: 400 });
    }
    if (!body.address_line_1 || !body.city || !body.state || !body.zip_code) {
        return NextResponse.json({ message: "Address line 1, city, state, and zip code are required." }, { status: 400 });
    }

    const newAddressData: Omit<AddressDto, 'address_id' | 'created_at' | 'updated_at'> = {
        ...body,
        addressable_id: addressableId,
        addressable_type: addressableType,
        is_default: false, // Default for new address
    };
    const createdAddress = dbManager.addItem('addresses', newAddressData);
    return NextResponse.json(createdAddress, { status: 201 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to create address", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/addresses/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/applications/[applicationId]/keys/create/route.ts

// app/api/mock/applications/[applicationId]/keys/create/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ApplicationKeyDto } from '@/types/organization';

export async function POST(_request: NextRequest, { params }: { params: { applicationId: string } }) {
  try {
    const { applicationId } = await params;
    // Check if application exists
    const app = dbManager.getItemById('applicationsData', applicationId);
    if (!app) return NextResponse.json({ message: "Application not found" }, { status: 404 });

    const newKey: Omit<ApplicationKeyDto, 'created_at' | 'updated_at' | 'public_key' | 'secret_key'> & { public_key?: string, secret_key?: string } = {
      application_id: applicationId,
      // Generate mock keys
      public_key: `mock_pub_key_${Date.now()}`,
      secret_key: `mock_sec_key_${Date.now()}_${Math.random().toString(36).substring(2)}`,
    };
    const createdKey = dbManager.addItem('applicationKeysData', newKey);
    return NextResponse.json(createdKey, { status: 200 }); // Spec says 200 OK
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}// END OF FILE: app/api/mock/applications/[applicationId]/keys/create/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/applications/[applicationId]/keys/route.ts

// app/api/mock/applications/[applicationId]/keys/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ApplicationKeyDto } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { applicationId: string } }) {
  try {
    const { applicationId } = await params;
    const allKeys = dbManager.getCollection('applicationKeysData');
    const appKeys = allKeys.filter(key => key.application_id === applicationId);
    return NextResponse.json(appKeys);
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}// END OF FILE: app/api/mock/applications/[applicationId]/keys/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/applications/route.ts

// app/api/mock/applications/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ApplicationDto, CreateApplicationRequest } from '@/types/organization';

export async function GET(_request: NextRequest) {
  try {
    const apps = dbManager.getCollection('applicationsData');
    return NextResponse.json(apps);
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}

export async function POST(_request: NextRequest) {
  try {
    const body = await _request.json() as CreateApplicationRequest;
    if (!body.name) return NextResponse.json({ message: "App name required" }, { status: 400 });
    const newApp = dbManager.addItem('applicationsData', body);
    return NextResponse.json(newApp, { status: 200 }); // Spec says 200 OK
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}// END OF FILE: app/api/mock/applications/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/login/route.ts

// app/api/mock/auth/login/route.ts
import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AuthRequest, LoginResponse, UserInfo } from '@/types/auth';
import bcrypt from 'bcryptjs';

export async function POST(_request: Request) {
  try {
    const body = await _request.json() as AuthRequest;

    if (!body.username || !body.password) {
      return NextResponse.json({ message: "Username and password are required." }, { status: 400 });
    }

    const users = dbManager.getCollection('authUsers');
    const user = users.find(u => u.username === body.username || u.email === body.username);

    if (!user || !user.password_hash || !user.is_enabled) {
      return NextResponse.json({ message: "Invalid username or password, or account disabled." }, { status: 401 });
    }

    const passwordIsValid = await bcrypt.compare(body.password, user.password_hash);

    if (!passwordIsValid) {
      return NextResponse.json({ message: "Invalid username or password." }, { status: 401 });
    }

    const userInfo: UserInfo = {
      id: user.id,
      username: user.username,
      first_name: user.first_name,
      last_name: user.last_name,
      email: user.email,
      email_verified: user.email_verified,
      phone_number: user.phone_number,
      phone_number_verified: user.phone_number_verified,
    };

    const loginResponse: LoginResponse = {
      access_token: { token: `local-mock-jwt-for-${user.username}-${Date.now()}`, type: "Bearer", expire_in: 3600000 },
      user: userInfo,
      roles: user.username === "admin" || user.username === "superadmin" ? ["SUPER_ADMIN_ROLE", "BUSINESS_ACTOR_ROLE"] : ["BUSINESS_ACTOR_ROLE", "GENERAL_USER_ROLE"],
      permissions: user.username === "admin" || user.username === "superadmin" ? ["*:*:*"] : ["org:read", "org:create"],
    };

    return NextResponse.json(loginResponse, { status: 200 });

  } catch (error) {
    console.error("[MOCK API /auth/login ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to login user." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/login/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/permissions/[permission_id]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdatePermissionRequest } from '@/types/auth';

export async function GET(_request: NextRequest, { params }: { params: { permission_id: string } }) {
  try {
    const permissionId = params.permission_id;
    const permission = dbManager.getItemById('authPermissions', permissionId);
    if (!permission) {
      return NextResponse.json({ message: `Permission with ID ${permissionId} not found.` }, { status: 404 });
    }
    return NextResponse.json(permission, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get permission." }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: { permission_id: string } }) {
  try {
    const permissionId = params.permission_id;
    const body = await _request.json() as UpdatePermissionRequest;
    const updatedPermission = dbManager.updateItem('authPermissions', permissionId, body);
    if (!updatedPermission) {
      return NextResponse.json({ message: `Permission with ID ${permissionId} not found.` }, { status: 404 });
    }
    return NextResponse.json(updatedPermission, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to update permission." }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: { permission_id: string } }) {
  try {
    const permissionId = params.permission_id;
    const deleted = dbManager.deleteItem('authPermissions', permissionId);
    // Also remove associated role-permissions
    const rolePermissions = dbManager.getCollection('authRolePermissions');
    const updatedRolePermissions = rolePermissions.filter(rp => rp.permission_id !== permissionId);
    dbManager.saveCollection('authRolePermissions', updatedRolePermissions);
    if (!deleted) {
      return NextResponse.json({ message: `Permission with ID ${permissionId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Permission deleted successfully." }, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to delete permission." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/permissions/[permission_id]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/permissions/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreatePermissionRequest } from '@/types/auth';

export async function GET(_request: NextRequest) {
  try {
    const permissions = dbManager.getCollection('authPermissions');
    return NextResponse.json(permissions, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get permissions." }, { status: 500 });
  }
}

export async function POST(_request: NextRequest) {
  try {
    const body = await _request.json() as CreatePermissionRequest;
    if (!body.name || !body.resource_id || !body.operation_id) {
      return NextResponse.json({ message: "Name, resource ID, and operation ID are required." }, { status: 400 });
    }
    const newPerm = dbManager.addItem('authPermissions', body);
    return NextResponse.json(newPerm, { status: 200 }); // Spec says 200 for create
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to create permission." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/permissions/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/register/route.ts

// app/api/mock/auth/register/route.ts
import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreateUserRequest, UserDto } from '@/types/auth';
import bcrypt from 'bcryptjs';

const SALT_ROUNDS = 10;

export async function POST(_request: Request) {
  try {
    const body = await _request.json() as CreateUserRequest;

    if (!body.username || !body.password || !body.first_name) {
      return NextResponse.json({ message: "Username, password, and first name are required." }, { status: 400 });
    }
    if (body.password.length < 6) {
      return NextResponse.json({ message: "Password must be at least 6 characters." }, { status: 400 });
    }

    const users = dbManager.getCollection('authUsers');

    if (users.find(u => u.username === body.username)) {
      return NextResponse.json({ message: "Username already exists." }, { status: 409 });
    }
    if (body.email && users.find(u => u.email === body.email)) {
      return NextResponse.json({ message: "Email already exists." }, { status: 409 });
    }

    const hashedPassword = await bcrypt.hash(body.password, SALT_ROUNDS);

    const newUserPartial: Omit<UserDto, 'id' | 'created_at' | 'updated_at'> = {
      username: body.username,
      email: body.email,
      password_hash: hashedPassword,
      first_name: body.first_name,
      last_name: body.last_name,
      phone_number: body.phone_number,
      is_enabled: true, // New users are enabled by default in mock
      email_verified: false, // Email starts as unverified
      phone_number_verified: false,
    };

    const createdUser = dbManager.addItem('authUsers', newUserPartial);

    const { password_hash, ...userDtoFields } = createdUser;

    return NextResponse.json(userDtoFields, { status: 201 });

  } catch (error) {
    console.error("[MOCK API /auth/register ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to register user." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/register/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/resources/save/route.ts

// app/api/mock/auth/resources/save/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { RbacResource, ApiResponseBoolean } from '@/types/auth';

export async function POST(_request: NextRequest) {
  try {
    const body = await _request.json() as RbacResource;
    // For mock, we just acknowledge it. In a real system, this would define
    // resources that permissions can then be applied to.
    if (!body.name || !body.value || !body.service) {
      return NextResponse.json({ status: "FAILED", message: "Name, value, and service are required for RBAC resource." } as ApiResponseBoolean, { status: 400 });
    }
    dbManager.addItem('authRbacResources', body); // Store it
    const response: ApiResponseBoolean = { status: "SUCCESS", message: "RBAC Resource saved successfully.", data: true, ok: true };
    return NextResponse.json(response, { status: 200 });
  } catch (error)  {
    const response: ApiResponseBoolean = { status: "FAILED", message: error.message || "Failed to save RBAC resource.", data: false, ok: false };
    return NextResponse.json(response, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/resources/save/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/roles/hierarchy/route.ts

// app/api/mock/auth/roles/hierarchy/route.ts
import { NextResponse, NextRequest } from 'next/server';
// In a real scenario, this would involve complex logic based on role relationships.
// For mock, we return a simple string or a predefined structure.

export async function GET(_request: NextRequest) {
  try {
    // Example: A simple string representation or a JSON string of a hierarchical object
    const hierarchyString = "ADMIN_ROLE > (MANAGER_ROLE > (STAFF_ROLE, USER_ROLE)); GUEST_ROLE";
    // Or: const hierarchyJson = JSON.stringify({ name: "SUPER_ADMIN", children: [...] });
    return NextResponse.json(hierarchyString, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get roles hierarchy." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/roles/hierarchy/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/roles/[role_id]/permissions/[permission_id]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { RolePermissionDto } from '@/types/auth';

export async function POST(_request: NextRequest, { params }: { params: { role_id: string; permission_id: string } }) {
  try {
    const { role_id, permission_id } = await params;
    if (!role_id || !permission_id) {
      return NextResponse.json({ message: "Role ID and Permission ID are required." }, { status: 400 });
    }
    const rolePermissions = dbManager.getCollection('authRolePermissions');
    if (rolePermissions.find(rp => rp.role_id === role_id && rp.permission_id === permission_id)) {
      return NextResponse.json({ message: "Permission already assigned to this role." }, { status: 409 });
    }
    const newRp: RolePermissionDto = { role_id, permission_id };
    rolePermissions.push(newRp);
    dbManager.saveCollection('authRolePermissions', rolePermissions);
    return NextResponse.json(newRp, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to assign permission." }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: { role_id: string; permission_id: string } }) {
  try {
    const { role_id, permission_id } = await params;
    if (!role_id || !permission_id) {
      return NextResponse.json({ message: "Role ID and Permission ID are required." }, { status: 400 });
    }
    let rolePermissions = dbManager.getCollection('authRolePermissions');
    const initialCount = rolePermissions.length;
    rolePermissions = rolePermissions.filter(rp => !(rp.role_id === role_id && rp.permission_id === permission_id));

    if (rolePermissions.length < initialCount) {
      dbManager.saveCollection('authRolePermissions', rolePermissions);
      return NextResponse.json({ message: "Permission removed successfully." }, { status: 200 });
    }
    return NextResponse.json({ message: "Permission not found for this role or already removed." }, { status: 404 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to remove permission." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/roles/[role_id]/permissions/[permission_id]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/roles/[role_id]/permissions/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { RolePermissionDto } from '@/types/auth';

export async function POST(_request: NextRequest, { params }: { params: { role_id: string } }) {
  try {
    const roleId = params.role_id;
    const permissionIds = await _request.json() as string[];
    if (!roleId || !Array.isArray(permissionIds)) {
      return NextResponse.json({ message: "Role ID and an array of permission IDs are required." }, { status: 400 });
    }

    const rolePermissions = dbManager.getCollection('authRolePermissions');
    const added: RolePermissionDto[] = [];
    permissionIds.forEach(permissionId => {
      if (!rolePermissions.find(rp => rp.role_id === roleId && rp.permission_id === permissionId)) {
        const newRp: RolePermissionDto = { role_id: roleId, permission_id: permissionId };
        // dbManager.addItem would create new objects, direct push for this structure
        rolePermissions.push(newRp);
        added.push(newRp);
      }
    });
    dbManager.saveCollection('authRolePermissions', rolePermissions);
    return NextResponse.json(added, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to assign permissions." }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: { role_id: string } }) {
  try {
    const roleId = params.role_id;
    const permissionIdsToRemove = await _request.json() as string[];
    if (!roleId || !Array.isArray(permissionIdsToRemove)) {
      return NextResponse.json({ message: "Role ID and an array of permission IDs are required." }, { status: 400 });
    }

    let rolePermissions = dbManager.getCollection('authRolePermissions');
    const initialCount = rolePermissions.length;
    rolePermissions = rolePermissions.filter(rp => !(rp.role_id === roleId && permissionIdsToRemove.includes(rp.permission_id!)));
    dbManager.saveCollection('authRolePermissions', rolePermissions);

    if (rolePermissions.length < initialCount) {
      return NextResponse.json({ message: "Permissions removed successfully." }, { status: 200 });
    }
    return NextResponse.json({ message: "No matching permissions found to remove or already removed." }, { status: 200 }); // Or 404 if none were found
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to remove permissions." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/roles/[role_id]/permissions/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/roles/[role_id]/route.ts

// app/api/mock/auth/roles/[role_id]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { RoleDto, RolePermissionDto, UpdateRoleRequest } from '@/types/auth';

export async function PUT(_request: NextRequest, { params }: { params: { role_id: string } }) {
  try {
    const roleId = params.role_id;
    const body = await _request.json() as UpdateRoleRequest;

    const updatedRole = dbManager.updateItem('authRoles', roleId, body);
    if (!updatedRole) {
      return NextResponse.json({ message: `Role with ID ${roleId} not found.` }, { status: 404 });
    }
    return NextResponse.json(updatedRole, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to update role." }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: { role_id: string } }) {
  try {
    const roleId = params.role_id;
    const deleted = dbManager.deleteItem('authRoles', roleId);
    // Also remove associated role-permissions
    const rolePermissions = dbManager.getCollection('authRolePermissions');
    const updatedRolePermissions = rolePermissions.filter(rp => rp.role_id !== roleId);
    dbManager.saveCollection('authRolePermissions', updatedRolePermissions);

    if (!deleted) {
      return NextResponse.json({ message: `Role with ID ${roleId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Role deleted successfully." }, { status: 200 }); // Spec says 200 OK
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to delete role." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/roles/[role_id]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/roles/route.ts

// app/api/mock/auth/roles/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { RoleDto, CreateRoleRequest } from '@/types/auth';

export async function GET(_request: NextRequest) {
  try {
    const roles = dbManager.getCollection('authRoles'); // Assuming 'authRoles' collection in dbManager
    return NextResponse.json(roles, { status: 200 });
  } catch (error)  {
    console.error("[MOCK API /auth/roles GET ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to get roles." }, { status: 500 });
  }
}

export async function POST(_request: NextRequest) {
  try {
    const body = await _request.json() as CreateRoleRequest;
    if (!body.name) {
      return NextResponse.json({ message: "Role name is required." }, { status: 400 });
    }

    const roles = dbManager.getCollection('authRoles');
    if (roles.find(r => r.name === body.name)) {
      return NextResponse.json({ message: "Role with this name already exists." }, { status: 409 });
    }

    const newRolePartial: Omit<RoleDto, 'id' | 'created_at' | 'updated_at'> = {
      name: body.name,
      description: body.description,
    };
    // dbManager.addItem should handle id, created_at, updated_at
    const createdRole = dbManager.addItem('authRoles', newRolePartial);

    return NextResponse.json(createdRole, { status: 201 });

  } catch (error)  {
    console.error("[MOCK API /auth/roles POST ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to create role." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/roles/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/user/route.ts

// app/api/mock/auth/user/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UserDto, UserInfo } from '@/types/auth';
import { getToken } from 'next-auth/jwt';

export async function GET(_request: NextRequest) {
  try {
    const nextAuthToken = await getToken({ req: _request, secret: process.env.NEXTAUTH_SECRET });

    if (nextAuthToken && (nextAuthToken.email || nextAuthToken.name || nextAuthToken.sub)) {
      const users = dbManager.getCollection('authUsers');
      let user: UserDto | undefined | null;

      // Prefer matching by 'id' (which is 'sub' in NextAuth token)
      if (nextAuthToken.sub) user = dbManager.getItemById('authUsers', nextAuthToken.sub as string); // getItemById will use 'id'
      if (!user && nextAuthToken.email) user = users.find(u => u.email === nextAuthToken.email);
      if (!user && nextAuthToken.name) user = users.find(u => u.username === nextAuthToken.name);

      if (user && user.is_enabled) {
        const userInfo: UserInfo = {
          id: user.id, // Use 'id' from UserDto
          username: user.username,
          first_name: user.first_name,
          last_name: user.last_name,
          email: user.email,
          email_verified: user.email_verified,
          phone_number: user.phone_number,
          phone_number_verified: user.phone_number_verified,
        };
        return NextResponse.json(userInfo, { status: 200 });
      }
    }

    return NextResponse.json({ message: "Unauthorized: No active user session found in mock." }, { status: 401 });

  } catch (error)  {
    console.error("[MOCK API /auth/user ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to get current user." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/user/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/users/email/[email]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UserDto } from '@/types/auth';

export async function GET(_request: NextRequest, { params }: { params: { email: string } }) {
  try {
    const email = params.email; // Next.js decodes URL automatically
    const users = dbManager.getCollection('authUsers');
    const user = users.find(u => u.email === email);
    if (!user) {
      return NextResponse.json({ message: `User with email ${email} not found.` }, { status: 404 });
    }
    const { password_hash, ...userWithoutPassword } = user;
    return NextResponse.json(userWithoutPassword, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get user by email." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/users/email/[email]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/users/phone/[phone_number]/route.ts

// app/api/mock/auth/users/phone/[phone_number]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UserDto } from '@/types/auth';

export async function GET(_request: NextRequest, { params }: { params: { phone_number: string } }) {
  try {
    const phoneNumber = params.phone_number;
    const users = dbManager.getCollection('authUsers');
    const user = users.find(u => u.phone_number === phoneNumber);
    if (!user) {
      return NextResponse.json({ message: `User with phone number ${phoneNumber} not found.` }, { status: 404 });
    }
    const { password_hash, ...userWithoutPassword } = user;
    return NextResponse.json(userWithoutPassword, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get user by phone number." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/users/phone/[phone_number]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/users/route.ts

// app/api/mock/auth/users/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UserDto } from '@/types/auth';

export async function GET(_request: NextRequest) {
  try {
    const allUsers = dbManager.getCollection('authUsers');
    // Corrected mapping to exclude password hash
    const users = allUsers.map(user => {
      const { password_hash, ...userWithoutPassword } = user; // Exclude password hash
      return userWithoutPassword;
    });
    return NextResponse.json(users, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get users." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/users/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/auth/users/username/[username]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UserDto } from '@/types/auth';

export async function GET(_request: NextRequest, { params }: { params: { username: string } }) {
  try {
    const username = params.username;
    const users = dbManager.getCollection('authUsers');
    const user = users.find(u => u.username === username);
    if (!user) {
      return NextResponse.json({ message: `User with username ${username} not found.` }, { status: 404 });
    }
    const { password_hash, ...userWithoutPassword } = user;
    return NextResponse.json(userWithoutPassword, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to get user by username." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/auth/users/username/[username]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/business-actors/[baId]/route.ts

// app/api/mock/business-actors/[baId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { BusinessActorDto, UpdateBusinessActorRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { baId: string } }) {
  try {
    const actor = dbManager.getItemById('businessActors', params.baId);
    if (!actor) return NextResponse.json({ message: `Business Actor ${params.baId} not found.` }, { status: 404 });
    return NextResponse.json(actor);
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}
export async function PUT(_request: NextRequest, { params }: { params: { baId: string } }) {
  try {
    const body = await _request.json() as UpdateBusinessActorRequest;
    const updated = dbManager.updateItem('businessActors', params.baId, body);
    if (!updated) return NextResponse.json({ message: `Business Actor ${params.baId} not found.` }, { status: 404 });
    return NextResponse.json(updated, { status: 202 });
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}
export async function DELETE(_request: NextRequest, { params }: { params: { baId: string } }) {
  try {
    const deleted = dbManager.deleteItem('businessActors', params.baId);
    if (!deleted) return NextResponse.json({ message: `Business Actor ${params.baId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Deleted" }, { status: 202 });
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}// END OF FILE: app/api/mock/business-actors/[baId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/business-actors/route.ts

// app/api/mock/business-actors/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { BusinessActorDto, CreateBusinessActorRequest } from '@/types/organization';
import { getUserIdFromMockToken } from '@/lib/data-repo/local-store/mock-auth-utils';

export async function GET(_request: NextRequest) {
  try {
    const actors = dbManager.getCollection('businessActors');
    return NextResponse.json(actors);
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}

export async function POST(request: NextRequest) { // [CHANGE] Use the request object
  try {
    // [THE FIX] Get the user ID from the token sent by the client
    const userId = await getUserIdFromMockToken(request);
    if (!userId) {
      return NextResponse.json({ message: "Unauthorized: No valid user token provided." }, { status: 401 });
    }

    const body = await request.json() as CreateBusinessActorRequest;
    if (!body.first_name) {
      return NextResponse.json({ message: "First name is required for Business Actor." }, { status: 400 });
    }

    // The backend assigns the ID, so we simulate that here.
    const newActorData = {
      ...body,
      business_actor_id: userId, // The BA's ID is the User's ID
      user_id: userId, // Also add user_id for any internal linking if needed
    };

    const newActor = dbManager.addItem('businessActors', newActorData);
    return NextResponse.json(newActor, { status: 201 });
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}// END OF FILE: app/api/mock/business-actors/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/business-actors/type/[type]/route.ts

// app/api/mock/business-actors/type/[type]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { BusinessActorDto, BusinessActorType } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { type: string } }) {
  try {
    const type = params.type as BusinessActorType;
    const allActors = dbManager.getCollection('businessActors');
    const filtered = allActors.filter(actor => actor.type === type);
    return NextResponse.json(filtered);
  } catch(e) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }); }
}// END OF FILE: app/api/mock/business-actors/type/[type]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/business-domains/[domainId]/route.ts

// app/api/mock/business-domains/[domainId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { BusinessDomainDto, UpdateBusinessDomainRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { domainId: string } }) {
  try {
    const { domainId } = await params;
    const domain = dbManager.getItemById('businessDomains', domainId);
    if (!domain) {
      return NextResponse.json({ message: `Business domain with ID ${domainId} not found.` }, { status: 404 });
    }
    return NextResponse.json(domain);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get business domain", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: { domainId: string } }) {
  try {
    const { domainId } = await params;
    const body = await _request.json() as UpdateBusinessDomainRequest;
    const updatedDomain = dbManager.updateItem('businessDomains', domainId, body);
    if (!updatedDomain) {
      return NextResponse.json({ message: `Business domain with ID ${domainId} not found.` }, { status: 404 });
    }
    return NextResponse.json(updatedDomain, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update business domain", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: { domainId: string } }) {
  try {
    const { domainId } = await params;
    // Check if any organization uses this domain before deleting (optional for mock)
    const deleted = dbManager.deleteItem('businessDomains', domainId);
    if (!deleted) {
      return NextResponse.json({ message: `Business domain with ID ${domainId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Business domain deleted." }, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete business domain", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/business-domains/[domainId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/business-domains/route.ts


import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { BusinessDomainDto, CreateBusinessDomainRequest } from '@/types/organization';

export async function POST(_request: NextRequest) {
  try {
    const body = await _request.json() as CreateBusinessDomainRequest;
    if (!body.name || !body.type || !body.type_label) {
      return NextResponse.json({ message: "Name, type, and type_label are required." }, { status: 400 });
    }
    // In a real app, check for duplicate names, etc.
    const newDomain = dbManager.addItem('businessDomains', body);
    return NextResponse.json(newDomain, { status: 201 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to create business domain", error: error.message }, { status: 500 });
  }
}

import { GetBusinessDomainRequest } from '@/types/organization';

export async function GET(_request: NextRequest) {
  try {
    const { searchParams } = new URL(_request.url);
    const params: GetBusinessDomainRequest = {
      organization_id: searchParams.get('organization_id') || undefined,
      parent_domain_id: searchParams.get('parent_domain_id') || undefined,
      name: searchParams.get('name') || undefined,
      page: searchParams.get('page') ? parseInt(searchParams.get('page')!, 10) : undefined,
      size: searchParams.get('size') ? parseInt(searchParams.get('size')!, 10) : undefined,
    };

    let domains = dbManager.getCollection('businessDomains');

    // Apply filters if provided (simple mock filtering)
    if (params.organization_id) domains = domains.filter(d => d.organization_id === params.organization_id);
    if (params.parent_domain_id) domains = domains.filter(d => d.parent_domain_id === params.parent_domain_id);
    if (params.name) domains = domains.filter(d => d.name?.toLowerCase().includes(params.name!.toLowerCase()));

    // Mock pagination (basic)
    if (params.page && params.size) {
      const start = (params.page - 1) * params.size;
      const end = start + params.size;
      domains = domains.slice(start, end);
    }
    return NextResponse.json(domains);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get business domains", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/business-domains/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/contacts/[contactId]/favorite/route.ts

// app/api/mock/contacts/[contactId]/favorite/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
// import { ContactDto } from '@/types/organization';

// Spec says GET for favorite, which is unusual for a state change.
export async function PUT(_request: NextRequest, { params }: { params: { contactId: string } }) {
  try {
    const { contactId } = await params;
    const contact = dbManager.getItemById('contacts', contactId);
    if (!contact) {
      return NextResponse.json({ message: `Contact with ID ${contactId} not found.` }, { status: 404 });
    }
    const updatedContact = dbManager.updateItem('contacts', contactId, { is_favorite: !contact.is_favorite });
    return NextResponse.json(updatedContact, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to toggle favorite contact", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/contacts/[contactId]/favorite/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/contacts/[contactId]/route.ts

// app/api/mock/contacts/[contactId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateContactRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { contactId: string } }) {
  try {
    const { contactId } = await params;
    // Note: For GET by ID, contactable_type and contactable_id might also be needed for security/scoping in a real API.
    const contact = dbManager.getItemById('contacts', contactId);
    if (!contact) {
      return NextResponse.json({ message: `Contact with ID ${contactId} not found.` }, { status: 404 });
    }
    return NextResponse.json(contact);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get contact", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: { contactId: string } }) {
  try {
    const { contactId } = await params;
    const body = await _request.json() as UpdateContactRequest;
    const updatedContact = dbManager.updateItem('contacts', contactId, body);
    if (!updatedContact) {
      return NextResponse.json({ message: `Contact with ID ${contactId} not found.` }, { status: 404 });
    }
    return NextResponse.json(updatedContact, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update contact", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: { contactId: string } }) {
  try {
    const { contactId } = await params;
    const deleted = dbManager.deleteItem('contacts', contactId);
    if (!deleted) {
      return NextResponse.json({ message: `Contact with ID ${contactId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Contact deleted successfully." }, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete contact", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/contacts/[contactId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/contacts/route.ts

// app/api/mock/contacts/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ContactDto, CreateContactRequest, ContactableType } from '@/types/organization';

export async function GET(_request: NextRequest) {
  try {
    const { searchParams } = new URL(_request.url);
    const contactableType = searchParams.get('entityType') as ContactableType | null;
    const contactableId = searchParams.get('entityId');

    if (!contactableType || !contactableId) {
      return NextResponse.json({ message: "contactableType and contactableId query params are required." }, { status: 400 });
    }
    const allContacts = dbManager.getCollection('contacts');
    const filteredContacts = allContacts.filter(c => c.contactable_type === contactableType && c.contactable_id === contactableId);
    return NextResponse.json(filteredContacts);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get contacts", error: error.message }, { status: 500 });
  }
}

export async function POST(_request: NextRequest) {
  try {
    const { searchParams } = new URL(_request.url);
    const contactableType = searchParams.get('entityType') as ContactableType | null;
    const contactableId = searchParams.get('entityId');
    const body = await _request.json() as CreateContactRequest;

    if (!contactableType || !contactableId) {
      return NextResponse.json({ message: "contactableType and contactableId query params are required." }, { status: 400 });
    }
    if (!body.first_name && !body.last_name && !body.email && !body.phone_number) {
        return NextResponse.json({ message: "At least one contact detail is required." }, { status: 400 });
    }

    const newContactData: Omit<ContactDto, 'contact_id' | 'created_at' | 'updated_at'> = {
        ...body,
        contactable_id: contactableId,
        contactable_type: contactableType,
        is_favorite: false,
    };
    const createdContact = dbManager.addItem('contacts', newContactData);
    return NextResponse.json(createdContact, { status: 201 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to create contact", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/contacts/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/[entityType]/[entityId]/addresses/[addressId]/favorite/route.ts

// app/api/mock/[entityType]/[entityId]/addresses/[addressId]/favorite/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AddressableType } from '@/types/organization';

interface RouteParams {
  params: {
    entityType: AddressableType;
    entityId: string;
    addressId: string;
  };
}

export async function PUT(_request: NextRequest, { params }: RouteParams) {
  try {
    const { entityId, entityType, addressId } = await params;
    const allAddresses = dbManager.getCollection('addresses');
    const targetAddress = allAddresses.find(addr => addr.address_id === addressId);
    if (!targetAddress || targetAddress.addressable_id !== entityId) {
      return NextResponse.json({ message: `Address with ID ${addressId} not found for this entity.` }, { status: 404 });
    }
    allAddresses.forEach(addr => {
      if (addr.addressable_id === entityId && addr.addressable_type === entityType) {
        addr.is_default = false;
      }
    });
    targetAddress.is_default = true;
    dbManager.saveCollection('addresses', allAddresses);
    const updatedAddress = dbManager.getItemById('addresses', addressId);
    return NextResponse.json(updatedAddress, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to set default address", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/[entityType]/[entityId]/addresses/[addressId]/favorite/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/[entityType]/[entityId]/addresses/[addressId]/route.ts

// app/api/mock/[entityType]/[entityId]/addresses/[addressId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateAddressRequest, AddressableType } from '@/types/organization';

interface RouteParams {
  params: {
    entityType: AddressableType;
    entityId: string;
    addressId: string;
  };
}

export async function GET(_request: NextRequest, { params }: RouteParams) { /* ... GET logic ... */ 
  try {
    const { addressId } = await params;
    const address = dbManager.getItemById('addresses', addressId);
    if (!address || address.addressable_id !== params.entityId) {
      return NextResponse.json({ message: `Address with ID ${addressId} not found for this entity.` }, { status: 404 });
    }
    return NextResponse.json(address);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get address", error: error.message }, { status: 500 });
  }
}
export async function PUT(_request: NextRequest, { params }: RouteParams) { /* ... PUT logic ... */
  try {
    const { addressId } = await params;
    const body = await _request.json() as UpdateAddressRequest;
    const updatedAddress = dbManager.updateItem('addresses', addressId, body);
    if (!updatedAddress) {
      return NextResponse.json({ message: `Address with ID ${addressId} not found.` }, { status: 404 });
    }
    return NextResponse.json(updatedAddress, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update address", error: error.message }, { status: 500 });
  }
}
export async function DELETE(_request: NextRequest, { params }: RouteParams) { /* ... DELETE logic ... */
  try {
    const { addressId } = await params;
    const deleted = dbManager.deleteItem('addresses', addressId);
    if (!deleted) {
      return NextResponse.json({ message: `Address with ID ${addressId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Address deleted successfully." }, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete address", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/[entityType]/[entityId]/addresses/[addressId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/[entityType]/[entityId]/addresses/route.ts

// app/api/mock/[entityType]/[entityId]/addresses/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreateAddressRequest, AddressableType, AddressDto } from '@/types/organization';

interface RouteParams {
  params: {
    entityType: AddressableType;
    entityId: string;
  };
}

export async function GET(_request: NextRequest, { params }: RouteParams) {
  try {
    const { entityType, entityId } = await params;
    const allAddresses = dbManager.getCollection('addresses');
    const filteredAddresses = allAddresses.filter(
      addr => addr.addressable_type === entityType && addr.addressable_id === entityId
    );
    return NextResponse.json(filteredAddresses);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get addresses", error: error.message }, { status: 500 });
  }
}

export async function POST(_request: NextRequest, { params }: RouteParams) {
  try {
    const { entityType, entityId } = await params;
    const body = await _request.json() as CreateAddressRequest;
    if (!body.address_line_1 || !body.city || !body.state || !body.zip_code || !body.country_id) {
      return NextResponse.json({ message: "Address line 1, city, state, country and zip code are required." }, { status: 400 });
    }
    const newAddressData: Omit<AddressDto, 'address_id' | 'created_at' | 'updated_at'> = {
      ...body,
      addressable_id: entityId,
      addressable_type: entityType,
      is_default: body.default || false,
    };
    const createdAddress = dbManager.addItem('addresses', newAddressData);
    return NextResponse.json(createdAddress, { status: 201 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to create address", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/[entityType]/[entityId]/addresses/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/[entityType]/[entityId]/contacts/[contactId]/favorite/route.ts

// app/api/mock/[entityType]/[entityId]/contacts/[contactId]/favorite/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ContactableType } from '@/types/organization';

interface RouteParams {
  params: {
    entityType: ContactableType;
    entityId: string;
    contactId: string;
  };
}

export async function PUT(_request: NextRequest, { params }: RouteParams) {
  try {
    const { contactId } = await params;
    const contact = dbManager.getItemById('contacts', contactId);
    if (!contact) {
      return NextResponse.json({ message: `Contact with ID ${contactId} not found.` }, { status: 404 });
    }
    const updatedContact = dbManager.updateItem('contacts', contactId, { is_favorite: !contact.is_favorite });
    return NextResponse.json(updatedContact, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to toggle favorite contact", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/[entityType]/[entityId]/contacts/[contactId]/favorite/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/[entityType]/[entityId]/contacts/[contactId]/route.ts

// app/api/mock/[entityType]/[entityId]/contacts/[contactId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateContactRequest, ContactableType } from '@/types/organization';

interface RouteParams {
  params: {
    entityType: ContactableType;
    entityId: string;
    contactId: string;
  };
}

export async function GET(_request: NextRequest, { params }: RouteParams) { /* ... GET logic ... */
  try {
    const { contactId } = await params;
    const contact = dbManager.getItemById('contacts', contactId);
    if (!contact || contact.contactable_id !== params.entityId) {
      return NextResponse.json({ message: `Contact with ID ${contactId} not found for this entity.` }, { status: 404 });
    }
    return NextResponse.json(contact);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get contact", error: error.message }, { status: 500 });
  }
}
export async function PUT(_request: NextRequest, { params }: RouteParams) { /* ... PUT logic ... */
  try {
    const { contactId } = await params;
    const body = await _request.json() as UpdateContactRequest;
    const updatedContact = dbManager.updateItem('contacts', contactId, body);
    if (!updatedContact) {
      return NextResponse.json({ message: `Contact with ID ${contactId} not found.` }, { status: 404 });
    }
    return NextResponse.json(updatedContact, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update contact", error: error.message }, { status: 500 });
  }
}
export async function DELETE(_request: NextRequest, { params }: RouteParams) { /* ... DELETE logic ... */
  try {
    const { contactId } = await params;
    const deleted = dbManager.deleteItem('contacts', contactId);
    if (!deleted) {
      return NextResponse.json({ message: `Contact with ID ${contactId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Contact deleted successfully." }, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete contact", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/[entityType]/[entityId]/contacts/[contactId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/[entityType]/[entityId]/contacts/route.ts

// app/api/mock/[entityType]/[entityId]/contacts/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreateContactRequest, ContactableType, ContactDto } from '@/types/organization';

interface RouteParams {
  params: {
    entityType: ContactableType; // Generic name
    entityId: string;
  };
}

export async function GET(_request: NextRequest, { params }: RouteParams) {
  try {
    const { entityType, entityId } = await params;
    const allContacts = dbManager.getCollection('contacts');
    const filteredContacts = allContacts.filter(
      c => c.contactable_type === entityType && c.contactable_id === entityId
    );
    return NextResponse.json(filteredContacts);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get contacts", error: error.message }, { status: 500 });
  }
}

export async function POST(_request: NextRequest, { params }: RouteParams) {
  try {
    const { entityType, entityId } = await params;
    const body = await _request.json() as CreateContactRequest;
    if (!body.first_name || !body.last_name) {
      return NextResponse.json({ message: "First name and last name are required." }, { status: 400 });
    }
    const newContactData: Omit<ContactDto, 'contact_id' | 'created_at' | 'updated_at'> = {
      ...body,
      contactable_id: entityId,
      contactable_type: entityType,
      is_favorite: false,
    };
    const createdContact = dbManager.addItem('contacts', newContactData);
    return NextResponse.json(createdContact, { status: 201 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to create contact", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/[entityType]/[entityId]/contacts/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/[entityType]/notes.txt

entityType = addressableType | contactableType
entityId =  addressId | contactId

Did it like this to abide to NExt.JS slug rules
Error: You cannot use different slug names for the same dynamic path ('addressableType' !== 'contactableType').// END OF FILE: app/api/mock/[entityType]/notes.txt

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/geo/reverse/route.ts

import { NextResponse, NextRequest } from 'next/server';

const NOMINATIM_BASE_URL = "https://nominatim.openstreetmap.org";

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const lat = searchParams.get('lat');
  const lon = searchParams.get('lon');

  if (!lat || !lon) {
    return NextResponse.json({ message: "Latitude and Longitude are required." }, { status: 400 });
  }

  const nominatimUrl = `${NOMINATIM_BASE_URL}/reverse?format=json&lat=${lat}&lon=${lon}`;

  try {
    const response = await fetch(nominatimUrl, {
      headers: {
        // Nominatim requires a specific User-Agent header for their public API
        'User-Agent': 'YowyobDashboard/1.0 (contact@yowyob.com)',
      },
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Nominatim API Error:", errorText);
      return NextResponse.json({ message: "Failed to fetch address from map service." }, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);

  } catch (error) {
    console.error("Proxy to Nominatim failed:", error);
    return NextResponse.json({ message: "Internal server error proxying to map service." }, { status: 502 });
  }
}// END OF FILE: app/api/mock/geo/reverse/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/geo/search/route.ts

import { NextResponse, NextRequest } from 'next/server';

const NOMINATIM_BASE_URL = "https://nominatim.openstreetmap.org";

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const query = searchParams.get('q');

  if (!query || query.length < 3) {
    return NextResponse.json({ message: "A search query of at least 3 characters is required." }, { status: 400 });
  }

  const nominatimUrl = `${NOMINATIM_BASE_URL}/search?q=${encodeURIComponent(query)}&format=json&addressdetails=1&limit=5`;

  try {
    const response = await fetch(nominatimUrl, {
      headers: {
        'User-Agent': 'YowyobDashboard/1.0 (contact@yowyob.com)',
      },
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Nominatim API Error:", errorText);
      return NextResponse.json({ message: "Failed to search for address." }, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);

  } catch (error) {
    console.error("Proxy to Nominatim failed:", error);
    return NextResponse.json({ message: "Internal server error proxying to map service." }, { status: 502 });
  }
}// END OF FILE: app/api/mock/geo/search/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/media/infos/[service]/[type]/[path]/[resource_id]/route.ts

// For GET (get metadata list for a resource)
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ServiceType, MediaType } from '@/types/media';

interface RouteParams {
    params: { service: ServiceType; type: MediaType; path: string; resource_id: string; }
}

export async function GET(_req: NextRequest, { params }: RouteParams) {
    try {
        const allMedia = dbManager.getCollection('media');
        const resourceMedia = allMedia.filter(m => 
            m.resource_id === params.resource_id &&
            m.service === params.service &&
            m.type === params.type
        );
        return NextResponse.json(resourceMedia);
    } catch (error) {
        return NextResponse.json({ message: "Failed to get media info", error: error.message }, { status: 500 });
    }
}// END OF FILE: app/api/mock/media/infos/[service]/[type]/[path]/[resource_id]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/media/[service]/[type]/[path]/[resource_id]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { MediaDto, UploadMediaResponse, ServiceType, MediaType } from '@/types/media';

interface RouteParams {
    params: { 
        service: ServiceType; 
        type: MediaType; 
        path: string; 
        resource_id: string; // This segment can be a resource_id for GET/POST or a filename for DELETE
    }
}

// GET /media/infos/{service}/{type}/{path}/{resource_id}
export async function GET(req: NextRequest, { params }: RouteParams) {
    const { resource_id, service, type, path } = await params;
    try {
        const allMedia = dbManager.getCollection('media');
        const resourceMedia = allMedia.filter(m => 
            m.resource_id === resource_id &&
            m.service === service &&
            m.type === type &&
            m.location?.startsWith(path)
        );
        return NextResponse.json(resourceMedia);
    } catch (error) {
        return NextResponse.json({ message: "Failed to get media info", error: error.message }, { status: 500 });
    }
}

// POST /media/{service}/{type}/{path}/{resource_id}
export async function POST(req: NextRequest, { params }: RouteParams) {
    const { resource_id, service, type, path } = await params;
    try {
        const body = await req.json(); 

        const newMedia: Omit<MediaDto, 'id' | 'created_at' | 'updated_at'> = {
            name: body.fileName,
            real_name: `mock_${Date.now()}_${body.fileName}`,
            size: body.fileSize,
            mime: body.fileType,
            extension: body.fileName.split('.').pop() || '',
            is_primary: body.isPrimary || false,
            description: body.description,
            location: `${path}/mock_${Date.now()}_${body.fileName}`,
            resource_id,
            service,
            type,
        };
        const createdMedia = dbManager.addItem('media', newMedia);
        
        const response: UploadMediaResponse = {
            id: createdMedia.id,
            resourceId: createdMedia.resource_id,
            url: `https://picsum.photos/seed/${createdMedia.id}/400/300`, 
            uri: `/media/${createdMedia.service}/${createdMedia.type}${createdMedia.location}`,
        };

        return NextResponse.json(response, { status: 200 });
    } catch (error) {
        return NextResponse.json({ message: "Failed to upload media", error: error.message }, { status: 500 });
    }
}

// DELETE /media/{service}/{type}/{path}/{filename}
// The {filename} from the API spec is mapped to the {resource_id} parameter here.
export async function DELETE(req: NextRequest, { params }: RouteParams) {
    const { service, type, path, resource_id: filename } = await params; // Treat param as filename
    try {
        const allMedia = dbManager.getCollection('media');
        const locationToDelete = `${path}/${filename}`;
        
        const initialLength = allMedia.length;
        const filteredMedia = allMedia.filter(m => m.location !== locationToDelete);

        if (filteredMedia.length < initialLength) {
            dbManager.saveCollection('media', filteredMedia);
            return NextResponse.json(true, { status: 200 });
        } else {
            return NextResponse.json({ message: "File not found for deletion" }, { status: 404 });
        }
    } catch (error) {
        return NextResponse.json({ message: "Failed to delete media", error: error.message }, { status: 500 });
    }
}// END OF FILE: app/api/mock/media/[service]/[type]/[path]/[resource_id]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/all/route.ts

// app/api/mock/organization/all/route.ts
import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';

export async function GET(_request: Request) {
  try {
    const orgs = dbManager.getCollection('organizationsDetails');
    return NextResponse.json(orgs);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get all organizations", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/all/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/domain/[domainId]/route.ts

// app/api/mock/organization/domain/[domainId]/route.ts
import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';

export async function GET(_request: Request, { params }: { params: { domainId: string } }) {
  try {
    const { domainId } = await params;
    const allOrgs = dbManager.getCollection('organizationsDetails');
    const orgsInDomain = allOrgs.filter(org => org.business_domains?.includes(domainId));
    return NextResponse.json(orgsInDomain);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get organizations by domain", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/domain/[domainId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/add/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AffectCustomerRequest } from '@/types/organization';

export async function POST(request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await request.json() as AffectCustomerRequest;

    if (!body.customer_id) {
      return NextResponse.json({ message: "customer_id is required." }, { status: 400 });
    }

    // Find the existing customer record
    const customer = dbManager.getItemById('orgCustomers', body.customer_id);

    if (!customer || customer.organization_id !== orgId) {
      return NextResponse.json({ message: `Customer with ID ${body.customer_id} not found in this organization.` }, { status: 404 });
    }

    // "Affect" the customer by assigning the agency_id
    const updatedCustomer = dbManager.updateItem('orgCustomers', body.customer_id, { agency_id: agencyId });

    if (!updatedCustomer) {
      return NextResponse.json({ message: `Could not affect customer ${body.customer_id} to agency ${agencyId}.` }, { status: 500 });
    }

    return NextResponse.json(updatedCustomer, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to affect customer to agency", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/add/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/[customerId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateCustomerRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, agencyId: string, customerId: string } }) {
  try {
    const { orgId, agencyId, customerId } = await params;
    const customer = dbManager.getItemById('orgCustomers', customerId);
    if (!customer || customer.organization_id !== orgId || customer.agency_id !== agencyId) {
      return NextResponse.json({ message: `Customer ${customerId} not found for agency ${agencyId} in org ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(customer);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get agency customer", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: { orgId: string, agencyId: string, customerId: string } }) {
  try {
    const { orgId, agencyId, customerId } = await params;
    const body = await request.json() as UpdateCustomerRequest;
    const existing = dbManager.getItemById('orgCustomers', customerId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Customer ${customerId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const updatedCustomer = dbManager.updateItem('orgCustomers', customerId, body);
    return NextResponse.json(updatedCustomer, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update agency customer", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: { orgId: string, agencyId: string, customerId: string } }) {
  try {
    const { orgId, agencyId, customerId } = await params;
    const existing = dbManager.getItemById('orgCustomers', customerId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Customer ${customerId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('orgCustomers', customerId);
    if (!deleted) return NextResponse.json({ message: `Customer ${customerId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Agency customer deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete agency customer", error: error.message }, { status: 500 }); }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/[customerId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CustomerDto, CreateCustomerRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const allCustomers = dbManager.getCollection('orgCustomers');
    const agencyCustomers = allCustomers.filter(c => c.organization_id === orgId && c.agency_id === agencyId);
    return NextResponse.json(agencyCustomers);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get agency customers", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await request.json() as CreateCustomerRequest;

    if (!body.first_name || !body.last_name) {
      return NextResponse.json({ message: "First and last name are required." }, { status: 400 });
    }

    const newCustomerData: Omit<CustomerDto, 'customer_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      agency_id: agencyId, // Assign the agency ID
      partner_type: "CUSTOMER",
    };
    const createdCustomer = dbManager.addItem('orgCustomers', newCustomerData);
    return NextResponse.json(createdCustomer, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create agency customer", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/customers/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/add/route.ts

// app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/add/route.ts
// This is for the affectEmployeeToAgency endpoint
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { EmployeeResponse, AffectEmployeeRequest, EmployeeDto } from '@/types/organization';

export async function POST(_request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await _request.json() as AffectEmployeeRequest;

    if (!body.employee_id) {
      return NextResponse.json({ message: "employee_id is required." }, { status: 400 });
    }

    // This mock assumes the employee_id refers to an existing global user/BA or an employee from the main org.
    // We are "affecting" or linking them to this agency.
    // or create a new employment record linking user to agency.

  const employee = dbManager.getItemById('employees', body.employee_id);
    if (!employee) {
      // If not found as an employee, maybe it a BusinessActor to be made an employee
      // For simplicity, wel assume it should exist or we create a new one.
      
      return NextResponse.json({ message: `Employee/User with ID ${body.employee_id} not found to affect to agency.` }, { status: 404 });
    }

    // Update the employee agency_id (if they were org-level) or just confirm the link
    const updatedEmployee = dbManager.updateItem('employees', body.employee_id, { agency_id: agencyId, organization_id: orgId });

    if (!updatedEmployee) {
      return NextResponse.json({ message: `Could not affect employee ${body.employee_id} to agency ${agencyId}.` }, { status: 500 });
    }

    const response: EmployeeResponse = {
      employee_id: updatedEmployee.employee_id,
      first_name: updatedEmployee.first_name,
      last_name: updatedEmployee.last_name,
      organization_id: updatedEmployee.organization_id,
      agency_id: updatedEmployee.agency_id,
      employee_role: updatedEmployee.employee_role,
      department: updatedEmployee.department,
    };
    return NextResponse.json(response, { status: 201 }); // 201 Created or 200 OK
  } catch (error)  {
    return NextResponse.json({ message: "Failed to affect employee to agency", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/add/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/[employeeId]/route.ts

// app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/[employeeId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { EmployeeDto, UpdateEmployeeRequest, EmployeeResponse } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { orgId: string, agencyId: string, employeeId: string } }) {
  try {
    const { orgId, agencyId, employeeId } = await params;
    const employee = dbManager.getItemById('employees', employeeId);
    if (!employee || employee.organization_id !== orgId || employee.agency_id !== agencyId) {
      return NextResponse.json({ message: `Employee ID ${employeeId} not found for agency ${agencyId} in org ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(employee);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get agency employee", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: { orgId: string, agencyId: string, employeeId: string } }) {
  try {
    const { orgId, agencyId, employeeId } = await params;
    const body = await _request.json() as UpdateEmployeeRequest;
    const existing = dbManager.getItemById('employees', employeeId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Employee ID ${employeeId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const updatedEmployeeFull = dbManager.updateItem('employees', employeeId, body);
    if (!updatedEmployeeFull) {
      return NextResponse.json({ message: `Employee ID ${employeeId} update failed.` }, { status: 500 });
    }
    const response: EmployeeResponse = {
      employee_id: updatedEmployeeFull.employee_id,
      first_name: updatedEmployeeFull.first_name,
      last_name: updatedEmployeeFull.last_name,
      organization_id: updatedEmployeeFull.organization_id,
      agency_id: updatedEmployeeFull.agency_id,
      employee_role: updatedEmployeeFull.employee_role,
      department: updatedEmployeeFull.department,
    };
    return NextResponse.json(response, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update agency employee", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: { orgId: string, agencyId: string, employeeId: string } }) {
  try {
    const { orgId, agencyId, employeeId } = await params;
    const existing = dbManager.getItemById('employees', employeeId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Employee ID ${employeeId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('employees', employeeId);
    if (!deleted) {
      return NextResponse.json({ message: `Employee ID ${employeeId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Agency employee deleted." }, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete agency employee", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/[employeeId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/route.ts


import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { EmployeeResponse, CreateEmployeeRequest, EmployeeDto } from '@/types/organization';

export async function POST(_request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await _request.json() as CreateEmployeeRequest;

    if (!body.first_name || !body.last_name || !body.employee_role) {
      return NextResponse.json({ message: "First name, last name, and role are required." }, { status: 400 });
    }

    const newEmployeeData: Omit<EmployeeDto, 'employee_id' | 'created_at' | 'updated_at' | 'user_id' | 'partner_type' | 'partner_details' | 'is_manager'> = {
      ...body,
      organization_id: orgId,
      agency_id: agencyId, // Key difference: assign agencyId
    };
    const createdEmployeeFull = dbManager.addItem('employees', newEmployeeData);

    const response: EmployeeResponse = {
      employee_id: createdEmployeeFull.employee_id,
      first_name: createdEmployeeFull.first_name,
      last_name: createdEmployeeFull.last_name,
      organization_id: createdEmployeeFull.organization_id,
      agency_id: createdEmployeeFull.agency_id,
      employee_role: createdEmployeeFull.employee_role,
      department: createdEmployeeFull.department,
      created_at: createdEmployeeFull.created_at,
      updated_at: createdEmployeeFull.updated_at,
    };
    return NextResponse.json(response, { status: 201 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to create agency employee", error: error.message }, { status: 500 });
  }
}


export async function GET(_request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const allEmployees = dbManager.getCollection('employees');
    const agencyEmployees = allEmployees.filter(emp => emp.organization_id === orgId && emp.agency_id === agencyId);
    return NextResponse.json(agencyEmployees);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get agency employees", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/employees/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/prospects/[prospectId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateProspectRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, agencyId: string, prospectId: string } }) {
  try {
    const { orgId, agencyId, prospectId } = await params;
    const prospect = dbManager.getItemById('prospects', prospectId);
    if (!prospect || prospect.organization_id !== orgId || prospect.agency_id !== agencyId) {
      return NextResponse.json({ message: `Prospect ${prospectId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    return NextResponse.json(prospect);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get agency prospect", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: { orgId: string, agencyId: string, prospectId: string } }) {
  try {
    const { orgId, agencyId, prospectId } = await params;
    const body = await request.json() as UpdateProspectRequest;
    const existing = dbManager.getItemById('prospects', prospectId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Prospect ${prospectId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const updatedProspect = dbManager.updateItem('prospects', prospectId, body);
    return NextResponse.json(updatedProspect, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update agency prospect", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: { orgId: string, agencyId: string, prospectId: string } }) {
  try {
    const { orgId, agencyId, prospectId } = await params;
    const existing = dbManager.getItemById('prospects', prospectId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Prospect ${prospectId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('prospects', prospectId);
    if (!deleted) return NextResponse.json({ message: `Prospect ${prospectId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Agency prospect deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete agency prospect", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/prospects/[prospectId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/prospects/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ProspectDto, CreateProspectRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const allProspects = dbManager.getCollection('prospects');
    const agencyProspects = allProspects.filter(p => p.organization_id === orgId && p.agency_id === agencyId);
    return NextResponse.json(agencyProspects);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get agency prospects", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await request.json() as CreateProspectRequest;

    if (!body.first_name && !body.last_name) {
      return NextResponse.json({ message: "First and last name are required." }, { status: 400 });
    }

    const newProspectData: Omit<ProspectDto, 'prospect_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      agency_id: agencyId,
      partner_type: "PROSPECT",
    };
    const createdProspect = dbManager.addItem('prospects', newProspectData);
    return NextResponse.json(createdProspect, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create agency prospect", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/prospects/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/route.ts

// app/api/mock/organization/[orgId]/agencies/[agencyId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateAgencyRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const agency = dbManager.getItemById('agencies', agencyId);
    if (!agency || agency.organization_id !== orgId) {
      return NextResponse.json({ message: `Agency with ID ${agencyId} not found for organization ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(agency);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get agency", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await _request.json() as UpdateAgencyRequest;
    const existingAgency = dbManager.getItemById('agencies', agencyId);
    if (!existingAgency || existingAgency.organization_id !== orgId) {
      return NextResponse.json({ message: `Agency with ID ${agencyId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const updatedAgency = dbManager.updateItem('agencies', agencyId, body);
    return NextResponse.json(updatedAgency, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update agency", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const existingAgency = dbManager.getItemById('agencies', agencyId);
    if (!existingAgency || existingAgency.organization_id !== orgId) {
      return NextResponse.json({ message: `Agency with ID ${agencyId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('agencies', agencyId);
    if (!deleted) { // Should not happen if check above passed
      return NextResponse.json({ message: `Agency with ID ${agencyId} not found.` }, { status: 404 });
    }
    // TODO: Handle cascading deletes or disassociation of employees, customers etc. linked to this agency
    return NextResponse.json(null, { status: 204 }); // Spec: 204 No Content
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete agency", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/sales-people/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { SalesPersonDto, CreateSalesPersonRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const allSalesPersons = dbManager.getCollection('salesPersons');
    const agencySalesPersons = allSalesPersons.filter(sp => sp.organization_id === orgId && sp.agency_id === agencyId);
    return NextResponse.json(agencySalesPersons);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get agency sales people", error: error.message }, { status: 500 }); }
}

export async function POST(request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await request.json() as CreateSalesPersonRequest;

    if (!body.name) {
      return NextResponse.json({ message: "Sales person name is required." }, { status: 400 });
    }

    const newSpData: Omit<SalesPersonDto, 'sales_person_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      agency_id: agencyId,
      partner_type: "SALE"
    };
    const createdSp = dbManager.addItem('salesPersons', newSpData);
    return NextResponse.json(createdSp, { status: 201 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to create agency sales person", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/sales-people/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/sales-people/[salesPersonId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateSalesPersonRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, agencyId: string, salesPersonId: string } }) {
  try {
    const { orgId, agencyId, salesPersonId } = await params;
    const sp = dbManager.getItemById('salesPersons', salesPersonId);
    if (!sp || sp.organization_id !== orgId || sp.agency_id !== agencyId) {
      return NextResponse.json({ message: `SalesPerson ${salesPersonId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    return NextResponse.json(sp);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get agency sales person", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: { orgId: string, agencyId: string, salesPersonId: string } }) {
  try {
    const { orgId, agencyId, salesPersonId } = await params;
    const body = await request.json() as UpdateSalesPersonRequest;
    const existing = dbManager.getItemById('salesPersons', salesPersonId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `SalesPerson ${salesPersonId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const updatedSp = dbManager.updateItem('salesPersons', salesPersonId, body);
    return NextResponse.json(updatedSp, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update agency sales person", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: { orgId: string, agencyId: string, salesPersonId: string } }) {
  try {
    const { orgId, agencyId, salesPersonId } = await params;
    const existing = dbManager.getItemById('salesPersons', salesPersonId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `SalesPerson ${salesPersonId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('salesPersons', salesPersonId);
    if (!deleted) return NextResponse.json({ message: `SalesPerson ${salesPersonId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Agency sales person deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete agency sales person", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/sales-people/[salesPersonId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/status/route.ts

// app/api/mock/organization/[orgId]/agencies/[agencyId]/status/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AgencyDto, UpdateAgencyStatusRequest } from '@/types/organization';

export async function PUT(_request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await _request.json() as UpdateAgencyStatusRequest;

    if (typeof body.active !== 'boolean') {
        return NextResponse.json({ message: "Field 'active' (boolean) is required." }, { status: 400 });
    }
    const existingAgency = dbManager.getItemById('agencies', agencyId);
    if (!existingAgency || existingAgency.organization_id !== orgId) {
      return NextResponse.json({ message: `Agency with ID ${agencyId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const updatedAgency = dbManager.updateItem('agencies', agencyId, { is_active: body.active });
    return NextResponse.json(updatedAgency, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update agency status", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/status/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/add/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AffectProviderRequest } from '@/types/organization';

export async function POST(request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await request.json() as AffectProviderRequest;

    if (!body.provider_id) {
      return NextResponse.json({ message: "provider_id is required." }, { status: 400 });
    }

    const provider = dbManager.getItemById('providers', body.provider_id);

    if (!provider || provider.organization_id !== orgId) {
      return NextResponse.json({ message: `Supplier with ID ${body.provider_id} not found in this organization.` }, { status: 404 });
    }

    const updatedProvider = dbManager.updateItem('providers', body.provider_id, { agency_id: agencyId });

    if (!updatedProvider) {
      return NextResponse.json({ message: `Could not affect supplier ${body.provider_id} to agency ${agencyId}.` }, { status: 500 });
    }

    return NextResponse.json(updatedProvider, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to affect supplier to agency", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/add/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/[providerId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateProviderRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, agencyId: string, providerId: string } }) {
  try {
    const { orgId, agencyId, providerId } = await params;
    const provider = dbManager.getItemById('providers', providerId);
    if (!provider || provider.organization_id !== orgId || provider.agency_id !== agencyId) {
      return NextResponse.json({ message: `Supplier ${providerId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    return NextResponse.json(provider);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get agency supplier", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: { orgId: string, agencyId: string, providerId: string } }) {
  try {
    const { orgId, agencyId, providerId } = await params;
    const body = await request.json() as UpdateProviderRequest;
    const existing = dbManager.getItemById('providers', providerId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Supplier ${providerId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const updatedProvider = dbManager.updateItem('providers', providerId, body);
    return NextResponse.json(updatedProvider, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update agency supplier", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: { orgId: string, agencyId: string, providerId: string } }) {
  try {
    const { orgId, agencyId, providerId } = await params;
    const existing = dbManager.getItemById('providers', providerId);
    if (!existing || existing.organization_id !== orgId || existing.agency_id !== agencyId) {
      return NextResponse.json({ message: `Supplier ${providerId} not found for agency ${agencyId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('providers', providerId);
    if (!deleted) return NextResponse.json({ message: `Supplier ${providerId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Agency supplier deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete agency supplier", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/[providerId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ProviderDto, CreateProviderRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const allProviders = dbManager.getCollection('providers');
    const agencyProviders = allProviders.filter(p => p.organization_id === orgId && p.agency_id === agencyId);
    return NextResponse.json(agencyProviders);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get agency suppliers", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: { orgId: string, agencyId: string } }) {
  try {
    const { orgId, agencyId } = await params;
    const body = await request.json() as CreateProviderRequest;

    if (!body.first_name && !body.last_name) {
      return NextResponse.json({ message: "First and last name are required." }, { status: 400 });
    }

    const newProviderData: Omit<ProviderDto, 'provider_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      agency_id: agencyId,
      partner_type: "SUPPLIER",
      is_active: true,
    };
    const createdProvider = dbManager.addItem('providers', newProviderData);
    return NextResponse.json(createdProvider, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create agency supplier", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/agencies/[agencyId]/suppliers/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/agencies/route.ts

// app/api/mock/organization/[orgId]/agencies/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { AgencyDto, CreateAgencyRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const { searchParams } = new URL(_request.url);
    const activeFilter = searchParams.get('active'); // boolean as string or null

    const allAgencies = dbManager.getCollection('agencies');
    let filteredAgencies = allAgencies.filter(agency => agency.organization_id === orgId);

    if (activeFilter !== null) {
      const isActive = activeFilter === 'true';
      filteredAgencies = filteredAgencies.filter(agency => agency.is_active === isActive);
    }
    return NextResponse.json(filteredAgencies);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get agencies", error: error.message }, { status: 500 });
  }
}

export async function POST(_request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const body = await _request.json() as CreateAgencyRequest;

    if (!body.short_name || !body.long_name || !body.location || !body.business_domains || body.business_domains.length === 0) {
      return NextResponse.json({ message: "Short name, long name, location, and at least one business domain are required." }, { status: 400 });
    }

    const newAgencyData: Omit<AgencyDto, 'agency_id' | 'created_at' | 'updated_at' | 'is_active' | 'owner_id'> = {
      ...body,
      organization_id: orgId,
      is_headquarter: false, // Default, can be changed via update if needed
    };
    const createdAgency = dbManager.addItem('agencies', { ...newAgencyData, is_active: true }); // Default new agencies to active
    return NextResponse.json(createdAgency, { status: 201 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to create agency", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/agencies/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/certifications/[certId]/route.ts

// app/api/mock/organization/[orgId]/certifications/[certId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CertificationDto, UpdateCertificationRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { orgId: string, certId: string } }) {
  try {
    const { certId } = await params;
    const cert = dbManager.getItemById('certifications', certId);
    if (!cert || cert.organization_id !== params.orgId) {
      return NextResponse.json({ message: `Certification with ID ${certId} not found for this organization.` }, { status: 404 });
    }
    return NextResponse.json(cert);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get certification", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: { orgId: string, certId: string } }) {
  try {
    const { orgId, certId } = await params;
    const body = await _request.json() as UpdateCertificationRequest;
     const existingCert = dbManager.getItemById('certifications', certId);
    if (!existingCert || existingCert.organization_id !== orgId) {
         return NextResponse.json({ message: `Certification with ID ${certId} not found for this organization.` }, { status: 404 });
    }
    const updatedCert = dbManager.updateItem('certifications', certId, body);
    return NextResponse.json(updatedCert, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update certification", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: { orgId: string, certId: string } }) {
  try {
    const { orgId, certId } = await params;
    const existingCert = dbManager.getItemById('certifications', certId);
    if (!existingCert || existingCert.organization_id !== orgId) {
         return NextResponse.json({ message: `Certification with ID ${certId} not found for this organization.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('certifications', certId);
    if (!deleted) {
      return NextResponse.json({ message: `Certification with ID ${certId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Certification deleted." }, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete certification", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/certifications/[certId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/certifications/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';

import { CertificationDto, CreateCertificationRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const allCerts = dbManager.getCollection('certifications');
    const filteredCerts = allCerts.filter(cert => cert.organization_id === orgId);
    return NextResponse.json(filteredCerts);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get certifications", error: error.message }, { status: 500 });
  }
}


export async function POST(_request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const body = await _request.json() as CreateCertificationRequest;

    if (!body.name || !body.type) {
      return NextResponse.json({ message: "Name and Type are required for certification." }, { status: 400 });
    }
    const newCertData: Omit<CertificationDto, 'certification_id' | 'created_at' | 'updated_at'> = {
      ...body,
      organization_id: orgId,
    };
    const createdCert = dbManager.addItem('certifications', newCertData);
    return NextResponse.json(createdCert, { status: 201 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to create certification", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/certifications/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/customers/[customerId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateCustomerRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, customerId: string } }) {
  try {
    const { orgId, customerId } = await params;
    const customer = dbManager.getItemById('orgCustomers', customerId);
    if (!customer || customer.organization_id !== orgId) {
      return NextResponse.json({ message: `Customer ${customerId} not found for organization ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(customer);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get organization customer", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: { orgId: string, customerId: string } }) {
  try {
    const { orgId, customerId } = await params;
    const body = await request.json() as UpdateCustomerRequest;
    const existing = dbManager.getItemById('orgCustomers', customerId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Customer ${customerId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const updatedCustomer = dbManager.updateItem('orgCustomers', customerId, body);
    return NextResponse.json(updatedCustomer, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update organization customer", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: { orgId: string, customerId: string } }) {
  try {
    const { orgId, customerId } = await params;
    const existing = dbManager.getItemById('orgCustomers', customerId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Customer ${customerId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('orgCustomers', customerId);
    if (!deleted) return NextResponse.json({ message: `Customer ${customerId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Organization customer deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete organization customer", error: error.message }, { status: 500 }); }
}// END OF FILE: app/api/mock/organization/[orgId]/customers/[customerId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/customers/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CustomerDto, CreateCustomerRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const allCustomers = dbManager.getCollection('orgCustomers');
    // Org-level customers are those linked to the org but NOT to a specific agency
    const orgCustomers = allCustomers.filter(c => c.organization_id === orgId && !c.agency_id);
    return NextResponse.json(orgCustomers);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get organization customers", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const body = await request.json() as CreateCustomerRequest;
    
    if (!body.first_name || !body.last_name) {
      return NextResponse.json({ message: "First and last name are required." }, { status: 400 });
    }

    const newCustomerData: Omit<CustomerDto, 'customer_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      partner_type: "CUSTOMER",
    };
    const createdCustomer = dbManager.addItem('orgCustomers', newCustomerData);
    return NextResponse.json(createdCustomer, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create organization customer", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/customers/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/details/route.ts

// app/api/mock/organization/[orgId]/details/route.ts
import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { OrganizationDto } from '@/types/organization';

export async function GET(_request: Request, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    // For details, we use the 'organizationsDetails' collection
    const org = dbManager.getItemById('organizationsDetails', orgId);
    if (!org) {
      return NextResponse.json({ message: `Organization with ID ${orgId} not found.` }, { status: 404 });
    }
    return NextResponse.json(org);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get organization details", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/details/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/domains/[businessDomainId]/add/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { OrganizationDto } from '@/types/organization';

export async function PUT(_request: NextRequest, { params }: { params: { orgId: string, businessDomainId: string } }) {
  try {
    const { orgId, businessDomainId } = await params;
    const org = dbManager.getItemById('organizationsDetails', orgId);

    if (!org) {
      return NextResponse.json({ message: `Organization with ID ${orgId} not found.` }, { status: 404 });
    }
    // Ensure business_domains array exists
    if (!org.business_domains) {
      org.business_domains = [];
    }
    if (!org.business_domains.includes(businessDomainId)) {
      org.business_domains.push(businessDomainId);
      dbManager.updateItem('organizationsDetails', orgId, { business_domains: org.business_domains });
    }
    return NextResponse.json(org, { status: 202 }); // 202 Accepted as per spec
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to add business domain." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/domains/[businessDomainId]/add/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/domains/[businessDomainId]/remove/route.ts

// app/api/mock/organization/[orgId]/domains/[businessDomainId]/remove/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';

export async function DELETE(_request: NextRequest, { params }: { params: { orgId: string, businessDomainId: string } }) {
  try {
    const { orgId, businessDomainId } = await params;
    const org = dbManager.getItemById('organizationsDetails', orgId);

    if (!org || !org.business_domains) {
      return NextResponse.json({ message: `Organization with ID ${orgId} or its domains not found.` }, { status: 404 });
    }
    const initialLength = org.business_domains.length;
    org.business_domains = org.business_domains.filter(id => id !== businessDomainId);

    if (org.business_domains.length < initialLength) {
      dbManager.updateItem('organizationsDetails', orgId, { business_domains: org.business_domains });
    }
    return NextResponse.json(org, { status: 202 }); // 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: error.message || "Failed to remove business domain." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/domains/[businessDomainId]/remove/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/employees/[employeeId]/route.ts

// app/api/mock/organization/[orgId]/employees/[employeeId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { EmployeeDto, UpdateEmployeeRequest, EmployeeResponse } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { orgId: string, employeeId: string } }) {
  try {
    const { orgId, employeeId } = await params;
    const employee = dbManager.getItemById('employees', employeeId);
    if (!employee || employee.organization_id !== orgId) { // Also check orgId match
      return NextResponse.json({ message: `Employee with ID ${employeeId} not found for organization ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(employee);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get employee", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: { orgId: string, employeeId: string } }) {
  try {
    const { orgId, employeeId } = await params;
    const body = await _request.json() as UpdateEmployeeRequest;
    const existingEmployee = dbManager.getItemById('employees', employeeId);
    if (!existingEmployee || existingEmployee.organization_id !== orgId) {
      return NextResponse.json({ message: `Employee with ID ${employeeId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const updatedEmployeeFull = dbManager.updateItem('employees', employeeId, body);
     if (!updatedEmployeeFull) { // Should not happen if existingEmployee was found
      return NextResponse.json({ message: `Employee with ID ${employeeId} update failed.` }, { status: 500 });
    }
    const response: EmployeeResponse = {
        employee_id: updatedEmployeeFull.employee_id,
        first_name: updatedEmployeeFull.first_name,
        last_name: updatedEmployeeFull.last_name,
        organization_id: updatedEmployeeFull.organization_id,
        agency_id: updatedEmployeeFull.agency_id,
        employee_role: updatedEmployeeFull.employee_role,
        department: updatedEmployeeFull.department,
        created_at: updatedEmployeeFull.created_at,
        updated_at: updatedEmployeeFull.updated_at,
    };
    return NextResponse.json(response, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update employee", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: { orgId: string, employeeId: string } }) {
  try {
    const { orgId, employeeId } = await params;
    const existingEmployee = dbManager.getItemById('employees', employeeId);
    if (!existingEmployee || existingEmployee.organization_id !== orgId) {
      return NextResponse.json({ message: `Employee with ID ${employeeId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('employees', employeeId);
    if (!deleted) {
      return NextResponse.json({ message: `Employee with ID ${employeeId} not found.` }, { status: 404 });
    }
    return NextResponse.json({ message: "Employee deleted successfully." }, { status: 202 }); // Spec: 202 Accepted
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete employee", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/employees/[employeeId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/employees/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreateEmployeeRequest, EmployeeDto, EmployeeResponse } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const allEmployees = dbManager.getCollection('employees');
    // Filter for employees directly under the organization (agency_id is null or matches orgId if that the convention)
    const orgEmployees = allEmployees.filter(emp => emp.organization_id === orgId);
    return NextResponse.json(orgEmployees);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get organization employees", error: error.message }, { status: 500 });
  }
}

export async function POST(_request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const body = await _request.json() as CreateEmployeeRequest;

    // Add validation for required fields in CreateEmployeeRequest
    if (!body.first_name || !body.last_name || !body.employee_role) {
      return NextResponse.json({ message: "First name, last name, and role are required for an employee." }, { status: 400 });
    }

    const newEmployeeData: Omit<EmployeeDto, 'employee_id' | 'created_at' | 'updated_at' | 'user_id' | 'partner_type' | 'partner_details' | 'is_manager'> = {
      ...body,
      organization_id: orgId,
      // agency_id will be null/undefined for org-level employees
    };
    const createdEmployeeFull = dbManager.addItem('employees', newEmployeeData);

    // Construct EmployeeResponse based on spec
    const response: EmployeeResponse = {
      employee_id: createdEmployeeFull.employee_id,
      first_name: createdEmployeeFull.first_name,
      last_name: createdEmployeeFull.last_name,
      organization_id: createdEmployeeFull.organization_id,
      agency_id: createdEmployeeFull.agency_id,
      employee_role: createdEmployeeFull.employee_role,
      department: createdEmployeeFull.department,
      created_at: createdEmployeeFull.created_at,
      updated_at: createdEmployeeFull.updated_at,
    };
    return NextResponse.json(response, { status: 201 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to create organization employee", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/employees/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/practical-infos/[infoId]/route.ts

// app/api/mock/organization/[orgId]/practical-infos/[infoId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdatePracticalInformationRequest } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { orgId: string, infoId: string } }) {
  try {
    const { orgId, infoId } = await params;
    const info = dbManager.getItemById('practicalInformation', infoId);
    if (!info || info.organization_id !== orgId) {
      return NextResponse.json({ message: "Practical information not found for this organization." }, { status: 404 });
    }
    return NextResponse.json(info);
  } catch (error)  {
    return NextResponse.json({ message: "Failed to get practical information item", error: error.message }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: { orgId: string, infoId: string } }) {
  try {
    const { orgId, infoId } = await params;
    const body = await _request.json() as UpdatePracticalInformationRequest;
    const existing = dbManager.getItemById('practicalInformation', infoId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: "Practical information not found for update." }, { status: 404 });
    }
    const updatedInfo = dbManager.updateItem('practicalInformation', infoId, body);
    return NextResponse.json(updatedInfo, { status: 200 }); // Or 202
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update practical information", error: error.message }, { status: 500 });
  }
}

export async function DELETE(_request: NextRequest, { params }: { params: { orgId: string, infoId: string } }) {
  try {
    const { orgId, infoId } = await params;
    const existing = dbManager.getItemById('practicalInformation', infoId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: "Practical information not found for deletion." }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('practicalInformation', infoId);
    if (!deleted) {
      return NextResponse.json({ message: "Practical information not found during deletion attempt." }, { status: 404 });
    }
    return NextResponse.json({ message: "Practical information deleted." }, { status: 202 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to delete practical information", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/practical-infos/[infoId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/practical-infos/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreatePracticalInformationRequest, PracticalInformationDto } from '@/types/organization';

export async function GET(_request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const allInfos = dbManager.getCollection('practicalInformation');
    const orgInfos = allInfos.filter(info => info.organization_id === orgId);
    return NextResponse.json(orgInfos);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get practical information list", error: error.message }, { status: 500 });
  }
}

export async function POST(_request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const body = await _request.json() as CreatePracticalInformationRequest;

    if (!body.type || !body.value) {
      return NextResponse.json({ message: "Type and Value are required." }, { status: 400 });
    }
    const newData: Omit<PracticalInformationDto, 'information_id' | 'created_at' | 'updated_at'> = {
      ...body,
      organization_id: orgId,
    };
    const createdInfo = dbManager.addItem('practicalInformation', newData);
    return NextResponse.json(createdInfo, { status: 201 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to create practical information", error: error.message }, { status: 500 });
  }
}

// END OF FILE: app/api/mock/organization/[orgId]/practical-infos/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/proposed-activities/[activityId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateProposedActivityRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, activityId: string } }) {
  try {
    const { orgId, activityId } = await params;
    const activity = dbManager.getItemById('proposedActivities', activityId);
    if (!activity || activity.organization_id !== orgId) {
      return NextResponse.json({ message: `Activity ${activityId} not found for org ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(activity);
  } catch (e:any) { return NextResponse.json({ message: e.message || "Error"}, {status: 500})}
}

export async function PUT(request: NextRequest, { params }: { params: { orgId: string, activityId: string } }) {
  try {
    const { orgId, activityId } = await params;
    const body = await request.json() as UpdateProposedActivityRequest;
    const existing = dbManager.getItemById('proposedActivities', activityId);
     if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Activity ${activityId} not found for org ${orgId}.` }, { status: 404 });
    }
    const updated = dbManager.updateItem('proposedActivities', activityId, body);
    return NextResponse.json(updated, { status: 202 });
  } catch (e:any) { return NextResponse.json({ message: e.message || "Error"}, {status: 500})}
}

export async function DELETE(request: NextRequest, { params }: { params: { orgId: string, activityId: string } }) {
 try {
    const { orgId, activityId } = await params;
    const existing = dbManager.getItemById('proposedActivities', activityId);
     if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Activity ${activityId} not found for org ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('proposedActivities', activityId);
    if(!deleted) return NextResponse.json({ message: "Not found"}, {status: 404});
    return NextResponse.json({ message: "Activity deleted." }, { status: 202 });
  } catch (e:any) { return NextResponse.json({ message: e.message || "Error"}, {status: 500})}
}
// END OF FILE: app/api/mock/organization/[orgId]/proposed-activities/[activityId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/proposed-activities/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreateProposedActivityRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const allActivities = dbManager.getCollection('proposedActivities');
    const orgActivities = allActivities.filter(act => act.organization_id === orgId);
    return NextResponse.json(orgActivities);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get proposed activities", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const body = await request.json() as CreateProposedActivityRequest;
    if (!body.name || !body.type) {
        return NextResponse.json({ message: "Name and type are required." }, { status: 400 });
    }
    const newActivityData = {
        ...body,
        organization_id: orgId,
    };
    const createdActivity = dbManager.addItem('proposedActivities', newActivityData);
    return NextResponse.json(createdActivity, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create proposed activity", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/proposed-activities/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/prospects/[prospectId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateProspectRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, prospectId: string } }) {
  try {
    const { orgId, prospectId } = await params;
    const prospect = dbManager.getItemById('prospects', prospectId);
    if (!prospect || prospect.organization_id !== orgId) {
      return NextResponse.json({ message: `Prospect ${prospectId} not found for organization ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(prospect);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get organization prospect", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: { orgId: string, prospectId: string } }) {
  try {
    const { orgId, prospectId } = await params;
    const body = await request.json() as UpdateProspectRequest;
    const existing = dbManager.getItemById('prospects', prospectId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Prospect ${prospectId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const updatedProspect = dbManager.updateItem('prospects', prospectId, body);
    return NextResponse.json(updatedProspect, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update organization prospect", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: { orgId: string, prospectId: string } }) {
  try {
    const { orgId, prospectId } = await params;
    const existing = dbManager.getItemById('prospects', prospectId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Prospect ${prospectId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('prospects', prospectId);
    if (!deleted) return NextResponse.json({ message: `Prospect ${prospectId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Organization prospect deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete organization prospect", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/prospects/[prospectId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/prospects/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ProspectDto, CreateProspectRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const allProspects = dbManager.getCollection('prospects');
    const orgProspects = allProspects.filter(p => p.organization_id === orgId && !p.agency_id);
    return NextResponse.json(orgProspects);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get organization prospects", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const body = await request.json() as CreateProspectRequest;

    if (!body.first_name && !body.last_name) {
      return NextResponse.json({ message: "First and last name are required for a prospect." }, { status: 400 });
    }

    const newProspectData: Omit<ProspectDto, 'prospect_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      partner_type: "PROSPECT",
    };
    const createdProspect = dbManager.addItem('prospects', newProspectData);
    return NextResponse.json(createdProspect, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create organization prospect", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/prospects/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/route.ts

import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateOrganizationRequest, OrganizationDto } from '@/types/organization';

export async function PUT(_request: Request, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const body = await _request.json() as UpdateOrganizationRequest;

    // THE FIX: Ensure we merge with existing data, not just overwrite.
    const existingOrg = dbManager.getItemById('organizationsDetails', orgId);
    if (!existingOrg) {
      return NextResponse.json({ message: `Organization with ID ${orgId} not found.` }, { status: 404 });
    }

    // Merge updates onto the existing full object
    const updatedData = { ...existingOrg, ...body };

    const updatedOrg = dbManager.updateItem('organizationsDetails', orgId, updatedData);

    return NextResponse.json(updatedOrg, { status: 202 }); // Spec says 202 Accepted for update
  } catch (error) {
    return NextResponse.json({ message: "Failed to update organization", error: error.message }, { status: 500 });
  }
}


export async function DELETE(_request: Request, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const deletedDetails = dbManager.deleteItem('organizationsDetails', orgId);

    if (!deletedDetails) { // If neither was found
      return NextResponse.json({ message: `Organization with ID ${orgId} not found.` }, { status: 404 });
    }
    // TODO: Cascade delete related entities (agencies, contacts, addresses, etc.)
    return NextResponse.json({ message: "Organization deleted successfully." }, { status: 202 }); // Spec says 202 Accepted
  } catch (error) {
    return NextResponse.json({ message: "Failed to delete organization", error: error.message }, { status: 500 });
  }
}


export async function GET(_request: Request, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    // For details, we use the 'organizationsDetails' collection
    const org = dbManager.getItemById('organizationsDetails', orgId);
    if (!org) {
      return NextResponse.json({ message: `Organization with ID ${orgId} not found.` }, { status: 404 });
    }
    return NextResponse.json(org);
  } catch (error) {
    return NextResponse.json({ message: "Failed to get organization details", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/sales-people/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { SalesPersonDto, CreateSalesPersonRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const allSalesPersons = dbManager.getCollection('salesPersons');
    const orgSalesPersons = allSalesPersons.filter(sp => sp.organization_id === orgId && !sp.agency_id);
    return NextResponse.json(orgSalesPersons);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get organization sales people", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const body = await request.json() as CreateSalesPersonRequest;

    if (!body.name) {
      return NextResponse.json({ message: "Sales person name is required." }, { status: 400 });
    }

    const newSpData: Omit<SalesPersonDto, 'sales_person_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      partner_type: "SALE",
    };
    const createdSp = dbManager.addItem('salesPersons', newSpData);
    return NextResponse.json(createdSp, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create organization sales person", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/sales-people/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/sales-people/[salesPersonId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateSalesPersonRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, salesPersonId: string } }) {
  try {
    const { orgId, salesPersonId } = await params;
    const sp = dbManager.getItemById('salesPersons', salesPersonId);
    if (!sp || sp.organization_id !== orgId) {
      return NextResponse.json({ message: `SalesPerson ID ${salesPersonId} not found for org ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(sp);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get sales person", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: { orgId: string, salesPersonId: string } }) {
  try {
    const { orgId, salesPersonId } = await params;
    const body = await request.json() as UpdateSalesPersonRequest;
    const existing = dbManager.getItemById('salesPersons', salesPersonId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `SalesPerson ID ${salesPersonId} not found for org ${orgId}.` }, { status: 404 });
    }
    const updatedSp = dbManager.updateItem('salesPersons', salesPersonId, body);
    return NextResponse.json(updatedSp, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update sales person", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: { orgId: string, salesPersonId: string } }) {
  try {
    const { orgId, salesPersonId } = await params;
    const existing = dbManager.getItemById('salesPersons', salesPersonId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `SalesPerson ID ${salesPersonId} not found for org ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('salesPersons', salesPersonId);
    if (!deleted) return NextResponse.json({ message: "Not found" }, { status: 404 });
    return NextResponse.json({ message: "Sales person deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete sales person", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/sales-people/[salesPersonId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/status/route.ts

// app/api/mock/organization/[orgId]/status/route.ts
import { NextResponse } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateOrganizationStatusRequest,OrganizationDto } from '@/types/organization';

export async function PUT(_request: Request, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const body = await _request.json() as UpdateOrganizationStatusRequest;

    const updatedOrg = dbManager.updateItem('organizationsDetails', orgId, { status: body.status, is_active: body.status === "ACTIVE" });
    if (!updatedOrg) {
      return NextResponse.json({ message: `Organization with ID ${orgId} not found.` }, { status: 404 });
    }
    dbManager.updateItem('organizationsDetails', orgId, { status: body.status });

    return NextResponse.json(updatedOrg, { status: 200 });
  } catch (error)  {
    return NextResponse.json({ message: "Failed to update organization status", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/[orgId]/status/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/suppliers/[providerId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateProviderRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, providerId: string } }) {
  try {
    const { orgId, providerId } = await params;
    const provider = dbManager.getItemById('providers', providerId);
    if (!provider || provider.organization_id !== orgId) {
      return NextResponse.json({ message: `Supplier ${providerId} not found for organization ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(provider);
  } catch (error: any) { return NextResponse.json({ message: "Failed to get organization supplier", error: error.message }, { status: 500 }); }
}

export async function PUT(request: NextRequest, { params }: { params: { orgId: string, providerId: string } }) {
  try {
    const { orgId, providerId } = await params;
    const body = await request.json() as UpdateProviderRequest;
    const existing = dbManager.getItemById('providers', providerId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Supplier ${providerId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const updatedProvider = dbManager.updateItem('providers', providerId, body);
    return NextResponse.json(updatedProvider, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to update organization supplier", error: error.message }, { status: 500 }); }
}

export async function DELETE(request: NextRequest, { params }: { params: { orgId: string, providerId: string } }) {
  try {
    const { orgId, providerId } = await params;
    const existing = dbManager.getItemById('providers', providerId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Supplier ${providerId} not found for organization ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('providers', providerId);
    if (!deleted) return NextResponse.json({ message: `Supplier ${providerId} not found.` }, { status: 404 });
    return NextResponse.json({ message: "Organization supplier deleted." }, { status: 202 });
  } catch (error: any) { return NextResponse.json({ message: "Failed to delete organization supplier", error: error.message }, { status: 500 }); }
}
// END OF FILE: app/api/mock/organization/[orgId]/suppliers/[providerId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/suppliers/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ProviderDto, CreateProviderRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const allProviders = dbManager.getCollection('providers');
    // Org-level suppliers are those linked to the org but NOT to a specific agency
    const orgProviders = allProviders.filter(p => p.organization_id === orgId && !p.agency_id);
    return NextResponse.json(orgProviders);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get organization suppliers", error: error.message }, { status: 500 });
  }
}

export async function POST(request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const body = await request.json() as CreateProviderRequest;
    
    if (!body.first_name && !body.last_name) {
      return NextResponse.json({ message: "First and last name are required for a supplier." }, { status: 400 });
    }

    const newProviderData: Omit<ProviderDto, 'provider_id' | 'created_at' | 'updated_at' | 'partner_details'> = {
      ...body,
      organization_id: orgId,
      partner_type: "SUPPLIER",
      is_active: true,
    };
    const createdProvider = dbManager.addItem('providers', newProviderData);
    return NextResponse.json(createdProvider, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create organization supplier", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/suppliers/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/third-parties/create/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { ThirdPartyDto, CreateThirdPartyRequest, ThirdPartyType } from '@/types/organization';

// This route now handles the creation for ANY third-party type.
// The real API uses /.../{type}, but this is the standard workaround for the mock server.
export async function POST(request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = params;
    // The request body MUST now include the 'type'
    const body = await request.json() as (CreateThirdPartyRequest & { type: ThirdPartyType });

    if (!body.name || !body.type) {
        return NextResponse.json({ message: "Third party name and type are required." }, { status: 400 });
    }
    const newThirdPartyData: Omit<ThirdPartyDto, 'id' | 'created_at' | 'updated_at'> = {
        ...body,
        organization_id: orgId,
        type: body.type, // Get type from the body
        is_active: true,
    };
    const createdThirdParty = dbManager.addItem('thirdParties', newThirdPartyData);
    return NextResponse.json(createdThirdParty, { status: 201 });
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to create third party", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/third-parties/create/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/third-parties/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { GetThirdPartyRequest, ThirdPartyType } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string } }) {
  try {
    const { orgId } = await params;
    const { searchParams } = new URL(request.url);
    const queryParams: GetThirdPartyRequest = {
        status: searchParams.get('status') === 'true' ? true : searchParams.get('status') === 'false' ? false : undefined,
        type: searchParams.get('type') as ThirdPartyType || undefined,
        page: searchParams.get('page') ? parseInt(searchParams.get('page')!, 10) : undefined,
        size: searchParams.get('size') ? parseInt(searchParams.get('size')!, 10) : undefined,
    };

    let thirdParties = dbManager.getCollection('thirdParties').filter(tp => tp.organization_id === orgId);

    if (queryParams.status !== undefined) {
        thirdParties = thirdParties.filter(tp => (tp as any).is_active === queryParams.status);
    }
    if (queryParams.type) {
        thirdParties = thirdParties.filter(tp => tp.type === queryParams.type);
    }
    
    if (queryParams.page && queryParams.size) {
        const start = (queryParams.page - 1) * queryParams.size;
        const end = start + queryParams.size;
        thirdParties = thirdParties.slice(start, end);
    }
    return NextResponse.json(thirdParties);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get third parties", error: error.message }, { status: 500 });
  }
}
// END OF FILE: app/api/mock/organization/[orgId]/third-parties/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/third-parties/[thirdPartyId]/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateThirdPartyRequest } from '@/types/organization';

export async function GET(request: NextRequest, { params }: { params: { orgId: string, thirdPartyId: string } }) {
  try {
    const { orgId, thirdPartyId } = params;
    const tp = dbManager.getItemById('thirdParties', thirdPartyId);
    if (!tp || tp.organization_id !== orgId) {
      return NextResponse.json({ message: `Third party ${thirdPartyId} not found for org ${orgId}.` }, { status: 404 });
    }
    return NextResponse.json(tp);
  } catch (e: any) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }) }
}

export async function PUT(request: NextRequest, { params }: { params: { orgId: string, thirdPartyId: string } }) {
  try {
    const { orgId, thirdPartyId } = params;
    const body = await request.json() as UpdateThirdPartyRequest;
    const existing = dbManager.getItemById('thirdParties', thirdPartyId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Third party ${thirdPartyId} not found for org ${orgId}.` }, { status: 404 });
    }
    const updated = dbManager.updateItem('thirdParties', thirdPartyId, body);
    return NextResponse.json(updated, { status: 202 });
  } catch (e: any) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }) }
}

export async function DELETE(request: NextRequest, { params }: { params: { orgId: string, thirdPartyId: string } }) {
  try {
    const { orgId, thirdPartyId } = params;
    const existing = dbManager.getItemById('thirdParties', thirdPartyId);
    if (!existing || existing.organization_id !== orgId) {
      return NextResponse.json({ message: `Third party ${thirdPartyId} not found for org ${orgId}.` }, { status: 404 });
    }
    const deleted = dbManager.deleteItem('thirdParties', thirdPartyId);
    if (!deleted) return NextResponse.json({ message: "Not found" }, { status: 404 });
    return NextResponse.json(null, { status: 204 });
  } catch (e: any) { return NextResponse.json({ message: e.message || "Error" }, { status: 500 }) }
}
// END OF FILE: app/api/mock/organization/[orgId]/third-parties/[thirdPartyId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/[orgId]/third-parties/[thirdPartyId]/status/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UpdateThirdPartyStatusRequest } from '@/types/organization';

export async function PUT(request: NextRequest, { params }: { params: { orgId: string, thirdPartyId: string } }) {
  try {
    const { orgId, thirdPartyId } = params;
    const body = await request.json() as UpdateThirdPartyStatusRequest;
    if (typeof body.active !== 'boolean') {
        return NextResponse.json({ message: "Field 'active' (boolean) is required." }, { status: 400 });
    }
    const existing = dbManager.getItemById('thirdParties', thirdPartyId);
    if (!existing || existing.organization_id !== orgId) {
         return NextResponse.json({ message: `Third party ${thirdPartyId} not found for org ${orgId}.` }, { status: 404 });
    }
    const updated = dbManager.updateItem('thirdParties', thirdPartyId, { is_active: body.active });
    return NextResponse.json(updated, { status: 202 });
  } catch (e:any) { return NextResponse.json({ message: e.message || "Error"}, {status: 500})}
}
// END OF FILE: app/api/mock/organization/[orgId]/third-parties/[thirdPartyId]/status/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/route.ts

import { NextResponse, NextRequest } from 'next/server'; // [ADD] NextRequest
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { CreateOrganizationRequest, OrganizationDto, } from '@/types/organization';
import { getUserIdFromMockToken } from '@/lib/data-repo/local-store/mock-auth-utils'; // [ADD]

export async function POST(request: NextRequest) { // [CHANGE] Use the request object
  try {
    // [THE FIX] Get the business actor ID (which is the user ID) from the token
    const businessActorId = await getUserIdFromMockToken(request);
    if (!businessActorId) {
      return NextResponse.json({ message: "Unauthorized: No valid user token provided." }, { status: 401 });
    }

    const body = await request.json() as CreateOrganizationRequest;
    if (!body.long_name || !body.short_name || !body.email || !body.description || !body.legal_form || !body.business_domains) {
      return NextResponse.json({ message: "Missing required fields for organization." }, { status: 400 });
    }

    const newOrgData: Omit<OrganizationDto, 'organization_id' | 'created_at' | 'updated_at' | 'status' | 'is_active'> = {
      // ... all fields from body
      long_name: body.long_name,
      short_name: body.short_name,
      email: body.email,
      description: body.description,
      business_domains: body.business_domains,
      logo_url: body.logo_url,
      legal_form: body.legal_form,
      website_url: body.web_site_url,
      social_network: body.social_network,
      business_registration_number: body.business_registration_number,
      tax_number: body.tax_number,
      capital_share: body.capital_share,
      registration_date: body.registration_date,
      ceo_name: body.ceo_name,
      year_founded: body.year_founded,
      keywords: body.keywords,
      // number_of_employees: body.number_of_employees,
      is_individual_business: body.legal_form === "11",
      // [THE FIX] Assign the ID from the token
      business_actor_id: businessActorId,
    };

    const newOrg = dbManager.addItem('organizationsDetails', { ...newOrgData, status: 'PENDING_APPROVAL', is_active: false });
    return NextResponse.json(newOrg, { status: 201 });
  } catch (error) {
    return NextResponse.json({ message: "Failed to create organization", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/organization/user-orgs/route.ts

import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { getUserIdFromMockToken } from '@/lib/data-repo/local-store/mock-auth-utils';

export async function GET(request: NextRequest) {
  try {
    // Get the user ID from the Authorization token, simulating the backend
    const businessActorId = await getUserIdFromMockToken(request);

    if (!businessActorId) {
      // If no token is provided, we can't know which orgs to return.
      // In a real API, this would be a 401 Unauthorized.
      return NextResponse.json({ message: "Unauthorized: No user token found." }, { status: 401 });
    }

    const allOrgs = dbManager.getCollection('organizationsDetails');

    // Filter the organizations to only include those owned by the user
    const userOrgs = allOrgs.filter(org => org.business_actor_id === businessActorId);

    return NextResponse.json(userOrgs);
  } catch (error: any) {
    return NextResponse.json({ message: "Failed to get user organizations", error: error.message }, { status: 500 });
  }
}// END OF FILE: app/api/mock/organization/user-orgs/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/mock/user-preferences/[userId]/route.ts

// app/api/mock/user-preferences/[userId]/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
import { UserPreferencesDto, UpdateUserPreferencesRequest, UserDisplayPreferences, UserNotificationPreferences, UserPrivacyPreferences } from '@/types/user-preferences';

const defaultDisplayPrefsForMock: UserDisplayPreferences = {
  language: 'en', currency: 'USD', dateFormat: 'mm-dd-yyyy',
  fontSize: 16, theme: 'system', layout: 'default', timezone: 'utc-8',
  profilePhotoUrl: "", // Default if not set
};
const defaultNotificationPrefsForMock: UserNotificationPreferences = {
  email: true, push: true, sms: false, accountActivity: true,
  newFeatures: true, marketing: false, frequency: 'daily',
  quietHoursStart: '22:00', quietHoursEnd: '07:00',
};
const defaultPrivacyPrefsForMock: UserPrivacyPreferences = {
  analyticsSharing: true, personalizedAds: false,
  visibility: 'private', dataRetention: '1-year',
};

function getOrCreateUserPreferences(userId: string): UserPreferencesDto {
  let prefs = dbManager.getItemById('userPreferences', userId);
  if (!prefs) {
    // const defaultPreferences: UserPreferencesDto = {
    //   user_id: userId,
    //   display: { ...defaultDisplayPrefsForMock },
    //   notifications: { ...defaultNotificationPrefsForMock },
    //   privacy: { ...defaultPrivacyPrefsForMock },
    //   updated_at: new Date().toISOString(),
    // };
    // The addItem in dbManager now uses 'user_id' as the 'id' for this collection if provided.
    // Let ensure we are consistent. If addItem generates its own 'id', we need to query by user_id.
    // For simplicity, let assume userPreferences items are stored with 'user_id' as their main lookup key.
    // This means getItemById and updateItem in dbManager might need adjustment for this collection.
    // OR, we store a separate 'id' and also 'user_id'. Let stick to 'user_id' as the primary key here for this collection.

    // Modified to ensure 'user_id' is the key for this collection.
    const collection = dbManager.getCollection('userPreferences');
    const existing = collection.find(p => p.user_id === userId);
    if (existing) {
      prefs = existing;
    } else {
      const newPrefsData = {
        user_id: userId, // This is the key
        display: { ...defaultDisplayPrefsForMock },
        notifications: { ...defaultNotificationPrefsForMock },
        privacy: { ...defaultPrivacyPrefsForMock },
        updated_at: new Date().toISOString(),
      };
      collection.push(newPrefsData);
      dbManager.saveCollection('userPreferences', collection);
      prefs = newPrefsData;
    }
  }
  return prefs!;
}

export async function GET(_request: NextRequest, { params }: { params: { userId: string } }) {
  try {
    const { userId } = await params;
    if (!userId) return NextResponse.json({ message: "User ID is required." }, { status: 400 });
    const preferences = getOrCreateUserPreferences(userId);
    return NextResponse.json(preferences, { status: 200 });
  } catch (error)  {
    console.error("[MOCK API /user-preferences GET ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to get user preferences." }, { status: 500 });
  }
}

export async function PUT(_request: NextRequest, { params }: { params: { userId: string } }) {
  try {
    const userId = params.userId;
    if (!userId) return NextResponse.json({ message: "User ID is required." }, { status: 400 });
    const body = await _request.json() as UpdateUserPreferencesRequest;

    const collection = dbManager.getCollection('userPreferences');
    let itemIndex = collection.findIndex(p => p.user_id === userId);
    let currentPrefs: UserPreferencesDto;

    if (itemIndex > -1) {
      currentPrefs = collection[itemIndex];
    } else {
      // Create if not exists, as PUT can mean create or update
      currentPrefs = {
        user_id: userId,
        display: { ...defaultDisplayPrefsForMock },
        notifications: { ...defaultNotificationPrefsForMock },
        privacy: { ...defaultPrivacyPrefsForMock },
      };
      collection.push(currentPrefs);
      itemIndex = collection.length - 1; // It now the last item
    }

    const updatedData: UserPreferencesDto = {
      ...currentPrefs,
      user_id: userId,
      display: { ...currentPrefs.display, ...(body.display || {}) },
      notifications: { ...currentPrefs.notifications, ...(body.notifications || {}) },
      privacy: { ...currentPrefs.privacy, ...(body.privacy || {}) },
      updated_at: new Date().toISOString(),
    };
    collection[itemIndex] = updatedData;
    dbManager.saveCollection('userPreferences', collection);

    return NextResponse.json(updatedData, { status: 200 });
  } catch (error)  {
    console.error("[MOCK API /user-preferences PUT ERROR]:", error);
    return NextResponse.json({ message: error.message || "Failed to update user preferences." }, { status: 500 });
  }
}// END OF FILE: app/api/mock/user-preferences/[userId]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/api/proxy/[...slug]/route.ts

/**
 * @file This file defines a generic server-side proxy API route.
 * @module API_Proxy
 * @description This route is designed to bypass browser CORS (Cross-Origin Resource Sharing) restrictions
 * by acting as an intermediary between the client-side application and external APIs.
 */

import { NextResponse, NextRequest } from 'next/server';

/**
 * Handles all incoming HTTP requests (GET, POST, PUT, DELETE, etc.) intended for external APIs.
 *
 * ### Motivation
 * Modern web browsers enforce a security measure known as the Same-Origin Policy, which restricts
 * web pages from making requests to a different domain than the one that served the page. For this application
 * to communicate with the remote YOWYOB APIs from the client-side, the YOWYOB servers would need to explicitly
 * permit this via CORS headers. As this external configuration cannot be guaranteed, this proxy provides a robust solution.
 * It functions by receiving a request from the client, forwarding it from the server environment (which is not subject to CORS),
 * and then streaming the external API's response back to the client.
 *
 * ### Parameters & Usage
 * It is expected that any client-side request to this proxy includes a specific HTTP header:
 * - `X-Target-URL`: This header **must** contain the full, absolute URL of the intended external API endpoint.
 *
 * The proxy transparently forwards the `Authorization` and `Content-Type` headers from the original
 * request, ensuring authentication and data formats are correctly handled.
 *
 * ### Operational Flow
 * 1.  The handler receives a request from the client to `/api/proxy/...`.
 * 2.  It extracts the destination from the `X-Target-URL` header. A 400 error is returned if this header is missing.
 * 3.  It constructs a new `fetch` request, copying the method, body, and essential headers.
 * 4.  The `duplex: 'half'` option is critically supplied to the `fetch` call to support streaming request bodies,
 *     a requirement in modern server runtimes like the one used by Next.js.
 * 5.  Upon receiving a response from the target server, it streams the status, headers, and body back to the original client.
 *     It specifically removes headers like `content-encoding` that are managed by the hosting platform to prevent conflicts.
 * 6.  If the proxy fails to reach the target server, it returns a `502 Bad Gateway` error.
 *
 * @param {NextRequest} req - The incoming request object from the Next.js framework.
 * @returns {Promise<NextResponse>} A promise that resolves to a `NextResponse` object, either streaming the
 * proxied response or returning a specific error (400 for bad request, 502 for gateway error).
 */
async function handler(req: NextRequest): Promise<NextResponse> {
  const targetUrl = req.headers.get('X-Target-URL');

  if (!targetUrl) {
    return NextResponse.json(
      { message: 'X-Target-URL header is missing.' },
      { status: 400 }
    );
  }

  try {
    const headers = new Headers();
    headers.set('Content-Type', req.headers.get('Content-Type') || 'application/json');
    if (req.headers.has('Authorization')) {
      headers.set('Authorization', req.headers.get('Authorization')!);
    }

    const remoteResponse = await fetch(targetUrl, {
      method: req.method,
      headers: headers,
      body: req.method !== 'GET' && req.method !== 'HEAD' ? req.body : null,
      redirect: 'follow',
      cache: 'no-store',
      // This option is required for streaming request bodies in modern fetch implementations.
      // @ts-expect-error - 'duplex' is a valid option in the runtime but may not be in the default TS type.
      duplex: 'half',
    });

    // Reconstruct the response headers, filtering out those that can cause issues.
    const responseHeaders = new Headers(remoteResponse.headers);
    responseHeaders.delete('content-encoding');
    responseHeaders.delete('content-length');

    // Stream the remote response back to the client.
    return new NextResponse(remoteResponse.body, {
      status: remoteResponse.status,
      statusText: remoteResponse.statusText,
      headers: responseHeaders,
    });
  } catch (error) {
    console.error(`[API PROXY] Error fetching ${targetUrl}:`, error);
    return NextResponse.json(
      { message: 'Proxy request failed', error: error.message },
      { status: 502 } // Bad Gateway
    );
  }
}

/**
 * Exports the single handler for all common HTTP methods.
 * This makes the proxy versatile and capable of handling any type of API request.
 */
export { handler as GET, handler as POST, handler as PUT, handler as DELETE, handler as PATCH };// END OF FILE: app/api/proxy/[...slug]/route.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(auth)/forgot-password/page.tsx

import { ForgotPasswordForm } from "@/components/auth/forgot-password-form";

export default function ForgotPasswordPage() {
  return (
    // Use a consistent container style for auth pages
    <div className="flex min-h-screen items-center justify-center p-4 bg-gradient-to-br from-background via-background to-muted/30 dark:to-muted/10">
      {/* Apply entry animation to the form card */}
      <div className="animate-fade-in-up">
        <ForgotPasswordForm />
      </div>
    </div>
  );
}// END OF FILE: app/(auth)/forgot-password/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(auth)/layout.tsx

"use client";

import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { useEffect } from "react";
import { Loader2 } from "lucide-react";

export default function AuthLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { status: sessionStatus } = useSession();
  const router = useRouter();

  useEffect(() => {
    // If the session has been determined and the user is authenticated...
    if (sessionStatus === "authenticated") {
      // ...redirect them away from the auth pages to their main dashboard.
      router.replace("/dashboard");
    }
  }, [sessionStatus, router]);

  // While the session is being checked, show a loading state.
  // This prevents a "flash" of the login form before the redirect happens.
  if (sessionStatus === "loading") {
    return (
      <div className="flex min-h-screen items-center justify-center p-4 bg-background">
        <Loader2 className="h-10 w-10 animate-spin text-primary" />
      </div>
    );
  }

  // If the user is not authenticated, render the login/signup page.
  // The check `sessionStatus !== 'authenticated'` ensures that the login form is shown
  // only after the check is complete and the user is confirmed to be unauthenticated.
  return <>{sessionStatus !== "authenticated" && children}</>;
}
// END OF FILE: app/(auth)/layout.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(auth)/login/page.tsx

import { LoginForm } from "@/components/auth/login-form";

export default function LoginPage() {
  return (
    // Use a consistent container style for auth pages
    <div className="flex min-h-screen items-center justify-center p-4 bg-gradient-to-br from-background via-background to-muted/30 dark:to-muted/10">
      {/* Apply entry animation to the form card */}
      <div className="animate-fade-in-up">
        <LoginForm />
      </div>
    </div>
  );
}// END OF FILE: app/(auth)/login/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(auth)/signup/page.tsx

import { SignUpForm } from "@/components/auth/signup-form";

export default function SignUpPage() {
  return (
     // Use a consistent container style for auth pages
    <div className="flex min-h-screen items-center justify-center p-4 bg-gradient-to-br from-background via-background to-muted/30 dark:to-muted/10">
       {/* Apply entry animation to the form card */}
      <div className="animate-fade-in-up">
        <SignUpForm />
      </div>
    </div>
  );
}// END OF FILE: app/(auth)/signup/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/bonus/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from '@/components/ui/button';

export default function CustomerBonusPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Mes Bonus / My Bonus</h1>
      <div className="grid gap-4 md:grid-cols-2">
          <Card>
            <CardHeader>
              <CardTitle>Consulter mes Points / Check My Points</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-4xl font-bold">1,234 Pts</p> {/* TODO: Fetch dynamically */}
              <p className="text-sm text-muted-foreground mt-2">Valeur en monnaie / Monetary Value: $12.34</p> {/* TODO: Fetch/Calculate dynamically */}
               {/* TODO: Show history of points earned/spent */}
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Convertir mes points / Convert My Points</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Redeem your points for rewards or discounts.</p>
              <Button className="mt-4" disabled>Convert Points</Button> {/* TODO: Implement conversion logic */}
              {/* TODO: Show available rewards/conversion options */}
            </CardContent>
          </Card>
      </div>
    </div>
  );
}// END OF FILE: app/(dashboard)/bonus/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/customers/customers-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { CustomerDto, CreateCustomerRequest, UpdateCustomerRequest } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Users, Search as SearchIcon, Building } from "lucide-react";
import { getCustomerColumns } from "@/components/organization/customers/columns";
import { CustomerCard } from "@/components/organization/customers/customer-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { CustomerForm } from "@/components/organization/customers/customer-form";

export function AgencyCustomersClientPage() {
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } = useActiveOrganization();
  const [customers, setCustomers] = useState<CustomerDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<CustomerDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingCustomer, setEditingCustomer] = useState<CustomerDto | undefined>(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId) { setIsLoading(false); setCustomers([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAgencyCustomers(activeOrganizationId, activeAgencyId);
      setCustomers(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load agency customers.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleOpenFormModal = (customer?: CustomerDto) => {
    setEditingCustomer(customer);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: CustomerDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || !activeAgencyId || itemsToDelete.length === 0) return;
    const originalItems = [...customers];
    const idsToDelete = itemsToDelete.map(item => item.customer_id!);
    setCustomers(prev => prev.filter(item => !idsToDelete.includes(item.customer_id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map(item => organizationRepository.deleteAgencyCustomer(activeOrganizationId, activeAgencyId, item.customer_id!)));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} customer(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Customer(s) deleted."; },
      error: (err) => { setCustomers(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const handleFormSubmit = async (data: CreateCustomerRequest | UpdateCustomerRequest): Promise<boolean> => {
    if (!activeOrganizationId || !activeAgencyId) { toast.error("No active agency selected."); return false; }
    try {
      const promise = editingCustomer?.customer_id
        ? organizationRepository.updateAgencyCustomer(activeOrganizationId, activeAgencyId, editingCustomer.customer_id, data as UpdateCustomerRequest)
        : organizationRepository.createAgencyCustomer(activeOrganizationId, activeAgencyId, data as CreateCustomerRequest);
      
      await toast.promise(promise, {
        loading: `${editingCustomer ? 'Updating' : 'Creating'} customer...`,
        success: `Customer ${editingCustomer ? 'updated' : 'created'} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<CustomerDto>[]>(() => getCustomerColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item])}, [activeAgencyDetails!].filter(Boolean)),[activeAgencyDetails]);

  if (!activeAgencyId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Agency Selected" description="Please select an active agency to manage its customers." />;
  }

  return (
    <>
      <ResourceDataTable
        data={customers}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search agency customers..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="agency-customers-view-mode"
        exportFileName="agency_customers.csv"
        pageHeader={<PageHeader title="Agency Customers" description={`Manage customers for ${activeAgencyDetails?.long_name || 'this agency'}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Customer</Button>} />}
        renderGridItemAction={(customer) => <CustomerCard customer={customer} agencies={[]} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={Users} title="No Customers in this Agency" description="Add your first customer to this agency." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Customer</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Customers Found" description="Your search did not match any customers in this agency." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">{editingCustomer ? "Edit Customer" : "Add New Customer"}</DialogTitle>
          <CustomerForm mode={editingCustomer ? "edit" : "create"} initialData={editingCustomer} onSubmitAction={handleFormSubmit} agencies={[]} hideAgencySelector={true} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} customer(s)</strong> from this agency.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}// END OF FILE: app/(dashboard)/business-actor/agency/customers/customers-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/customers/page.tsx

import { Metadata } from "next";
import { AgencyCustomersClientPage } from "./customers-client";

export const metadata: Metadata = {
  title: "Manage Agency Customers",
  description: "View, add, and manage your agency's customers.",
};

export default async function AgencyCustomersPage() {
  return <AgencyCustomersClientPage />;
}// END OF FILE: app/(dashboard)/business-actor/agency/customers/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/dashboard/dashboard-client.tsx

"use client";

import React, { useEffect, useState, useCallback } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { DollarSign, Users, Briefcase, UserPlus } from "lucide-react";
import { PageHeader } from "@/components/ui/page-header";
import { StatCard, StatCardSkeleton } from "@/components/dashboard/organization/stat-card";
import { SalesChart } from "@/components/dashboard/organization/sales-chart";
import { TeamRoster } from "@/components/dashboard/agency/team-roster";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";
import { organizationRepository } from "@/lib/data-repo/organization";
import { EmployeeDto, CustomerDto } from "@/types/organization";
import { Skeleton } from "@/components/ui/skeleton";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { Building } from "lucide-react";

interface AgencyDashboardData {
    employeeCount: number;
    customerCount: number;
    employees: EmployeeDto[];
    error?: string | null;
}

const initialData: AgencyDashboardData = {
    employeeCount: 0,
    customerCount: 0,
    employees: [],
};

export function AgencyDashboardClientPage() {
  const router = useRouter();
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails, isLoadingAgencyDetails } = useActiveOrganization();
  const [data, setData] = useState<AgencyDashboardData>(initialData);
  const [isLoading, setIsLoading] = useState(true);

  const fetchData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId) {
      setIsLoading(false);
      return;
    }
    setIsLoading(true);
    try {
        const [employees, customers] = await Promise.all([
            organizationRepository.getAgencyEmployees(activeOrganizationId, activeAgencyId),
            organizationRepository.getAgencyCustomers(activeOrganizationId, activeAgencyId),
        ]);
        setData({
            employeeCount: employees?.length || 0,
            customerCount: customers?.length || 0,
            employees: employees || [],
        });
    } catch (error: any) {
        setData({ ...initialData, error: "Failed to load agency dashboard data." });
    } finally {
        setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId]);

  useEffect(() => {
    if (activeAgencyId) {
      fetchData();
    } else if (!isLoadingAgencyDetails) {
      setIsLoading(false);
    }
  }, [activeAgencyId, isLoadingAgencyDetails, fetchData]);

  if (isLoading || isLoadingAgencyDetails) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center"><Skeleton className="h-10 w-1/3" /><Skeleton className="h-10 w-32" /></div>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">{Array.from({ length: 4 }).map((_, i) => <StatCardSkeleton key={i} />)}</div>
        <div className="grid gap-4 lg:grid-cols-7">
          <Skeleton className="lg:col-span-4 h-96 w-full" />
          <Skeleton className="lg:col-span-3 h-96 w-full" />
        </div>
      </div>
    );
  }
  
  if (!activeAgencyId) {
      return <FeedbackCard icon={Building} title="No Agency Selected" description="Please select an agency from the switcher in the sidebar to view its dashboard." />;
  }

  return (
    <div className="space-y-8">
      <PageHeader
        title={activeAgencyDetails?.long_name || "Agency Dashboard"}
        description="A focused overview of this agency's performance."
        action={
            <Button variant="outline" size="sm" onClick={() => router.push('/business-actor/org/agencies')}>
                Back to All Agencies
            </Button>
        }
      />

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <StatCard title="Monthly Revenue" value={`$${(activeAgencyDetails?.average_revenue || 0).toLocaleString()}`} description="Agency's estimated monthly takings" icon={DollarSign} />
        <StatCard title="Agency Customers" value={`${data.customerCount}`} description="Total clients managed by this agency" icon={Briefcase} />
        <StatCard title="Team Members" value={`${data.employeeCount}`} description="Active employees in this agency" icon={Users} />
        <StatCard title="New Prospects" value="+12" description="This month" icon={UserPlus} />
      </div>
      
      <div className="grid grid-cols-1 gap-6 lg:grid-cols-7">
        <SalesChart />
        <TeamRoster employees={data.employees} />
      </div>
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/dashboard/dashboard-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/dashboard/page.tsx

import { Metadata } from "next";
import { AgencyDashboardClientPage } from "./dashboard-client";

export const metadata: Metadata = {
  title: "Agency Dashboard",
  description: "A focused overview of your agency's performance.",
};

export default async function AgencyDashboardPage() {
  // The client component will fetch all data based on the active agency context
  return <AgencyDashboardClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/agency/dashboard/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/employees/create/page.tsx

"use client";

import { EmployeeForm } from "@/components/organization/employees/employee-form";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { useRouter } from "next/navigation";
import { organizationRepository } from "@/lib/data-repo/organization";
import { EmployeeFormData } from "@/components/organization/employees/employee-form";
import { toast } from "sonner";

export default function CreateAgencyEmployeePage() {
  const router = useRouter();
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } = useActiveOrganization();

  const handleCreate = async (data: EmployeeFormData): Promise<boolean> => {
    if (!activeOrganizationId || !activeAgencyId) {
      toast.error("No active agency selected.");
      return false;
    }
    try {
      await organizationRepository.createAgencyEmployee(activeOrganizationId, activeAgencyId, data);
      toast.success("Employee created and assigned to agency successfully!");
      router.push("/business-actor/agency/employees");
      router.refresh();
      return true;
    } catch (error: any) {
      toast.error(error.message || "Failed to create employee.");
      return false;
    }
  };

  return (
    <div className="mx-auto">
      <EmployeeForm
        agencies={activeAgencyDetails ? [activeAgencyDetails] : []}
        mode="create"
        onSubmitAction={handleCreate}
        scopedAgencyId={activeAgencyId} // Lock the form to the current agency
      />
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/employees/create/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/employees/[employeeId]/edit-employee-client.tsx

"use client";

import React, { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { EmployeeDto } from "@/types/organization";
import {
  EmployeeForm,
  EmployeeFormData,
} from "@/components/organization/employees/employee-form";
import { toast } from "sonner";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { User, Loader2 } from "lucide-react";

interface EditEmployeeClientPageProps {
  employeeId: string;
}

export function EditAgencyEmployeeClientPage({
  employeeId,
}: EditEmployeeClientPageProps) {
  const router = useRouter();
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } =
    useActiveOrganization();
  const [initialData, setInitialData] = useState<EmployeeDto | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  const fetchData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId || !employeeId) return;
    setIsLoading(true);
    try {
      const data = await organizationRepository.getAgencyEmployeeById(
        activeOrganizationId,
        activeAgencyId,
        employeeId
      );
      setInitialData(data);
    } catch (error) {
      toast.error("Failed to fetch employee details for this agency.");
      setInitialData(null);
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId, employeeId]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const handleUpdate = async (data: EmployeeFormData): Promise<boolean> => {
    if (!activeOrganizationId || !activeAgencyId || !initialData?.employee_id) {
      toast.error("Cannot update employee: Missing context or ID.");
      return false;
    }
    try {
      await organizationRepository.updateAgencyEmployee(
        activeOrganizationId,
        activeAgencyId,
        initialData.employee_id,
        data
      );
      toast.success("Employee updated successfully!");
      router.push("/business-actor/agency/employees");
      router.refresh();
      return true;
    } catch (error: any) {
      toast.error(error.message || "Failed to update employee.");
      return false;
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[400px]">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  if (!initialData) {
    return (
      <FeedbackCard
        icon={User}
        title="Employee Not Found"
        description="The employee you are trying to edit does not exist in this agency."
      />
    );
  }

  return (
    <div className="mx-auto">
      <EmployeeForm
        agencies={activeAgencyDetails ? [activeAgencyDetails] : []}
        mode="edit"
        initialData={initialData}
        onSubmitAction={handleUpdate}
        scopedAgencyId={activeAgencyId} // Lock the form to the current agency
      />
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/employees/[employeeId]/edit-employee-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/employees/[employeeId]/page.tsx

import { Metadata } from "next";
import { EditAgencyEmployeeClientPage } from "./edit-employee-client";

export const metadata: Metadata = {
  title: "Edit Agency Employee",
};

type Props = { params: { employeeId: string } };
export default function EditAgencyEmployeePage({ params }: Props) {
  return <EditAgencyEmployeeClientPage employeeId={params.employeeId} />;
}
// END OF FILE: app/(dashboard)/business-actor/agency/employees/[employeeId]/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/employees/employees-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { EmployeeDto, EmployeeRoleValues } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  Users,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { getEmployeeColumns } from "@/components/organization/employees/columns";
import { EmployeeCard } from "@/components/organization/employees/employee-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

export function AgencyEmployeesClientPage() {
  const router = useRouter();
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } =
    useActiveOrganization();
  const [employees, setEmployees] = useState<EmployeeDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<EmployeeDto[]>([]);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId) {
      setIsLoading(false);
      setEmployees([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAgencyEmployees(
        activeOrganizationId,
        activeAgencyId
      );
      setEmployees(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load agency employees.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleEditAction = (employeeId: string) =>
    router.push(`/business-actor/agency/employees/${employeeId}`);
  const handleDeleteConfirmation = (items: EmployeeDto[]) => {
    if (items.length > 0) {
      setItemsToDelete(items);
      setIsDeleteDialogOpen(true);
    }
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || !activeAgencyId || itemsToDelete.length === 0)
      return;
    const originalItems = [...employees];
    const idsToDelete = itemsToDelete.map((item) => item.employee_id!);
    setEmployees((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.employee_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteAgencyEmployee(
          activeOrganizationId,
          activeAgencyId,
          item.employee_id!
        )
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} employee(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Employee(s) deleted.";
      },
      error: (err) => {
        setEmployees(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  // [ADD] Filter options for the agency view
  const roleOptions: DataTableFilterOption[] = useMemo(
    () =>
      EmployeeRoleValues.map((role) => ({
        label: role.replace(/_/g, " "),
        value: role,
      })),
    []
  );
  const departmentOptions: DataTableFilterOption[] = useMemo(() => {
    const departments = new Set(
      employees.map((item) => item.department).filter(Boolean)
    );
    return Array.from(departments).map((dept) => ({
      label: dept!,
      value: dept!,
    }));
  }, [employees]);

  const columns = useMemo<ColumnDef<EmployeeDto>[]>(
    () =>
      getEmployeeColumns(
        {
          onEditAction: handleEditAction,
          onDeleteAction: (item) => handleDeleteConfirmation([item]),
        },
        activeAgencyDetails ? [activeAgencyDetails] : []
      ),
    [activeAgencyDetails]
  );

  if (!activeAgencyId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Agency Selected"
        description="Please select an active agency to manage its employees."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={employees}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search agency employees..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="agency-employees-view-mode"
        exportFileName="agency_employees.csv"
        pageHeader={
          <PageHeader
            title="Agency Employees"
            description={`Manage the team for ${activeAgencyDetails?.long_name}`}
            action={
              <Button
                onClick={() =>
                  router.push("/business-actor/agency/employees/create")
                }
              >
                <PlusCircle className="mr-2 h-4 w-4" /> Add Employee
              </Button>
            }
          />
        }
        // [ADD] Pass the relevant filters to the toolbar
        filterControls={(table) => (
          <>
            <DataTableFacetedFilter
              column={table.getColumn("employee_role")}
              title="Role"
              options={roleOptions}
            />
            <DataTableFacetedFilter
              column={table.getColumn("department")}
              title="Department"
              options={departmentOptions}
            />
          </>
        )}
        renderGridItemAction={(employee) => (
          <EmployeeCard
            employee={employee}
            agency={activeAgencyDetails}
            onEditAction={handleEditAction}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Users}
            title="No Employees in this Agency"
            description="Assign an existing employee or create a new one for this agency."
            actionButton={
              <Button
                onClick={() =>
                  router.push("/business-actor/agency/employees/create")
                }
              >
                <PlusCircle className="mr-2 h-4 w-4" /> Add Employee
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Employees Found"
            description="Your search did not match any employees in this agency."
          />
        }
      />
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} employee(s)</strong> from this
              agency.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/employees/employees-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/employees/page.tsx

import { Metadata } from "next";
import { AgencyEmployeesClientPage } from "./employees-client";

export const metadata: Metadata = {
  title: "Manage Agency Employees",
  description: "View and manage employees assigned to this agency.",
};

export default function AgencyEmployeesPage() {
  return <AgencyEmployeesClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/agency/employees/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/profile/page.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
export default function AgencyProfilePage() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Agency Profile</CardTitle>
      </CardHeader>
      <CardContent>
        <p>
          This page will contain a form to edit the active agency's details.
        </p>
      </CardContent>
    </Card>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/profile/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/prospects/page.tsx

import { Metadata } from "next";
import { AgencyProspectsClientPage } from "./prospects-client";

export const metadata: Metadata = {
  title: "Manage Agency Prospects",
  description: "View, add, and manage your agency's prospects.",
};

export default async function AgencyProspectsPage() {
  return <AgencyProspectsClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/agency/prospects/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/prospects/prospects-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  ProspectDto,
  CreateProspectRequest,
  UpdateProspectRequest,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  Lightbulb,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { getProspectColumns } from "@/components/organization/prospects/columns";
import { ProspectCard } from "@/components/organization/prospects/prospect-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  ProspectForm,
  ProspectFormData,
} from "@/components/organization/prospects/prospect-form";

export function AgencyProspectsClientPage() {
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } =
    useActiveOrganization();
  const [prospects, setProspects] = useState<ProspectDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<ProspectDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingProspect, setEditingProspect] = useState<
    ProspectDto | undefined
  >(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId) {
      setIsLoading(false);
      setProspects([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAgencyProspects(
        activeOrganizationId,
        activeAgencyId
      );
      setProspects(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load agency prospects.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleOpenFormModal = (prospect?: ProspectDto) => {
    setEditingProspect(prospect);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: ProspectDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || !activeAgencyId || itemsToDelete.length === 0)
      return;
    const originalItems = [...prospects];
    const idsToDelete = itemsToDelete.map((item) => item.prospect_id!);
    setProspects((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.prospect_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteAgencyProspect(
          activeOrganizationId,
          activeAgencyId,
          item.prospect_id!
        )
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} prospect(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Prospect(s) deleted.";
      },
      error: (err) => {
        setProspects(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const handleFormSubmit = async (data: ProspectFormData): Promise<boolean> => {
    if (!activeOrganizationId || !activeAgencyId) {
      toast.error("No active agency selected.");
      return false;
    }
    try {
      const promise = editingProspect?.prospect_id
        ? organizationRepository.updateAgencyProspect(
            activeOrganizationId,
            activeAgencyId,
            editingProspect.prospect_id,
            data as UpdateProspectRequest
          )
        : organizationRepository.createAgencyProspect(
            activeOrganizationId,
            activeAgencyId,
            data as CreateProspectRequest
          );

      await toast.promise(promise, {
        loading: `${editingProspect ? "Updating" : "Creating"} prospect...`,
        success: `Prospect ${
          editingProspect ? "updated" : "created"
        } successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<ProspectDto>[]>(
    () =>
      getProspectColumns(
        {
          onEditAction: handleOpenFormModal,
          onDeleteAction: (item) => handleDeleteConfirmation([item]),
        },
        [activeAgencyDetails!].filter(Boolean)
      ),
    [activeAgencyDetails]
  );

  if (!activeAgencyId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Agency Selected"
        description="Please select an active agency to manage its prospects."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={prospects}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search agency prospects..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="agency-prospects-view-mode"
        exportFileName="agency_prospects.csv"
        pageHeader={
          <PageHeader
            title="Agency Prospects"
            description={`Manage prospects for ${activeAgencyDetails?.long_name}`}
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Prospect
              </Button>
            }
          />
        }
        renderGridItemAction={(item) => (
          <ProspectCard
            prospect={item}
            agencies={[]}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Lightbulb}
            title="No Prospects in this Agency"
            description="Add your first prospect to this agency."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Prospect
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Prospects Found"
            description="Your search did not match any prospects in this agency."
          />
        }
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">
            {editingProspect ? "Edit Prospect" : "Add New Prospect"}
          </DialogTitle>
          <ProspectForm
            mode={editingProspect ? "edit" : "create"}
            initialData={editingProspect}
            onSubmitAction={handleFormSubmit}
            agencies={[]}
            hideAgencySelector={true}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} prospect(s)</strong> from this
              agency.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/prospects/prospects-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/sales-people/page.tsx

import { Metadata } from "next";
import { AgencySalesPeopleClientPage } from "./sales-people-client";

export const metadata: Metadata = {
  title: "Manage Agency Sales People",
  description: "View, add, and manage your agency's sales team.",
};

export default async function AgencySalesPeoplePage() {
  return <AgencySalesPeopleClientPage />;
}// END OF FILE: app/(dashboard)/business-actor/agency/sales-people/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/sales-people/sales-people-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { SalesPersonDto, CreateSalesPersonRequest, UpdateSalesPersonRequest } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, UserCheck, Search as SearchIcon, Building } from "lucide-react";
import { getSalesPersonColumns } from "@/components/organization/sales-people/columns";
import { SalesPersonCard } from "@/components/organization/sales-people/sales-person-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { SalesPersonForm, SalesPersonFormData } from "@/components/organization/sales-people/sales-person-form";

export function AgencySalesPeopleClientPage() {
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } = useActiveOrganization();
  const [salesPeople, setSalesPeople] = useState<SalesPersonDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<SalesPersonDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingSalesPerson, setEditingSalesPerson] = useState<SalesPersonDto | undefined>(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId) { setIsLoading(false); setSalesPeople([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAgencySalesPersons(activeOrganizationId, activeAgencyId);
      setSalesPeople(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load agency sales people.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleOpenFormModal = (salesPerson?: SalesPersonDto) => {
    setEditingSalesPerson(salesPerson);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: SalesPersonDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || !activeAgencyId || itemsToDelete.length === 0) return;
    const originalItems = [...salesPeople];
    const idsToDelete = itemsToDelete.map(item => item.sales_person_id!);
    setSalesPeople(prev => prev.filter(item => !idsToDelete.includes(item.sales_person_id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map(item => organizationRepository.deleteAgencySalesPerson(activeOrganizationId, activeAgencyId, item.sales_person_id!)));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} sales person(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Sales person(s) deleted."; },
      error: (err) => { setSalesPeople(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const handleFormSubmit = async (data: SalesPersonFormData): Promise<boolean> => {
    if (!activeOrganizationId || !activeAgencyId) { toast.error("No active agency selected."); return false; }
    try {
      const promise = editingSalesPerson?.sales_person_id
        ? organizationRepository.updateAgencySalesPerson(activeOrganizationId, activeAgencyId, editingSalesPerson.sales_person_id, data as UpdateSalesPersonRequest)
        : organizationRepository.createAgencySalesPerson(activeOrganizationId, activeAgencyId, data as CreateSalesPersonRequest);
      
      await toast.promise(promise, {
        loading: `${editingSalesPerson ? 'Updating' : 'Creating'} sales person...`,
        success: `Sales person ${editingSalesPerson ? 'updated' : 'created'} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<SalesPersonDto>[]>(() => getSalesPersonColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item]) }, [activeAgencyDetails!].filter(Boolean)), [activeAgencyDetails]);

  if (!activeAgencyId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Agency Selected" description="Please select an active agency to manage its sales people." />;
  }

  return (
    <>
      <ResourceDataTable
        data={salesPeople}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search agency sales people..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="agency-sales-people-view-mode"
        exportFileName="agency_sales_people.csv"
        pageHeader={<PageHeader title="Agency Sales People" description={`Manage the sales team for ${activeAgencyDetails?.long_name}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Sales Person</Button>} />}
        renderGridItemAction={(item) => <SalesPersonCard salesPerson={item} agencies={[]} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={UserCheck} title="No Sales People in this Agency" description="Add your first sales person to this agency's team." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Sales Person</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Sales People Found" description="Your search did not match any sales people in this agency." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">{editingSalesPerson ? "Edit Sales Person" : "Add New Sales Person"}</DialogTitle>
          <SalesPersonForm mode={editingSalesPerson ? "edit" : "create"} initialData={editingSalesPerson} onSubmitAction={handleFormSubmit} agencies={[]} hideAgencySelector={true} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} sales person(s)</strong> from this agency.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}// END OF FILE: app/(dashboard)/business-actor/agency/sales-people/sales-people-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/suppliers/page.tsx

import { Metadata } from "next";
import { AgencySuppliersClientPage } from "./suppliers-client";


export const metadata: Metadata = {
  title: "Manage Agency Suppliers",
  description: "View, add, and manage your agency's suppliers.",
};

export default async function AgencySuppliersPage() {
  return <AgencySuppliersClientPage />;
}// END OF FILE: app/(dashboard)/business-actor/agency/suppliers/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/agency/suppliers/suppliers-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  ProviderDto,
  CreateProviderRequest,
  UpdateProviderRequest,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  Truck,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { getSupplierColumns } from "@/components/organization/suppliers/columns";
import { SupplierCard } from "@/components/organization/suppliers/supplier-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  SupplierForm,
  SupplierFormData,
} from "@/components/organization/suppliers/supplier-form";

export function AgencySuppliersClientPage() {
  const { activeOrganizationId, activeAgencyId, activeAgencyDetails } =
    useActiveOrganization();
  const [suppliers, setSuppliers] = useState<ProviderDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<ProviderDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingSupplier, setEditingSupplier] = useState<
    ProviderDto | undefined
  >(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId || !activeAgencyId) {
      setIsLoading(false);
      setSuppliers([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAgencySuppliers(
        activeOrganizationId,
        activeAgencyId
      );
      setSuppliers(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load agency suppliers.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, activeAgencyId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleOpenFormModal = (supplier?: ProviderDto) => {
    setEditingSupplier(supplier);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: ProviderDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || !activeAgencyId || itemsToDelete.length === 0)
      return;
    const originalItems = [...suppliers];
    const idsToDelete = itemsToDelete.map((item) => item.provider_id!);
    setSuppliers((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.provider_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteAgencySupplier(
          activeOrganizationId,
          activeAgencyId,
          item.provider_id!
        )
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} supplier(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Supplier(s) deleted.";
      },
      error: (err) => {
        setSuppliers(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const handleFormSubmit = async (data: SupplierFormData): Promise<boolean> => {
    if (!activeOrganizationId || !activeAgencyId) {
      toast.error("No active agency selected.");
      return false;
    }
    try {
      const promise = editingSupplier?.provider_id
        ? organizationRepository.updateAgencySupplier(
            activeOrganizationId,
            activeAgencyId,
            editingSupplier.provider_id,
            data as UpdateProviderRequest
          )
        : organizationRepository.createAgencySupplier(
            activeOrganizationId,
            activeAgencyId,
            data as CreateProviderRequest
          );

      await toast.promise(promise, {
        loading: `${editingSupplier ? "Updating" : "Creating"} supplier...`,
        success: `Supplier ${
          editingSupplier ? "updated" : "created"
        } successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<ProviderDto>[]>(
    () =>
      getSupplierColumns(
        {
          onEditAction: handleOpenFormModal,
          onDeleteAction: (item) => handleDeleteConfirmation([item]),
        },
        [activeAgencyDetails!].filter(Boolean)
      ),
    [activeAgencyDetails]
  );

  if (!activeAgencyId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Agency Selected"
        description="Please select an active agency to manage its suppliers."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={suppliers}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search agency suppliers..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="agency-suppliers-view-mode"
        exportFileName="agency_suppliers.csv"
        pageHeader={
          <PageHeader
            title="Agency Suppliers"
            description={`Manage suppliers for ${
              activeAgencyDetails?.long_name || "this agency"
            }`}
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Supplier
              </Button>
            }
          />
        }
        renderGridItemAction={(supplier) => (
          <SupplierCard
            supplier={supplier}
            agencies={[]}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Truck}
            title="No Suppliers in this Agency"
            description="Add your first supplier to this agency."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Supplier
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Suppliers Found"
            description="Your search did not match any suppliers in this agency."
          />
        }
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">
            {editingSupplier ? "Edit Supplier" : "Add New Supplier"}
          </DialogTitle>
          <SupplierForm
            mode={editingSupplier ? "edit" : "create"}
            initialData={editingSupplier}
            onSubmitAction={handleFormSubmit}
            agencies={[]}
            hideAgencySelector={true}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} supplier(s)</strong> from this
              agency.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/agency/suppliers/suppliers-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/bonus/page.tsx


import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function BusinessActorBonusPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Bonus Configuration</h1>
       <Tabs defaultValue="rules" className="space-y-4">
        <TabsList>
          <TabsTrigger value="rules">Rules</TabsTrigger>
          <TabsTrigger value="transactions">Bonus Transactions</TabsTrigger>
          <TabsTrigger value="point_value">Point Value</TabsTrigger>
          <TabsTrigger value="campaigns">Campaigns</TabsTrigger>
          {/* Add more tabs for advanced features like loyalty tiers */}
        </TabsList>

        <TabsContent value="rules">
          <Card>
            <CardHeader>
              <CardTitle>Bonification Rules</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Define rules for awarding bonus points based on Bonification API.</p>
              {/* TODO: Implement rule creation/management interface */}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="transactions">
          <Card>
            <CardHeader>
              <CardTitle>Bonus Transactions History</CardTitle>
            </CardHeader>
            <CardContent>
              <p>View a detailed log of all bonus points awarded and redeemed.</p>
              {/* TODO: Implement bonus transaction table/log */}
            </CardContent>
          </Card>
        </TabsContent>

         <TabsContent value="point_value">
          <Card>
            <CardHeader>
              <CardTitle>Monetary Value per Point</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Set the conversion rate for points to currency.</p>
              {/* TODO: Implement setting for point value */}
            </CardContent>
          </Card>
        </TabsContent>

         <TabsContent value="campaigns">
          <Card>
            <CardHeader>
              <CardTitle>Bonus Campaigns</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Create and manage special bonus campaigns (e.g., based on sales targets, referrals).</p>
              {/* TODO: Implement campaign management UI */}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/bonus/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/chat/page.tsx


import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function BusinessActorChatPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Chat & Chatbot</h1>
      <Card>
        <CardHeader>
          <CardTitle>Messaging Center</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Integrated chat interface for communication with customers, team, or support. Includes chatbot functionality.</p>
          {/* TODO: Implement Chat component, potentially integrating a third-party service or building custom */}
          <div className="mt-4 h-96 border rounded-md flex items-center justify-center text-muted-foreground">
            Chat Interface Placeholder
          </div>
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/chat/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/dashboard/dashboard-client.tsx

"use client";

import React, { useEffect, useState, useCallback } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import {
  DollarSign,
  Users,
  Building,
  Truck,
  Briefcase,
  UserPlus,
  Package,
  Users2,
  TrendingUp,
  BarChartHorizontal,
} from "lucide-react";
import { PageHeader } from "@/components/ui/page-header";
import {
  StatCard,
  StatCardSkeleton,
} from "@/components/dashboard/organization/stat-card";
import { SalesChart } from "@/components/dashboard/organization/sales-chart";
import { RecentActivity } from "@/components/dashboard/organization/recent-activity";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  AgencyDto,
  EmployeeDto,
  CustomerDto,
  ProviderDto,
} from "@/types/organization";
import { Progress } from "@/components/ui/progress";
import { Skeleton } from "@/components/ui/skeleton";
import { FeedbackCard } from "@/components/ui/feedback-card";
import {
  Bar,
  BarChart,
  ResponsiveContainer,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
} from "recharts";
import { cn } from "@/lib/utils";

interface DashboardData {
  employeeCount: number;
  agencyCount: number;
  customerCount: number;
  supplierCount: number;
  topAgencies: AgencyDto[];
  employees: EmployeeDto[];
  customers: CustomerDto[];
  suppliers: ProviderDto[];
  error?: string | null;
}

interface DashboardClientPageProps {
  initialData: Omit<DashboardData, "employees" | "customers" | "suppliers">;
}

export function DashboardClientPage({ initialData }: DashboardClientPageProps) {
  const router = useRouter();
  const {
    activeOrganizationId,
    activeOrganizationDetails,
    isLoadingOrgDetails,
  } = useActiveOrganization();
  const [data, setData] = useState<DashboardData>({
    ...initialData,
    employees: [],
    customers: [],
    suppliers: [],
  });
  const [isLoading, setIsLoading] = useState(true);

  const fetchData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      return;
    }
    setIsLoading(true);
    try {
      const [employees, agencies, customers, suppliers] = await Promise.all([
        organizationRepository.getOrgEmployees(activeOrganizationId),
        organizationRepository.getAgencies(activeOrganizationId),
        organizationRepository.getOrgCustomers(activeOrganizationId),
        organizationRepository.getOrgSuppliers(activeOrganizationId),
      ]);
      setData({
        employeeCount: employees?.length || 0,
        agencyCount: agencies?.length || 0,
        customerCount: customers?.length || 0,
        supplierCount: suppliers?.length || 0,
        topAgencies:
          agencies
            ?.sort(
              (a, b) => (b.average_revenue || 0) - (a.average_revenue || 0)
            )
            .slice(0, 5) || [],
        employees: employees || [],
        customers: customers || [],
        suppliers: suppliers || [],
      });
    } catch (error: any) {
      setData({
        ...initialData,
        employees: [],
        customers: [],
        suppliers: [],
        error: "Failed to load dashboard data.",
      });
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, initialData]);

  useEffect(() => {
    if (activeOrganizationId) {
      fetchData();
    } else if (!isLoadingOrgDetails) {
      setIsLoading(false);
    }
  }, [activeOrganizationId, isLoadingOrgDetails, fetchData]);

  if (isLoading || isLoadingOrgDetails) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <Skeleton className="h-10 w-1/3" />
          <Skeleton className="h-10 w-48" />
        </div>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          {Array.from({ length: 4 }).map((_, i) => (
            <StatCardSkeleton key={i} />
          ))}
        </div>
        <div className="grid gap-4 lg:grid-cols-7">
          <Skeleton className="lg:col-span-4 h-96 w-full" />
          <Skeleton className="lg:col-span-3 h-96 w-full" />
        </div>
      </div>
    );
  }

  if (!activeOrganizationId) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Organization Selected"
        description="Please select an organization from the switcher in the sidebar to view its dashboard."
      />
    );
  }

  const totalRevenue = data.topAgencies.reduce(
    (acc, agency) => acc + (agency.average_revenue || 0),
    0
  );

  const departmentDistribution = data.employees.reduce((acc, emp) => {
    const dept = emp.department || "Unassigned";
    acc[dept] = (acc[dept] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  const departmentData = Object.entries(departmentDistribution)
    .map(([name, count]) => ({ name, count }))
    .sort((a, b) => b.count - a.count);

  return (
    <div className="space-y-8">
      <PageHeader
        title={activeOrganizationDetails?.long_name || "Dashboard"}
        description="Welcome to your organization's command center."
      />

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <StatCard
          title="Est. Annual Revenue"
          value={`$${(totalRevenue * 12).toLocaleString()}`}
          description="+20.1% from last year"
          icon={DollarSign}
        />
        <StatCard
          title="Active Customers"
          value={`${data.customerCount}`}
          description="+180 since last month"
          icon={Users}
        />
        <StatCard
          title="Total Agencies"
          value={`${data.agencyCount}`}
          description="View all agencies"
          icon={Building}
        />
        <StatCard
          title="Total Employees"
          value={`${data.employeeCount}`}
          description="+5 since last week"
          icon={UserPlus}
        />
      </div>

      <div className="grid grid-cols-1 gap-6 lg:grid-cols-7">
        <SalesChart />
        <RecentActivity />
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Organization Entities Overview</CardTitle>
          <CardDescription>
            A detailed breakdown of your key operational entities.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="agencies" className="w-full">
            <TabsList className="grid w-full grid-cols-2 md:grid-cols-4">
              <TabsTrigger value="agencies">
                <Users2 className="mr-2 h-4 w-4" />
                Agencies
              </TabsTrigger>
              <TabsTrigger value="employees">
                <Users className="mr-2 h-4 w-4" />
                Employees
              </TabsTrigger>
              <TabsTrigger value="customers">
                <Briefcase className="mr-2 h-4 w-4" />
                Customers
              </TabsTrigger>
              <TabsTrigger value="suppliers">
                <Truck className="mr-2 h-4 w-4" />
                Suppliers
              </TabsTrigger>
            </TabsList>

            <TabsContent value="agencies" className="pt-6 space-y-4">
              <div className="flex items-center justify-between">
                <p className="text-sm text-muted-foreground">
                  {data.agencyCount} total agencies.
                </p>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => router.push("/business-actor/org/agencies")}
                >
                  Manage All
                </Button>
              </div>
              <div className="space-y-4">
                {data.topAgencies.map((agency) => (
                  <div key={agency.agency_id} className="space-y-1">
                    <div className="flex justify-between text-sm">
                      <p className="font-medium">{agency.short_name}</p>
                      <p className="text-muted-foreground">
                        ${(agency.average_revenue || 0).toLocaleString()}/mo
                      </p>
                    </div>
                    <Progress
                      value={
                        totalRevenue > 0
                          ? ((agency.average_revenue || 0) / totalRevenue) * 100
                          : 0
                      }
                    />
                  </div>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="employees" className="pt-6">
              <div className="flex items-center justify-between mb-4">
                <p className="text-sm text-muted-foreground">
                  {data.employeeCount} total employees.
                </p>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => router.push("/business-actor/org/employees")}
                >
                  Manage All
                </Button>
              </div>
              <ResponsiveContainer width="100%" height={250}>
                <BarChart
                  data={departmentData}
                  layout="vertical"
                  margin={{ left: 10, right: 30 }}
                >
                  <CartesianGrid strokeDasharray="3 3" horizontal={false} />
                  <XAxis type="number" stroke="#888888" fontSize={12} />
                  <YAxis
                    type="category"
                    dataKey="name"
                    stroke="#888888"
                    fontSize={12}
                    tickLine={false}
                    axisLine={false}
                    width={100}
                  />
                  <Tooltip
                    cursor={{ fill: "hsl(var(--muted))" }}
                    contentStyle={{
                      backgroundColor: "hsl(var(--background))",
                      border: "1px solid hsl(var(--border))",
                    }}
                  />
                  <Bar
                    dataKey="count"
                    fill="hsl(var(--primary))"
                    radius={[0, 4, 4, 0]}
                    name="Employees"
                    barSize={20}
                  />
                </BarChart>
              </ResponsiveContainer>
            </TabsContent>

            <TabsContent value="customers" className="pt-6">
              <div className="flex items-center justify-between">
                <p className="text-sm text-muted-foreground">
                  {data.customerCount} total customers.
                </p>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => router.push("/business-actor/org/customers")}
                >
                  Manage All
                </Button>
              </div>
              <div className="h-[250px] flex items-center justify-center text-muted-foreground italic">
                New customer acquisition chart coming soon...
              </div>
            </TabsContent>

            <TabsContent value="suppliers" className="pt-6">
              <div className="flex items-center justify-between">
                <p className="text-sm text-muted-foreground">
                  {data.supplierCount} total suppliers.
                </p>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => router.push("/business-actor/org/suppliers")}
                >
                  Manage All
                </Button>
              </div>
              <div className="h-[250px] flex items-center justify-center text-muted-foreground italic">
                Supplier category breakdown chart coming soon...
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/dashboard/dashboard-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/dashboard/page.tsx

import { Metadata } from "next";
import { organizationRepository } from "@/lib/data-repo/organization";
import { DashboardClientPage } from "./dashboard-client";
import { getSession } from "next-auth/react";
import { headers } from "next/headers";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { getServerSession } from "next-auth";
import { notFound, redirect } from "next/navigation";

export const metadata: Metadata = {
  title: "Organization Dashboard",
  description: "A complete overview of your organization's performance.",
};

// Next.js Route Segment Config for caching
export const revalidate = 60; // Revalidate data every 60 seconds

async function getDashboardData(orgId: string) {
    try {
        const [employees, agencies, customers, suppliers] = await Promise.all([
            organizationRepository.getOrgEmployees(orgId),
            organizationRepository.getAgencies(orgId),
            organizationRepository.getOrgCustomers(orgId),
            organizationRepository.getOrgSuppliers(orgId),
        ]);
        return {
            employeeCount: employees?.length || 0,
            agencyCount: agencies?.length || 0,
            customerCount: customers?.length || 0,
            supplierCount: suppliers?.length || 0,
            topAgencies: agencies?.sort((a,b) => (b.average_revenue || 0) - (a.average_revenue || 0)).slice(0, 5) || [],
        };
    } catch (error) {
        console.error("Dashboard data fetching error:", error);
        return { employeeCount: 0, agencyCount: 0, customerCount: 0, supplierCount: 0, topAgencies: [], error: "Failed to load dashboard data." };
    }
}

export default async function OrganizationDashboardPage() {
  const session = await getServerSession(authOptions);

  if (!session?.user.businessActorId) {
    // This page is for business actors only. Redirect if not.
    redirect('/dashboard');
  }
  
  // In a real app with context on server, we'd get activeOrgId here.
  // For now, we pass a placeholder and let the client-side context drive the real data fetching.
  // This structure allows for future server-side optimization.
  const placeholderData = {
    employeeCount: 0,
    agencyCount: 0,
    customerCount: 0,
    supplierCount: 0,
    topAgencies: [],
    error: null,
  };

  return <DashboardClientPage initialData={placeholderData} />;
}
// END OF FILE: app/(dashboard)/business-actor/dashboard/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/layout.tsx

"use client";

import React, { useEffect } from "react";
import { useSession } from "next-auth/react";
import { useRouter, usePathname } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";

export default function BusinessActorLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { data: session, status: sessionStatus } = useSession();
  const { userOrganizations, isOrgContextInitialized } =
    useActiveOrganization();

  const router = useRouter();
  const pathname = usePathname();

  useEffect(() => {
    // Wait until we have a definitive session status.
    if (sessionStatus === "loading") {
      return;
    }

    // 1. First Guard: Ensure the user is authenticated and is a Business Actor.
    if (sessionStatus === "authenticated") {
      if (
        !session.user.businessActorId &&
        pathname !== "/business-actor/onboarding"
      ) {
        toast.error("Access Denied: This area is for Business Actors only.");
        router.replace("/dashboard");
        return;
      }
    } else {
      // Unauthenticated
      router.replace("/login");
      return;
    }

    // 2. Second Guard: For a verified BA, ensure they have an organization.
    // This check runs only after the organization list has been loaded.
    if (isOrgContextInitialized && session.user.businessActorId) {
      if (
        userOrganizations.length === 0 &&
        pathname !== "/business-actor/organization/create"
      ) {
        // If they have no orgs, they MUST be on the creation page.
        // If they try to go anywhere else (e.g., /business-actor/dashboard), force them to create.
        toast.info("You must create an organization to continue.");
        router.replace("/business-actor/organization/create");
      }
    }
  }, [
    session,
    sessionStatus,
    router,
    userOrganizations,
    isOrgContextInitialized,
    pathname,
  ]);

  // Show a loading state while we verify the user's BA status and organization count.
  if (
    sessionStatus === "loading" ||
    (session?.user.businessActorId && !isOrgContextInitialized)
  ) {
    return (
      <div className="flex items-center justify-center min-h-[80vh]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <p className="ml-4 text-muted-foreground">
          Verifying business access...
        </p>
      </div>
    );
  }

  // If all checks pass, render the requested child page.
  return <>{children}</>;
}
// END OF FILE: app/(dashboard)/business-actor/layout.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/onboarding/page.tsx

"use client";

import React, { useState } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { BusinessActorForm } from "@/components/business-actor/business-actor-form";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { CheckCircle, ArrowRight } from "lucide-react";
import { BusinessActorDto } from "@/types/organization";
import { toast } from "sonner";

export default function BusinessActorOnboardingPage() {
  const { data: session, update: updateSession } = useSession();
  const router = useRouter();
  const [isSuccess, setIsSuccess] = useState(false);

  const handleSuccessAction = async (newBA: BusinessActorDto) => {
    toast.success("Business profile created successfully!");
    await updateSession();

    setIsSuccess(true);
  };

  const handleContinue = () => {
    // After session update, the user is now a BA and needs to create an org.
    router.push("/business-actor/organization/create");
  };

  if (session?.user.businessActorId && !isSuccess) {
    return (
      <div className="container mx-auto flex items-center justify-center min-h-[calc(100vh-10rem)]">
        <Card className="max-w-lg text-center">
          <CardHeader>
            <CheckCircle className="mx-auto h-12 w-12 text-green-500 mb-4" />
            <CardTitle>You're Already a Business Actor!</CardTitle>
            <CardDescription>
              Your business profile is already set up. You can proceed to your
              workspace.
            </CardDescription>
          </CardHeader>
          <CardFooter>
            <Button
              className="w-full"
              onClick={() => router.push("/business-actor/organizations")}
            >
              Go to My Organizations
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {isSuccess ? (
        <Card className="max-w-2xl mx-auto animate-fade-in-up text-center">
          <CardHeader>
            <CheckCircle className="mx-auto h-12 w-12 text-green-500 mb-4" />
            <CardTitle className="text-3xl font-bold">
              Profile Activated!
            </CardTitle>
            <CardDescription className="text-lg text-muted-foreground pt-2">
              Your business profile is ready. The next step is to create your
              first organization.
            </CardDescription>
          </CardHeader>
          <CardFooter className="flex justify-center">
            <Button size="lg" onClick={handleContinue}>
              Create Organization <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </CardFooter>
        </Card>
      ) : (
        <div className="max-w-4xl mx-auto">
          <BusinessActorForm
            onSuccessAction={handleSuccessAction}
            mode={"create"}
          />
        </div>
      )}
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/onboarding/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/agencies/[agencyId]/edit/page.tsx

"use client";

import React, { useState, useEffect } from "react";
import { AgencyForm } from "@/components/organization/agencies/agency-form";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { AgencyDto } from "@/types/organization";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { AlertTriangle } from "lucide-react";
import { toast } from "sonner";
import { useRouter } from "next/navigation";

export default function EditAgencyPage({
  params,
}: {
  params: { agencyId: string };
}) {
  const { activeOrganizationId, fetchAgenciesForCurrentOrg } =
    useActiveOrganization();
  const [agencyData, setAgencyData] = useState<AgencyDto | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  useEffect(() => {
    if (activeOrganizationId && params.agencyId) {
      setIsLoading(true);
      organizationRepository
        .getAgencyById(activeOrganizationId, params.agencyId)
        .then((data) => {
          if (data) setAgencyData(data);
          else setError("Agency not found.");
        })
        .catch(() => setError("Failed to fetch agency details."))
        .finally(() => setIsLoading(false));
    }
  }, [activeOrganizationId, params.agencyId]);

  const handleSuccessAction = (updatedAgency: AgencyDto) => {
    toast.success(`Agency "${updatedAgency.short_name}" updated successfully!`);
    // Refresh the agency list in the context so the main list page will be up-to-date
    fetchAgenciesForCurrentOrg();
    router.push("/business-actor/org/agencies");
  };

  if (isLoading) {
    return (
      <div>
        <Skeleton className="h-8 w-1/4 mb-6" />
        <Skeleton className="h-[500px] w-full" />
      </div>
    );
  }

  if (error || !agencyData) {
    return (
      <Card className="border-destructive">
        <CardHeader>
          <CardTitle className="text-destructive flex items-center gap-2">
            <AlertTriangle /> Error
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p>{error || "The agency could not be loaded."}</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div>
      <h1 className="text-2xl font-bold tracking-tight mb-6">
        Edit Agency: {agencyData.short_name}
      </h1>
      <AgencyForm
        organizationId={activeOrganizationId!}
        mode="edit"
        initialData={agencyData}
        onSuccessAction={handleSuccessAction}
      />
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/agencies/[agencyId]/edit/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/agencies/create/page.tsx

"use client";

import { AgencyForm } from "@/components/organization/agencies/agency-form";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Inbox } from "lucide-react";
import { AgencyDto } from "@/types/organization";
import { toast } from "sonner";
import { useRouter } from "next/navigation";

export default function CreateAgencyPage() {
  const router = useRouter();
  const {
    activeOrganizationId,
    isLoadingOrgDetails,
    fetchAgenciesForCurrentOrg,
  } = useActiveOrganization();

  const handleCreateSuccess = (newAgency: AgencyDto) => {
    toast.success(`Agency "${newAgency.short_name}" created successfully!`);
    // Refresh the agency list in the context so the main list page will be up-to-date
    fetchAgenciesForCurrentOrg();
    router.push("/business-actor/org/agencies");
  };

  if (!activeOrganizationId && !isLoadingOrgDetails) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>No Organization Selected</CardTitle>
        </CardHeader>
        <CardContent className="flex flex-col items-center justify-center text-center p-10">
          <Inbox className="h-12 w-12 text-muted-foreground mb-4" />
          <p className="text-muted-foreground">
            Please select an active organization before creating an agency.
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div>
      <h1 className="text-2xl font-bold tracking-tight mb-6">
        Create New Agency
      </h1>
      {activeOrganizationId && (
        <AgencyForm
          organizationId={activeOrganizationId}
          mode="create"
          onSuccessAction={handleCreateSuccess}
        />
      )}
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/agencies/create/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/agencies/page.tsx

"use client";

import React, { useState, useEffect, useCallback, useMemo } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { AgencyDto } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Building, SearchIcon } from "lucide-react";
import { getAgencyColumns } from "@/components/organization/agencies/columns";
import { AgencyCard } from "@/components/organization/agencies/agency-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";

const statusOptions: DataTableFilterOption[] = [
  { value: "true", label: "Active" },
  { value: "false", label: "Inactive" },
];

export default function ManageAgenciesPage() {
  const router = useRouter();
  const { activeOrganizationId, activeOrganizationDetails, setActiveAgency } =
    useActiveOrganization();

  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [dataVersion, setDataVersion] = useState(0);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<AgencyDto[]>([]);

  const fetchData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAgencies(
        activeOrganizationId
      );
      setAgencies(data || []);
    } catch (err) {
      setError(err.message || "Could not load agencies.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    fetchData();
  }, [fetchData, dataVersion]);

  const refreshData = useCallback(() => setDataVersion((v) => v + 1), []);

  const handleEnterAgency = async (agency: AgencyDto) => {
    toast.info(`Entering agency: ${agency.short_name}...`);
    await setActiveAgency(agency.agency_id!, agency);
    router.push("/business-actor/agency/dashboard");
  };

  const handleEditAction = (agencyId: string) => {
    router.push(`/business-actor/org/agencies/${agencyId}/edit`);
  };

  const handleDeleteConfirmation = (items: AgencyDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteAgency(
          activeOrganizationId,
          item.agency_id!
        )
      )
    );

    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} agency(s)...`,
      success: () => {
        refreshData();
        setIsDeleteDialogOpen(false);
        setItemsToDelete([]);
        return `${itemsToDelete.length} agency(s) deleted successfully.`;
      },
      error: (err) => `Failed to delete agencies: ${err.message}`,
    });
  };

  const columns = useMemo<ColumnDef<AgencyDto>[]>(
    () =>
      getAgencyColumns({
        onEnterAction: handleEnterAgency,
        onEditAction: handleEditAction,
        onDeleteAction: (item) => handleDeleteConfirmation([item]),
      }),
    [handleEditAction, handleEnterAgency, handleDeleteConfirmation]
  );

  return (
    <>
      <ResourceDataTable
        data={agencies}
        columns={columns}
        isLoading={isLoading}
        error={error}
        viewModeStorageKey="agencies-view-mode"
        exportFileName="agencies_export.csv"
        onRefreshAction={refreshData}
        searchPlaceholder="Search agencies by name or location..."
        onDeleteItemsAction={handleDeleteConfirmation}
        pageHeader={
          <PageHeader
            title="Agency Management"
            description={`Manage branches for ${activeOrganizationDetails?.long_name}`}
            action={
              <Button
                onClick={() =>
                  router.push("/business-actor/org/agencies/create")
                }
                size="sm"
                className="h-10"
              >
                <PlusCircle className="mr-2 h-4 w-4" /> Add Agency
              </Button>
            }
          />
        }
        filterControls={(table) => (
          <DataTableFacetedFilter
            column={table.getColumn("is_active")}
            title="Status"
            options={statusOptions}
          />
        )}
        renderGridItemAction={(agency) => (
          <AgencyCard
            agency={agency}
            onEnterAction={handleEnterAgency}
            onEditAction={handleEditAction}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Building}
            title="No Agencies Created Yet"
            description="Get started by adding your first agency to manage your operations."
            actionButton={
              <Button
                onClick={() =>
                  router.push("/business-actor/org/agencies/create")
                }
              >
                <PlusCircle className="mr-2 h-4 w-4" /> Create Agency
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Agencies Found"
            description="Your search or filter criteria did not match any agencies. Try something different."
          />
        }
      />

      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} agency(s)</strong> and all
              associated data. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/agencies/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/organization/create/page.tsx

"use client";

import { OrganizationForm } from "@/components/organization/organization-form";
import { OrganizationDto } from "@/types/organization";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import { useSession } from "next-auth/react";

export default function CreateOrganizationPage() {
  const router = useRouter();

  const { data: session, status: sessionStatus } = useSession();
  const { setActiveOrganization, fetchUserOrganizationsList } =
    useActiveOrganization();

  const handleCreateSuccess = async (newOrgData: OrganizationDto) => {
    toast.success(`Organization "${newOrgData.short_name}" created!`);

    // Set the newly created organization as active in our context.
    if (newOrgData.organization_id) {
      await setActiveOrganization(newOrgData.organization_id, newOrgData);
      // We also re-fetch the list to ensure our context is fully up-to-date.
      if (session?.user?.businessActorId) {
        await fetchUserOrganizationsList(session.user.businessActorId);
      } else {
        toast.error(
          "Could not fetch organizations list: missing user session."
        );
      }
      // Now, redirect to the new organization's dashboard.
      router.push(`/business-actor/dashboard`);
    } else {
      // Fallback in case the new org ID is/business-actor/org/dashboard missing.
      toast.error(
        "Could not activate the new organization. Redirecting to dashboard."
      );
      router.push(`/business-actor/dashboard`);
    }
  };

  return (
    <div className="max-w-5xl mx-auto">
      <div className="mb-8 text-center">
        <h1 className="text-3xl font-bold tracking-tight">
          Create Your Organization
        </h1>
        <p className="text-muted-foreground mt-2">
          This is the first step to unlocking your business workspace. Fill out
          the details below.
        </p>
      </div>
      <OrganizationForm onSuccessAction={handleCreateSuccess} mode={"create"} />
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/organization/create/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/organizations/page.tsx

"use client";

import React, { useState, useMemo, useCallback } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { OrganizationDto, OrganizationStatus } from "@/types/organization";
import { Button } from "@/components/ui/button";
import { PlusCircle, Briefcase, Search as SearchIcon } from "lucide-react";
import { PageHeader } from "@/components/ui/page-header";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { OrganizationCard } from "@/components/organization/organization-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { ColumnDef } from "@tanstack/react-table";
import { getOrganizationColumns } from "@/components/organization/organization-columns";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";
import { toast } from "sonner";

const statusOptions: DataTableFilterOption[] = [
  { value: "ACTIVE", label: "Active" },
  { value: "INACTIVE", label: "Inactive" },
  { value: "PENDING_APPROVAL", label: "Pending" },
  { value: "SUSPENDED", label: "Suspended" },
];

export default function OrganizationsHubPage() {
  const router = useRouter();
  const {
    userOrganizations,
    isLoadingUserOrgs,
    setActiveOrganization,
    fetchUserOrganizationsList,
  } = useActiveOrganization();

  const handleEnterDashboard = (org: OrganizationDto) => {
    if (!org.organization_id) return;
    setActiveOrganization(org.organization_id, org);
    router.push("/business-actor/dashboard");
  };

  const handleEditOrganization = (orgId: string) => {
    setActiveOrganization(orgId);
    router.push("/business-actor/org/profile");
  };

  const handleDeleteOrganizations = (orgs: OrganizationDto[]) => {
    toast.error(
      `Deletion of ${orgs.length} organization(s) is not yet implemented.`
    );
  };

  const columns = useMemo<ColumnDef<OrganizationDto>[]>(
    () =>
      getOrganizationColumns({
        onEnterAction: handleEnterDashboard,
        onEditAction: handleEditOrganization,
        onDeleteAction: (org) => handleDeleteOrganizations([org]),
      }),
    []
  );

  return (
    <ResourceDataTable
      data={userOrganizations}
      columns={columns}
      isLoading={isLoadingUserOrgs}
      error={null} // Assuming context handles errors via toast for now
      onRefreshAction={fetchUserOrganizationsList}
      searchPlaceholder="Search organizations..."
      onDeleteItemsAction={handleDeleteOrganizations}
      viewModeStorageKey="organizations-hub-view-mode"
      exportFileName="my_organizations.csv"
      pageHeader={
        <PageHeader
          title="Your Organizations"
          description="Select an organization to manage, or create a new one."
          action={
            <Button
              onClick={() => router.push("/business-actor/organization/create")}
            >
              <PlusCircle className="mr-2 h-4 w-4" />
              New Organization
            </Button>
          }
        />
      }
      filterControls={(table) => (
        <DataTableFacetedFilter
          column={table.getColumn("status")}
          title="Status"
          options={statusOptions}
        />
      )}
      renderGridItemAction={(org) => (
        <OrganizationCard
          organization={org}
          onEnterAction={handleEnterDashboard}
          onEditAction={handleEditOrganization}
          onDeleteAction={(organization) =>
            handleDeleteOrganizations([organization])
          }
        />
      )}
      emptyState={
        <FeedbackCard
          icon={Briefcase}
          title="No Organizations Found"
          description="You haven't created or joined any organizations yet. Get started by creating your first one."
          actionButton={
            <Button
              onClick={() => router.push("/business-actor/organization/create")}
            >
              <PlusCircle className="mr-2 h-4 w-4" />
              Create Your First Organization
            </Button>
          }
        />
      }
      filteredEmptyState={
        <FeedbackCard
          icon={SearchIcon}
          title="No Organizations Found"
          description="Your search or filter criteria did not match any of your organizations."
        />
      }
    />
  );
}
// END OF FILE: app/(dashboard)/business-actor/organizations/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/business-domains/business-domains-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  BusinessDomainDto,
  CreateBusinessDomainRequest,
  UpdateBusinessDomainRequest,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Tag, Search as SearchIcon, Building } from "lucide-react";
import { getBusinessDomainColumns } from "@/components/admin/business-domains/columns";
import { BusinessDomainCard } from "@/components/admin/business-domains/business-domain-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  BusinessDomainForm,
  BusinessDomainFormData,
} from "@/components/admin/business-domains/business-domain-form";

export function OrgBusinessDomainsClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } =
    useActiveOrganization();
  const [domains, setDomains] = useState<BusinessDomainDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<BusinessDomainDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<BusinessDomainDto | undefined>(
    undefined
  );

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      setDomains([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAllBusinessDomains({
        organization_id: activeOrganizationId,
      });
      setDomains(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load custom business domains.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleOpenFormModal = (item?: BusinessDomainDto) => {
    setEditingItem(item);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: BusinessDomainDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (itemsToDelete.length === 0) return;
    const originalItems = [...domains];
    const idsToDelete = itemsToDelete.map((item) => item.id!);
    setDomains((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteBusinessDomain(item.id!)
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} domain(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Domain(s) deleted.";
      },
      error: (err) => {
        setDomains(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const handleFormSubmit = async (
    data: BusinessDomainFormData
  ): Promise<boolean> => {
    try {
      const payload = { ...data, organization_id: activeOrganizationId };
      const promise = editingItem?.id
        ? organizationRepository.updateBusinessDomain(
            editingItem.id,
            payload as UpdateBusinessDomainRequest
          )
        : organizationRepository.createBusinessDomain(
            payload as CreateBusinessDomainRequest
          );

      await toast.promise(promise, {
        loading: `${editingItem ? "Updating" : "Creating"} domain...`,
        success: `Domain ${editingItem ? "updated" : "created"} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<BusinessDomainDto>[]>(
    () =>
      getBusinessDomainColumns({
        onEditAction: handleOpenFormModal,
        onDeleteAction: (item) => handleDeleteConfirmation([item]),
      }),
    []
  );

  if (!activeOrganizationId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Organization Selected"
        description="Please select an active organization to manage its custom domains."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={domains}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search custom domains..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-domains-view-mode"
        exportFileName="custom_domains.csv"
        pageHeader={
          <PageHeader
            title="Custom Business Domains"
            description={`Manage domains specific to ${activeOrganizationDetails?.long_name}`}
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Create Domain
              </Button>
            }
          />
        }
        renderGridItemAction={(item) => (
          <BusinessDomainCard
            domain={item}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Tag}
            title="No Custom Domains"
            description="Create custom business domains tailored to your organization's needs."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Create Domain
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Domains Found"
            description="Your search did not match any custom domains."
          />
        }
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">
            {editingItem ? "Edit Domain" : "Create New Domain"}
          </DialogTitle>
          <BusinessDomainForm
            mode={editingItem ? "edit" : "create"}
            initialData={editingItem}
            onSubmitAction={handleFormSubmit}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} domain(s)</strong>.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/business-domains/business-domains-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/business-domains/page.tsx

import { Metadata } from "next";
import { OrgBusinessDomainsClientPage } from "./business-domains-client";

export const metadata: Metadata = {
  title: "Manage Custom Business Domains",
  description:
    "View and manage business domains specific to your organization.",
};

export default async function OrgBusinessDomainsPage() {
  return <OrgBusinessDomainsClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/business-domains/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/certifications/certifications-client.tsx

"use client";

import React, { useState, useEffect, useCallback, useMemo } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import {
  CertificationDto,
  CreateCertificationRequest,
  UpdateCertificationRequest,
} from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  CertificationForm,
  CertificationFormData,
} from "@/components/organization/certifications/certification-form";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  Award,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { toast } from "sonner";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { ColumnDef } from "@tanstack/react-table";
import { getCertificationColumns } from "@/components/organization/certifications/columns";
import { CertificationCard } from "@/components/organization/certifications/certification-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

const getCertificationTypeOptions = (
  items: CertificationDto[]
): DataTableFilterOption[] => {
  const allTypes = items
    .map((item) => item.type)
    .filter((type): type is string => typeof type === "string");
  return [...new Set(allTypes)]
    .map((type) => ({ label: type, value: type }))
    .sort((a, b) => a.label.localeCompare(b.label));
};

export function CertificationsClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } =
    useActiveOrganization();
  const [allItems, setAllItems] = useState<CertificationDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [editingItem, setEditingItem] = useState<CertificationDto | undefined>(
    undefined
  );
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<CertificationDto[]>([]);

  const derivedTypeOptions = useMemo(
    () => getCertificationTypeOptions(allItems),
    [allItems]
  );

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      setAllItems([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getCertifications(
        activeOrganizationId
      );
      setAllItems(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load certifications.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleFormSubmit = async (
    data: CertificationFormData
  ): Promise<boolean> => {
    if (!activeOrganizationId) {
      toast.error("No active organization selected.");
      return false;
    }
    try {
      const payload = {
        ...data,
        obtainment_date: data.obtainment_date?.toISOString(),
      };
      const promise = editingItem?.certification_id
        ? organizationRepository.updateCertification(
            activeOrganizationId,
            editingItem.certification_id,
            payload as UpdateCertificationRequest
          )
        : organizationRepository.createCertification(
            activeOrganizationId,
            payload as CreateCertificationRequest
          );

      await toast.promise(promise, {
        loading: `${editingItem ? "Updating" : "Creating"} certification...`,
        success: `Certification ${
          editingItem ? "updated" : "created"
        } successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const handleOpenFormModal = (item?: CertificationDto) => {
    setEditingItem(item);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: CertificationDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...allItems];
    const idsToDelete = itemsToDelete.map((item) => item.certification_id!);
    setAllItems((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.certification_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteCertification(
          activeOrganizationId,
          item.certification_id!
        )
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} certification(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Certification(s) deleted.";
      },
      error: (err) => {
        setAllItems(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const columns = useMemo<ColumnDef<CertificationDto>[]>(
    () =>
      getCertificationColumns({
        onEditAction: handleOpenFormModal,
        onDeleteAction: (item) => handleDeleteConfirmation([item]),
      }),
    []
  );

  if (!activeOrganizationId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Organization Selected"
        description="Please select an active organization to manage its certifications."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={allItems}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search by name, type..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-certifications-view-mode"
        exportFileName="certifications.csv"
        pageHeader={
          <PageHeader
            title="Certifications"
            description={`Manage awards and certifications for ${activeOrganizationDetails?.long_name}`}
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add New
              </Button>
            }
          />
        }
        filterControls={(table) =>
          derivedTypeOptions.length > 0 ? (
            <DataTableFacetedFilter
              column={table.getColumn("type")}
              title="Type"
              options={derivedTypeOptions}
            />
          ) : null
        }
        renderGridItemAction={(item) => (
          <CertificationCard
            item={item}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Award}
            title="No Certifications Added Yet"
            description="Showcase your organization's qualifications by adding your first certification."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Certification
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Certifications Found"
            description="Your search or filter criteria did not match any certifications."
          />
        }
      />
      <Dialog
        open={isFormModalOpen}
        onOpenChange={(open) => {
          if (!open) setEditingItem(undefined);
          setIsFormModalOpen(open);
        }}
      >
        <DialogContent className="sm:max-w-lg">
          <DialogTitle className="sr-only">
            {editingItem ? "Edit Certification" : "Add New Certification"}
          </DialogTitle>
          <CertificationForm
            mode={editingItem ? "edit" : "create"}
            initialData={editingItem}
            onSubmitAction={handleFormSubmit}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} certification(s)</strong>.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/certifications/certifications-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/certifications/page.tsx

import { Metadata } from "next";
import { CertificationsClientPage } from "./certifications-client";

export const metadata: Metadata = {
  title: "Manage Certifications",
  description: "View, add, and manage your organization's certifications and awards.",
};

export default async function OrgCertificationsPage() {
  return <CertificationsClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/certifications/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/customers/customers-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  CustomerDto,
  CreateCustomerRequest,
  UpdateCustomerRequest,
  AgencyDto,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  Users,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { getCustomerColumns } from "@/components/organization/customers/columns";
import { CustomerCard } from "@/components/organization/customers/customer-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  CustomerForm,
  CustomerFormData,
} from "@/components/organization/customers/customer-form";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

export function CustomersClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } =
    useActiveOrganization();
  const [customers, setCustomers] = useState<CustomerDto[]>([]);
  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<CustomerDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingCustomer, setEditingCustomer] = useState<
    CustomerDto | undefined
  >(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      setCustomers([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      // [CHANGE] Fetch agencies and all customers in parallel
      const [agenciesData, hqCustomersData] = await Promise.all([
        organizationRepository.getAgencies(activeOrganizationId),
        organizationRepository.getOrgCustomers(activeOrganizationId),
      ]);
      setAgencies(agenciesData || []);

      const agencyCustomerPromises = (agenciesData || []).map((agency) =>
        organizationRepository.getAgencyCustomers(
          activeOrganizationId,
          agency.agency_id!
        )
      );
      const allAgencyCustomersNested = await Promise.all(
        agencyCustomerPromises
      );
      const allAgencyCustomers = allAgencyCustomersNested.flat();

      setCustomers([...(hqCustomersData || []), ...allAgencyCustomers]);
    } catch (err: any) {
      setError(err.message || "Could not load customer data.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleOpenFormModal = (customer?: CustomerDto) => {
    setEditingCustomer(customer);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: CustomerDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...customers];
    const idsToDelete = itemsToDelete.map((item) => item.customer_id!);
    setCustomers((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.customer_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) => {
        if (item.agency_id) {
          return organizationRepository.deleteAgencyCustomer(
            activeOrganizationId,
            item.agency_id,
            item.customer_id!
          );
        }
        return organizationRepository.deleteOrgCustomer(
          activeOrganizationId,
          item.customer_id!
        );
      })
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} customer(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Customer(s) deleted.";
      },
      error: (err) => {
        setCustomers(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const handleFormSubmit = async (data: CustomerFormData): Promise<boolean> => {
    if (!activeOrganizationId) {
      toast.error("No active organization.");
      return false;
    }

    const customerPayload: CreateCustomerRequest | UpdateCustomerRequest = {
      first_name: data.first_name,
      last_name: data.last_name,
      short_description: data.short_description,
      long_description: data.long_description,
    };

    try {
      let customerResponse: CustomerDto;
      if (editingCustomer?.customer_id) {
        // --- EDIT LOGIC ---
        const updatePromise = organizationRepository.updateOrgCustomer(
          activeOrganizationId,
          editingCustomer.customer_id,
          customerPayload as UpdateCustomerRequest
        );
        toast.promise(updatePromise, {
          loading: "Updating customer details...",
          success: "Customer updated!",
          error: (err) => err.message,
        });
        customerResponse = await updatePromise;
        // Check if agency assignment changed
        if (data.agency_id !== editingCustomer.agency_id) {
          if (data.agency_id) {
            // Assigning to a new agency
            await toast.promise(
              organizationRepository.affectCustomerToAgency(
                activeOrganizationId,
                data.agency_id,
                { customer_id: editingCustomer.customer_id }
              ),
              {
                loading: `Assigning to agency...`,
                success: "Assigned to new agency!",
                error: (err) => err.message,
              }
            );
          } else {
            // This implies moving back to HQ. The API spec doesn't have an "un-affect" endpoint.
            // Often, affecting to a special "HQ" ID or simply updating the main record would handle this.
            // For now, we assume affecting handles re-assignment and we'll need a way to un-assign.
            toast.info(
              "Moving customer to Headquarters (un-affect logic to be confirmed)."
            );
          }
        }
      } else {
        // --- CREATE LOGIC ---
        customerResponse = await toast.promise(
          organizationRepository.createOrgCustomer(
            activeOrganizationId,
            customerPayload as CreateCustomerRequest
          ),
          {
            loading: "Creating customer...",
            success: "Customer created!",
            error: (err) => err.message,
          }
        );
        // If an agency was selected during creation, affect the new customer to it
        if (data.agency_id && customerResponse.customer_id) {
          await toast.promise(
            organizationRepository.affectCustomerToAgency(
              activeOrganizationId,
              data.agency_id,
              { customer_id: customerResponse.customer_id }
            ),
            {
              loading: `Assigning to agency...`,
              success: "Assigned to agency!",
              error: (err) => err.message,
            }
          );
        }
      }
      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<CustomerDto>[]>(
    () =>
      getCustomerColumns(
        {
          onEditAction: handleOpenFormModal,
          onDeleteAction: (item) => handleDeleteConfirmation([item]),
        },
        agencies
      ),
    [agencies]
  );

  const agencyFilterOptions: DataTableFilterOption[] = useMemo(
    () => [
      { value: "headquarters", label: "Headquarters" },
      ...agencies.map((a) => ({ value: a.agency_id!, label: a.short_name! })),
    ],
    [agencies]
  );

  if (!activeOrganizationId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Organization Selected"
        description="Please select an active organization to manage customers."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={customers}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search customers..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-customers-view-mode"
        exportFileName="organization_customers.csv"
        pageHeader={
          <PageHeader
            title="Customers"
            description={`Manage all customers for ${
              activeOrganizationDetails?.long_name || "your organization"
            }`}
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Customer
              </Button>
            }
          />
        }
        filterControls={(table) => (
          <DataTableFacetedFilter
            column={table.getColumn("agency_id")}
            title="Agency"
            options={agencyFilterOptions}
          />
        )}
        renderGridItemAction={(customer) => (
          <CustomerCard
            customer={customer}
            agencies={agencies}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Users}
            title="No Customers Yet"
            description="Add your first customer to start managing your client relationships."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Customer
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Customers Found"
            description="Your search did not match any customers."
          />
        }
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">
            {editingCustomer ? "Edit Customer" : "Add New Customer"}
          </DialogTitle>
          <CustomerForm
            mode={editingCustomer ? "edit" : "create"}
            initialData={editingCustomer}
            onSubmitAction={handleFormSubmit}
            agencies={agencies}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} customer(s)</strong>.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/customers/customers-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/customers/page.tsx

import { Metadata } from "next";
import { CustomersClientPage } from "./customers-client";

export const metadata: Metadata = {
  title: "Manage Customers",
  description: "View, add, and manage your organization's customers.",
};

export default async function OrgCustomersPage() {
  return <CustomersClientPage />;
}// END OF FILE: app/(dashboard)/business-actor/org/customers/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/employees/create/page.tsx

"use client";

import { EmployeeForm } from "@/components/organization/employees/employee-form";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { useRouter } from "next/navigation";
import { organizationRepository } from "@/lib/data-repo/organization";
import { EmployeeFormData } from "@/components/organization/employees/employee-form";
import { toast } from "sonner";

export default function CreateEmployeePage() {
  const router = useRouter();
  const { activeOrganizationId, agenciesForCurrentOrg } = useActiveOrganization();

  const handleCreate = async (data: EmployeeFormData): Promise<boolean> => {
    if (!activeOrganizationId) { toast.error("No active organization selected."); return false; }
    try {
      await organizationRepository.createOrgEmployee(activeOrganizationId, data);
      toast.success("Employee created successfully!");
      router.push("/business-actor/org/employees");
      router.refresh();
      return true;
    } catch (error: any) {
      toast.error(error.message || "Failed to create employee.");
      return false;
    }
  };

  return (
    <div className="mx-auto">
      <EmployeeForm
      
        agencies={agenciesForCurrentOrg}
        mode="create"
  
        onSubmitAction={handleCreate}
      />
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/employees/create/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/employees/[employeeId]/edit-employee-client.tsx

"use client";

import React, { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { EmployeeDto } from "@/types/organization";
import { EmployeeForm, EmployeeFormData } from "@/components/organization/employees/employee-form";
import { toast } from "sonner";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { User, Loader2 } from "lucide-react";

interface EditEmployeeClientPageProps {
  employeeId: string;
}

export function EditEmployeeClientPage({ employeeId }: EditEmployeeClientPageProps) {
  const router = useRouter();
  const { activeOrganizationId, agenciesForCurrentOrg } = useActiveOrganization();
  
  const [initialData, setInitialData] = useState<EmployeeDto | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  const fetchData = useCallback(async () => {
    if (!activeOrganizationId || !employeeId) return;
    setIsLoading(true);
    try {
      const data = await organizationRepository.getOrgEmployeeById(activeOrganizationId, employeeId);
      setInitialData(data);
    } catch (error) {
      toast.error("Failed to fetch employee details.");
      setInitialData(null);
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId, employeeId]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const handleUpdate = async (data: EmployeeFormData): Promise<boolean> => {
    if (!activeOrganizationId || !initialData?.employee_id) {
      toast.error("Cannot update employee: Missing context or ID.");
      return false;
    }
    try {
      await organizationRepository.updateOrgEmployee(activeOrganizationId, initialData.employee_id, data);
      toast.success("Employee updated successfully!");
      router.push("/business-actor/org/employees");
      router.refresh();
      return true;
    } catch (error: any) {
      toast.error(error.message || "Failed to update employee.");
      return false;
    }
  };

  if (isLoading) {
    return <div className="flex justify-center items-center min-h-[400px]"><Loader2 className="h-8 w-8 animate-spin" /></div>;
  }

  if (!initialData) {
    return <FeedbackCard icon={User} title="Employee Not Found" description="The employee you are trying to edit does not exist." />;
  }

  return (
    <div className="mx-auto">
      <EmployeeForm
        // organizationId={activeOrganizationId!}
        agencies={agenciesForCurrentOrg}
        mode="edit"
        initialData={initialData}
        onSubmitAction={handleUpdate}
      />
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/org/employees/[employeeId]/edit-employee-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/employees/[employeeId]/page.tsx

import { Metadata } from "next";
import { EditEmployeeClientPage } from "./edit-employee-client";

// Metadata can be generic here as we don't have the employee name on the server
export const metadata: Metadata = {
  title: "Edit Employee",
};

type Props = { params: { employeeId: string } };

export default async function EditOrgEmployeePage({ params }: Props) {
  // Simply pass the employeeId to the client component
  return <EditEmployeeClientPage employeeId={params.employeeId} />;
}// END OF FILE: app/(dashboard)/business-actor/org/employees/[employeeId]/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/employees/employees-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  EmployeeDto,
  AgencyDto,
  EmployeeRoleValues,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  Users,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { getEmployeeColumns } from "@/components/organization/employees/columns";
import { EmployeeCard } from "@/components/organization/employees/employee-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

export function OrgEmployeesClientPage() {
  const router = useRouter();
  const { activeOrganizationId, activeOrganizationDetails } =
    useActiveOrganization();
  const [employees, setEmployees] = useState<EmployeeDto[]>([]);
  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<EmployeeDto[]>([]);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      setEmployees([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const [employeesData, agenciesData] = await Promise.all([
        organizationRepository.getOrgEmployees(activeOrganizationId),
        organizationRepository.getAgencies(activeOrganizationId, true),
      ]);
      setEmployees(employeesData || []);
      setAgencies(agenciesData || []);
    } catch (err: any) {
      setError(err.message || "Could not load employee data.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleEditAction = (employeeId: string) =>
    router.push(`/business-actor/org/employees/${employeeId}`);
  const handleDeleteConfirmation = (items: EmployeeDto[]) => {
    if (items.length > 0) {
      setItemsToDelete(items);
      setIsDeleteDialogOpen(true);
    }
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...employees];
    const idsToDelete = itemsToDelete.map((item) => item.employee_id!);
    setEmployees((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.employee_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteOrgEmployee(
          activeOrganizationId,
          item.employee_id!
        )
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} employee(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Employee(s) deleted.";
      },
      error: (err) => {
        setEmployees(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const roleOptions: DataTableFilterOption[] = useMemo(
    () =>
      EmployeeRoleValues.map((role) => ({
        label: role.replace(/_/g, " "),
        value: role,
      })),
    []
  );
  const departmentOptions: DataTableFilterOption[] = useMemo(() => {
    const departments = new Set(
      employees.map((item) => item.department).filter(Boolean)
    );
    return Array.from(departments).map((dept) => ({
      label: dept!,
      value: dept!,
    }));
  }, [employees]);
  const agencyOptions: DataTableFilterOption[] = useMemo(() => {
    const options = agencies.map((agency) => ({
      label: agency.long_name!,
      value: agency.agency_id!,
    }));
    options.unshift({ label: "Headquarters", value: "headquarters" });
    return options;
  }, [agencies]);

  const columns = useMemo<ColumnDef<EmployeeDto>[]>(
    () =>
      getEmployeeColumns(
        {
          onEditAction: handleEditAction,
          onDeleteAction: (item) => handleDeleteConfirmation([item]),
        },
        agencies
      ),
    [agencies,]
  );

  if (!activeOrganizationId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Organization Selected"
        description="Please select an active organization to manage its employees."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={employees}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search employees..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-employees-view-mode"
        exportFileName="organization_employees.csv"
        pageHeader={
          <PageHeader
            title="Employee Roster"
            description={`Manage all employees for ${activeOrganizationDetails?.long_name}`}
            action={
              <Button
                onClick={() =>
                  router.push("/business-actor/org/employees/create")
                }
              >
                <PlusCircle className="mr-2 h-4 w-4" /> Add Employee
              </Button>
            }
          />
        }
        filterControls={(table) => (
          <>
            <DataTableFacetedFilter
              column={table.getColumn("employee_role")}
              title="Role"
              options={roleOptions}
            />
            <DataTableFacetedFilter
              column={table.getColumn("department")}
              title="Department"
              options={departmentOptions}
            />
            <DataTableFacetedFilter
              column={table.getColumn("agency_id")}
              title="Agency"
              options={agencyOptions}
            />
          </>
        )}
        renderGridItemAction={(employee) => {
          const agency = agencies.find(
            (a) => a.agency_id === employee.agency_id
          );
          return (
            <EmployeeCard
              employee={employee}
              agency={agency}
              onEditAction={handleEditAction}
              onDeleteAction={(item) => handleDeleteConfirmation([item])}
            />
          );
        }}
        emptyState={
          <FeedbackCard
            icon={Users}
            title="No Employees Yet"
            description="Add your first employee to build your team."
            actionButton={
              <Button
                onClick={() =>
                  router.push("/business-actor/org/employees/create")
                }
              >
                <PlusCircle className="mr-2 h-4 w-4" /> Add Employee
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Employees Found"
            description="Your search did not match any employees."
          />
        }
      />
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} employee(s)</strong>.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/employees/employees-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/employees/page.tsx

import { Metadata } from "next";
import { OrgEmployeesClientPage } from "./employees-client";

export const metadata: Metadata = {
  title: "Manage Employees",
  description: "View, add, and manage all employees across your organization.",
};

export default async function OrgEmployeesPage() {
  return <OrgEmployeesClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/employees/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/layout.tsx

"use client";

import React from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Skeleton } from "@/components/ui/skeleton";

export default function OrganizationLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { activeOrganizationId, isLoadingOrgDetails } = useActiveOrganization();

  if (isLoadingOrgDetails) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div className="space-y-2">
            <Skeleton className="h-8 w-64" />
            <Skeleton className="h-4 w-80" />
          </div>
          <Skeleton className="h-10 w-32" />
        </div>
        <Skeleton className="h-[400px] w-full" />
      </div>
    );
  }

  // If loading is finished but there's still no active org, show an empty state (or let child pages handle it).
  if (!activeOrganizationId) {
    // This can be a dedicated "Please select an organization" component.
    // For now, we let the child pages render their specific empty states.
    return <div className="w-full">{children}</div>;
  }

  return <div className="w-full">{children}</div>;
}
// END OF FILE: app/(dashboard)/business-actor/org/layout.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/practical-info/page.tsx

import { Metadata } from "next";
import { PracticalInfoClientPage } from "./practical-info-client";

export const metadata: Metadata = {
  title: "Manage Practical Information",
  description: "View, add, and manage operational details for your organization.",
};

export default async function OrgPracticalInfoPage() {
  return <PracticalInfoClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/practical-info/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/practical-info/practical-info-client.tsx

"use client";

import React, { useState, useEffect, useCallback, useMemo } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { PracticalInformationDto, CreatePracticalInformationRequest, UpdatePracticalInformationRequest } from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { PracticalInfoForm, PracticalInfoFormData } from "@/components/organization/practical-info/practical-info-form";
import { Button } from "@/components/ui/button";
import { PlusCircle, Info, Search as SearchIcon, Building } from "lucide-react";
import { toast } from "sonner";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { ColumnDef } from "@tanstack/react-table";
import { getPracticalInfoColumns } from "@/components/organization/practical-info/columns";
import { PracticalInfoCard } from "@/components/organization/practical-info/practical-info-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

const getPracticalInfoTypeOptions = (items: PracticalInformationDto[]): DataTableFilterOption[] => {
  const allTypes = items.map((item) => item.type).filter((type): type is string => typeof type === 'string');
  return [...new Set(allTypes)].map((type) => ({ label: type, value: type })).sort((a, b) => a.label.localeCompare(b.label));
};

export function PracticalInfoClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } = useActiveOrganization();
  const [allItems, setAllItems] = useState<PracticalInformationDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [editingItem, setEditingItem] = useState<PracticalInformationDto | undefined>(undefined);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<PracticalInformationDto[]>([]);

  const derivedTypeOptions = useMemo(() => getPracticalInfoTypeOptions(allItems), [allItems]);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) { setIsLoading(false); setAllItems([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getPracticalInformation(activeOrganizationId);
      setAllItems(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load practical information.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleFormSubmit = async (data: PracticalInfoFormData): Promise<boolean> => {
    if (!activeOrganizationId) { toast.error("No active organization selected."); return false; }
    try {
      const promise = editingItem?.information_id
        ? organizationRepository.updatePracticalInformation(activeOrganizationId, editingItem.information_id, data as UpdatePracticalInformationRequest)
        : organizationRepository.createPracticalInformation(activeOrganizationId, data as CreatePracticalInformationRequest);
      
      await toast.promise(promise, {
        loading: `${editingItem ? 'Updating' : 'Adding'} information...`,
        success: `Information ${editingItem ? 'updated' : 'added'} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const handleOpenFormModal = (item?: PracticalInformationDto) => {
    setEditingItem(item);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: PracticalInformationDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...allItems];
    const idsToDelete = itemsToDelete.map(item => item.information_id!);
    setAllItems(prev => prev.filter(item => !idsToDelete.includes(item.information_id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map((item) => organizationRepository.deletePracticalInformation(activeOrganizationId, item.information_id!)));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} item(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Item(s) deleted."; },
      error: (err) => { setAllItems(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const columns = useMemo<ColumnDef<PracticalInformationDto>[]>(() => getPracticalInfoColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item]) }), []);

  if (!activeOrganizationId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Organization Selected" description="Please select an active organization to manage its practical info." />;
  }

  return (
    <>
      <ResourceDataTable
        data={allItems}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search by type, value..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-practical-info-view-mode"
        exportFileName="practical_info.csv"
        pageHeader={<PageHeader title="Practical Information" description={`Manage operational details for ${activeOrganizationDetails?.long_name}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add New</Button>} />}
        filterControls={(table) => derivedTypeOptions.length > 0 ? <DataTableFacetedFilter column={table.getColumn("type")} title="Type" options={derivedTypeOptions} /> : null}
        renderGridItemAction={(item) => <PracticalInfoCard item={item} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={Info} title="No Practical Information Added" description="Add useful details for your team or customers, like opening hours or contact info." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Information</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Information Found" description="Your search or filter criteria did not match any items." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={(open) => { if (!open) setEditingItem(undefined); setIsFormModalOpen(open); }}>
        <DialogContent className="sm:max-w-lg">
          <DialogTitle className="sr-only">{editingItem ? "Edit Information" : "Add New Information"}</DialogTitle>
          <PracticalInfoForm mode={editingItem ? "edit" : "create"} initialData={editingItem} onSubmitAction={handleFormSubmit} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} item(s)</strong>.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/practical-info/practical-info-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/products/page.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Package } from "lucide-react";

export default function OrganizationProductsPage() {
  return (
    <div className="space-y-6">
        <Card>
            <CardHeader>
                <CardTitle>Product Management</CardTitle>
            </CardHeader>
            <CardContent>
                <Alert>
                    <Package className="h-4 w-4" />
                    <AlertTitle>Under Construction</AlertTitle>
                    <AlertDescription>
                        This page will be used to create, view, and manage all products (resources) owned by the organization. Coming soon.
                    </AlertDescription>
                </Alert>
            </CardContent>
        </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/org/products/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/profile/page.tsx

import { Metadata, ResolvingMetadata } from "next";
import { OrganizationProfileClient } from "./profile-client";

type Props = {
  searchParams: { [key: string]: string | string[] | undefined };
};

// This runs on the server and generates metadata
export async function generateMetadata(
  { searchParams }: Props,
  parent: ResolvingMetadata
): Promise<Metadata> {
  const previousImages = (await parent).openGraph?.images || [];

  return {
    title: "Organization Settings",
    description: "Manage your organization's profile, contacts, and addresses.",
    openGraph: {
      title: "Manage Your Organization",
      images: [...previousImages],
    },
  };
}

// This is the main page component, a Server Component by default.
// It can perform data fetching if needed, but in this case, the client component handles it.
export default function OrganizationProfilePage({ searchParams }: Props) {
  const tab =
    typeof searchParams.tab === "string" ? searchParams.tab : "edit_profile";

  // We render the client component and pass down any server-side props it might need.
  // Here, we pass the active tab from the URL search params.
  return <OrganizationProfileClient activeTab={tab} />;
}
// END OF FILE: app/(dashboard)/business-actor/org/profile/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/profile/profile-client.tsx

"use client";

import React, { useEffect, useState, useCallback } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { useSession } from "next-auth/react";
import { organizationRepository } from "@/lib/data-repo/organization";
import { OrganizationForm } from "@/components/organization/organization-form";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { ContactList } from "@/components/organization/contact-list";
import { AddressList } from "@/components/organization/address-list";
import { Skeleton } from "@/components/ui/skeleton";
import { AddressDto, OrganizationDto } from "@/types/organization";
import { ProfileNav } from "@/components/organization/profile-nav";
import { toast } from "sonner";

interface OrganizationProfileClientProps {
  activeTab: string;
}

export function OrganizationProfileClient({
  activeTab,
}: OrganizationProfileClientProps) {
  const {
    activeOrganizationId,
    activeOrganizationDetails,
    isLoadingOrgDetails,
    fetchUserOrganizationsList,
  } = useActiveOrganization();
  const { data: session } = useSession();

  const [defaultAddress, setDefaultAddress] = useState<AddressDto | null>(null);
  const [isLoadingAddress, setIsLoadingAddress] = useState(true);

  const fetchDefaultAddress = useCallback(async () => {
    if (activeOrganizationId) {
      setIsLoadingAddress(true);
      try {
        const addresses = await organizationRepository.getAddresses(
          "ORGANIZATION",
          activeOrganizationId
        );
        const defaultAddr =
          addresses.find((addr) => addr.is_default) ||
          (addresses.length > 0 ? addresses[0] : null);
        setDefaultAddress(defaultAddr);
      } catch (error) {
        toast.error("Could not load organization's default address.");
      } finally {
        setIsLoadingAddress(false);
      }
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    fetchDefaultAddress();
  }, [fetchDefaultAddress]);

  const handleUpdateSuccess = async (updatedOrg: OrganizationDto) => {
    toast.success(`Organization "${updatedOrg.short_name}" updated.`);
    if (session?.user.businessActorId) {
      await fetchUserOrganizationsList();
    }
  };

  const renderContent = () => {
    if (!activeOrganizationDetails) return null;

    switch (activeTab) {
      case "contacts":
        return (
          <Card>
            <CardHeader>
              <CardTitle>Manage Contacts</CardTitle>
              <CardDescription>
                Add, edit, or remove contact persons for your organization.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ContactList
                organizationId={activeOrganizationDetails.organization_id!}
                contactableType="ORGANIZATION"
              />
            </CardContent>
          </Card>
        );
      case "addresses":
        return (
          <Card>
            <CardHeader>
              <CardTitle>Manage Addresses</CardTitle>
              <CardDescription>
                Manage the physical locations and addresses for your
                organization.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <AddressList
                organizationId={activeOrganizationDetails.organization_id!}
                addressableType="ORGANIZATION"
              />
            </CardContent>
          </Card>
        );
      case "edit_profile":
      default:
        return (
          <OrganizationForm
            mode="edit"
            initialData={activeOrganizationDetails}
            defaultAddress={defaultAddress}
            onSuccessAction={handleUpdateSuccess}
          />
        );
    }
  };

  if (isLoadingOrgDetails || isLoadingAddress) {
    return (
      <div className="space-y-8">
        <div>
          <Skeleton className="h-8 w-1/3 mb-2" />
          <Skeleton className="h-4 w-1/2" />
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-6 gap-8 items-start">
          <main className="lg:col-span-5 order-2 lg:order-1">
            <Skeleton className="h-[600px] w-full" />
          </main>
          <aside className="lg:col-span-1 sticky top-20 order-1 lg:order-2 space-y-1">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
          </aside>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-2xl font-bold tracking-tight">
          Organization Settings
        </h1>
        <p className="text-muted-foreground">
          Manage your organization's profile, addresses, and contacts.
        </p>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-6 gap-8 items-start">
        <main className="lg:col-span-5 order-2 lg:order-1">
          {renderContent()}
        </main>
        <aside className="lg:col-span-1 sticky top-20 order-1 lg:order-2">
          <ProfileNav activeTab={activeTab} />
        </aside>
      </div>
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/profile/profile-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/proposed-activities/page.tsx

import { Metadata } from "next";
import { OrgProposedActivitiesClientPage } from "./proposed-activities-client";

export const metadata: Metadata = {
  title: "Manage Proposed Activities",
  description: "View, add, and manage all proposed activities for your organization.",
};

export default async function OrgProposedActivitiesPage() {
  return <OrgProposedActivitiesClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/proposed-activities/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/proposed-activities/proposed-activities-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { ProposedActivityDto, CreateProposedActivityRequest, UpdateProposedActivityRequest } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Activity, Search as SearchIcon, Building } from "lucide-react";
import { getProposedActivityColumns } from "@/components/organization/proposed-activities/columns";
import { ProposedActivityCard } from "@/components/organization/proposed-activities/proposed-activity-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { ProposedActivityForm, ProposedActivityFormData } from "@/components/organization/proposed-activities/proposed-activity-form";

export function OrgProposedActivitiesClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } = useActiveOrganization();
  const [activities, setActivities] = useState<ProposedActivityDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<ProposedActivityDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<ProposedActivityDto | undefined>(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) { setIsLoading(false); setActivities([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getProposedActivities(activeOrganizationId, { organizationId: activeOrganizationId });
      setActivities(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load proposed activities.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleOpenFormModal = (item?: ProposedActivityDto) => {
    setEditingItem(item);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: ProposedActivityDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...activities];
    const idsToDelete = itemsToDelete.map(item => item.activity_id!);
    setActivities(prev => prev.filter(item => !idsToDelete.includes(item.activity_id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map(item => organizationRepository.deleteProposedActivity(activeOrganizationId, item.activity_id!)));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} item(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Item(s) deleted."; },
      error: (err) => { setActivities(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const handleFormSubmit = async (data: ProposedActivityFormData): Promise<boolean> => {
    if (!activeOrganizationId) { toast.error("No active organization."); return false; }
    try {
      const promise = editingItem?.activity_id
        ? organizationRepository.updateProposedActivity(activeOrganizationId, editingItem.activity_id, data as UpdateProposedActivityRequest)
        : organizationRepository.createProposedActivity(activeOrganizationId, data as CreateProposedActivityRequest);
      
      await toast.promise(promise, {
        loading: `${editingItem ? 'Updating' : 'Creating'} activity...`,
        success: `Activity ${editingItem ? 'updated' : 'created'} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<ProposedActivityDto>[]>(() => getProposedActivityColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item]) }), []);

  if (!activeOrganizationId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Organization Selected" description="Please select an active organization to manage its proposed activities." />;
  }

  return (
    <>
      <ResourceDataTable
        data={activities}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search activities..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-proposed-activities-view-mode"
        exportFileName="proposed_activities.csv"
        pageHeader={<PageHeader title="Proposed Activities" description={`Manage the catalog of services for ${activeOrganizationDetails?.long_name}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Propose Activity</Button>} />}
        renderGridItemAction={(item) => <ProposedActivityCard activity={item} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={Activity} title="No Activities Proposed Yet" description="Define the services and activities your organization offers to customers." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Propose Activity</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Activities Found" description="Your search did not match any proposed activities." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">{editingItem ? "Edit Activity" : "Propose New Activity"}</DialogTitle>
          <ProposedActivityForm mode={editingItem ? "edit" : "create"} initialData={editingItem} onSubmitAction={handleFormSubmit} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} item(s)</strong>.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/proposed-activities/proposed-activities-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/prospects/page.tsx

import { Metadata } from "next";
import { OrgProspectsClientPage } from "./prospects-client";

export const metadata: Metadata = {
  title: "Manage Prospects",
  description: "View, add, and manage all prospects for your organization.",
};

export default async function OrgProspectsPage() {
  return <OrgProspectsClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/prospects/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/prospects/prospects-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { ProspectDto, CreateProspectRequest, UpdateProspectRequest, AgencyDto } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Lightbulb, Search as SearchIcon, Building } from "lucide-react";
import { getProspectColumns } from "@/components/organization/prospects/columns";
import { ProspectCard } from "@/components/organization/prospects/prospect-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { ProspectForm, ProspectFormData } from "@/components/organization/prospects/prospect-form";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

export function OrgProspectsClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } = useActiveOrganization();
  const [prospects, setProspects] = useState<ProspectDto[]>([]);
  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<ProspectDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingProspect, setEditingProspect] = useState<ProspectDto | undefined>(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) { setIsLoading(false); setProspects([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const [agenciesData, hqData] = await Promise.all([
        organizationRepository.getAgencies(activeOrganizationId),
        organizationRepository.getOrgProspects(activeOrganizationId)
      ]);
      setAgencies(agenciesData || []);
      const agencyPromises = (agenciesData || []).map(agency => organizationRepository.getAgencyProspects(activeOrganizationId, agency.agency_id!));
      const agencyResults = await Promise.all(agencyPromises);
      setProspects([...(hqData || []), ...agencyResults.flat()]);
    } catch (err: any) {
      setError(err.message || "Could not load prospect data.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleOpenFormModal = (prospect?: ProspectDto) => {
    setEditingProspect(prospect);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: ProspectDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...prospects];
    const idsToDelete = itemsToDelete.map(item => item.prospect_id!);
    setProspects(prev => prev.filter(item => !idsToDelete.includes(item.prospect_id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map(item => item.agency_id
      ? organizationRepository.deleteAgencyProspect(activeOrganizationId, item.agency_id, item.prospect_id!)
      : organizationRepository.deleteOrgProspect(activeOrganizationId, item.prospect_id!)
    ));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} prospect(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Prospect(s) deleted."; },
      error: (err) => { setProspects(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const handleFormSubmit = async (data: ProspectFormData): Promise<boolean> => {
    if (!activeOrganizationId) { toast.error("No active organization."); return false; }
    const payload: CreateProspectRequest | UpdateProspectRequest = { ...data };
    try {
      let response: ProspectDto;
      if (editingProspect?.prospect_id) {
        response = await toast.promise(organizationRepository.updateOrgProspect(activeOrganizationId, editingProspect.prospect_id, payload as UpdateProspectRequest), { loading: 'Updating prospect...', success: 'Prospect updated!', error: (err) => err.message });
      } else {
        response = await toast.promise(organizationRepository.createOrgProspect(activeOrganizationId, payload as CreateProspectRequest), { loading: 'Creating prospect...', success: 'Prospect created!', error: (err) => err.message });
      }
      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<ProspectDto>[]>(() => getProspectColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item]) }, agencies), [agencies]);
  const agencyFilterOptions: DataTableFilterOption[] = useMemo(() => [{ value: "headquarters", label: "Headquarters" }, ...agencies.map(a => ({ value: a.agency_id!, label: a.short_name! }))], [agencies]);

  if (!activeOrganizationId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Organization Selected" description="Please select an active organization to manage prospects." />;
  }

  return (
    <>
      <ResourceDataTable
        data={prospects}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search prospects..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-prospects-view-mode"
        exportFileName="organization_prospects.csv"
        pageHeader={<PageHeader title="Prospects" description={`Manage all prospects for ${activeOrganizationDetails?.long_name}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Prospect</Button>} />}
        filterControls={(table) => (<DataTableFacetedFilter column={table.getColumn("agency_id")} title="Agency" options={agencyFilterOptions} />)}
        renderGridItemAction={(item) => <ProspectCard prospect={item} agencies={agencies} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={Lightbulb} title="No Prospects Yet" description="Add your first prospect to track potential leads." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Prospect</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Prospects Found" description="Your search did not match any prospects." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">{editingProspect ? "Edit Prospect" : "Add New Prospect"}</DialogTitle>
          <ProspectForm mode={editingProspect ? "edit" : "create"} initialData={editingProspect} onSubmitAction={handleFormSubmit} agencies={agencies} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} prospect(s)</strong>.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/prospects/prospects-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/sales-people/page.tsx

import { Metadata } from "next";
import { OrgSalesPeopleClientPage } from "./sales-people-client";

export const metadata: Metadata = {
  title: "Manage Sales People",
  description: "View, add, and manage all sales people in your organization.",
};

export default async function OrgSalesPeoplePage() {
  return <OrgSalesPeopleClientPage />;
}// END OF FILE: app/(dashboard)/business-actor/org/sales-people/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/sales-people/sales-people-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  SalesPersonDto,
  CreateSalesPersonRequest,
  UpdateSalesPersonRequest,
  AgencyDto,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  PlusCircle,
  UserCheck,
  Search as SearchIcon,
  Building,
} from "lucide-react";
import { getSalesPersonColumns } from "@/components/organization/sales-people/columns";
import { SalesPersonCard } from "@/components/organization/sales-people/sales-person-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  SalesPersonForm,
  SalesPersonFormData,
} from "@/components/organization/sales-people/sales-person-form";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

export function OrgSalesPeopleClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } =
    useActiveOrganization();
  const [salesPeople, setSalesPeople] = useState<SalesPersonDto[]>([]);
  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<SalesPersonDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingSalesPerson, setEditingSalesPerson] = useState<
    SalesPersonDto | undefined
  >(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) {
      setIsLoading(false);
      setSalesPeople([]);
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const [agenciesData, hqData] = await Promise.all([
        organizationRepository.getAgencies(activeOrganizationId),
        organizationRepository.getOrgSalesPersons(activeOrganizationId),
      ]);
      setAgencies(agenciesData || []);
      const agencyPromises = (agenciesData || []).map((agency) =>
        organizationRepository.getAgencySalesPersons(
          activeOrganizationId,
          agency.agency_id!
        )
      );
      const agencyResults = await Promise.all(agencyPromises);
      setSalesPeople([...(hqData || []), ...agencyResults.flat()]);
    } catch (err: any) {
      setError(err.message || "Could not load sales people.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleOpenFormModal = (salesPerson?: SalesPersonDto) => {
    setEditingSalesPerson(salesPerson);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: SalesPersonDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...salesPeople];
    const idsToDelete = itemsToDelete.map((item) => item.sales_person_id!);
    setSalesPeople((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.sales_person_id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        item.agency_id
          ? organizationRepository.deleteAgencySalesPerson(
              activeOrganizationId,
              item.agency_id,
              item.sales_person_id!
            )
          : organizationRepository.deleteOrgSalesPerson(
              activeOrganizationId,
              item.sales_person_id!
            )
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} sales person(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Sales person(s) deleted.";
      },
      error: (err) => {
        setSalesPeople(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const handleFormSubmit = async (
    data: SalesPersonFormData
  ): Promise<boolean> => {
    if (!activeOrganizationId) {
      toast.error("No active organization.");
      return false;
    }
    const payload: CreateSalesPersonRequest | UpdateSalesPersonRequest = {
      ...data,
    };
    try {
      let response: SalesPersonDto;
      if (editingSalesPerson?.sales_person_id) {
        response = await toast.promise(
          organizationRepository.updateOrgSalesPerson(
            activeOrganizationId,
            editingSalesPerson.sales_person_id,
            payload as UpdateSalesPersonRequest
          ),
          {
            loading: "Updating...",
            success: "Saved!",
            error: (err) => err.message,
          }
        );
      } else {
        response = await toast.promise(
          organizationRepository.createOrgSalesPerson(
            activeOrganizationId,
            payload as CreateSalesPersonRequest
          ),
          {
            loading: "Creating...",
            success: "Created!",
            error: (err) => err.message,
          }
        );
      }
      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<SalesPersonDto>[]>(
    () =>
      getSalesPersonColumns(
        {
          onEditAction: handleOpenFormModal,
          onDeleteAction: (item) => handleDeleteConfirmation([item]),
        },
        agencies
      ),
    [agencies]
  );
  const agencyFilterOptions: DataTableFilterOption[] = useMemo(
    () => [
      { value: "headquarters", label: "Headquarters" },
      ...agencies.map((a) => ({ value: a.agency_id!, label: a.short_name! })),
    ],
    [agencies]
  );

  if (!activeOrganizationId && !isLoading) {
    return (
      <FeedbackCard
        icon={Building}
        title="No Organization Selected"
        description="Please select an active organization to manage sales people."
      />
    );
  }

  return (
    <>
      <ResourceDataTable
        data={salesPeople}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search sales people..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-sales-people-view-mode"
        exportFileName="organization_sales_people.csv"
        pageHeader={
          <PageHeader
            title="Sales People"
            description={`Manage all sales people for ${activeOrganizationDetails?.long_name}`}
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Sales Person
              </Button>
            }
          />
        }
        filterControls={(table) => (
          <DataTableFacetedFilter
            column={table.getColumn("agency_id")}
            title="Agency"
            options={agencyFilterOptions}
          />
        )}
        renderGridItemAction={(item) => (
          <SalesPersonCard
            salesPerson={item}
            agencies={agencies}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={UserCheck}
            title="No Sales People Yet"
            description="Add your first sales person to build your sales team."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Sales Person
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Sales People Found"
            description="Your search did not match any sales people."
          />
        }
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">
            {editingSalesPerson ? "Edit Sales Person" : "Add New Sales Person"}
          </DialogTitle>
          <SalesPersonForm
            mode={editingSalesPerson ? "edit" : "create"}
            initialData={editingSalesPerson}
            onSubmitAction={handleFormSubmit}
            agencies={agencies}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} sales person(s)</strong>.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/sales-people/sales-people-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/services/page.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Combine } from "lucide-react";

export default function OrganizationServicesPage() {
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Service Management</CardTitle>
        </CardHeader>
        <CardContent>
          <Alert>
            <Combine className="h-4 w-4" />
            <AlertTitle>Under Construction</AlertTitle>
            <AlertDescription>
              This page will be used to define and manage the services offered
              by the organization, often utilizing its available products and
              resources. Coming soon.
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/services/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/suppliers/page.tsx

import { Metadata } from "next";
import { OrgSuppliersClientPage } from "./suppliers-client";

export const metadata: Metadata = {
  title: "Manage Suppliers",
  description: "View, add, and manage all of your organization's suppliers.",
};

export default async function OrgSuppliersPage() {
  return <OrgSuppliersClientPage />;
}// END OF FILE: app/(dashboard)/business-actor/org/suppliers/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/suppliers/suppliers-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { ProviderDto, CreateProviderRequest, UpdateProviderRequest, AgencyDto } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Truck, Search as SearchIcon, Building } from "lucide-react";
import { getSupplierColumns } from "@/components/organization/suppliers/columns";
import { SupplierCard } from "@/components/organization/suppliers/supplier-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { SupplierForm, SupplierFormData } from "@/components/organization/suppliers/supplier-form";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

export function OrgSuppliersClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } = useActiveOrganization();
  const [suppliers, setSuppliers] = useState<ProviderDto[]>([]);
  const [agencies, setAgencies] = useState<AgencyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<ProviderDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingSupplier, setEditingSupplier] = useState<ProviderDto | undefined>(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) { setIsLoading(false); setSuppliers([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const [agenciesData, hqSuppliersData] = await Promise.all([
        organizationRepository.getAgencies(activeOrganizationId),
        organizationRepository.getOrgSuppliers(activeOrganizationId)
      ]);
      setAgencies(agenciesData || []);
      const agencySupplierPromises = (agenciesData || []).map(agency => organizationRepository.getAgencySuppliers(activeOrganizationId, agency.agency_id!));
      const allAgencySuppliersNested = await Promise.all(agencySupplierPromises);
      setSuppliers([...(hqSuppliersData || []), ...allAgencySuppliersNested.flat()]);
    } catch (err: any) {
      setError(err.message || "Could not load supplier data.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleOpenFormModal = (supplier?: ProviderDto) => {
    setEditingSupplier(supplier);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: ProviderDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...suppliers];
    const idsToDelete = itemsToDelete.map(item => item.provider_id!);
    setSuppliers(prev => prev.filter(item => !idsToDelete.includes(item.provider_id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map(item => item.agency_id
      ? organizationRepository.deleteAgencySupplier(activeOrganizationId, item.agency_id, item.provider_id!)
      : organizationRepository.deleteOrgSupplier(activeOrganizationId, item.provider_id!)
    ));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} supplier(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Supplier(s) deleted."; },
      error: (err) => { setSuppliers(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const handleFormSubmit = async (data: SupplierFormData): Promise<boolean> => {
    if (!activeOrganizationId) { toast.error("No active organization."); return false; }
    const payload: CreateProviderRequest | UpdateProviderRequest = { ...data };
    try {
      let response: ProviderDto;
      if (editingSupplier?.provider_id) {
        response = await toast.promise(organizationRepository.updateOrgSupplier(activeOrganizationId, editingSupplier.provider_id, payload as UpdateProviderRequest), { loading: 'Updating supplier...', success: 'Supplier updated!', error: (err) => err.message });
        if (data.agency_id !== editingSupplier.agency_id && data.agency_id) {
          await toast.promise(organizationRepository.affectSupplierToAgency(activeOrganizationId, data.agency_id, { provider_id: editingSupplier.provider_id }), { loading: 'Assigning to agency...', success: 'Assigned to new agency!', error: (err) => err.message });
        }
      } else {
        response = await toast.promise(organizationRepository.createOrgSupplier(activeOrganizationId, payload as CreateProviderRequest), { loading: 'Creating supplier...', success: 'Supplier created!', error: (err) => err.message });
        if (data.agency_id && response.provider_id) {
          await toast.promise(organizationRepository.affectSupplierToAgency(activeOrganizationId, data.agency_id, { provider_id: response.provider_id }), { loading: 'Assigning to agency...', success: 'Assigned to agency!', error: (err) => err.message });
        }
      }
      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<ProviderDto>[]>(() => getSupplierColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item]) }, agencies), [agencies]);
  const agencyFilterOptions: DataTableFilterOption[] = useMemo(() => [{ value: "headquarters", label: "Headquarters" }, ...agencies.map(a => ({ value: a.agency_id!, label: a.short_name! }))], [agencies]);

  if (!activeOrganizationId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Organization Selected" description="Please select an active organization to manage suppliers." />;
  }

  return (
    <>
      <ResourceDataTable
        data={suppliers}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search suppliers..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-suppliers-view-mode"
        exportFileName="organization_suppliers.csv"
        pageHeader={<PageHeader title="Suppliers" description={`Manage all suppliers for ${activeOrganizationDetails?.long_name}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Supplier</Button>} />}
        filterControls={(table) => (<DataTableFacetedFilter column={table.getColumn("agency_id")} title="Agency" options={agencyFilterOptions} />)}
        renderGridItemAction={(supplier) => <SupplierCard supplier={supplier} agencies={agencies} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={Truck} title="No Suppliers Yet" description="Add your first supplier to manage your supply chain." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Supplier</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Suppliers Found" description="Your search did not match any suppliers." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">{editingSupplier ? "Edit Supplier" : "Add New Supplier"}</DialogTitle>
          <SupplierForm mode={editingSupplier ? "edit" : "create"} initialData={editingSupplier} onSubmitAction={handleFormSubmit} agencies={agencies} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} supplier(s)</strong>.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}// END OF FILE: app/(dashboard)/business-actor/org/suppliers/suppliers-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/third-parties/page.tsx

import { Metadata } from "next";
import { OrgThirdPartiesClientPage } from "./third-parties-client";

export const metadata: Metadata = {
  title: "Manage Third-Parties",
  description: "View, add, and manage all third-party partners for your organization.",
};

export default async function OrgThirdPartiesPage() {
  return <OrgThirdPartiesClientPage />;
}
// END OF FILE: app/(dashboard)/business-actor/org/third-parties/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/org/third-parties/third-parties-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { organizationRepository } from "@/lib/data-repo/organization";
import { ThirdPartyDto, ThirdPartyTypeValues } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Briefcase, Search as SearchIcon, Building } from "lucide-react";
import { getThirdPartyColumns } from "@/components/organization/third-parties/columns";
import { ThirdPartyCard } from "@/components/organization/third-parties/third-party-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { ThirdPartyForm, ThirdPartyFormData } from "@/components/organization/third-parties/third-party-form";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";

const statusOptions: DataTableFilterOption[] = [
  { value: "true", label: "Active" },
  { value: "false", label: "Inactive" },
];

const typeOptions: DataTableFilterOption[] = ThirdPartyTypeValues.map(t => ({ value: t, label: t }));

export function OrgThirdPartiesClientPage() {
  const { activeOrganizationId, activeOrganizationDetails } = useActiveOrganization();
  const [thirdParties, setThirdParties] = useState<ThirdPartyDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<ThirdPartyDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<ThirdPartyDto | undefined>(undefined);

  const refreshData = useCallback(async () => {
    if (!activeOrganizationId) { setIsLoading(false); setThirdParties([]); return; }
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getThirdParties(activeOrganizationId, {});
      setThirdParties(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load third-party data.");
    } finally {
      setIsLoading(false);
    }
  }, [activeOrganizationId]);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleOpenFormModal = (item?: ThirdPartyDto) => {
    setEditingItem(item);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: ThirdPartyDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (!activeOrganizationId || itemsToDelete.length === 0) return;
    const originalItems = [...thirdParties];
    const idsToDelete = itemsToDelete.map(item => item.id!);
    setThirdParties(prev => prev.filter(item => !idsToDelete.includes(item.id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map(item => organizationRepository.deleteThirdParty(activeOrganizationId, item.id!)));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} item(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Item(s) deleted."; },
      error: (err) => { setThirdParties(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const handleFormSubmit = async (data: ThirdPartyFormData): Promise<boolean> => {
    if (!activeOrganizationId) { toast.error("No active organization."); return false; }
    try {
      const promise = editingItem?.id
        ? organizationRepository.updateThirdParty(activeOrganizationId, editingItem.id, data)
        : organizationRepository.createThirdParty(activeOrganizationId, data.type, data);
      
      await toast.promise(promise, {
        loading: `${editingItem ? 'Updating' : 'Creating'} third-party...`,
        success: `Third-party ${editingItem ? 'updated' : 'created'} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<ThirdPartyDto>[]>(() => getThirdPartyColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item]) }), []);

  if (!activeOrganizationId && !isLoading) {
    return <FeedbackCard icon={Building} title="No Organization Selected" description="Please select an active organization to manage third-parties." />;
  }

  return (
    <>
      <ResourceDataTable
        data={thirdParties}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search by name..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="org-third-parties-view-mode"
        exportFileName="organization_third_parties.csv"
        pageHeader={<PageHeader title="Third-Parties" description={`Manage external partners for ${activeOrganizationDetails?.long_name}`} action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Third-Party</Button>} />}
        filterControls={(table) => (
          <>
            <DataTableFacetedFilter column={table.getColumn("is_active")} title="Status" options={statusOptions} />
            <DataTableFacetedFilter column={table.getColumn("type")} title="Type" options={typeOptions} />
          </>
        )}
        renderGridItemAction={(item) => <ThirdPartyCard thirdParty={item} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={Briefcase} title="No Third-Parties Yet" description="Add your first external partner, supplier, or other entity." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Third-Party</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Third-Parties Found" description="Your search did not match any partners." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">{editingItem ? "Edit Third-Party" : "Add New Third-Party"}</DialogTitle>
          <ThirdPartyForm mode={editingItem ? "edit" : "create"} initialData={editingItem} onSubmitAction={handleFormSubmit} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} item(s)</strong>.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
// END OF FILE: app/(dashboard)/business-actor/org/third-parties/third-parties-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/profile/page.tsx

"use client";

import React, { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { organizationRepository } from "@/lib/data-repo/organization";
import { BusinessActorDto } from "@/types/organization";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { AlertTriangle, UserCircle2 } from "lucide-react";
import { toast } from "sonner";
import { BusinessActorForm } from "@/components/business-actor/business-actor-form";

export default function EditBusinessActorProfilePage() {
  const { data: session } = useSession();
  const [actorData, setActorData] = useState<BusinessActorDto | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // The businessActorId is now authoritative from the session
    const baId = session?.user?.businessActorId;
    if (baId) {
      setIsLoading(true);
      setError(null);
      organizationRepository
        .getBusinessActorById(baId)
        .then((data) => {
          if (data) {
            setActorData(data);
          } else {
            setError("Business Actor profile not found.");
          }
        })
        .catch(() => setError("Failed to fetch your profile details."))
        .finally(() => setIsLoading(false));
    } else if (session) {
      // User is logged in but has no BA profile ID in session
      setError("You have not completed the Business Actor onboarding process.");
      setIsLoading(false);
    }
  }, [session]);

  const handleSuccess = (updatedBA: BusinessActorDto) => {
    toast.success("Your professional profile has been updated!");
    setActorData(updatedBA); // Refresh local state with updated data
  };

  if (isLoading) {
    return (
      <div className="max-w-4xl mx-auto">
        <Skeleton className="h-8 w-1/2 mb-6" />
        <Skeleton className="h-[600px] w-full" />
      </div>
    );
  }

  if (error || !actorData) {
    return (
      <Card className="border-destructive max-w-2xl mx-auto">
        <CardHeader>
          <CardTitle className="text-destructive flex items-center gap-2">
            <AlertTriangle /> Error Loading Profile
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p>{error || "Your Business Actor profile could not be loaded."}</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold tracking-tight flex items-center gap-3">
          Business Actor Profile
        </h1>
        <p className="text-muted-foreground mt-1">
          Manage your global professional information across all your
          organizations.
        </p>
      </div>
      <BusinessActorForm
        mode="edit"
        initialData={actorData}
        onSuccessAction={handleSuccess}
      />
    </div>
  );
}
// END OF FILE: app/(dashboard)/business-actor/profile/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/business-actor/webhooks/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

export default function BusinessActorWebhooksPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Webhooks & Alerts</h1>
      <Tabs defaultValue="manage" className="space-y-4">
        <TabsList>
          <TabsTrigger value="manage">Manage Webhooks</TabsTrigger>
          <TabsTrigger value="templates">Alert Templates</TabsTrigger>
          <TabsTrigger value="logs">Logs</TabsTrigger>
        </TabsList>
        <TabsContent value="manage">
          <Card>
            <CardHeader><CardTitle>Configure Webhooks</CardTitle></CardHeader>
            <CardContent>
              <p>Set up webhooks to receive notifications for specific events.</p>
              {/* TODO: Implement webhook creation/management form and list */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="templates">
          <Card>
            <CardHeader><CardTitle>Notification Templates</CardTitle></CardHeader>
            <CardContent>
              <p>Customize the templates used for webhook alerts.</p>
              {/* TODO: Implement template editor/manager */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="logs">
          <Card>
            <CardHeader><CardTitle>Webhook Delivery Logs</CardTitle></CardHeader>
            <CardContent>
              <p>View the history and status of webhook deliveries.</p>
              {/* TODO: Implement webhook log viewer */}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/business-actor/webhooks/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/chat/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function CustomerChatPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Chat & Support</h1>
      <Card>
        <CardHeader>
          <CardTitle>Get Help</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Chat with support or use the chatbot for assistance.</p>
          {/* TODO: Implement Customer Chat component */}
          <div className="mt-4 h-96 border rounded-md flex items-center justify-center text-muted-foreground">
             Customer Chat Interface Placeholder
           </div>
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/chat/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/dashboard/page.tsx

"use client";

import React from 'react';
import { useSession } from "next-auth/react";
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { ArrowRight, Building, Loader2, LifeBuoy, Settings } from 'lucide-react';
import { useActiveOrganization } from '@/contexts/active-organization-context';

export default function UserDashboardPage() {
  const { data: session, status } = useSession();
  const { userOrganizations, isLoadingUserOrgs } = useActiveOrganization();

  if (status === 'loading' || isLoadingUserOrgs) {
    return (
      <div className="flex items-center justify-center min-h-[80vh]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <p className="ml-4 text-muted-foreground">Loading Dashboard...</p>
      </div>
    );
  }

  const isBusinessActor = !!session?.user.businessActorId;

  return (
    <div className="space-y-8">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Welcome, {session?.user.first_name || "User"}!</h1>
          <p className="text-muted-foreground">This is your personal space. Manage your settings or jump into your business workspace.</p>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        {isBusinessActor ? (
          <Card className="hover:shadow-lg transition-shadow">
            <CardHeader>
              <Building className="h-8 w-8 text-primary mb-2" />
              <CardTitle>Business Workspace</CardTitle>
              <CardDescription>You have {userOrganizations.length} organization(s). Jump in to manage your business operations.</CardDescription>
            </CardHeader>
            <CardFooter>
              <Button asChild>
                <Link href="/business-actor/organizations">Enter Workspace <ArrowRight className="ml-2 h-4 w-4" /></Link>
              </Button>
            </CardFooter>
          </Card>
        ) : (
          <Card className="border-primary/50 hover:shadow-lg transition-shadow">
            <CardHeader>
              <Building className="h-8 w-8 text-primary mb-2" />
              <CardTitle>Become a Business Actor</CardTitle>
              <CardDescription>Unlock powerful tools to manage your organization, list services, and grow your business.</CardDescription>
            </CardHeader>
            <CardFooter>
              <Button asChild>
                <Link href="/business-actor/onboarding">Get Started <ArrowRight className="ml-2 h-4 w-4" /></Link>
              </Button>
            </CardFooter>
          </Card>
        )}

        <Card className="hover:shadow-lg transition-shadow">
          <CardHeader>
            <Settings className="h-8 w-8 text-primary mb-2" />
            <CardTitle>Account Settings</CardTitle>
            <CardDescription>Manage your personal profile, notification preferences, and account security.</CardDescription>
          </CardHeader>
          <CardFooter>
            <Button asChild variant="outline">
              <Link href="/settings">Go to Settings</Link>
            </Button>
          </CardFooter>
        </Card>
      </div>

      <Card>
        <CardHeader>
            <LifeBuoy className="h-8 w-8 text-primary mb-2" />
            <CardTitle>Need Help?</CardTitle>
            <CardDescription>Find answers to common questions or get in touch with our support team.</CardDescription>
        </CardHeader>
        <CardFooter>
            <Button asChild variant="secondary">
                <Link href="/help">Visit Help Center</Link>
            </Button>
        </CardFooter>
      </Card>
    </div>
  );
}
// END OF FILE: app/(dashboard)/dashboard/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/favorites/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function CustomerFavoritesPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">My Favorites</h1>
      <Card>
        <CardHeader>
          <CardTitle>Saved Items/Services</CardTitle>
        </CardHeader>
        <CardContent>
          <p>View and manage your favorited items or services.</p>
          {/* TODO: Implement Favorites list, organization (folders), sharing */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/favorites/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/help/page.tsx

"use client"; // Needed for interactive elements like search input state

import React, { useState } from "react";
import Link from "next/link";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Search, LifeBuoy, BookOpen, MessageSquare, Mail, Ticket, Info } from "lucide-react";
import { toast } from "sonner"; // For placeholder actions

// Placeholder FAQ data - replace with actual content later
const faqData = [
  {
    category: "Getting Started",
    questions: [
      { q: "How do I create an account?", a: "Navigate to the Sign Up page and fill in your details. You will receive a confirmation email." },
      { q: "What's  the difference between Business Actor and Customer roles?", a: "Business Actors manage services, products, and organization details. Customers interact with services, manage their profile, and view bonuses." },
      { q: "How do I navigate the dashboard?", a: "Use the sidebar on the left to access different sections. The top navigation provides quick access to notifications and user settings." },
    ],
  },
  {
    category: "Account Management",
    questions: [
      { q: "How do I change my password?", a: "Go to Settings > Security tab. Enter your current password and your desired new password, then confirm and save." },
      { q: "How do I update my profile information?", a: "Go to Settings > Account tab. You can update your name, email, phone, and avatar there." },
      { q: "How do I enable Two-Factor Authentication (2FA)?", a: "Go to Settings > Security tab and toggle the 'Enable Two-Factor Authentication' switch. Follow the on-screen instructions." },
    ],
  },
  {
    category: "Billing & Subscriptions (BA)",
    questions: [
      { q: "How can I view my invoices?", a: "Business Actors can find their invoices under the 'Invoices' section in the sidebar." },
      { q: "How do I upgrade my subscription plan?", a: "Navigate to the 'Subscription' section in the sidebar to view available plans and upgrade options." },
    ],
  },
   {
    category: "Bonus Points (Customer)",
    questions: [
      { q: "How do I check my bonus points?", a: "Customers can view their bonus points balance and history in the 'My Bonus' section." },
      { q: "How can I redeem my points?", a: "Redemption options, if available, will be shown in the 'My Bonus' section under 'Convert My Points'." },
    ],
  },
];

export default function HelpPage() {
  const [searchQuery, setSearchQuery] = useState("");

  // TODO: Implement actual search filtering logic
  const handleSearch = () => {
      if (!searchQuery.trim()) {
          toast.info("Please enter a search term.");
          return;
      }
      toast.info(`Search functionality for "${searchQuery}" is not yet implemented.`);
      // Implement filtering of FAQs or linking to relevant docs based on searchQuery
  };

  const handleContactAction = (method: string) => {
      toast.info(`Contacting support via ${method} is not yet implemented.`);
      // TODO: Implement actual action (open chat, link to ticket form, mailto link)
  };


  return (
    // Using container similar to settings page for consistency
    <div className="container mx-auto py-8 pb-10">
      <div className="flex flex-col md:flex-row items-start md:items-center justify-between mb-8">
        <div className="flex items-center gap-3 mb-4 md:mb-0">
           <LifeBuoy className="h-8 w-8 text-primary" />
           <h1 className="text-3xl font-bold">Help & Support</h1>
        </div>
         {/* Optional: Link back to dashboard */}
         {/* <Button variant="outline" asChild><Link href="/business-actor/dashboard">Back to Dashboard</Link></Button> */}
      </div>

      {/* Search Section */}
      <Card className="mb-8 shadow-sm">
        <CardHeader>
          <CardTitle className="text-xl">How can we help?</CardTitle>
          <CardDescription>Search our knowledge base or browse FAQs.</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex w-full items-center space-x-2">
            <Input
              type="text"
              placeholder="Search help articles..."
              value={searchQuery}
              onChange= {(e)  => setSearchQuery(e.target.value)}
              onKeyDown= {(e)  => e.key === 'Enter' && handleSearch()}
              className="flex-1"
            />
            <Button type="button" onClick={handleSearch}>
              <Search className="h-4 w-4 mr-2" /> Search
            </Button>
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* FAQ Section */}
        <div className="lg:col-span-2">
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle className="text-xl">Frequently Asked Questions</CardTitle>
            </CardHeader>
            <CardContent>
              <Accordion type="single" collapsible className="w-full">
                {faqData.map((category) => (
                  <div key={category.category} className="mb-4 last:mb-0">
                     <h3 className="text-lg font-semibold mb-2 px-1">{category.category}</h3>
                      {category.questions.map((item, index) => (
                          <AccordionItem value={`${category.category}-${index}`} key={index} className="border-b">
                              <AccordionTrigger className="text-left hover:no-underline px-1">
                                  {item.q}
                              </AccordionTrigger>
                              <AccordionContent className="px-1 text-muted-foreground">
                                  {item.a}
                              </AccordionContent>
                          </AccordionItem>
                      ))}
                  </div>
                ))}
              </Accordion>
            </CardContent>
          </Card>
        </div>

        {/* Contact & Resources Section */}
        <div className="space-y-6">
          {/* Contact Card */}
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle className="text-xl">Contact Support</CardTitle>
              <CardDescription>Cannot find an answer? Get in touch.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
               <Button variant="outline" className="w-full justify-start gap-3" onClick={() => handleContactAction('Ticket')}>
                 <Ticket className="h-5 w-5 text-primary" /> Submit a Ticket
               </Button>
               <Button variant="outline" className="w-full justify-start gap-3" onClick={() => handleContactAction('Chat')}>
                 <MessageSquare className="h-5 w-5 text-primary" /> Start Live Chat
               </Button>
               <Button variant="outline" className="w-full justify-start gap-3" onClick={() => handleContactAction('Email')}>
                 <Mail className="h-5 w-5 text-primary" /> Send us an Email
               </Button>
            </CardContent>
          </Card>

           {/* Documentation Card */}
           <Card className="shadow-sm">
            <CardHeader>
              <CardTitle className="text-xl">Documentation</CardTitle>
              <CardDescription>Explore detailed guides and resources.</CardDescription>
            </CardHeader>
            <CardContent>
              <Button variant="outline" asChild className="w-full justify-start gap-3">
                 {/* TODO: Update this link */}
                <Link href="/docs">
                    <BookOpen className="h-5 w-5 text-primary" /> Browse Guides
                </Link>
              </Button>
            </CardContent>
          </Card>

            <Card className="shadow-sm">
                <CardHeader>
                <CardTitle className="text-xl">What is New?</CardTitle>
                <CardDescription>See the latest platform updates.</CardDescription>
                </CardHeader>
                <CardContent>
                <Button variant="outline" asChild className="w-full justify-start gap-3">
                    {/* TODO: Update this link */}
                    <Link href="/whats-new">
                        <Info className="h-5 w-5 text-primary" /> View Changelog
                    </Link>
                </Button>
                </CardContent>
            </Card>

        </div>
      </div>
    </div>
  );
}// END OF FILE: app/(dashboard)/help/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/invite/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

export default function CustomerInvitePage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Invite Friends & Referrals</h1>
      <Card>
        <CardHeader>
          <CardTitle>Share & Earn Rewards</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p>Invite friends to join and earn rewards through our referral program.</p>
          <div className='space-y-2'>
            <Label htmlFor='referral-link'>Your Referral Link</Label>
            <div className='flex gap-2'>
              <Input id="referral-link" readOnly value="https://yowyob.com/ref/cust123" />{/* TODO: Generate dynamically */}
              <Button>Copy Link</Button> {/* TODO: Add copy functionality */}
            </div>
          </div>
          {/* TODO: Add social sharing buttons */}
          {/* TODO: Display referral statistics (invited friends, rewards earned) */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/invite/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/invoices/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function CustomerInvoicesPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">My Invoices</h1>
        <Tabs defaultValue="overview" className="space-y-4">
            <TabsList>
                <TabsTrigger value="overview">Overview</TabsTrigger>
                <TabsTrigger value="payment_details">Payment Details</TabsTrigger>
            </TabsList>
            <TabsContent value="overview">
                <Card>
                    <CardHeader><CardTitle>Invoice History</CardTitle></CardHeader>
                    <CardContent>
                    <p>View your past invoices and their payment status.</p>
                    {/* TODO: Implement Invoice list/table for customer */}
                    </CardContent>
                </Card>
            </TabsContent>
             <TabsContent value="payment_details">
                <Card>
                    <CardHeader><CardTitle>Saved Payment Methods</CardTitle></CardHeader>
                    <CardContent>
                    <p>Manage your saved payment details (e.g., credit cards).</p>
                    {/* TODO: Implement payment method management UI */}
                    </CardContent>
                </Card>
            </TabsContent>
        </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/invoices/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/layout.tsx

"use client";

import { MainSidebar } from "@/components/main-sidebar";
import { TopNav } from "@/components/top-nav";
import { ActiveOrganizationProvider } from "@/contexts/active-organization-context";
import { CommandPalette } from "@/components/command-palette";
import { useCommandPalette } from "@/hooks/use-command-palette";
import { AppFooter } from "@/components/app-footer"; // [ADD] Import footer

interface DashboardLayoutProps {
  children: React.ReactNode;
}

export default function DashboardLayout({ children }: DashboardLayoutProps) {
  const { isOpen, setIsOpen } = useCommandPalette();

  return (
    <ActiveOrganizationProvider>
      <CommandPalette isOpen={isOpen} setIsOpen={setIsOpen} />
      <div className="flex min-h-screen">
        <MainSidebar />
        <div className="flex flex-1 flex-col overflow-x-hidden">
          <TopNav onOpenCommandPalette={() => setIsOpen(true)} />
          <main className="flex-1 bg-muted/30 p-4 pt-20 sm:p-6 md:p-8">
            <div className="mx-auto">{children}</div>
          </main>
          <AppFooter /> {/* [ADD] The footer */}
        </div>
      </div>
    </ActiveOrganizationProvider>
  );
}
// END OF FILE: app/(dashboard)/layout.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/settings/page.tsx

"use client";

import { useSettings } from "@/contexts/settings-context";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
// Checkbox might not be directly used if FormFieldSwitchInternal is preferred, but good to have for flexibility
// import { Checkbox } from "@/components/ui/checkbox";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  UserCircle,
  Palette,
  BellRing,
  LockKeyhole,
  Shield,
  Trash2,
  Download,
  Info,
  Star,
  Settings as SettingsIconLucide,
  MessageCircleIcon,
} from "lucide-react";
import { useState, useEffect, useMemo } from "react";
import { toast } from "sonner";
import { useTheme } from "next-themes";
import { Loader2 } from "lucide-react";
import { usePathname, useRouter } from "next/navigation"; // Added useRouter
import { ImageUploader } from "@/components/ui/image-uploader";
import { Separator } from "@/components/ui/separator";
import { cn } from "@/lib/utils";
import { FormControl, FormItem } from "@/components/ui/form";
import Link from "next/link";

// const defaultAvatarsStock = [
//   // Renamed to avoid conflict if defaultAvatars is used elsewhere
//   "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/9439775.jpg-4JVJWOjPksd3DtnBYJXoWHA5lc1DU9.jpeg",
//   "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/375238645_11475210.jpg-lU8bOe6TLt5Rv51hgjg8NT8PsDBmvN.jpeg",
//   "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/375238208_11475222.jpg-poEIzVHAGiIfMFQ7EiF8PUG1u0Zkzz.jpeg",
//   "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/dd.jpg-4MCwPC2Bec6Ume26Yo1kao3CnONxDg.jpeg",
//   "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/9334178.jpg-Y74tW6XFO68g7N36SE5MSNDNVKLQ08.jpeg",
// ];

type UserRoleForUI = "customer" | "business-actor" | "super-admin" | "unknown";

const FormFieldItem: React.FC<{
  label: string;
  id: string;
  value: string | undefined;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
  type?: string;
  readOnly?: boolean;
  placeholder?: string;
  description?: string;
  disabled?: boolean;
}> = ({
  label,
  id,
  value,
  onChange,
  type = "text",
  readOnly = false,
  placeholder,
  description,
  disabled = false,
}) => (
    <div className="space-y-1.5">
      <Label htmlFor={id}>{label}</Label>
      <Input
        id={id}
        type={type}
        value={value || ""}
        onChange={onChange}
        readOnly={readOnly}
        placeholder={placeholder}
        disabled={disabled}
      />
      {description && (
        <p className="text-xs text-muted-foreground">{description}</p>
      )}
    </div>
  );

const FormFieldSelectInternal: React.FC<{
  label: string;
  value: string | undefined;
  onValueChange: (value: string) => void;
  options: { value: string; label: string }[];
  placeholder?: string;
  id?: string;
  disabled?: boolean;
}> = ({
  label,
  value,
  onValueChange,
  options,
  placeholder,
  id,
  disabled = false,
}) => (
    <div className="space-y-1.5">
      <Label htmlFor={id}>{label}</Label>
      <Select value={value} onValueChange={onValueChange} disabled={disabled}>
        <SelectTrigger id={id}>
          <SelectValue placeholder={placeholder} />
        </SelectTrigger>
        <SelectContent>
          {options.map((opt) => (
            <SelectItem key={opt.value} value={opt.value}>
              {opt.label}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
    </div>
  );

const FormFieldSwitchInternal: React.FC<{
  id: string;
  label: string;
  description?: string;
  checked: boolean;
  onCheckedChange: (checked: boolean) => void;
  disabled?: boolean;
}> = ({
  id,
  label,
  description,
  checked,
  onCheckedChange,
  disabled = false,
}) => (
    <div
      className={cn(
        "flex items-center justify-between rounded-lg border p-3 shadow-sm bg-background/50",
        disabled && "opacity-70 cursor-not-allowed"
      )}
    >
      <div className="space-y-0.5 pr-4">
        <Label
          htmlFor={id}
          className={cn(
            "text-base font-normal",
            disabled && "cursor-not-allowed"
          )}
        >
          {label}
        </Label>
        {description && (
          <p className="text-xs text-muted-foreground">{description}</p>
        )}
      </div>
      <Switch
        id={id}
        checked={checked}
        onCheckedChange={onCheckedChange}
        disabled={disabled}
      />
    </div>
  );

export default function UnifiedSettingsPage() {
  const {
    settings,
    isLoadingSettings,
    updateUserProfile,
    updateDisplayPreferences,
    updateNotificationPreferences,
    updatePrivacyPreferences,
  } = useSettings();
  const { setTheme: setNextTheme } = useTheme();
  const pathname = usePathname();
  // const router = useRouter();

  const inferredRole = useMemo((): UserRoleForUI => {
    // This inference will be replaced by actual role from session when available
    if (pathname.includes("/business-actor")) return "business-actor";
    if (pathname.includes("/customer")) return "customer";
    if (pathname.includes("/super-admin")) return "super-admin";
    // A more robust way, if settings page is always /settings, might involve checking session data
    // For now, if accessed directly via /settings, it might default based on some logic or show a generic view
    return "customer"; // Fallback for direct /settings access
  }, [pathname]);

  // Local state for Account Profile form fields
  const [localFirstName, setLocalFirstName] = useState("");
  const [localLastName, setLocalLastName] = useState("");
  const [localPhone, setLocalPhone] = useState("");
  const [profilePhotoFile, setProfilePhotoFile] = useState<File | null>(null);
  const [profilePhotoPreview, setProfilePhotoPreview] = useState<string | null>(
    null
  );

  // Local state for Security form fields
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [is2FAEnabled, setIs2FAEnabled] = useState(false); // Placeholder for 2FA status

  useEffect(() => {
    if (!isLoadingSettings) {
      setLocalFirstName(settings.firstName || "");
      setLocalLastName(settings.lastName || "");
      setLocalPhone(settings.phone || "");
      setProfilePhotoPreview(settings.avatar); // settings.avatar is the profilePhotoUrl
      // Potentially set is2FAEnabled from settings if it comes from backend
    }
  }, [settings, isLoadingSettings]);

  const handleProfilePhotoSelected = (
    file: File | null,
    previewUrl: string | null
  ) => {
    setProfilePhotoFile(file);
    setProfilePhotoPreview(previewUrl);
  };

  const handleSaveAccountProfile = async () => {
    const fn = localFirstName.trim();
    const ln = localLastName.trim();
    if (!fn) {
      toast.error("First name cannot be empty.");
      return;
    }

    await updateUserProfile({
      first_name: fn,
      last_name: ln, // Send empty string if user clears it
      phone_number: localPhone.trim(),
    });

    if (
      (profilePhotoFile || profilePhotoPreview === null) &&
      profilePhotoPreview !== settings.avatar
    ) {
      let newPhotoUrl = profilePhotoPreview;
      if (profilePhotoFile) {
        toast.info("Simulating photo upload...");
        await new Promise((r) => setTimeout(r, 1000)); // Simulate upload delay
        // In a real app: const uploadedUrl = await uploadActualFile(profilePhotoFile);
        // newPhotoUrl = uploadedUrl; // Replace with actual URL
        newPhotoUrl = `/mock-profile-photos/${profilePhotoFile.name}`; // Mock URL
        console.log("Simulated upload, using mock URL:", newPhotoUrl);
      }
      await updateDisplayPreferences({ profilePhotoUrl: newPhotoUrl ?? undefined });
      setProfilePhotoFile(null);
    }
  };

  const handleSaveSecurity = async () => {
    if (newPassword && newPassword.length < 6) {
      toast.error("New password must be at least 6 characters.");
      return;
    }
    if (newPassword && newPassword !== confirmPassword) {
      toast.error("New passwords do not match.");
      return;
    }
    // TODO: API call to backend to change password (currentPassword, newPassword)
    // TODO: API call for 2FA enablement/disablement (is2FAEnabled)
    toast.info("Security settings update action triggered (backend pending).");
    setCurrentPassword("");
    setNewPassword("");
    setConfirmPassword("");
  };

  const handleDeleteAccount = () => {
    if (
      confirm(
        "DANGER: Are you absolutely sure you want to delete your account? This action is irreversible and will permanently erase all your data associated with this account."
      )
    ) {
      if (
        confirm(
          "FINAL WARNING: This cannot be undone. Proceed with account deletion?"
        )
      ) {
        toast.warning(
          "Account deletion process initiated (backend call not implemented)."
        );
        // TODO: API call to user/auth service to delete account.
        // After successful deletion, sign out and redirect to homepage.
        // signOut({ callbackUrl: '/' });
      }
    }
  };

  const showPreferencesTab =
    inferredRole === "business-actor" || inferredRole === "super-admin";

  if (isLoadingSettings && !settings.userId) {
    return (
      <div className="container mx-auto flex justify-center items-center min-h-[calc(100vh-200px)]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
      </div>
    );
  }

  return (
    <div className="container mx-auto pb-10">
      <div className="mb-6 flex items-center gap-3">
        <SettingsIconLucide className="h-8 w-8 text-primary" />
        <h1 className="text-3xl font-bold">User Settings</h1>
      </div>
      <Tabs defaultValue="account" className="space-y-6">
        <TabsList
          className={cn(
            "grid w-full",
            showPreferencesTab ? "grid-cols-5" : "grid-cols-4"
          )}
        >
          <TabsTrigger value="account" className="gap-1.5">
            <UserCircle className="h-4 w-4" />
            Account
          </TabsTrigger>
          {showPreferencesTab && (
            <TabsTrigger value="preferences" className="gap-1.5">
              <Palette className="h-4 w-4" />
              Display
            </TabsTrigger>
          )}
          <TabsTrigger value="security" className="gap-1.5">
            <LockKeyhole className="h-4 w-4" />
            Security
          </TabsTrigger>
          <TabsTrigger value="notifications" className="gap-1.5">
            <BellRing className="h-4 w-4" />
            Notifications
          </TabsTrigger>
          <TabsTrigger value="privacy" className="gap-1.5">
            <Shield className="h-4 w-4" />
            Privacy
          </TabsTrigger>
        </TabsList>

        <TabsContent value="account">
          <Card>
            <CardHeader>
              <CardTitle>Account Profile</CardTitle>
              <CardDescription>
                Manage your personal information and profile photo.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <ImageUploader
                currentImageUrl={settings.avatar}
                onImageSelectedAction={handleProfilePhotoSelected}
                label="Profile Photo"
                fallbackName={settings.fullName}
              />
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4">
                <FormFieldItem
                  label="First Name"
                  id="firstName"
                  value={localFirstName}
                  onChange= {(e)  => setLocalFirstName(e.target.value)}
                  placeholder="Your first name"
                />
                <FormFieldItem
                  label="Last Name"
                  id="lastName"
                  value={localLastName}
                  onChange= {(e)  => setLocalLastName(e.target.value)}
                  placeholder="Your last name"
                />
              </div>
              <FormFieldItem
                label="Username"
                id="username"
                value={settings.username}
                readOnly
                description="Your unique username (cannot be changed)."
              />
              <FormFieldItem
                label="Email"
                id="email"
                value={settings.email}
                readOnly
                description={
                  settings.emailVerified
                    ? "Email verified."
                    : "Email not verified."
                }
              />
              <FormFieldItem
                label="Phone Number"
                id="phone"
                type="tel"
                value={localPhone}
                onChange= {(e)  => setLocalPhone(e.target.value)}
                placeholder="+1234567890"
                description={
                  settings.phoneVerified
                    ? "Phone verified."
                    : "Phone not verified (if applicable)."
                }
              />
            </CardContent>
            <CardFooter>
              <Button
                onClick={handleSaveAccountProfile}
                disabled={isLoadingSettings}
              >
                {isLoadingSettings && (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                )}
                Save Profile Changes
              </Button>
            </CardFooter>
          </Card>
        </TabsContent>

        {showPreferencesTab && (
          <TabsContent value="preferences">
            <Card>
              <CardHeader>
                <CardTitle>Display Preferences</CardTitle>
                <CardDescription>
                  Customize your dashboard appearance and experience.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <FormFieldSelectInternal
                  label="Language"
                  id="language"
                  value={settings.language}
                  onValueChange={(val) =>
                    updateDisplayPreferences({ language: val })
                  }
                  options={[
                    { value: "en", label: "English" },
                    { value: "fr", label: "Français" },
                    { value: "es", label: "Español" },
                  ]}
                  placeholder="Select Language"
                />
                <FormFieldSelectInternal
                  label="Theme"
                  id="theme"
                  value={settings.theme}
                  onValueChange={(val) => {
                    setNextTheme(val);
                    updateDisplayPreferences({ theme: val  });
                  }}
                  options={[
                    { value: "light", label: "Light" },
                    { value: "dark", label: "Dark" },
                    { value: "system", label: "System Default" },
                  ]}
                  placeholder="Select Theme"
                />
                <FormFieldSelectInternal
                  label="Date Format"
                  id="dateFormat"
                  value={settings.dateFormat}
                  onValueChange={(val) =>
                    updateDisplayPreferences({ dateFormat: val  })
                  }
                  options={[
                    { value: "mm-dd-yyyy", label: "MM-DD-YYYY" },
                    { value: "dd-mm-yyyy", label: "DD-MM-YYYY" },
                    { value: "yyyy-mm-dd", label: "YYYY-MM-DD" },
                  ]}
                  placeholder="Select Date Format"
                />
                <FormFieldSelectInternal
                  label="Timezone"
                  id="timezone"
                  value={settings.timezone}
                  onValueChange={(val) =>
                    updateDisplayPreferences({ timezone: val })
                  }
                  options={[
                    { value: "utc-8", label: "Pacific Time (UTC-8)" },
                    { value: "utc-5", label: "Eastern Time (UTC-5)" },
                    { value: "utc+0", label: "Greenwich Mean Time (UTC+0)" },
                    { value: "utc+1", label: "Central European Time (UTC+1)" },
                    { value: "utc+2", label: "Eastern European Time (UTC+2)" },
                  ]}
                  placeholder="Select Timezone"
                />
                <FormFieldSelectInternal
                  label="Currency"
                  id="currency"
                  value={settings.currency}
                  onValueChange={(val) =>
                    updateDisplayPreferences({ currency: val })
                  }
                  options={[
                    { value: "usd", label: "USD ($)" },
                    { value: "eur", label: "EUR (€)" },
                    { value: "gbp", label: "GBP (£)" },
                    { value: "jpy", label: "JPY (¥)" },
                  ]}
                  placeholder="Select Currency"
                />
                <div className="space-y-1.5">
                  <Label htmlFor="fontSize">
                    Font Size ({settings.fontSize}px)
                  </Label>
                  <Slider
                    id="fontSize"
                    value={[settings.fontSize]}
                    onValueCommit={(val) =>
                      updateDisplayPreferences({ fontSize: val[0] })
                    }
                    min={12}
                    max={20}
                    step={1}
                  />
                </div>
                <div className="space-y-2">
                  <Label>Dashboard Layout</Label>
                  <RadioGroup
                    value={settings.layout}
                    onValueChange={(val) =>
                      updateDisplayPreferences({ layout: val  })
                    }
                    className="flex flex-col sm:flex-row sm:space-x-4 space-y-2 sm:space-y-0"
                  >
                    <FormItem className="flex items-center space-x-2">
                      <FormControl>
                        <RadioGroupItem value="default" id="layout-default" />
                      </FormControl>
                      <Label htmlFor="layout-default" className="font-normal">
                        Default
                      </Label>
                    </FormItem>
                    <FormItem className="flex items-center space-x-2">
                      <FormControl>
                        <RadioGroupItem value="compact" id="layout-compact" />
                      </FormControl>
                      <Label htmlFor="layout-compact" className="font-normal">
                        Compact
                      </Label>
                    </FormItem>
                    <FormItem className="flex items-center space-x-2">
                      <FormControl>
                        <RadioGroupItem value="expanded" id="layout-expanded" />
                      </FormControl>
                      <Label htmlFor="layout-expanded" className="font-normal">
                        Expanded
                      </Label>
                    </FormItem>
                  </RadioGroup>
                </div>
              </CardContent>
              {/* No explicit save button as preferences update on change via context */}
            </Card>
          </TabsContent>
        )}

        <TabsContent value="security">
          <Card>
            <CardHeader>
              <CardTitle>Security Settings</CardTitle>
              <CardDescription>
                Manage your password and account security features.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <FormFieldItem
                label="Current Password"
                id="currentPassword"
                type="password"
                value={currentPassword}
                onChange= {(e)  => setCurrentPassword(e.target.value)}
                placeholder="Enter your current password"
              />
              <FormFieldItem
                label="New Password"
                id="newPassword"
                type="password"
                value={newPassword}
                onChange= {(e)  => setNewPassword(e.target.value)}
                placeholder="Enter a new strong password"
              />
              <FormFieldItem
                label="Confirm New Password"
                id="confirmPassword"
                type="password"
                value={confirmPassword}
                onChange= {(e)  => setConfirmPassword(e.target.value)}
                placeholder="Re-enter your new password"
              />
              <Button
                onClick={handleSaveSecurity}
                disabled={isLoadingSettings}
                className="mt-2"
              >
                {isLoadingSettings && (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                )}
                Change Password
              </Button>
              <Separator />
              <FormFieldSwitchInternal
                id="twoFactorAuth"
                label="Two-Factor Authentication (2FA)"
                description="Add an extra layer of security to your account."
                checked={is2FAEnabled}
                onCheckedChange={setIs2FAEnabled}
              />
              {/* TODO: If is2FAEnabled is true, show 2FA setup/management options */}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="notifications">
          <Card>
            <CardHeader>
              <CardTitle>Notification Preferences</CardTitle>
              <CardDescription>
                Choose how you receive notifications.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <FormFieldSwitchInternal
                id="emailNotif"
                label="Email Notifications"
                checked={settings.notifications.email}
                onCheckedChange={(val) =>
                  updateNotificationPreferences({ email: val })
                }
                description="Receive important updates via email."
              />
              <FormFieldSwitchInternal
                id="pushNotif"
                label="Push Notifications (App)"
                checked={settings.notifications.push}
                onCheckedChange={(val) =>
                  updateNotificationPreferences({ push: val })
                }
                description="Get real-time alerts in the app."
              />
              <FormFieldSwitchInternal
                id="smsNotif"
                label="SMS Notifications"
                checked={settings.notifications.sms}
                onCheckedChange={(val) =>
                  updateNotificationPreferences({ sms: val })
                }
                description="Receive critical alerts via text message."
              />
              <Separator />
              <FormFieldSwitchInternal
                id="accountActivityNotif"
                label="Account Activity"
                checked={settings.notifications.accountActivity}
                onCheckedChange={(val) =>
                  updateNotificationPreferences({ accountActivity: val })
                }
                description="Alerts for logins, password changes, etc."
              />
              <FormFieldSwitchInternal
                id="newFeaturesNotif"
                label="New Features & Updates"
                checked={settings.notifications.newFeatures}
                onCheckedChange={(val) =>
                  updateNotificationPreferences({ newFeatures: val })
                }
                description="Stay informed about new platform capabilities."
              />
              <FormFieldSwitchInternal
                id="marketingNotif"
                label="Marketing & Promotions"
                checked={settings.notifications.marketing}
                onCheckedChange={(val) =>
                  updateNotificationPreferences({ marketing: val })
                }
                description="Receive offers and promotional content."
              />
              <FormFieldSelectInternal
                label="Notification Frequency"
                id="notifFreq"
                value={settings.notifications.frequency}
                onValueChange={(val) =>
                  updateNotificationPreferences({ frequency: val  })
                }
                options={[
                  { value: "real-time", label: "Real-time" },
                  { value: "daily", label: "Daily Digest" },
                  { value: "weekly", label: "Weekly Summary" },
                  { value: "never", label: "Never" },
                ]}
                placeholder="Select Frequency"
              />
              <div className="space-y-1.5">
                <Label>Quiet Hours (Notifications Paused)</Label>
                <div className="flex items-center space-x-2">
                  <Input
                    id="quiet-hours-start"
                    type="time"
                    value={settings.notifications.quietHoursStart}
                    onChange= {(e)  =>
                      updateNotificationPreferences({
                        quietHoursStart: e.target.value,
                      })
                    }
                    className="w-[130px]"
                  />
                  <span>to</span>
                  <Input
                    id="quiet-hours-end"
                    type="time"
                    value={settings.notifications.quietHoursEnd}
                    onChange= {(e)  =>
                      updateNotificationPreferences({
                        quietHoursEnd: e.target.value,
                      })
                    }
                    className="w-[130px]"
                  />
                </div>
                <p className="text-xs text-muted-foreground">
                  Set a time range to pause non-critical notifications.
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="privacy">
          <Card>
            <CardHeader>
              <CardTitle>Privacy & Data</CardTitle>
              <CardDescription>
                Manage your data sharing settings and account actions.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <FormFieldSwitchInternal
                id="analyticsSharing"
                label="Share Usage Data"
                description="Help us improve by sharing anonymized usage analytics."
                checked={settings.privacy.analyticsSharing}
                onCheckedChange={(val) =>
                  updatePrivacyPreferences({ analyticsSharing: val })
                }
              />
              <FormFieldSwitchInternal
                id="personalizedAds"
                label="Personalized Content & Offers"
                description="Allow us to tailor content and offers based on your activity."
                checked={settings.privacy.personalizedAds}
                onCheckedChange={(val) =>
                  updatePrivacyPreferences({ personalizedAds: val })
                }
              />
              <FormFieldSelectInternal
                label="Account Visibility"
                id="visibility"
                value={settings.privacy.visibility}
                onValueChange={(val) =>
                  updatePrivacyPreferences({ visibility: val  })
                }
                options={[
                  { value: "public", label: "Public" },
                  { value: "private", label: "Private" },
                  {
                    value: "friends-only",
                    label: "Friends Only (if applicable)",
                  },
                ]}
                placeholder="Select Account Visibility"
              />
              <FormFieldSelectInternal
                label="Data Retention Policy"
                id="dataRetention"
                value={settings.privacy.dataRetention}
                onValueChange={(val) =>
                  updatePrivacyPreferences({ dataRetention: val  })
                }
                options={[
                  { value: "6-months", label: "6 Months" },
                  { value: "1-year", label: "1 Year" },
                  { value: "2-years", label: "2 Years" },
                  { value: "indefinite", label: "Indefinite (Until Deletion)" },
                ]}
                placeholder="Select Data Retention"
              />
              <Separator className="my-6" />
              <div className="flex flex-col sm:flex-row justify-between gap-3">
                <Button
                  variant="outline"
                  onClick={() =>
                    toast.info("Download data feature coming soon.")
                  }
                  disabled={isLoadingSettings}
                  className="w-full sm:w-auto"
                >
                  <Download className="mr-2 h-4 w-4" />
                  Download Your Data
                </Button>
                <Button
                  variant="destructive"
                  onClick={handleDeleteAccount}
                  disabled={isLoadingSettings}
                  className="w-full sm:w-auto"
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  Delete My Account
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <MessageCircleIcon className="mr-2 h-5 w-5" />
              Help Center
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Button variant="outline" asChild className="w-full">
              <Link href="/help">Visit Support & FAQs</Link>
            </Button>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Info className="mr-2 h-5 w-5" />
              What is New
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Button variant="outline" asChild className="w-full">
              <Link href="/whats-new">See Latest Updates</Link>
            </Button>
          </CardContent>
        </Card>
        {/* Rate App should be context-aware, e.g. only for customer or if a general app rating */}
        {(inferredRole === "customer" || inferredRole === "business-actor") && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Star className="mr-2 h-5 w-5" />
                Rate Our Platform
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Button
                variant="outline"
                onClick={() =>
                  toast.info("Link to app store or feedback form TBD.")
                }
                className="w-full"
              >
                Leave a Rating
              </Button>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
// END OF FILE: app/(dashboard)/settings/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/bonus/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function SuperAdminBonusPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Bonus System Overview</h1>
        <Tabs defaultValue="overview" className="space-y-4">
            <TabsList>
                <TabsTrigger value="overview">Points Overview</TabsTrigger>
                <TabsTrigger value="point_value">Monetary Value</TabsTrigger>
                 <TabsTrigger value="config">Global Config</TabsTrigger>
                {/* Add more tabs if needed */}
            </TabsList>
             <TabsContent value="overview">
                <Card>
                    <CardHeader><CardTitle>Total Points Issued/Redeemed</CardTitle></CardHeader>
                    <CardContent>
                        <p>Platform-wide statistics on bonus points.</p>
                        {/* TODO: Implement Bonus system stats and charts */}
                    </CardContent>
                </Card>
             </TabsContent>
            <TabsContent value="point_value">
                <Card>
                    <CardHeader><CardTitle>Point Monetary Value Setting</CardTitle></CardHeader>
                    <CardContent>
                        <p>View or set the global monetary value per bonus point.</p>
                        {/* TODO: Display/Edit global point value */}
                    </CardContent>
                </Card>
            </TabsContent>
             <TabsContent value="config">
                <Card>
                    <CardHeader><CardTitle>Global Bonus Configuration</CardTitle></CardHeader>
                    <CardContent>
                        <p>Manage default rules or settings for the bonus system.</p>
                         {/* TODO: Implement global bonus settings */}
                    </CardContent>
                </Card>
            </TabsContent>
        </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/bonus/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-actors/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function SuperAdminBusinessActorsPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Business Actors Management</h1>
      <Tabs defaultValue="list" className="space-y-4">
        <TabsList>
          <TabsTrigger value="list">List & Status</TabsTrigger>
          <TabsTrigger value="stats">Stats & Analytics</TabsTrigger>
          <TabsTrigger value="activities">Activities</TabsTrigger>
          {/* Add more tabs if needed, e.g., Approvals */}
        </TabsList>
        <TabsContent value="list">
          <Card>
            <CardHeader><CardTitle>Business Actor List</CardTitle></CardHeader>
            <CardContent>
              <p>View, search, and manage all Business Actors.</p>
              {/* TODO: Implement BA Table with status, filtering, actions (suspend, approve, etc.) */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="stats">
          <Card>
            <CardHeader><CardTitle>BA Analytics</CardTitle></CardHeader>
            <CardContent>
              <p>Aggregate statistics about Business Actors.</p>
              {/* TODO: Implement BA stats dashboard */}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="activities">
          <Card>
            <CardHeader><CardTitle>BA Activities</CardTitle></CardHeader>
            <CardContent>
              <p>Log of significant activities related to BAs.</p>
              {/* TODO: Implement BA activity log */}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/business-actors/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-domains/business-domains-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { organizationRepository } from "@/lib/data-repo/organization";
import { BusinessDomainDto, CreateBusinessDomainRequest, UpdateBusinessDomainRequest } from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Tag, Search as SearchIcon } from "lucide-react";
import { getBusinessDomainColumns } from "@/components/admin/business-domains/columns";
import { BusinessDomainCard } from "@/components/admin/business-domains/business-domain-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { BusinessDomainForm, BusinessDomainFormData } from "@/components/admin/business-domains/business-domain-form";

export function BusinessDomainsClientPage() {
  const [domains, setDomains] = useState<BusinessDomainDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<BusinessDomainDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<BusinessDomainDto | undefined>(undefined);

  const refreshData = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAllBusinessDomains();
      setDomains(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load business domains.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => { refreshData(); }, [refreshData]);

  const handleOpenFormModal = (item?: BusinessDomainDto) => {
    setEditingItem(item);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: BusinessDomainDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (itemsToDelete.length === 0) return;
    const originalItems = [...domains];
    const idsToDelete = itemsToDelete.map(item => item.id!);
    setDomains(prev => prev.filter(item => !idsToDelete.includes(item.id!)));
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(itemsToDelete.map(item => organizationRepository.deleteBusinessDomain(item.id!)));
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} domain(s)...`,
      success: () => { refreshData(); setItemsToDelete([]); return "Domain(s) deleted."; },
      error: (err) => { setDomains(originalItems); setItemsToDelete([]); return `Failed to delete: ${err.message}`; },
    });
  };

  const handleFormSubmit = async (data: BusinessDomainFormData): Promise<boolean> => {
    try {
      const promise = editingItem?.id
        ? organizationRepository.updateBusinessDomain(editingItem.id, data as UpdateBusinessDomainRequest)
        : organizationRepository.createBusinessDomain(data as CreateBusinessDomainRequest);
      
      await toast.promise(promise, {
        loading: `${editingItem ? 'Updating' : 'Creating'} domain...`,
        success: `Domain ${editingItem ? 'updated' : 'created'} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<BusinessDomainDto>[]>(() => getBusinessDomainColumns({ onEditAction: handleOpenFormModal, onDeleteAction: (item) => handleDeleteConfirmation([item]) }), []);

  return (
    <>
      <ResourceDataTable
        data={domains}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search domains..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="admin-domains-view-mode"
        exportFileName="business_domains.csv"
        pageHeader={<PageHeader title="Business Domains" description="Manage the global list of business domains available on the platform." action={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Create Domain</Button>} />}
        renderGridItemAction={(item) => <BusinessDomainCard domain={item} onEditAction={handleOpenFormModal} onDeleteAction={(item) => handleDeleteConfirmation([item])} />}
        emptyState={<FeedbackCard icon={Tag} title="No Business Domains" description="Create the first business domain to categorize organizations." actionButton={<Button onClick={() => handleOpenFormModal()}><PlusCircle className="mr-2 h-4 w-4" /> Create Domain</Button>} />}
        filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Domains Found" description="Your search did not match any business domains." />}
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">{editingItem ? "Edit Domain" : "Create New Domain"}</DialogTitle>
          <BusinessDomainForm mode={editingItem ? "edit" : "create"} initialData={editingItem} onSubmitAction={handleFormSubmit} />
        </DialogContent>
      </Dialog>
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete <strong>{itemsToDelete.length} domain(s)</strong>. Organizations using this domain will need to be updated.</AlertDialogDescription></AlertDialogHeader>
          <AlertDialogFooter><AlertDialogCancel>Cancel</AlertDialogCancel><AlertDialogAction onClick={executeDelete}>Continue</AlertDialogAction></AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}// END OF FILE: app/(dashboard)/super-admin/business-domains/business-domains-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/business-domains/page.tsx

import { Metadata } from "next";
import { BusinessDomainsClientPage } from "./business-domains-client";

export const metadata: Metadata = {
  title: "Manage Business Domains",
  description: "Administer the global list of business domains for all organizations.",
};

export default async function BusinessDomainsPage() {
  return <BusinessDomainsClientPage />;
}// END OF FILE: app/(dashboard)/super-admin/business-domains/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/chat/page.tsx


import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function SuperAdminChatPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Admin Chat & Support</h1>
       <Card>
        <CardHeader>
          <CardTitle>Admin Communication</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Interface for Super Admin communication or monitoring support channels.</p>
          {/* TODO: Implement Admin Chat/Support Monitoring component */}
           <div className="mt-4 h-96 border rounded-md flex items-center justify-center text-muted-foreground">
             Admin Chat Interface Placeholder
           </div>
        </CardContent>
      </Card>
       {/* Add sections for Reviews Stats, Rate App overview, Notification Info */}
        <Card className="mt-4">
            <CardHeader><CardTitle>Reviews Statistics</CardTitle></CardHeader>
            <CardContent><p>Overall statistics on customer reviews.</p></CardContent>{/* TODO */}
        </Card>
        <Card className="mt-4">
            <CardHeader><CardTitle>App Rating Overview</CardTitle></CardHeader>
            <CardContent><p>Platform-wide app rating data.</p></CardContent>{/* TODO */}
        </Card>
         <Card className="mt-4">
            <CardHeader><CardTitle>Notification Info / System Alerts</CardTitle></CardHeader>
            <CardContent><p>View or manage system-wide notifications.</p></CardContent>{/* TODO */}
        </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/chat/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/customers/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function SuperAdminCustomersPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Customer Management</h1>
      <Card>
        <CardHeader>
          <CardTitle>Customer List</CardTitle>
        </CardHeader>
        <CardContent>
          <p>View, search, and manage all customer accounts.</p>
          {/* TODO: Implement Customer Table with filtering, status, actions */}
        </CardContent>
      </Card>
       {/* Add cards for stats/activities if needed */}
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/customers/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/dashboard/dashboard-client.tsx

"use client";

import React, { useMemo } from "react";
import { UserDto } from "@/types/auth";
import { OrganizationDto, BusinessActorDto } from "@/types/organization";
import { PageHeader } from "@/components/ui/page-header";
import { StatCard } from "@/components/dashboard/organization/stat-card";
import { DashboardCard } from "@/components/dashboard/dashboard-card";
import { Users, Building, Briefcase, CheckCircle, Clock } from "lucide-react";
import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Pie, PieChart, Cell } from "recharts";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Table, TableBody, TableCell, TableHeader, TableHead, TableRow } from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";
import Link from "next/link";
import { Button } from "@/components/ui/button";

interface SuperAdminDashboardData {
  users: UserDto[];
  organizations: OrganizationDto[];
  businessActors: BusinessActorDto[];
  error?: string | null;
}

interface SuperAdminDashboardClientPageProps {
  initialData: SuperAdminDashboardData;
}

const PIE_COLORS = ["hsl(var(--primary))", "hsl(var(--primary) / 0.8)", "hsl(var(--primary) / 0.6)", "hsl(var(--primary) / 0.4)"];

export function SuperAdminDashboardClientPage({ initialData }: SuperAdminDashboardClientPageProps) {
  const { users, organizations, businessActors } = initialData;

  const orgStatusData = useMemo(() => {
    const counts = organizations.reduce((acc, org) => {
      const status = org.status || "UNKNOWN";
      acc[status] = (acc[status] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    return Object.entries(counts).map(([name, value]) => ({ name, value }));
  }, [organizations]);

  const baTypeData = useMemo(() => {
    const counts = businessActors.reduce((acc, actor) => {
      const type = actor.type || "GUEST";
      acc[type] = (acc[type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    return Object.entries(counts).map(([name, value]) => ({ name: name.replace(/_/g, " "), value }));
  }, [businessActors]);

  const recentUsers = useMemo(() => {
    return [...users]
      .sort((a, b) => new Date(b.created_at || 0).getTime() - new Date(a.created_at || 0).getTime())
      .slice(0, 5);
  }, [users]);

  return (
    <div className="space-y-8">
      <PageHeader
        title="Platform Overview"
        description="A comprehensive, real-time view of all system activities and entities."
      />

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        <StatCard title="Total Users" value={users.length.toLocaleString()} icon={Users} description={`${users.filter(u => u.is_enabled).length} active`} />
        <StatCard title="Total Organizations" value={organizations.length.toLocaleString()} icon={Building} description={`${organizations.filter(o => o.status === "ACTIVE").length} active`} />
        <StatCard title="Business Actors" value={businessActors.length.toLocaleString()} icon={Briefcase} description="Total professional profiles" />
      </div>

      <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
        <DashboardCard title="Organization Status" description="Distribution of organizations by their current status." icon={CheckCircle}>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie data={orgStatusData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={100} labelLine={false} label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}>
                  {orgStatusData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={PIE_COLORS[index % PIE_COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip contentStyle={{ backgroundColor: "hsl(var(--background))", border: "1px solid hsl(var(--border))" }} />
              </PieChart>
            </ResponsiveContainer>
        </DashboardCard>
        <DashboardCard title="Business Actor Types" description="Breakdown of business actors by their primary role." icon={Briefcase}>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={baTypeData} layout="vertical" margin={{ left: 20, right: 20 }}>
                  <CartesianGrid strokeDasharray="3 3" horizontal={false} />
                  <XAxis type="number" stroke="#888888" fontSize={12} />
                  <YAxis type="category" dataKey="name" stroke="#888888" fontSize={12} width={120} tickLine={false} axisLine={false} />
                  <Tooltip cursor={{ fill: 'hsl(var(--muted))' }} contentStyle={{ backgroundColor: "hsl(var(--background))", border: "1px solid hsl(var(--border))" }} />
                  <Bar dataKey="value" fill="hsl(var(--primary))" radius={[0, 4, 4, 0]} name="Count" barSize={25} />
              </BarChart>
            </ResponsiveContainer>
        </DashboardCard>
      </div>

      <DashboardCard title="Recently Registered Users" description="The latest users to join the platform." icon={Users}>
        <ScrollArea className="h-[300px]">
            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHead>User</TableHead>
                        <TableHead>Username</TableHead>
                        <TableHead>Registered On</TableHead>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    {recentUsers.map(user => {
                        const name = `${user.first_name || ''} ${user.last_name || ''}`.trim();
                        return (
                            <TableRow key={user.id}>
                                <TableCell>
                                    <div className="flex items-center gap-3">
                                        <Avatar className="h-9 w-9"><AvatarFallback>{name.charAt(0) || 'U'}</AvatarFallback></Avatar>
                                        <div className="font-medium">{name}</div>
                                    </div>
                                </TableCell>
                                <TableCell className="text-muted-foreground">{user.username}</TableCell>
                                <TableCell className="text-muted-foreground">{new Date(user.created_at!).toLocaleDateString()}</TableCell>
                            </TableRow>
                        );
                    })}
                </TableBody>
            </Table>
        </ScrollArea>
      </DashboardCard>

    </div>
  );
}
// END OF FILE: app/(dashboard)/super-admin/dashboard/dashboard-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/dashboard/page.tsx

import { Metadata } from "next";
import { authRepository } from "@/lib/data-repo/auth";
import { organizationRepository } from "@/lib/data-repo/organization";
import { SuperAdminDashboardClientPage } from "./dashboard-client";

export const metadata: Metadata = {
  title: "Super Admin Dashboard",
  description: "Platform-wide overview of all users, organizations, and activities.",
};

// This page can be cached and revalidated periodically
export const revalidate = 300; // 5 minutes

async function getDashboardData() {
  try {
    const [users, organizations, businessActors] = await Promise.all([
      authRepository.getAllUsers(),
      organizationRepository.getAllOrganizations(),
      organizationRepository.getAllBusinessActors(),
    ]);

    return {
      users: users || [],
      organizations: organizations || [],
      businessActors: businessActors || [],
      error: null,
    };
  } catch (error: any) {
    console.error("Super Admin Dashboard data fetching error:", error);
    return { users: [], organizations: [], businessActors: [], error: "Failed to load platform data." };
  }
}

export default async function SuperAdminDashboardPage() {
  const initialData = await getDashboardData();
  return <SuperAdminDashboardClientPage initialData={initialData} />;
}
// END OF FILE: app/(dashboard)/super-admin/dashboard/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/platforms/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function SuperAdminPlatformsPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Platform Management</h1>
       <Tabs defaultValue="stats" className="space-y-4">
            <TabsList>
                <TabsTrigger value="stats">Stats & Analytics</TabsTrigger>
                <TabsTrigger value="activities">Activities</TabsTrigger>
                <TabsTrigger value="subscribers">Subscribers</TabsTrigger>
                {/* Add more tabs if needed, e.g., Configuration */}
            </TabsList>
             <TabsContent value="stats">
                <Card>
                    <CardHeader><CardTitle>Platform Statistics</CardTitle></CardHeader>
                    <CardContent>
                        <p>Detailed statistics for each managed platform.</p>
                        {/* TODO: Implement platform stats display (table/charts) */}
                    </CardContent>
                </Card>
            </TabsContent>
            <TabsContent value="activities">
                <Card>
                    <CardHeader><CardTitle>Platform Activities</CardTitle></CardHeader>
                    <CardContent>
                        <p>Logs of significant activities occurring on the platforms.</p>
                        {/* TODO: Implement platform activity log viewer */}
                    </CardContent>
                </Card>
            </TabsContent>
             <TabsContent value="subscribers">
                <Card>
                    <CardHeader><CardTitle>Platform Subscribers</CardTitle></CardHeader>
                    <CardContent>
                        <p>Overview of subscribers (BAs, Customers) per platform.</p>
                        {/* TODO: Implement subscriber overview */}
                    </CardContent>
                </Card>
            </TabsContent>
       </Tabs>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/platforms/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/profile/page.tsx

// import React from 'react';
import { redirect } from 'next/navigation';

export default function SuperAdminProfilePage() {
  // Adjust the target tab if needed (e.g., using query params if implemented)
  redirect('/super-admin/settings');

  // Or, if you want a dedicated page, keep simple content:
  /*
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Admin Profile</h1>
      <p>This page displays admin profile details. Consider consolidating with Settings.</p>
      {}
    </div>
  );
  */
}
// END OF FILE: app/(dashboard)/super-admin/profile/page.tsx// END OF FILE: app/(dashboard)/super-admin/profile/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/roles/page.tsx

import { Metadata } from "next";
import { RolesClientPage } from "./roles-client";
import { authRepository } from "@/lib/data-repo/auth";

export const metadata: Metadata = {
  title: "Role & Permission Management",
  description: "Administer user roles and their associated permissions.",
};

export default async function SuperAdminRolesPage() {
  const [roles, permissions] = await Promise.all([
    authRepository.getRoles().catch(() => []),
    authRepository.getAllPermissions().catch(() => [])
  ]);
  return <RolesClientPage initialRoles={roles} initialPermissions={permissions} />;
}
// END OF FILE: app/(dashboard)/super-admin/roles/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/roles/roles-client.tsx

"use client";

import React, { useState, useEffect, useMemo } from "react";
import { RoleDto, PermissionDto } from "@/types/auth";
import { authRepository } from "@/lib/data-repo/auth";
import { PageHeader } from "@/components/ui/page-header";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { toast } from "sonner";
import { Loader2, ShieldCheck, PlusCircle } from "lucide-react";
import { cn } from "@/lib/utils";

export function RolesClientPage({
  initialRoles,
  initialPermissions,
}: {
  initialRoles: RoleDto[];
  initialPermissions: PermissionDto[];
}) {
  const [roles, setRoles] = useState<RoleDto[]>(initialRoles);
  const [permissions, setPermissions] =
    useState<PermissionDto[]>(initialPermissions);
  const [selectedRole, setSelectedRole] = useState<RoleDto | null>(
    initialRoles[0] || null
  );
  const [assignedPermissions, setAssignedPermissions] = useState<Set<string>>(
    new Set()
  );
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (selectedRole) {
      const rolePermissions = new Set(
        [selectedRole.name]?.map((p) => p!) || []
      );
      setAssignedPermissions(rolePermissions);
    }
  }, [selectedRole]);

  const handlePermissionToggle = (permissionId: string) => {
    setAssignedPermissions((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(permissionId)) {
        newSet.delete(permissionId);
      } else {
        newSet.add(permissionId);
      }
      return newSet;
    });
  };

  const handleSaveChanges = async () => {
    if (!selectedRole || !selectedRole.id) return;
    setIsLoading(true);

    const originalPermissions = new Set(
      [selectedRole.name]?.map((p) => p!) || []
    );
    const permissionsToAssign = Array.from(assignedPermissions).filter(
      (p) => !originalPermissions.has(p)
    );
    const permissionsToRemove = Array.from(originalPermissions).filter(
      (p) => !assignedPermissions.has(p)
    );

    try {
      if (permissionsToAssign.length > 0) {
        await authRepository.assignPermissionsToRole(
          selectedRole.id,
          permissionsToAssign
        );
      }
      if (permissionsToRemove.length > 0) {
        await authRepository.removePermissionsFromRole(
          selectedRole.id,
          permissionsToRemove
        );
      }
      toast.success(
        `Permissions for role "${selectedRole.name}" updated successfully.`
      );
      // Refresh data
      const updatedRoles = await authRepository.getRoles();
      setRoles(updatedRoles);
      setSelectedRole(
        updatedRoles.find((r) => r.id === selectedRole.id) || null
      );
    } catch (error: any) {
      toast.error("Failed to save changes: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <PageHeader
        title="Role Management"
        description="Assign permissions to user roles."
        action={
          <Button disabled>
            <PlusCircle className="mr-2 h-4 w-4" /> Create Role
          </Button>
        }
      />
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 items-start">
        <Card className="md:col-span-1">
          <CardHeader>
            <CardTitle>Roles</CardTitle>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-[60vh]">
              <div className="space-y-2">
                {roles.map((role) => (
                  <Button
                    key={role.id}
                    variant={
                      selectedRole?.id === role.id ? "secondary" : "ghost"
                    }
                    className="w-full justify-start"
                    onClick={() => setSelectedRole(role)}
                  >
                    <ShieldCheck className="mr-2 h-4 w-4" /> {role.name}
                  </Button>
                ))}
              </div>
            </ScrollArea>
          </CardContent>
        </Card>
        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle>
              Permissions for: {selectedRole ? `"${selectedRole.name}"` : "..."}
            </CardTitle>
            <CardDescription>
              Select the permissions this role should have.
            </CardDescription>
          </CardHeader>
          <CardContent>
            {selectedRole ? (
              <ScrollArea className="h-[60vh]">
                <div className="space-y-4">
                  {permissions.map((permission) => (
                    <div
                      key={permission.id}
                      className="flex items-center space-x-3 rounded-md border p-3"
                    >
                      <Checkbox
                        id={`perm-${permission.id}`}
                        checked={assignedPermissions.has(permission.id!)}
                        onCheckedChange={() =>
                          handlePermissionToggle(permission.id!)
                        }
                      />
                      <Label
                        htmlFor={`perm-${permission.id}`}
                        className="font-medium cursor-pointer"
                      >
                        {permission.name}
                        <p className="text-xs text-muted-foreground font-normal">
                          {permission.description}
                        </p>
                      </Label>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            ) : (
              <div className="h-[60vh] flex items-center justify-center text-muted-foreground">
                Select a role to see its permissions.
              </div>
            )}
          </CardContent>
          {selectedRole && (
            <CardFooter className="border-t pt-6">
              <Button onClick={handleSaveChanges} disabled={isLoading}>
                {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                Save Changes
              </Button>
            </CardFooter>
          )}
        </Card>
      </div>
    </div>
  );
}
// END OF FILE: app/(dashboard)/super-admin/roles/roles-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/users/page.tsx

import { Metadata } from "next";
import { UsersClientPage } from "./users-client";
import { authRepository } from "@/lib/data-repo/auth";

export const metadata: Metadata = {
  title: "User Management",
  description: "Administer all user accounts on the platform.",
};

export default async function SuperAdminUsersPage() {
  // Fetch initial data on the server
  const initialData = await authRepository.getAllUsers().catch(() => []);
  return <UsersClientPage initialData={initialData} />;
}
// END OF FILE: app/(dashboard)/super-admin/users/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/users/users-client.tsx

"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { authRepository } from "@/lib/data-repo/auth";
import { UserDto } from "@/types/auth";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { PlusCircle, Users, Search as SearchIcon } from "lucide-react";
import { getUserColumns } from "@/components/admin/users/columns";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";

const statusOptions = [{ value: "true", label: "Enabled" }, { value: "false", label: "Disabled" }];

export function UsersClientPage({ initialData }: { initialData: UserDto[] }) {
  const [users, setUsers] = useState<UserDto[]>(initialData);
  const [isLoading, setIsLoading] = useState(initialData.length === 0);
  const [error, setError] = useState<string | null>(null);

  const refreshData = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const data = await authRepository.getAllUsers();
      setUsers(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load users.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    if (initialData.length === 0) {
      refreshData();
    }
  }, [initialData, refreshData]);

  const handleEditUser = (user: UserDto) => toast.info(`Editing for ${user.username} is not yet implemented.`);
  const handleDeleteUsers = (users: UserDto[]) => toast.error(`Deletion of ${users.length} user(s) is not yet implemented.`);

  const columns = useMemo<ColumnDef<UserDto>[]>(() => getUserColumns({ onEditAction: handleEditUser }), []);

  return (
    <ResourceDataTable
      data={users}
      columns={columns}
      isLoading={isLoading}
      error={error}
      onRefreshAction={refreshData}
      searchPlaceholder="Search users by name, email, or username..."
      onDeleteItemsAction={handleDeleteUsers}
      viewModeStorageKey="admin-users-view-mode"
      exportFileName="platform_users.csv"
      pageHeader={<PageHeader title="User Management" description="View and manage all user accounts on the platform." action={<Button disabled><PlusCircle className="mr-2 h-4 w-4" /> Add User</Button>} />}
      filterControls={(table) => <DataTableFacetedFilter column={table.getColumn("is_enabled")} title="Status" options={statusOptions} />}
      renderGridItemAction={(user) => <div>Card view not implemented for users.</div>}
      emptyState={<FeedbackCard icon={Users} title="No Users Found" description="This is unusual. There should at least be an admin user." />}
      filteredEmptyState={<FeedbackCard icon={SearchIcon} title="No Users Found" description="Your search did not match any users." />}
    />
  );
}
// END OF FILE: app/(dashboard)/super-admin/users/users-client.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin/webhooks/page.tsx

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function SuperAdminWebhooksPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Webhooks Configuration</h1>
      <Card>
        <CardHeader>
          <CardTitle>Platform Webhooks</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Configure global or platform-wide webhook settings and monitor deliveries.</p>
          {/* TODO: Implement Super Admin webhook configuration interface and logs */}
        </CardContent>
      </Card>
    </div>
  );
}// END OF FILE: app/(dashboard)/super-admin/webhooks/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/welcome/page.tsx

"use client";

import React from "react";
import { useRouter } from "next/navigation";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ArrowRight, Briefcase, ShoppingBag } from "lucide-react";
import { useSession } from "next-auth/react";
import { PageHeader } from "@/components/ui/page-header";

export default function WelcomePage() {
  const router = useRouter();
  const { data: session } = useSession();

  const handleChoice = (path: string) => {
    router.push(path);
  };

  return (
    <div className="container mx-auto flex flex-col items-center justify-center min-h-[calc(100vh-10rem)]">
      <PageHeader
        title={`Welcome, ${session?.user?.first_name || "User"}!`}
        description="Let's get you started. What would you like to do first?"
        className="text-center mb-12"
      />
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl w-full">
        <Card className="hover:shadow-xl hover:border-primary/50 transition-all duration-300">
          <CardHeader>
            <ShoppingBag className="h-10 w-10 text-primary mb-4" />
            <CardTitle className="text-2xl">Explore Services</CardTitle>
            <CardDescription>
              I'm here to browse services, make reservations, and manage my
              personal account.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button
              className="w-full"
              onClick={() => handleChoice("/dashboard")}
            >
              Go to My Dashboard <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </CardContent>
        </Card>

        <Card className="hover:shadow-xl hover:border-primary/50 transition-all duration-300">
          <CardHeader>
            <Briefcase className="h-10 w-10 text-primary mb-4" />
            <CardTitle className="text-2xl">Manage a Business</CardTitle>
            <CardDescription>
              I want to list my organization, manage agencies, add products, and
              access business tools.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button
              className="w-full"
              onClick={() => handleChoice("/business-actor/onboarding")}
            >
              Set Up Business Profile <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
// END OF FILE: app/(dashboard)/welcome/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/globals.css

@import "tailwindcss";

/* Define the custom variant for dark mode (unchanged) */
@custom-variant dark (&:is(.dark *));

/* Keep existing fade-in-up animation */
@layer utilities {
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(10px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 0.5s ease-out forwards;
  }
}

/* @theme inline - Retained for build tool compatibility */
@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

/* --- Light Theme --- */
:root {
  --radius: 0.75rem;

  /* Base: Soft, off-white background with strong text contrast */
  --background: oklch(98.5% 0.005 240);
  /* Almost white, slightly cool */
  --foreground: oklch(25% 0.03 255);
  /* Dark, saturated slate blue for text */

  /* Cards & Popovers: Clean white, stands out from the background */
  --card: oklch(100% 0 0);
  --card-foreground: var(--foreground);
  --popover: var(--card);
  --popover-foreground: var(--card-foreground);

  /* Primary: A vibrant, modern blue for main actions */
  --primary: oklch(58% 0.18 260);
  /* A confident, slightly purplish blue */
  --primary-foreground: oklch(99% 0.01 260);
  /* Bright white for high contrast on blue */

  /* Secondary: For secondary buttons and less important interactive elements */
  --secondary: oklch(94% 0.015 250);
  /* Light, cool gray */
  --secondary-foreground: oklch(35% 0.03 255);
  /* Dark slate for text on secondary bg */

  /* Muted: For subtle backgrounds and text */
  --muted: oklch(96% 0.01 245);
  /* Very light gray, almost blends with background */
  --muted-foreground: oklch(55% 0.025 250);
  /* Mid-tone slate for placeholder text */

  /* Accent: For hover states on lists and other subtle interactions */
  --accent: oklch(95% 0.015 250);
  /* Same as secondary for consistency */
  --accent-foreground: var(--secondary-foreground);

  /* Destructive: A clear, accessible red */
  --destructive: oklch(65% 0.22 25);
  /* Strong, clear red */
  --destructive-foreground: oklch(99% 0.01 25);

  /* Borders & Inputs: Clear distinction for form fields */
  --border: oklch(90% 0.02 250);
  /* A visible but not overpowering border */
  --input: oklch(97% 0.01 240);
  /* Slightly darker than card to show it's a field */
  --ring: oklch(60% 0.2 260 / 70%);
  /* A vivid focus ring using the primary color */

  /* Charts: A vibrant, data-friendly palette */
  --chart-1: oklch(70% 0.18 155);
  /* Teal */
  --chart-2: oklch(65% 0.22 285);
  /* Magenta */
  --chart-3: oklch(75% 0.18 55);
  /* Amber */
  --chart-4: oklch(60% 0.18 225);
  /* Sky Blue */
  --chart-5: oklch(80% 0.15 105);
  /* Lime */

  /* Sidebar: Slightly different from main background for clear separation */
  --sidebar: oklch(97% 0.01 245);
  --sidebar-foreground: var(--foreground);
  --sidebar-border: var(--border);
  --sidebar-accent: oklch(58% 0.18 260 / 15%);
  /* Primary color with low opacity */
  --sidebar-accent-foreground: var(--primary);
  --sidebar-ring: var(--ring);
}

/* --- Dark Theme --- */
.dark {
  --radius: 0.75rem;

  /* Base: Deep, dark slate background */
  --background: oklch(15% 0.02 255);
  /* Very dark, slightly saturated blue-slate */
  --foreground: oklch(95% 0.01 240);
  /* Bright, slightly cool text */

  /* Cards & Popovers: A distinct, lighter layer */
  --card: oklch(20% 0.025 255);
  /* A step up from the background */
  --card-foreground: var(--foreground);
  --popover: var(--card);
  --popover-foreground: var(--card-foreground);

  /* Primary: A brighter, more energetic blue for dark mode */
  --primary: oklch(70% 0.2 260);
  --primary-foreground: oklch(15% 0.03 260);
  /* Dark blue for text on bright blue bg */

  /* Secondary: For secondary buttons and interactive elements */
  --secondary: oklch(30% 0.03 255);
  --secondary-foreground: oklch(97% 0.01 250);

  /* Muted: For subtle backgrounds and text */
  --muted: oklch(25% 0.028 250);
  --muted-foreground: oklch(65% 0.03 250);

  /* Accent: For hover states */
  --accent: oklch(28% 0.03 255);
  --accent-foreground: var(--secondary-foreground);

  /* Destructive: A vivid red that stands out on dark backgrounds */
  --destructive: oklch(65% 0.24 25);
  --destructive-foreground: oklch(99% 0.01 25);

  /* Borders & Inputs: Clear but not harsh */
  --border: oklch(35% 0.03 250 / 80%);
  /* Slightly transparent to blend */
  --input: oklch(22% 0.028 250);
  /* A distinct input field color */
  --ring: oklch(75% 0.2 260 / 70%);
  /* Bright focus ring */

  /* Charts: Bright and vibrant for dark backgrounds */
  --chart-1: oklch(75% 0.18 155);
  --chart-2: oklch(70% 0.22 285);
  --chart-3: oklch(80% 0.18 55);
  --chart-4: oklch(65% 0.18 225);
  --chart-5: oklch(85% 0.15 105);

  /* Sidebar: Matches the main background for a unified feel */
  --sidebar: var(--background);
  --sidebar-foreground: var(--foreground);
  --sidebar-border: var(--border);
  --sidebar-accent: oklch(70% 0.2 260 / 15%);
  --sidebar-accent-foreground: var(--primary);
  --sidebar-ring: var(--ring);
}

/* --- Base Styles --- */
@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground antialiased;
    @apply transition-colors duration-200 ease-in-out;
  }

  /* Enhanced input styles for better readability and distinction */
  input,
  textarea,
  select {
    @apply bg-input text-foreground border-border;
    @apply focus:ring-2 focus:ring-ring focus:outline-none focus:border-primary/50;
    @apply placeholder:text-muted-foreground;
    @apply rounded-md px-3 py-2;
  }

  .bg-grid-pattern {
    background-image: linear-gradient(to right, hsl(var(--border) / 0.1) 1px, transparent 1px),
      linear-gradient(to bottom, hsl(var(--border) / 0.1) 1px, transparent 1px);
    background-size: 20px 20px;
  }
}

@layer utilities {
  @keyframes shine {
    from {
      transform: translateX(-100%) skewX(-20deg);
    }

    to {
      transform: translateX(250%) skewX(-20deg);
    }
  }
}

.scrollbar-hide::-webkit-scrollbar {
  display: none;
}

/* Hide scrollbar for IE, Edge and Firefox */
.scrollbar-hide {
  -ms-overflow-style: none;
  /* IE and Edge */
  scrollbar-width: none;
  /* Firefox */
}// END OF FILE: app/globals.css

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/globals.old.css

/* @import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@layer utilities {
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(10px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 0.5s ease-out forwards;
  }
}


@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.141 0.005 285.823);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.141 0.005 285.823);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.141 0.005 285.823);
  --primary: oklch(0.21 0.006 285.885);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.967 0.001 286.375);
  --secondary-foreground: oklch(0.21 0.006 285.885);
  --muted: oklch(0.967 0.001 286.375);
  --muted-foreground: oklch(0.552 0.016 285.938);
  --accent: oklch(0.967 0.001 286.375);
  --accent-foreground: oklch(0.21 0.006 285.885);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.92 0.004 286.32);
  --input: oklch(0.92 0.004 286.32);
  --ring: oklch(0.705 0.015 286.067);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.141 0.005 285.823);
  --sidebar-primary: oklch(0.21 0.006 285.885);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.967 0.001 286.375);
  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);
  --sidebar-border: oklch(0.92 0.004 286.32);
  --sidebar-ring: oklch(0.705 0.015 286.067);
}

.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.21 0.006 285.885);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.21 0.006 285.885);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.92 0.004 286.32);
  --primary-foreground: oklch(0.21 0.006 285.885);
  --secondary: oklch(0.274 0.006 286.033);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.274 0.006 286.033);
  --muted-foreground: oklch(0.705 0.015 286.067);
  --accent: oklch(0.274 0.006 286.033);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.552 0.016 285.938);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.006 285.885);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.274 0.006 286.033);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.552 0.016 285.938);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }

  body {
    @apply bg-background text-foreground;
  }
} */

@import "tailwindcss";
/* Consider removing tw-animate-css if not actively used or if using tailwindcss-animate */
/* @import "tw-animate-css"; */

/* Define the custom variant for dark mode (keep as is) */
@custom-variant dark (&:is(.dark *));

/* Keep existing fade-in-up animation */
@layer utilities {
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(10px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 0.5s ease-out forwards;
  }
}

/* @theme inline - This block seems specific to a build tool/plugin.
   Keep this block if your build process relies on it. */
@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  /* Assuming these font vars are set elsewhere */
  --font-mono: var(--font-geist-mono);
  /* Assuming these font vars are set elsewhere */
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  /* Remove sidebar-primary? Not used often, accent usually covers active state */
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

/* --- Light Theme --- */
:root {
  /* Slightly larger radius for a softer feel */
  --radius: 0.75rem;
  /* 12px */

  /* Base */
  --background: oklch(0.985 0.006 240);
  /* Very light, slightly cool grey */
  --foreground: oklch(0.25 0.03 245);
  /* Dark, slightly muted blue-grey */

  /* Cards & Popovers - Slightly elevated */
  --card: oklch(1 0 0);
  /* Pure white */
  --card-foreground: var(--foreground);
  --popover: var(--card);
  --popover-foreground: var(--card-foreground);

  /* Primary - A confident, modern blue */
  --primary: oklch(0.5 0.16 255);
  /* Vibrant but deep blue */
  --primary-foreground: oklch(0.98 0.01 255);
  /* Very light, almost white */

  /* Secondary - Subtle interaction background */
  --secondary: oklch(0.94 0.02 250);
  /* Light cool grey, distinct from bg */
  --secondary-foreground: oklch(0.35 0.04 250);
  /* Slightly darker than main fg */

  /* Muted - For less important text/elements */
  --muted: oklch(0.95 0.015 240);
  /* Very similar to secondary */
  --muted-foreground: oklch(0.55 0.03 245);
  /* Mid-tone blue-grey */

  /* Accent - For hover states, active tabs (can be same as secondary or slightly different) */
  --accent: var(--secondary);
  --accent-foreground: var(--secondary-foreground);

  /* Destructive - Standard red */
  --destructive: oklch(0.6 0.2 25);
  /* Clear red */
  --destructive-foreground: oklch(0.98 0.01 25);
  /* Light text for contrast */

  /* Borders & Inputs */
  --border: oklch(0.9 0.02 245);
  /* Soft, slightly visible cool grey */
  --input: oklch(0.96 0.01 245);
  /* Slightly darker than background for inputs */
  --ring: oklch(0.6 0.1 255 / 70%);
  /* Primary color for focus rings, slightly transparent */

  /* Charts - A vibrant, distinct palette */
  --chart-1: oklch(0.7 0.18 150);
  /* Teal */
  --chart-2: oklch(0.65 0.2 280);
  /* Purple */
  --chart-3: oklch(0.75 0.15 50);
  /* Orange */
  --chart-4: oklch(0.6 0.15 220);
  /* Sky Blue */
  --chart-5: oklch(0.8 0.1 100);
  /* Lime Green */

  /* Sidebar - Slightly different background, uses primary for accent */
  --sidebar: oklch(0.96 0.01 245);
  /* Slightly darker/cooler than main background */
  --sidebar-foreground: var(--foreground);
  --sidebar-border: var(--border);
  /* Use Primary for active/hover states in sidebar */
  --sidebar-accent: oklch(0.5 0.16 255 / 15%);
  /* Primary color, low opacity bg */
  --sidebar-accent-foreground: var(--primary);
  /* Primary color text */
  --sidebar-ring: var(--ring);
  /* --sidebar-primary: var(--primary); */
  /* Removed - accent covers it */
  /* --sidebar-primary-foreground: var(--primary-foreground); */
  /* Removed */
}

/* --- Dark Theme --- */
.dark {
  /* Use same radius */
  --radius: 0.75rem;

  /* Base - Deep, cool background */
  --background: oklch(0.18 0.025 245);
  /* Very dark, slightly saturated blue */
  --foreground: oklch(0.92 0.015 240);
  /* Light grey, slightly cool */

  /* Cards & Popovers - Slightly lighter than background */
  --card: oklch(0.22 0.03 245);
  /* A bit lighter dark blue */
  --card-foreground: var(--foreground);
  --popover: var(--card);
  --popover-foreground: var(--card-foreground);

  /* Primary - Brighter, more vibrant for dark mode */
  --primary: oklch(0.7 0.18 255);
  /* Brighter, saturated blue */
  --primary-foreground: oklch(0.15 0.03 255);
  /* Very dark blue for contrast */

  /* Secondary - Subtle interaction background */
  --secondary: oklch(0.28 0.04 250);
  /* Darker cool tone, distinct from bg */
  --secondary-foreground: oklch(0.95 0.01 250);
  /* Slightly brighter than main fg */

  /* Muted - For less important text/elements */
  --muted: oklch(0.26 0.03 245);
  /* Similar to secondary */
  --muted-foreground: oklch(0.65 0.04 245);
  /* Mid-tone grey-blue */

  /* Accent - For hover states, active tabs */
  --accent: var(--secondary);
  --accent-foreground: var(--secondary-foreground);

  /* Destructive */
  --destructive: oklch(0.65 0.22 25);
  /* Brighter red for dark mode */
  --destructive-foreground: oklch(0.98 0.01 25);
  /* Light text for contrast */

  /* Borders & Inputs - Use subtle transparency or slightly offset colors */
  --border: oklch(0.3 0.04 245 / 70%);
  /* Translucent darker blue-grey */
  --input: oklch(0.24 0.03 245);
  /* Slightly darker than card */
  --ring: oklch(0.75 0.15 255 / 70%);
  /* Brighter primary for focus rings, slightly transparent */

  /* Charts - Adjust for dark background, maintain vibrancy */
  --chart-1: oklch(0.75 0.17 150);
  /* Teal */
  --chart-2: oklch(0.7 0.19 280);
  /* Purple */
  --chart-3: oklch(0.8 0.14 50);
  /* Orange */
  --chart-4: oklch(0.65 0.14 220);
  /* Sky Blue */
  --chart-5: oklch(0.85 0.09 100);
  /* Lime Green */

  /* Sidebar - Matches main background, uses primary accent */
  --sidebar: var(--background);
  /* Match main dark background */
  --sidebar-foreground: var(--foreground);
  --sidebar-border: var(--border);
  /* Use Primary for active/hover states in sidebar */
  --sidebar-accent: oklch(0.7 0.18 255 / 15%);
  /* Primary color, low opacity bg */
  --sidebar-accent-foreground: var(--primary);
  /* Primary color text */
  --sidebar-ring: var(--ring);
  /* --sidebar-primary: var(--primary); */
  /* Removed */
  /* --sidebar-primary-foreground: var(--primary-foreground); */
  /* Removed */
}

/* --- Base Styles --- */
@layer base {
  * {
    /* Apply the subtle border defined in variables */
    @apply border-border;
    /* Remove the default browser outline and rely on the focus ring variable */
    /* The outline-ring/50 might be too light, rely on the --ring variable via focus-visible utilities */
    /* outline: none; */
  }

  body {
    @apply bg-background text-foreground;
    /* Smoother font rendering */
    @apply antialiased;
    /* Optional: Add a subtle transition for theme changes */
    @apply transition-colors duration-200 ease-in-out;
  }

  /* Optional: Enhance base input/button styles if needed */
  /* Example: Apply base input background universally */
  input,
  textarea,
  select {
    @apply bg-input;
  }

  .bg-grid-pattern {
    background-image: linear-gradient(to right, hsl(var(--border) / 0.07) 1px, transparent 1px),
      linear-gradient(to bottom, hsl(var(--border) / 0.07) 1px, transparent 1px);
    background-size: 20px 20px;
  }
}// END OF FILE: app/globals.old.css

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/layout.tsx

import "./globals.css";
import type { Metadata } from "next"; // [ADD] Import Metadata type
import type React from "react";
import { Montserrat } from "next/font/google";
import { ThemeProvider } from "next-themes";
import { Toaster } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { SettingsProvider } from "@/contexts/settings-context";
import { SessionProvider } from "@/components/providers/session-provider";
import { cn } from "@/lib/utils";

const montserrat = Montserrat({
  subsets: ["latin"],
  display: "swap",
  variable: "--font-montserrat",
});

// [ADD] Add root metadata object
export const metadata: Metadata = {
  title: {
    default: "YowYob Dashboard",
    template: "%s | YowYob",
  },
  description:
    "The Command Center for Your Business. Unify organization management, customer relations, and secure administration on one platform.",
  keywords: [
    "business management",
    "CRM",
    "organization tool",
    "SaaS",
    "YowYob",
    "agency management",
  ],
  openGraph: {
    title: "YowYob Dashboard",
    description: "The Command Center for Your Business.",
    url: process.env.NEXT_PUBLIC_URL || "http://localhost:3000",
    siteName: "YowYob",
    images: [
      {
        url: `${process.env.NEXT_PUBLIC_URL}/og-image.png`, // It's conventional to have an OG image in /public
        width: 1200,
        height: 630,
      },
    ],
    locale: "en_US",
    type: "website",
  },
  twitter: {
    card: "summary_large_image",
    title: "YowYob Dashboard",
    description: "The Command Center for Your Business.",
    images: [`${process.env.NEXT_PUBLIC_URL}/og-image.png`],
  },
  icons: {
    icon: "/favicon.ico",
    shortcut: "/favicon-16x16.png",
    apple: "/apple-touch-icon.png",
  },
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={cn(
          "antialiased min-h-screen flex flex-col font-sans",
          montserrat.variable
        )}
      >
        <SessionProvider>
          <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
            <SettingsProvider>
              <TooltipProvider delayDuration={0}>
                <div className="relative flex-1">{children}</div>
                <Toaster position="top-right" richColors closeButton />
              </TooltipProvider>
            </SettingsProvider>
          </ThemeProvider>
        </SessionProvider>
      </body>
    </html>
  );
}
// END OF FILE: app/layout.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/not-found.tsx

import { getServerSession } from "next-auth/next";
import { AlertTriangle } from "lucide-react"; // Using a more relevant icon

import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { NotFoundButtons } from "@/components/not-found-buttons";

export default async function NotFound() {
  const session = await getServerSession(authOptions);
  const isAuthenticated = !!session;

  // Determine primary link props (remains same)
  const primaryLinkHref = isAuthenticated ? "/business-actor/dashboard" : "/";
  const primaryLinkText = isAuthenticated
    ? "Return to Dashboard"
    : "Go to Homepage";

  return (
    // Consistent background with auth pages
    <div className="flex min-h-screen flex-col items-center justify-center p-8 text-center bg-gradient-to-br from-background via-background to-muted/30 dark:to-muted/10">
      {/* Card styling similar to AuthCardWrapper, apply animation */}
      <div className="max-w-lg w-full rounded-xl bg-card p-8 sm:p-10 shadow-xl border border-border/60 space-y-6 animate-fade-in-up">
        <AlertTriangle className="mx-auto h-16 w-16 text-destructive opacity-70" />{" "}
        {/* Changed Icon and color */}
        <h1 className="text-6xl font-extrabold tracking-tighter text-destructive lg:text-8xl">
          404
        </h1>
        <h2 className="text-2xl font-semibold tracking-tight text-foreground sm:text-3xl">
          Page Not Found
        </h2>
        <p className="text-base text-muted-foreground">
          Sorry, the page you requested could not be found. It might have been
          moved, deleted, or the URL might be incorrect.
        </p>
        {/* Use the Client Component for buttons */}
        <NotFoundButtons
          isAuthenticated={isAuthenticated}
          primaryLinkHref={primaryLinkHref}
          primaryLinkText={primaryLinkText}
        />
      </div>
      <p className="mt-12 text-xs text-muted-foreground animate-fade-in-up [animation-delay:0.2s]">
        If you believe this is an error, please{" "}
        <a href="/help" className="underline hover:text-primary">
          contact support
        </a>
        . {/* Added link */}
      </p>
    </div>
  );
}
// END OF FILE: app/not-found.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/page.tsx

"use client";

import React from "react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { ModeToggle } from "@/components/mode-toggle";
import {
  ArrowRight,
  ShieldCheck,
  Zap,
  Workflow,
  Building2,
  User,
  ShieldAlert,
  Cpu,
  Layers,
  BarChart3,
  GlobeLock,
  MessageCircleCode,
  Sparkles,
  ChevronRight,
  HeartHandshake,
  LayoutTemplate,
} from "lucide-react";
import { cn } from "@/lib/utils";
import Image from "next/image";

// Main Landing Page Component
export default function LandingPage() {
  return (
    <div className="flex min-h-screen w-full flex-col items-center bg-background text-foreground overflow-x-hidden">
      {/* --- TOP NAVIGATION BAR --- */}
      <header className="fixed top-0 left-0 right-0 z-50 border-b bg-background/80 backdrop-blur-sm">
        <div className="container mx-auto flex h-16 items-center justify-between px-4">
          <Link href="/" className="flex items-center gap-2 font-bold text-lg">
            <Image src={"/logo.svg"} width={32} height={32} alt="Logo" />
            <span>YowYob</span>
          </Link>
          <nav className="hidden items-center gap-6 md:flex">
            <Link
              href="/pricing"
              className="text-sm font-medium text-muted-foreground transition-colors hover:text-primary"
            >
              Pricing
            </Link>

          </nav>
          <div className="flex items-center gap-2">
            <ModeToggle />
            <Button asChild className="hidden sm:flex">
              <Link href="/login">Get Started</Link>
            </Button>
          </div>
        </div>
      </header>

      {/* Background Grid Pattern */}
      <div className="absolute inset-0 -z-10 h-full w-full bg-white dark:bg-black bg-[linear-gradient(to_right,#8080800a_1px,transparent_1px),linear-gradient(to_bottom,#8080800a_1px,transparent_1px)] bg-[size:32px_32px]">
        <div className="absolute left-0 right-0 top-0 -z-10 m-auto h-[410px] w-[410px] rounded-full bg-primary/10 blur-3xl dark:bg-primary/20"></div>
      </div>

      <main className="w-full">
        {/* --- HERO SECTION --- */}
        <section className="container mx-auto mt-16 px-4 pt-20 text-center md:pt-32 md:text-left">
          <div className="grid grid-cols-1 gap-12 md:grid-cols-2">
            <div className="flex flex-col items-center justify-center md:items-start">
              <Image src={"/logo.svg"} width={120} height={120} alt="Logo" />
              <h1 className="text-4xl font-extrabold tracking-tight text-foreground sm:text-5xl lg:text-6xl">
                The Command Center
                <br />
                <span className="bg-gradient-to-br from-primary via-primary/80 to-blue-400 bg-clip-text text-transparent">
                  for Your Business
                </span>
              </h1>
              <p className="mx-auto mt-6 max-w-xl text-lg text-muted-foreground md:mx-0">
                Stop juggling multiple apps. YowYob integrates your entire
                business—from organization management and customer relations to
                secure administration—into one intelligent, unified platform.
              </p>

              <div className="mt-8 flex flex-col items-center justify-center gap-4 sm:flex-row md:justify-start">
                <Button size="lg" asChild>
                  <Link href="/login">
                    Start Building Your Business
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Link>
                </Button>
              </div>
            </div>

            <div className="relative flex h-full min-h-[300px] items-center justify-center md:min-h-[400px]">
              <div
                className={cn(
                  "group relative h-full w-full max-w-md rounded-2xl p-4",
                  "bg-gradient-to-br from-muted/50 via-background/70 to-muted/60 dark:from-slate-900/60 dark:via-slate-950/80 dark:to-slate-950/90",
                  "border border-border/60 shadow-xl"
                )}
              >
                <div className="absolute top-0 left-0 h-full w-full overflow-hidden rounded-2xl">
                  <div className="absolute top-0 -left-60 h-full w-40 -skew-x-12 animate-[shine_5s_ease-in-out_infinite] bg-white/10 dark:bg-white/5"></div>
                </div>
                <div className="flex h-8 items-center justify-start gap-1.5 rounded-t-lg bg-background/50 px-2">
                  <div className="h-2.5 w-2.5 rounded-full bg-red-500"></div>
                  <div className="h-2.5 w-2.5 rounded-full bg-yellow-400"></div>
                  <div className="h-2.5 w-2.5 rounded-full bg-green-400"></div>
                </div>
                <div className="mt-2 space-y-3 p-2">
                  <div className="h-6 w-3/4 rounded-md bg-primary/20"></div>
                  <div className="h-10 w-full rounded-md bg-muted"></div>
                  <div className="grid grid-cols-2 gap-3">
                    <div className="h-16 rounded-md bg-muted"></div>
                    <div className="h-16 rounded-md bg-muted"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* --- NEW UNIFIED WORKSPACE SECTION --- */}
        <section
          id="platform"
          className="container mx-auto mt-24 max-w-8xl px-4 md:mt-32 scroll-mt-20"
        >
          <div className="mb-12 text-center">
            <h2 className="text-3xl font-bold tracking-tight">
              One Unified Workspace
            </h2>
            <p className="mt-2 text-muted-foreground">
              Manage your entire business lifecycle from a single, secure
              environment.
            </p>
          </div>
          <div className="grid grid-cols-1 gap-8 md:grid-cols-3">
            <InfoCard
              icon={LayoutTemplate}
              title="Manage & Organize"
              description="Structure your business with tools for creating organizations, defining agencies, and managing employees. Control your entire operational hierarchy with ease."
            />
            <InfoCard
              icon={HeartHandshake}
              title="Engage & Transact"
              description="Connect with your customers, manage prospects, and handle sales. Our platform provides the tools to build relationships and close deals seamlessly."
            />
            <InfoCard
              icon={ShieldCheck}
              title="We Secure & Administer"
              description="Your data privacy is paramount. With Super Admin oversight and robust security protocols, your business environment is protected at every level."
            />
          </div>
        </section>

        {/* --- BENTO GRID FEATURE SECTION --- */}
        <section
          id="features"
          className="container mx-auto mt-24 max-w-8xl px-4 md:mt-32 scroll-mt-20"
        >
          <div className="mb-12 text-center">
            <h2 className="text-3xl font-bold tracking-tight">
              Powerful Features, Intelligently Integrated
            </h2>
            <p className="mt-2 text-muted-foreground">
              Tools designed to scale with your ambition.
            </p>
          </div>
          <div className="grid grid-cols-1 gap-4 lg:grid-cols-3 lg:grid-rows-3">
            <BentoCard
              className="lg:col-span-2 lg:row-span-2"
              title="Multi-Role Architecture"
              description="Dedicated, secure dashboards for Business Actors, Customers, and Super Admins. Provide the right tools and data to the right people, ensuring focus and security."
              icon={Layers}
              background={
                <div className="absolute -right-20 -bottom-20 opacity-20">
                  <div className="h-40 w-40 rounded-full bg-primary/50 blur-2xl"></div>
                  <div className="h-60 w-60 rounded-tl-full bg-secondary/50 blur-3xl"></div>
                </div>
              }
            />
            <BentoCard
              title="Advanced Analytics"
              description="From organization-wide revenue to agency-specific sales, get the insights you need with interactive charts."
              icon={BarChart3}
            />
            <BentoCard
              title="Blazing Fast UI"
              description="A highly responsive interface built on Next.js, optimized for speed and a seamless user experience."
              icon={Zap}
            />
            <BentoCard
              title="Custom Workflows"
              description="Automate repetitive tasks and create custom processes to fit your unique operational needs."
              icon={Workflow}
            />
            <BentoCard
              title="Centralized Security"
              description="Robust authentication, role-based access control, and platform-wide security protocols."
              icon={GlobeLock}
            />
            <BentoCard
              className="lg:col-span-2"
              title="AI-Powered Insights"
              description="Leverage machine learning to anticipate market trends, identify sales opportunities, and make smarter, data-driven decisions."
              icon={Cpu}
            />
          </div>
        </section>

        {/* --- ROLES SECTION --- */}
        <section
          id="roles"
          className="container mx-auto mt-24 max-w-8xl px-4 md:mt-32 scroll-mt-20"
        >
          <div className="mb-12 text-center">
            <h2 className="text-3xl font-bold tracking-tight">
              A Dashboard for Every Need
            </h2>
            <p className="mt-2 text-muted-foreground">
              Powerful tools tailored to your specific role.
            </p>
          </div>
          <div className="grid grid-cols-1 gap-8 md:grid-cols-3">
            <RoleCard
              icon={Building2}
              title="For Business Actors"
              description="The ultimate toolkit to build and grow. Manage your organization, define products, oversee agencies, and track performance."
            />
            <RoleCard
              icon={User}
              title="For Customers"
              description="A simple, elegant portal to engage with services, track transactions and rewards, and manage your personal profile with ease."
            />
            <RoleCard
              icon={ShieldAlert}
              title="For Super Admins"
              description="The eagle-eye view. Oversee all platform activity, manage users and roles, and ensure the system's security and integrity."
            />
          </div>
        </section>

        {/* --- FINAL CTA --- */}
        <section className="container mx-auto mt-24 max-w-4xl px-4 md:mt-32">
          <div className="relative overflow-hidden rounded-2xl bg-primary/90 p-8 text-center shadow-2xl shadow-primary/20 sm:p-12">
            <div className="absolute inset-0 bg-[url('/grid.svg')] bg-center [mask-image:linear-gradient(180deg,white,rgba(255,255,255,0))]"></div>
            <div className="relative z-10">
              <h2 className="text-3xl font-bold text-primary-foreground">
                Ready to Unify Your Business?
              </h2>
              <p className="mt-2 text-primary-foreground/80">
                Join hundreds of businesses building their future on YowYob.
                Create your free account today.
              </p>
              <Button size="lg" variant="secondary" asChild className="mt-6">
                <Link href="/signup">
                  Sign Up Now <ArrowRight className="ml-2 h-4 w-4" />
                </Link>
              </Button>
            </div>
          </div>
        </section>
      </main>

      {/* --- FOOTER --- */}
      <footer className="mt-32 w-full border-t">
        <div className="container mx-auto flex flex-col items-center justify-between gap-6 px-4 py-8 text-center text-sm text-muted-foreground md:flex-row">
          <p>© {new Date().getFullYear()} YowYob Inc. All rights reserved.</p>
          <div className="flex gap-4">
            <Link href="#" className="hover:text-primary">
              Terms
            </Link>
            <Link href="#" className="hover:text-primary">
              Privacy
            </Link>
            <Link href="#" className="hover:text-primary">
              Contact
            </Link>
          </div>
        </div>
      </footer>
    </div>
  );
}

// --- Helper Components ---

interface InfoCardProps {
  icon: React.ElementType;
  title: string;
  description: string;
}
const InfoCard = ({ icon: Icon, title, description }: InfoCardProps) => (
  <div className="rounded-xl border bg-card/50 p-6 text-center shadow-sm">
    <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-primary/10">
      <Icon className="h-6 w-6 text-primary" />
    </div>
    <h3 className="mt-4 text-xl font-semibold">{title}</h3>
    <p className="mt-2 text-muted-foreground">{description}</p>
  </div>
);

interface BentoCardProps {
  title: string;
  description: string;
  icon: React.ElementType;
  className?: string;
  background?: React.ReactNode;
}
const BentoCard = ({
  title,
  description,
  icon: Icon,
  className,
  background,
}: BentoCardProps) => (
  <div
    className={cn(
      "group relative flex flex-col justify-between overflow-hidden rounded-xl",
      "bg-card/60 p-6 shadow-lg backdrop-blur-sm",
      "border border-border/60 transition-all duration-300 hover:border-primary/80",
      className
    )}
  >
    <div>
      <div className="mb-3 flex h-10 w-10 items-center justify-center rounded-lg bg-primary/10">
        <Icon className="h-6 w-6 text-primary" />
      </div>
      <h3 className="mb-1 text-lg font-semibold text-foreground">{title}</h3>
      <p className="text-sm text-muted-foreground">{description}</p>
    </div>
    {background}
  </div>
);

interface RoleCardProps {
  icon: React.ElementType;
  title: string;
  description: string;
}
const RoleCard = ({ icon: Icon, title, description }: RoleCardProps) => (
  <div className="flex flex-col items-center text-center">
    <div className="flex h-12 w-12 items-center justify-center rounded-full border bg-muted">
      <Icon className="h-6 w-6 text-primary" />
    </div>
    <h3 className="mt-4 text-xl font-semibold">{title}</h3>
    <p className="mt-2 text-muted-foreground">{description}</p>
  </div>
);
// END OF FILE: app/page.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/robots.ts

import { MetadataRoute } from 'next';

export default function robots(): MetadataRoute.Robots {
  const siteUrl = process.env.NEXT_PUBLIC_URL || 'http://localhost:3000';

  return {
    rules: [
      {
        userAgent: '*',
        allow: '/',
        disallow: [
          '/api/',
          '/settings/',
          '/dashboard/',
          '/business-actor/',
          '/super-admin/',
        ],
      },
    ],
    sitemap: `${siteUrl}/sitemap.xml`,
  };
}// END OF FILE: app/robots.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/sitemap.ts

import { MetadataRoute } from 'next';

export default function sitemap(): MetadataRoute.Sitemap {
  const siteUrl = process.env.NEXT_PUBLIC_URL || 'http://localhost:3000';

  // List your public-facing pages here
  const publicRoutes = [
    '/',
    '/pricing',
    '/login',
    '/signup',
    '/forgot-password',
    '/help',
  ];

  const routes = publicRoutes.map((route) => ({
    url: `${siteUrl}${route}`,
    lastModified: new Date().toISOString(),
    changeFrequency: 'monthly' as const,
    priority: route === '/' ? 1 : 0.8,
  }));

  return routes;
}// END OF FILE: app/sitemap.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/changed_files.txt

diff --git a/app/(dashboard)/business-actor/agency/status/page.tsx b/app/(dashboard)/business-actor/agency/status/page.tsx
deleted file mode 100644
index 6d1d3da..0000000
--- a/app/(dashboard)/business-actor/agency/status/page.tsx
+++ /dev/null
@@ -1,16 +0,0 @@
-import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
-export default function AgencyStatusPage() {
-  return (
-    <Card>
-      <CardHeader>
-        <CardTitle>Agency Status Management</CardTitle>
-      </CardHeader>
-      <CardContent>
-        <p>
-          This page will allow managing the active/inactive status and other
-          operational states of the agency.
-        </p>
-      </CardContent>
-    </Card>
-  );
-}
diff --git a/app/api/auth/[...nextauth]/route.ts b/app/api/auth/[...nextauth]/route.ts
index a45c73a..5264b3e 100644
--- a/app/api/auth/[...nextauth]/route.ts
+++ b/app/api/auth/[...nextauth]/route.ts
@@ -1,7 +1,7 @@
 import NextAuth, { NextAuthOptions } from "next-auth";
 import CredentialsProvider from "next-auth/providers/credentials";
 import { authRepository } from "@/lib/data-repo/auth";
-import { LoginRequest } from "@/types/auth";
+import { AuthRequest } from "@/types/auth";
 import { User } from "next-auth";
 
 export const authOptions: NextAuthOptions = {
@@ -21,11 +21,11 @@ export const authOptions: NextAuthOptions = {
           throw new Error("Username and password are required.");
         }
         try {
-          const loginRequest: LoginRequest = {
+          const AuthRequest: AuthRequest = {
             username: credentials.username,
             password: credentials.password,
           };
-          const loginResponse = await authRepository.login(loginRequest);
+          const loginResponse = await authRepository.login(AuthRequest);
           if (loginResponse && loginResponse.user && loginResponse.access_token) {
             // Map the nested user and token info to the NextAuth User object
             return {
diff --git a/app/api/mock/media/[service]/[type]/[path]/[filename]/route.ts b/app/api/mock/media/[service]/[type]/[path]/[filename]/route.ts
deleted file mode 100644
index fc33eb7..0000000
--- a/app/api/mock/media/[service]/[type]/[path]/[filename]/route.ts
+++ /dev/null
@@ -1,23 +0,0 @@
-// For DELETE
-import { NextResponse, NextRequest } from 'next/server';
-import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
-import { MediaDto, ServiceType, MediaType } from '@/types/media';
-
-interface RouteParams {
-    params: { service: ServiceType; type: MediaType; path: string; filename: string; }
-}
-
-export async function DELETE(_req: NextRequest, { params }: RouteParams) {
-    const allMedia = dbManager.getCollection('media');
-    const locationToDelete = `${params.path}/${params.filename}`;
-
-    const initialLength = allMedia.length;
-    const filteredMedia = allMedia.filter(m => m.location !== locationToDelete);
-
-    if (filteredMedia.length < initialLength) {
-        dbManager.saveCollection('media', filteredMedia);
-        return NextResponse.json(true, { status: 200 });
-    } else {
-        return NextResponse.json({ message: "File not found" }, { status: 404 });
-    }
-}
\ No newline at end of file
diff --git a/app/api/mock/media/[service]/[type]/[path]/[resource_id]/route.ts b/app/api/mock/media/[service]/[type]/[path]/[resource_id]/route.ts
index cac74e3..7b3f7ee 100644
--- a/app/api/mock/media/[service]/[type]/[path]/[resource_id]/route.ts
+++ b/app/api/mock/media/[service]/[type]/[path]/[resource_id]/route.ts
@@ -1,53 +1,85 @@
-// For POST (upload metadata) and GET (get metadata list)
 import { NextResponse, NextRequest } from 'next/server';
 import { dbManager } from '@/lib/data-repo/local-store/json-db-manager';
 import { MediaDto, UploadMediaResponse, ServiceType, MediaType } from '@/types/media';
 
 interface RouteParams {
-    params: { service: ServiceType; type: MediaType; path: string; resource_id: string; }
+    params: { 
+        service: ServiceType; 
+        type: MediaType; 
+        path: string; 
+        resource_id: string; // This segment can be a resource_id for GET/POST or a filename for DELETE
+    }
 }
 
 // GET /media/infos/{service}/{type}/{path}/{resource_id}
-export async function GET(_req: NextRequest, { params }: RouteParams) {
-    const allMedia = dbManager.getCollection('media');
-    const resourceMedia = allMedia.filter(m => 
-        m.resource_id === params.resource_id &&
-        m.service === params.service &&
-        m.type === params.type &&
-        m.location?.startsWith(params.path)
-    );
-    return NextResponse.json(resourceMedia);
+export async function GET(req: NextRequest, { params }: RouteParams) {
+    const { resource_id, service, type, path } = params;
+    try {
+        const allMedia = dbManager.getCollection('media');
+        const resourceMedia = allMedia.filter(m => 
+            m.resource_id === resource_id &&
+            m.service === service &&
+            m.type === type &&
+            m.location?.startsWith(path)
+        );
+        return NextResponse.json(resourceMedia);
+    } catch (error: any) {
+        return NextResponse.json({ message: "Failed to get media info", error: error.message }, { status: 500 });
+    }
 }
 
 // POST /media/{service}/{type}/{path}/{resource_id}
 export async function POST(req: NextRequest, { params }: RouteParams) {
     const { resource_id, service, type, path } = params;
-    // In mock, we get metadata, not the actual file blob
-    const body = await req.json(); 
+    try {
+        const body = await req.json(); 
+
+        const newMedia: Omit<MediaDto, 'id' | 'created_at' | 'updated_at'> = {
+            name: body.fileName,
+            real_name: `mock_${Date.now()}_${body.fileName}`,
+            size: body.fileSize,
+            mime: body.fileType,
+            extension: body.fileName.split('.').pop() || '',
+            is_primary: body.isPrimary || false,
+            description: body.description,
+            location: `${path}/mock_${Date.now()}_${body.fileName}`,
+            resource_id,
+            service,
+            type,
+        };
+        const createdMedia = dbManager.addItem('media', newMedia);
+        
+        const response: UploadMediaResponse = {
+            id: createdMedia.id,
+            resourceId: createdMedia.resource_id,
+            url: `https://picsum.photos/seed/${createdMedia.id}/400/300`, 
+            uri: `/media/${createdMedia.service}/${createdMedia.type}${createdMedia.location}`,
+        };
 
-    const newMedia: Omit<MediaDto, 'id' | 'created_at' | 'updated_at'> = {
-        name: body.fileName,
-        real_name: `mock_${Date.now()}_${body.fileName}`,
-        size: body.fileSize,
-        mime: body.fileType,
-        extension: body.fileName.split('.').pop() || '',
-        is_primary: body.isPrimary || false,
-        description: body.description,
-        location: `${path}/${`mock_${Date.now()}_${body.fileName}`}`,
-        resource_id,
-        service,
-        type,
-    };
+        return NextResponse.json(response, { status: 200 });
+    } catch (error: any) {
+        return NextResponse.json({ message: "Failed to upload media", error: error.message }, { status: 500 });
+    }
+}
 
-    const createdMedia = dbManager.addItem('media', newMedia);
-    
-    const response: UploadMediaResponse = {
-        id: createdMedia.id,
-        resourceId: createdMedia.resource_id,
-        // The mock URL points to a placeholder
-        url: `https://picsum.photos/seed/${createdMedia.id}/400/300`, 
-        uri: `/media/${createdMedia.service}/${createdMedia.type}${createdMedia.location}`,
-    };
+// DELETE /media/{service}/{type}/{path}/{filename}
+// The {filename} from the API spec is mapped to the {resource_id} parameter here.
+export async function DELETE(req: NextRequest, { params }: RouteParams) {
+    const { service, type, path, resource_id: filename } = params; // Treat param as filename
+    try {
+        const allMedia = dbManager.getCollection('media');
+        const locationToDelete = `${path}/${filename}`;
+        
+        const initialLength = allMedia.length;
+        const filteredMedia = allMedia.filter(m => m.location !== locationToDelete);
 
-    return NextResponse.json(response, { status: 200 });
+        if (filteredMedia.length < initialLength) {
+            dbManager.saveCollection('media', filteredMedia);
+            return NextResponse.json(true, { status: 200 });
+        } else {
+            return NextResponse.json({ message: "File not found for deletion" }, { status: 404 });
+        }
+    } catch (error: any) {
+        return NextResponse.json({ message: "Failed to delete media", error: error.message }, { status: 500 });
+    }
 }
\ No newline at end of file
diff --git a/components/auth/login-form.tsx b/components/auth/login-form.tsx
index 981deda..1bcd3f5 100644
--- a/components/auth/login-form.tsx
+++ b/components/auth/login-form.tsx
@@ -5,7 +5,7 @@ import { useForm, SubmitHandler } from "react-hook-form";
 import { zodResolver } from "@hookform/resolvers/zod";
 import * as z from "zod";
 import { signIn } from "next-auth/react";
-import { useRouter, useSearchParams } from "next/navigation";
+import { useSearchParams } from "next/navigation";
 import Link from "next/link";
 import { AuthCardWrapper } from "./auth-card-wrapper";
 import { Button } from "@/components/ui/button";
@@ -21,22 +21,15 @@ import {
 import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
 import { AlertTriangle, Eye, EyeOff, Loader2 } from "lucide-react";
 import { toast } from "sonner";
-// We won call authApi.login directly here, NextAuth CredentialsProvider will do it.
 
 const LoginSchema = z.object({
-  // According to AuthRequest, it 'username', not email.
-  // If your backend allows email/phone for username field, this is fine.
-  // Otherwise, label should be "Username".
-  username: z
-    .string()
-    .min(1, { message: "Username" }),
+  username: z.string().min(1, { message: "Username, email or phone is required." }),
   password: z.string().min(1, { message: "Password is required." }),
 });
 
 type LoginFormValues = z.infer<typeof LoginSchema>;
 
 export const LoginForm = () => {
-  // const router = useRouter();
   const searchParams = useSearchParams();
   const callbackUrl = searchParams.get("callbackUrl");
   const [error, setError] = useState<string | null>(null);
@@ -52,44 +45,25 @@ export const LoginForm = () => {
     setError(null);
     startTransition(async () => {
       try {
-        // NextAuth signIn with 'credentials' will trigger the `authorize` callback
-        // in `[...nextauth]/route.ts`. That where wel call our backend /api/login.
         const result = await signIn("credentials", {
-          redirect: false, // Handle redirect manually after checking result
-          username: values.username, // Pass username (which might be email/phone)
+          redirect: false,
+          username: values.username,
           password: values.password,
-          // callbackUrl: callbackUrl || "/business-actor/dashboard" // signIn can handle callbackUrl
         });
 
-        
         if (result?.error) {
-          console.error("SignIn Error from NextAuth:", result.error);
-          // result.error might be "CredentialsSignin" or a custom error message
-          // from your authorize callback.
-          setError(
-            result.error === "CredentialsSignin"
-              ? "Invalid username or password."
-              : result.error
-          );
-          toast.error(
-            result.error === "CredentialsSignin"
-              ? "Invalid username or password."
-              : result.error
-          );
+          const errorMessage = result.error === "CredentialsSignin" ? "Invalid username or password." : result.error;
+          setError(errorMessage);
+          toast.error(errorMessage);
         } else if (result?.ok) {
           toast.success("Login successful! Redirecting...");
-          // router.push(callbackUrl || "/business-actor/dashboard"); // Default if signIn doesn redirect
-          // router.refresh(); // Important to update session state everywhere
-          // If signIn is configured with redirect: true (default), this manual push might not be needed.
-          // For now, let rely on NextAuth default redirect or callbackUrl handling if `redirect:false` isn used.
-          // If it still doesn redirect, we might need a window.location.href = callbackUrl || '/default-path'
-          window.location.href = callbackUrl || "/business-actor/dashboard";
+          // THE FIX: Always redirect to /dashboard. It will handle the final destination.
+          window.location.href = callbackUrl || "/dashboard";
         } else {
           setError("An unexpected error occurred during login.");
           toast.error("An unexpected login error occurred.");
         }
       } catch (err) {
-        console.error("Login Submit Catch Error:", err);
         setError("An unexpected error occurred. Please try again.");
         toast.error("An unexpected error occurred.");
       }
@@ -100,93 +74,22 @@ export const LoginForm = () => {
     <AuthCardWrapper
       title="Welcome Back"
       description="Sign in to access your dashboard"
-      backButtonLabel="Do not have an account? Sign Up"
+      backButtonLabel="Don't have an account? Sign Up"
       backButtonHref="/signup"
     >
       <Form {...form}>
         <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
           <div className="space-y-4">
-            <FormField
-              control={form.control}
-              name="username"
-              render={({ field }) => (
-                <FormItem>
-                  <FormLabel>Username, Email or Phone</FormLabel>
-                  <FormControl>
-                    <Input
-                      placeholder="yourusername / you@example.com"
-                      {...field}
-                      disabled={isPending}
-                    />
-                  </FormControl>
-                  <FormMessage />
-                </FormItem>
-              )}
-            />
-            <FormField
-              control={form.control}
-              name="password"
-              render={({ field }) => (
-                <FormItem>
-                  <div className="flex justify-between items-center">
-                    <FormLabel>Password</FormLabel>
-                    <Button
-                      size="sm"
-                      variant="link"
-                      asChild
-                      className="px-0 font-normal text-xs h-auto text-muted-foreground hover:text-primary"
-                    >
-                      <Link href="/forgot-password" tabIndex={-1}>
-                        Forgot password?
-                      </Link>
-                    </Button>
-                  </div>
-                  <FormControl>
-                    <div className="relative">
-                      <Input
-                        type={showPassword ? "text" : "password"}
-                        placeholder="••••••••"
-                        {...field}
-                        disabled={isPending}
-                      />
-                      <Button
-                        type="button"
-                        variant="ghost"
-                        size="icon"
-                        className="absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7"
-                        onClick={() => setShowPassword(!showPassword)}
-                        tabIndex={-1}
-                      >
-                        {showPassword ? (
-                          <EyeOff className="h-4 w-4" />
-                        ) : (
-                          <Eye className="h-4 w-4" />
-                        )}
-                      </Button>
-                    </div>
-                  </FormControl>
-                  <FormMessage />
-                </FormItem>
-              )}
-            />
+            <FormField control={form.control} name="username" render={({ field }) => (<FormItem><FormLabel>Username, Email or Phone</FormLabel><FormControl><Input placeholder="yourusername" {...field} disabled={isPending} /></FormControl><FormMessage /></FormItem>)} />
+            <FormField control={form.control} name="password" render={({ field }) => (<FormItem>
+              <div className="flex justify-between items-center"><FormLabel>Password</FormLabel><Button size="sm" variant="link" asChild className="px-0 font-normal text-xs h-auto text-muted-foreground hover:text-primary"><Link href="/forgot-password" tabIndex={-1}>Forgot password?</Link></Button></div>
+              <FormControl><div className="relative"><Input type={showPassword ? "text" : "password"} placeholder="••••••••" {...field} disabled={isPending} /><Button type="button" variant="ghost" size="icon" className="absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7" onClick={() => setShowPassword(!showPassword)} tabIndex={-1}>{showPassword ? (<EyeOff className="h-4 w-4" />) : (<Eye className="h-4 w-4" />)}</Button></div></FormControl>
+              <FormMessage />
+            </FormItem>
+            )} />
           </div>
-
-          {error && (
-            <Alert variant="destructive">
-              <AlertTriangle className="h-4 w-4" />
-              <AlertTitle>Login Failed</AlertTitle>
-              <AlertDescription>Something went wrong</AlertDescription>
-            </Alert>
-          )}
-
-          <Button
-            type="submit"
-            className="w-full transition-all hover:brightness-110 active:scale-[0.98]"
-            disabled={isPending}
-          >
-            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
-            {isPending ? "Signing In..." : "Sign In"}
-          </Button>
+          {error && (<Alert variant="destructive"><AlertTriangle className="h-4 w-4" /><AlertTitle>Login Failed</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
+          <Button type="submit" className="w-full" disabled={isPending}>{isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}{isPending ? "Signing In..." : "Sign In"}</Button>
         </form>
       </Form>
     </AuthCardWrapper>
diff --git a/components/dashboard-ui.tsx b/components/dashboard-ui.tsx
index beeffc5..977d652 100644
--- a/components/dashboard-ui.tsx
+++ b/components/dashboard-ui.tsx
@@ -1,8 +1,9 @@
 "use client";
 
 import { usePathname } from "next/navigation";
-import { MainSidebar } from "@/components/main-sidebar";
+// import { MainSidebar } from "@/components/main-sidebar";
 import { AgencySidebar } from "@/components/organization/agencies/agency-sidebar";
+import { Sidebar } from "@/components/main-sidebar";
 
 export function DashboardUI() {
   const pathname = usePathname();
@@ -13,5 +14,5 @@ export function DashboardUI() {
   }
 
   // Default to the main sidebar for all other dashboard routes.
-  return <MainSidebar />;
+  return <Sidebar/>;
 }
diff --git a/components/main-sidebar.tsx b/components/main-sidebar.tsx
index eb53e9d..2c3f3f5 100644
--- a/components/main-sidebar.tsx
+++ b/components/main-sidebar.tsx
@@ -1,394 +1,158 @@
 "use client";
 
-import React, { useState } from "react";
+import { useState } from "react";
 import Link from "next/link";
 import Image from "next/image";
 import { usePathname } from "next/navigation";
 import {
-  Award,
-  Briefcase,
-  Building,
-  Combine,
-  FileText,
-  FolderHeart,
-  HandCoins,
-  HelpCircle,
-  ImageIcon,
-  Info,
-  LayoutGrid,
-  Lightbulb,
-  LogOut,
-  Landmark,
-  Menu,
-  MessagesSquare,
-  Package,
-  Server,
-  Settings,
-  Share2,
-  SidebarClose,
-  Truck,
-  UserCheck,
-  Users,
-  Users2,
-  UsersRound,
-  Wallet,
-  Webhook,
+  Award, Briefcase, Building, Combine, FileText, FolderHeart, HandCoins, HelpCircle,
+  ImageIcon as ImageIconLucide, Info, LayoutGrid, Lightbulb, LogOut, Landmark, Menu,
+  MessagesSquare, Package, Server, Settings, Share2, SidebarClose, Truck, UserCheck,
+  Users, Users2, UsersRound, Wallet, Webhook,
 } from "lucide-react";
-import { signOut } from "next-auth/react";
+import { signOut, useSession } from "next-auth/react";
 import { cn } from "@/lib/utils";
 import { Button } from "@/components/ui/button";
-import {
-  Tooltip,
-  TooltipContent,
-  TooltipProvider,
-  TooltipTrigger,
-} from "@/components/ui/tooltip";
+import { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from "@/components/ui/tooltip";
 import { OrganizationSwitcher } from "@/components/organization/organization-switcher";
 import { useActiveOrganization } from "@/contexts/active-organization-context";
 
-// ... (Navigation arrays remain the same)
+// For Business Actors
 const baNavigation = [
-  { name: "Org. Dashboard", href: "/dashboard", icon: LayoutGrid },
-  { name: "Org. Profile", href: "/profile", icon: Landmark },
-  { name: "Products", href: "/products", icon: Package },
-  { name: "Services", href: "/services", icon: Combine },
-  { name: "Agencies", href: "/agencies", icon: Users2 },
-  { name: "Employees", href: "/employees", icon: Users },
-  { name: "Customers", href: "/customers", icon: UsersRound },
-  { name: "Suppliers", href: "/suppliers", icon: Truck },
-  { name: "Sales People", href: "/sales-people", icon: UserCheck },
-  { name: "Prospects", href: "/prospects", icon: Lightbulb },
-  { name: "Third Parties", href: "/third-parties", icon: Briefcase },
-  { name: "Certifications", href: "/certifications", icon: Award },
-  { name: "Images", href: "/images", icon: ImageIcon },
-  { name: "Practical Info", href: "/practical-info", icon: Info },
-  { name: "Wallet", href: "/wallet", icon: Wallet, isGlobal: true },
-  { name: "Bonus Config", href: "/bonus", icon: HandCoins, isGlobal: true },
-  { name: "Webhooks", href: "/webhooks", icon: Webhook, isGlobal: true },
-  { name: "Chat", href: "/chat", icon: MessagesSquare, isGlobal: true },
+  { name: "Org. Dashboard", href: "/org/dashboard", icon: LayoutGrid, isOrgSpecific: true },
+  { name: "Org. Profile", href: "/org/profile", icon: Landmark, isOrgSpecific: true },
+  { name: "Products", href: "/org/products", icon: Package, isOrgSpecific: true },
+  { name: "Services", href: "/org/services", icon: Combine, isOrgSpecific: true },
+  { name: "Agencies", href: "/org/agencies", icon: Users2, isOrgSpecific: true },
+  { name: "Employees", href: "/org/employees", icon: Users, isOrgSpecific: true },
+  { name: "Customers", href: "/org/customers", icon: UsersRound, isOrgSpecific: true },
+  { name: "Suppliers", href: "/org/suppliers", icon: Truck, isOrgSpecific: true },
+  { name: "Sales People", href: "/org/sales-people", icon: UserCheck, isOrgSpecific: true },
+  { name: "Prospects", href: "/org/prospects", icon: Lightbulb, isOrgSpecific: true },
+  { name: "Third Parties", href: "/org/third-parties", icon: Briefcase, isOrgSpecific: true },
+  { name: "Certifications", href: "/org/certifications", icon: Award, isOrgSpecific: true },
+  { name: "Images", href: "/org/images", icon: ImageIconLucide, isOrgSpecific: true },
+  { name: "Practical Info", href: "/org/practical-info", icon: Info, isOrgSpecific: true },
+  { name: "Wallet", href: "/business-actor/wallet", icon: Wallet },
+  { name: "Bonus Config", href: "/business-actor/bonus", icon: HandCoins },
+  { name: "Webhooks", href: "/business-actor/webhooks", icon: Webhook },
+  { name: "Chat", href: "/business-actor/chat", icon: MessagesSquare },
 ];
-const customerNavigation = [
-  {
-    name: "Dashboard",
-    href: "/customer/dashboard",
-    icon: LayoutGrid,
-    isGlobal: true,
-  },
-  {
-    name: "Services",
-    href: "/customer/services",
-    icon: Briefcase,
-    isGlobal: true,
-  },
-  {
-    name: "Invoices",
-    href: "/customer/invoices",
-    icon: FileText,
-    isGlobal: true,
-  },
-  {
-    name: "My Bonus",
-    href: "/customer/bonus",
-    icon: HandCoins,
-    isGlobal: true,
-  },
-  {
-    name: "Favorites",
-    href: "/customer/favorites",
-    icon: FolderHeart,
-    isGlobal: true,
-  },
-  {
-    name: "Invite Friends",
-    href: "/customer/invite",
-    icon: Share2,
-    isGlobal: true,
-  },
-  {
-    name: "Chat",
-    href: "/customer/chat",
-    icon: MessagesSquare,
-    isGlobal: true,
-  },
+
+// For Normal Users (in /account context)
+const userNavigation = [
+  { name: "Dashboard", href: "/dashboard", icon: LayoutGrid },
+  { name: "Services", href: "/services", icon: Briefcase }, // Announcements/Offers & Transactions/Wishlist
+  { name: "Invoices", href: "/invoices", icon: FileText },
+  { name: "My Bonus", href: "/bonus", icon: HandCoins },
+  { name: "Favorites", href: "/favorites", icon: FolderHeart },
+  { name: "Invite Friends", href: "//invite", icon: Share2 }, // Referrals page
+  { name: "Chat", href: "/customer/chat", icon: MessagesSquare },
+  // Add other user-specific links here if they are created, e.g., My Favorites
 ];
+
 const superAdminNavigation = [
-  {
-    name: "Dashboard",
-    href: "/super-admin/dashboard",
-    icon: LayoutGrid,
-    isGlobal: true,
-  },
-  {
-    name: "Platforms",
-    href: "/super-admin/platforms",
-    icon: Server,
-    isGlobal: true,
-  },
-  {
-    name: "Business Actors",
-    href: "/super-admin/business-actors",
-    icon: Building,
-    isGlobal: true,
-  },
-  {
-    name: "Customers",
-    href: "/super-admin/customers",
-    icon: Users,
-    isGlobal: true,
-  },
-  {
-    name: "Webhooks Config",
-    href: "/super-admin/webhooks",
-    icon: Webhook,
-    isGlobal: true,
-  },
-  {
-    name: "Bonus Overview",
-    href: "/super-admin/bonus",
-    icon: HandCoins,
-    isGlobal: true,
-  },
-  {
-    name: "Admin Comm.",
-    href: "/super-admin/chat",
-    icon: MessagesSquare,
-    isGlobal: true,
-  },
+  { name: "Dashboard", href: "/super-admin/dashboard", icon: LayoutGrid },
+  { name: "Platforms", href: "/super-admin/platforms", icon: Server },
+  { name: "Business Actors", href: "/super-admin/business-actors", icon: Building },
+  { name: "Customers", href: "/super-admin/customers", icon: Users },
+  { name: "Webhooks Config", href: "/super-admin/webhooks", icon: Webhook },
+  { name: "Bonus Overview", href: "/super-admin/bonus", icon: HandCoins },
+  { name: "Admin Comm.", href: "/super-admin/chat", icon: MessagesSquare },
 ];
+
 const bottomNavigation = [
   { name: "Help & Support", href: "/help", icon: HelpCircle },
   { name: "Settings", href: "/settings", icon: Settings },
 ];
 
-export function MainSidebar() {
+export function Sidebar() {
+  const { data: session } = useSession();
   const pathname = usePathname();
   const [isCollapsed, setIsCollapsed] = useState(false);
   const [isMobileOpen, setIsMobileOpen] = useState(false);
   const { activeOrganizationId } = useActiveOrganization();
 
-  const pathSegments = pathname.split("/").filter(Boolean);
-  let currentRolePrefix = "/business-actor";
-  if (
-    pathSegments.length > 0 &&
-    ["customer", "super-admin", "business-actor"].includes(pathSegments[0])
-  ) {
-    currentRolePrefix = `/${pathSegments[0]}`;
-  }
-  const isBaContext = currentRolePrefix === "/business-actor";
-  let sidebarTitle = "BA Workspace";
-  let currentNavigation = baNavigation;
-  let activeRoleDashboardLink = "/business-actor/dashboard";
-  if (currentRolePrefix === "/customer") {
-    sidebarTitle = "My Account";
-    currentNavigation = customerNavigation;
-    activeRoleDashboardLink = "/customer/dashboard";
-  } else if (currentRolePrefix === "/super-admin") {
-    sidebarTitle = "Platform Admin";
+  const isBusinessActor = session?.user.roles?.includes('BUSINESS_ACTOR_ROLE');
+  const isSuperAdmin = session?.user.roles?.includes('SUPER_ADMIN_ROLE');
+
+  // Determine which navigation set and title to use
+  let currentNavigation = userNavigation;
+  let sidebarTitle = "My Account";
+  let homeLink = "/dashboard";
+
+  if (isSuperAdmin) {
     currentNavigation = superAdminNavigation;
-    activeRoleDashboardLink = "/super-admin/dashboard";
+    sidebarTitle = "Platform Admin";
+    homeLink = "/super-admin/dashboard";
+  } else if (isBusinessActor) {
+    currentNavigation = baNavigation;
+    sidebarTitle = "BA Workspace";
+    homeLink = "/business-actor/dashboard";
   }
-  const handleLogout = async () => {
-    await signOut({ callbackUrl: "/login" });
-  };
 
-  const NavItem = ({
-    item,
-  }: {
-    item: {
-      name: string;
-      href: string;
-      icon: React.ElementType;
-      isGlobal?: boolean;
-    };
-  }) => {
+  const handleLogout = async () => await signOut({ callbackUrl: "/login" });
+
+  const NavItem = ({ item }: { item: { name: string; href: string; icon: React.ElementType; isOrgSpecific?: boolean; } }) => {
     let finalHref = item.href;
     let isDisabled = false;
-    if (isBaContext && !item.isGlobal) {
-      finalHref = activeOrganizationId
-        ? `/business-actor/org${item.href}`
-        : "#";
+
+    if (isBusinessActor && item.isOrgSpecific) {
+      finalHref = activeOrganizationId ? `/business-actor${item.href}` : "#";
       isDisabled = !activeOrganizationId;
-    } else {
-      finalHref = item.isGlobal
-        ? `${currentRolePrefix}${item.href}`
-        : item.href;
     }
+
     const isActive = finalHref !== "#" && pathname.startsWith(finalHref);
+
     return (
       <Tooltip delayDuration={0}>
         <TooltipTrigger asChild>
-          <Link
-            href={isDisabled ? "#" : finalHref}
-            className={cn(
-              "flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors h-9",
-              isActive && "bg-sidebar-accent text-sidebar-accent-foreground",
-              !isDisabled &&
-                !isActive &&
-                "text-sidebar-foreground hover:bg-sidebar-accent/80",
-              isDisabled && "cursor-not-allowed text-muted-foreground/50",
-              isCollapsed && "justify-center px-2"
-            )}
-            onClick={() =>
-              isMobileOpen && !isDisabled && setIsMobileOpen(false)
-            }
-            aria-disabled={isDisabled}
-            tabIndex={isDisabled ? -1 : undefined}
-          >
-            <item.icon
-              className={cn(
-                "h-[18px] w-[18px] shrink-0",
-                !isCollapsed && "mr-3"
-              )}
-            />
+          <Link href={isDisabled ? "#" : finalHref} className={cn("flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors h-9", isActive && "bg-sidebar-accent text-sidebar-accent-foreground", !isDisabled && !isActive && "text-sidebar-foreground hover:bg-sidebar-accent/80 hover:text-sidebar-accent-foreground", isDisabled && "cursor-not-allowed text-muted-foreground/50", isCollapsed && "justify-center px-2")} onClick={() => isMobileOpen && !isDisabled && setIsMobileOpen(false)} aria-disabled={isDisabled} tabIndex={isDisabled ? -1 : undefined}>
+            <item.icon className={cn("h-[18px] w-[18px] shrink-0", !isCollapsed && "mr-3")} />
             {!isCollapsed && <span className="truncate">{item.name}</span>}
           </Link>
         </TooltipTrigger>
-        {isCollapsed && (
-          <TooltipContent side="right">{item.name}</TooltipContent>
-        )}
+        {isCollapsed && (<TooltipContent side="right">{item.name}</TooltipContent>)}
       </Tooltip>
     );
   };
 
   return (
-    <>
-      <Button
-        variant="outline"
-        size="icon"
-        className="lg:hidden fixed top-4 left-4 z-[60] rounded-md shadow-md bg-background/80 backdrop-blur-sm"
-        onClick={() => setIsMobileOpen(!isMobileOpen)}
-        aria-label="Toggle sidebar"
-      >
-        <Menu className="h-5 w-5" />
-      </Button>
-      <div
-        className={cn(
-          "fixed inset-y-0 left-0 z-50 flex h-full flex-col border-r bg-background text-foreground transition-all duration-300 ease-in-out lg:sticky lg:top-0 lg:h-screen",
-          isCollapsed ? "w-[72px]" : "w-64",
-          isMobileOpen
-            ? "translate-x-0 shadow-xl"
-            : "-translate-x-full lg:translate-x-0"
-        )}
-        data-collapsed={isCollapsed}
-      >
-        <div
-          className={cn(
-            "flex h-16 shrink-0 items-center border-b",
-            isCollapsed ? "justify-center px-2" : "justify-between px-4"
-          )}
-        >
-          <Link
-            href={activeRoleDashboardLink}
-            className={cn("flex items-center gap-2 font-semibold")}
-            onClick={() => isMobileOpen && setIsMobileOpen(false)}
-            aria-label={sidebarTitle}
-          >
-            <Image
-              src="/logo.svg"
-              alt="Logo"
-              width={32}
-              height={32}
-              className=" shrink-0"
-              priority
-            />
-            {!isCollapsed && (
-              <span className="text-lg truncate">{sidebarTitle}</span>
-            )}
+    <TooltipProvider>
+      <Button variant="outline" size="icon" className="lg:hidden fixed top-4 left-4 z-[60] rounded-md shadow-md bg-background/80 backdrop-blur-sm" onClick={() => setIsMobileOpen(!isMobileOpen)} aria-label="Toggle sidebar"><Menu className="h-5 w-5" /></Button>
+      <div className={cn("fixed inset-y-0 left-0 z-50 flex h-full flex-col border-r border-sidebar-border bg-sidebar text-sidebar-foreground transition-all duration-300 ease-in-out lg:sticky lg:top-0 lg:h-screen", isCollapsed ? "w-[72px]" : "w-64", isMobileOpen ? "translate-x-0 shadow-xl" : "-translate-x-full lg:translate-x-0")} data-collapsed={isCollapsed}>
+        <div className={cn("flex h-16 shrink-0 items-center border-b border-sidebar-border", isCollapsed ? "justify-center px-2" : "justify-between px-4")}>
+          <Link href={homeLink} className={cn("flex items-center gap-2 font-semibold")} onClick={() => isMobileOpen && setIsMobileOpen(false)} aria-label={sidebarTitle}>
+            <Image src="/logo.svg" alt={`${sidebarTitle} Logo`} width={64} height={64} className=" shrink-0" priority />
+            {!isCollapsed && <span className="text-lg truncate">{sidebarTitle}</span>}
           </Link>
-          <Button
-            variant="ghost"
-            size="icon"
-            className={cn(
-              "hidden h-8 w-8 lg:flex",
-              isCollapsed ? "" : "ml-auto"
-            )}
-            onClick={() => setIsCollapsed(!isCollapsed)}
-            aria-label={isCollapsed ? "Expand Sidebar" : "Collapse Sidebar"}
-          >
-            <SidebarClose
-              className={cn(
-                "h-4 w-4 transition-transform",
-                isCollapsed && "rotate-180"
-              )}
-            />
-          </Button>
-          {isMobileOpen && (
-            <Button
-              variant="ghost"
-              size="icon"
-              className="ml-auto h-8 w-8 lg:hidden"
-              onClick={() => setIsMobileOpen(false)}
-              aria-label="Close Sidebar"
-            >
-              <SidebarClose className="h-4 w-4" />
-            </Button>
-          )}
+          <Button variant="ghost" size="icon" className={cn("hidden h-8 w-8 lg:flex", isCollapsed ? "" : "ml-auto")} onClick={() => setIsCollapsed(!isCollapsed)} aria-label={isCollapsed ? "Expand Sidebar" : "Collapse Sidebar"}><SidebarClose className={cn("h-4 w-4 transition-transform", isCollapsed && "rotate-180")} /></Button>
+          {isMobileOpen && <Button variant="ghost" size="icon" className="ml-auto h-8 w-8 lg:hidden" onClick={() => setIsMobileOpen(false)} aria-label="Close Sidebar"><SidebarClose className="h-4 w-4" /></Button>}
         </div>
-        <TooltipProvider>
-          {/* {isBaContext && <OrganizationSwitcher isCollapsed={isCollapsed} />} */}
-          <div
-            className={cn(
-              "border-b",
-              isCollapsed && "py-3 flex justify-center items-center"
-            )}
-          >
-            <OrganizationSwitcher isCollapsed={isCollapsed} />
-          </div>
-          <div className="flex flex-1 flex-col overflow-y-auto overflow-x-hidden">
-            <nav
-              className={cn(
-                "flex-1 space-y-1 py-4",
-                isCollapsed ? "px-2" : "px-4",
-                isBaContext && !isCollapsed && "pt-2"
-              )}
-            >
-              {currentNavigation.map((item) => (
-                <NavItem key={item.name} item={item} />
-              ))}
-            </nav>
-            <div
-              className={cn("mt-auto border-t", isCollapsed ? "px-2" : "px-4")}
-            >
-              <div className="space-y-1 py-4">
-                {bottomNavigation.map((item) => (
-                  <NavItem key={item.name} item={{ ...item, isGlobal: true }} />
-                ))}
-                <Tooltip delayDuration={0}>
-                  <TooltipTrigger asChild>
-                    <Button
-                      variant="ghost"
-                      className={cn(
-                        "flex items-center w-full rounded-md px-3 py-2 text-sm font-medium transition-colors h-9",
-                        "text-sidebar-foreground hover:bg-destructive/10 hover:text-destructive",
-                        isCollapsed ? "justify-center px-2" : "justify-start"
-                      )}
-                      onClick={handleLogout}
-                    >
-                      <LogOut
-                        className={cn(
-                          "h-[18px] w-[18px] shrink-0",
-                          !isCollapsed && "mr-3"
-                        )}
-                      />
-                      {!isCollapsed && <span className="truncate">Logout</span>}
-                    </Button>
-                  </TooltipTrigger>
-                  {isCollapsed && (
-                    <TooltipContent side="right">Logout</TooltipContent>
-                  )}
-                </Tooltip>
-              </div>
+
+        {isBusinessActor && <OrganizationSwitcher isCollapsed={isCollapsed} />}
+
+        <div className="flex flex-1 flex-col overflow-y-auto overflow-x-hidden">
+          <nav className={cn("flex-1 space-y-1 py-4", isCollapsed ? "px-2" : "px-4", isBusinessActor && !isCollapsed && "pt-0")}>
+            {currentNavigation.map((item) => <NavItem key={item.name} item={item} />)}
+          </nav>
+          <div className={cn("mt-auto border-t border-sidebar-border", isCollapsed ? "px-2" : "px-4")}>
+            <div className="space-y-1 py-4">
+              {bottomNavigation.map((item) => <NavItem key={item.name} item={{ ...item, href: item.href }} />)}
+              <Tooltip delayDuration={0}>
+                <TooltipTrigger asChild>
+                  <Button variant="ghost" className={cn("flex items-center w-full rounded-md px-3 py-2 text-sm font-medium transition-colors h-9", "text-sidebar-foreground hover:bg-destructive/10 hover:text-destructive", isCollapsed ? "justify-center px-2" : "justify-start")} onClick={() => { handleLogout(); if (isMobileOpen) setIsMobileOpen(false); }}>
+                    <LogOut className={cn("h-[18px] w-[18px] shrink-0", !isCollapsed && "mr-3")} />
+                    {!isCollapsed && <span className="truncate">Logout</span>}
+                  </Button>
+                </TooltipTrigger>
+                {isCollapsed && <TooltipContent side="right">Logout</TooltipContent>}
+              </Tooltip>
             </div>
           </div>
-        </TooltipProvider>
+        </div>
       </div>
-      {isMobileOpen && (
-        <div
-          className="fixed inset-0 z-40 bg-black/50 lg:hidden"
-          aria-hidden="true"
-          onClick={() => setIsMobileOpen(false)}
-        />
-      )}
-    </>
+      {isMobileOpen && <div className="fixed inset-0 z-40 bg-black/50 lg:hidden" aria-hidden="true" onClick={() => setIsMobileOpen(false)} />}
+    </TooltipProvider>
   );
 }
diff --git a/types/organization.ts b/types/organization.ts
index 6db0a1d..a92a8a8 100644
--- a/types/organization.ts
+++ b/types/organization.ts
@@ -311,7 +311,10 @@ export interface EmployeeDto extends Auditable {
 
 // --- Business Actor (as per Organization Service Spec) ---
 export type BusinessActorType = "PROVIDER" | "CUSTOMER" | "SALESPERSON" | "CLIENT" | "FREELANCE_DRIVER" | "FARMER" | "AGENCY" | "VEHICLE_RENTAL" | "GUEST";
+export const BusinessActorTypeValues: [BusinessActorType, ...BusinessActorType[]] = ["PROVIDER", "CUSTOMER", "SALESPERSON", "CLIENT", "FREELANCE_DRIVER", "FARMER", "AGENCY", "VEHICLE_RENTAL", "GUEST"];
+
 export type Gender = "MALE" | "FEMALE";
+export const GenderValues: [Gender, ...Gender[]] = ["MALE", "FEMALE"];
 
 export interface CreateBusinessActorRequest { // Used for POST /business-actors
   first_name: string;
@@ -327,7 +330,6 @@ export interface CreateBusinessActorRequest { // Used for POST /business-actors
   profession?: string;
   biography?: string;
   type?: BusinessActorType; // Role within this service context
-  // user_id?: string; // To link to User from Auth Service
 }
 export interface UpdateBusinessActorRequest extends Partial<Omit<CreateBusinessActorRequest, 'user_id'>> { }
 
// END OF FILE: changed_files.txt

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/.code-workspace.code-workspace

{
	"folders": [
		{
			"path": "."
		}
	],
	"settings": {
		"typescript.tsdk": "node_modules/typescript/lib",
		"postman.settings.dotenv-detection-notification-visibility": false
	}
}// END OF FILE: .code-workspace.code-workspace

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/admin/business-domains/business-domain-card.tsx

"use client";

import React from "react";
import { BusinessDomainDto } from "@/types/organization";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Tag } from "lucide-react";

interface BusinessDomainCardProps {
  domain: BusinessDomainDto;
  onEditAction: (domain: BusinessDomainDto) => void;
  onDeleteAction: (domain: BusinessDomainDto) => void;
}

export function BusinessDomainCard({ domain, onEditAction, onDeleteAction }: BusinessDomainCardProps) {
  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border rounded-md">
            <AvatarImage src={domain.image} alt={domain.name} />
            <AvatarFallback className="rounded-md"><Tag className="h-6 w-6 text-muted-foreground" /></AvatarFallback>
          </Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">{domain.name}</CardTitle>
            <p className="text-xs text-muted-foreground">{domain.type_label}</p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(domain)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onDeleteAction(domain)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow text-sm text-muted-foreground">
        <p className="line-clamp-2">{domain.description || "No description provided."}</p>
      </CardContent>
      <CardFooter>
        <Button variant="outline" className="w-full" onClick={() => onEditAction(domain)}>View Details</Button>
      </CardFooter>
    </Card>
  );
}// END OF FILE: components/admin/business-domains/business-domain-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/admin/business-domains/business-domain-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { BusinessDomainDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

const formSchema = z.object({
  name: z.string().min(3, "Domain name is required."),
  type: z.string().min(2, "Type code is required (e.g., TECH)."),
  type_label: z.string().min(3, "Type label is required (e.g., Technology)."),
  description: z.string().optional(),
  image: z.string().url("Must be a valid URL.").optional().or(z.literal("")),
});

export type BusinessDomainFormData = z.infer<typeof formSchema>;

interface BusinessDomainFormProps {
  initialData?: Partial<BusinessDomainDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: BusinessDomainFormData) => Promise<boolean>;
}

export function BusinessDomainForm({ initialData, mode, onSubmitAction }: BusinessDomainFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<BusinessDomainFormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: initialData?.name || "",
      type: initialData?.type || "",
      type_label: initialData?.type_label || "",
      description: initialData?.description || "",
      image: initialData?.image || "",
    },
  });

  const handleSubmit = async (data: BusinessDomainFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Create Business Domain" : "Edit Business Domain"}
      description="Manage the categories that organizations can operate within."
      submitButtonText={mode === 'create' ? "Create Domain" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <FormField control={form.control} name="name" render={({ field }) => (<FormItem><FormLabel>Domain Name *</FormLabel><FormControl><Input placeholder="e.g., Technology & Software" {...field} /></FormControl><FormMessage /></FormItem>)} />
          <div className="grid grid-cols-2 gap-4">
            <FormField control={form.control} name="type" render={({ field }) => (<FormItem><FormLabel>Type Code *</FormLabel><FormControl><Input placeholder="e.g., TECH" {...field} /></FormControl><FormMessage /></FormItem>)} />
            <FormField control={form.control} name="type_label" render={({ field }) => (<FormItem><FormLabel>Type Label *</FormLabel><FormControl><Input placeholder="e.g., Technology" {...field} /></FormControl><FormMessage /></FormItem>)} />
          </div>
          <FormField control={form.control} name="image" render={({ field }) => (<FormItem><FormLabel>Icon URL</FormLabel><FormControl><Input type="url" placeholder="https://example.com/icon.png" {...field} /></FormControl><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="description" render={({ field }) => (<FormItem><FormLabel>Description</FormLabel><FormControl><Textarea placeholder="Describe this business domain..." {...field} /></FormControl><FormMessage /></FormItem>)} />
        </div>
      )}
    </FormWrapper>
  );
}// END OF FILE: components/admin/business-domains/business-domain-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/admin/business-domains/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { BusinessDomainDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Tag } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";

interface RowActionsProps {
  domain: BusinessDomainDto;
  onEditAction: (domain: BusinessDomainDto) => void;
  onDeleteAction: (domain: BusinessDomainDto) => void;
}

const RowActions: React.FC<RowActionsProps> = ({ domain, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(domain)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(domain)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getBusinessDomainColumns = (
  actionHandlers: Omit<RowActionsProps, "domain">
): ColumnDef<BusinessDomainDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Domain Name" />,
    cell: ({ row }) => {
      const domain = row.original;
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border rounded-md">
            <AvatarImage src={domain.image} alt={domain.name} />
            <AvatarFallback className="rounded-md"><Tag className="h-5 w-5 text-muted-foreground" /></AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{domain.name}</div>
            <div className="text-xs text-muted-foreground">{domain.type_label}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "type",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Type Code" />,
  },
  {
    accessorKey: "description",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Description" />,
    cell: ({ row }) => <p className="text-sm text-muted-foreground truncate max-w-xs">{row.getValue("description")}</p>,
  },
  {
    id: "actions",
    cell: ({ row }) => <RowActions domain={row.original} {...actionHandlers} />,
  },
];// END OF FILE: components/admin/business-domains/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/admin/users/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { UserDto } from "@/types/auth";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Shield, Ban } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";

interface RowActionsProps {
  user: UserDto;
  onEditAction: (user: UserDto) => void;
}

const RowActions: React.FC<RowActionsProps> = ({ user, onEditAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild><Button variant="ghost" className="h-8 w-8 p-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => onEditAction(user)}><Edit className="mr-2 h-4 w-4" /> Edit User</DropdownMenuItem>
        <DropdownMenuItem className="text-destructive focus:text-destructive"><Ban className="mr-2 h-4 w-4" /> Disable User</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getUserColumns = (actionHandlers: Omit<RowActionsProps, "user">): ColumnDef<UserDto>[] => [
  { id: "select", header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected()} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} />, cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} />, enableSorting: false, enableHiding: false },
  {
    accessorKey: "first_name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="User" />,
    cell: ({ row }) => {
      const user = row.original;
      const name = `${user.first_name || ''} ${user.last_name || ''}`.trim() || user.username;
      const fallback = name ? name.charAt(0).toUpperCase() : "U";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border"><AvatarImage src={undefined} alt={name} /><AvatarFallback>{fallback}</AvatarFallback></Avatar>
          <div>
            <div className="font-medium">{name}</div>
            <div className="text-xs text-muted-foreground">{user.email}</div>
          </div>
        </div>
      );
    },
  },
  { accessorKey: "username", header: ({ column }) => <DataTableColumnHeader column={column} title="Username" /> },
  {
    accessorKey: "is_enabled",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Status" />,
    cell: ({ row }) => <Badge variant={row.getValue("is_enabled") ? "default" : "destructive"}>{row.getValue("is_enabled") ? "Enabled" : "Disabled"}</Badge>,
    filterFn: (row, id, value) => value.includes(String(row.getValue(id))),
  },
  { id: "actions", cell: ({ row }) => <RowActions user={row.original} {...actionHandlers} /> },
];
// END OF FILE: components/admin/users/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/app-footer.tsx

"use client";

import React from "react";
import Link from "next/link";
import { Separator } from "@/components/ui/separator";
import { Globe, Shield, FileText, MessageSquareHeart } from "lucide-react";
import { cn } from "@/lib/utils";
import Image from "next/image";

interface AppFooterProps {
  className?: string;
}

export function AppFooter({ className }: AppFooterProps) {
  const currentYear = new Date().getFullYear();

  const footerLinks = [
    { name: "Privacy Policy", href: "/privacy-policy" },
    { name: "Terms of Service", href: "/terms-of-service" },
    { name: "Help Center", href: "/help" },
  ];

  return (
    <footer className={cn("bg-background border-t text-muted-foreground print:hidden", className)}>
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="py-8 grid grid-cols-1 md:grid-cols-3 gap-8 items-center">
          <div className="flex items-center justify-center md:justify-start gap-2">
            <Image src="/logo.svg" alt="YowYob Logo" width={28} height={28} />
            <span className="text-lg font-semibold text-foreground">YowYob</span>
          </div>
          <nav className="flex flex-wrap justify-center gap-x-6 gap-y-2 md:col-span-1">
            {footerLinks.map((item) => (
              <Link key={item.name} href={item.href} className="text-sm hover:text-primary transition-colors">
                {item.name}
              </Link>
            ))}
          </nav>
        </div>
        <Separator className="mb-6" />
        <div className="py-6 flex flex-col sm:flex-row justify-between items-center text-xs">
          <p>© {currentYear} YowYob Inc. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
}
// END OF FILE: components/app-footer.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/auth/auth-card-wrapper.tsx

import React from "react";
import Link from "next/link";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Image from "next/image";

interface AuthCardWrapperProps {
  children: React.ReactNode;
  title: string;
  description?: string;
  backButtonLabel: string;
  backButtonHref: string;
  showSocial?: boolean;
}

export const AuthCardWrapper = ({
  children,
  title,
  description,
  backButtonLabel,
  backButtonHref,
  showSocial,
}: AuthCardWrapperProps) => {
  return (
    // Added slightly more padding (py-8) and refined shadow/border
    <Card className="w-xl shadow-lg border border-border/40 py-2 sm:py-4">
      <CardHeader className="text-center px-6 sm:px-8 pt-6 pb-4"> {/* Adjusted padding */}
        <div className="mx-auto mb-4">
          <Image src="/logo.svg" alt="Logo" width={48} height={48} />
        </div>
        <CardTitle className="text-2xl font-semibold tracking-tight">{title}</CardTitle>
        {description && (
          <CardDescription className="text-sm text-muted-foreground pt-1">
            {description}
          </CardDescription>
        )}
      </CardHeader>
      {/* Adjusted content padding */}
      <CardContent className="px-6 sm:px-8">{children}</CardContent>
      {showSocial && (
        // Keep social section padding consistent
        <CardFooter className="flex-col px-6 sm:px-8 pt-4 pb-0">
          <div className="w-full">
            <div className="relative my-4">
              <div className="absolute inset-0 flex items-center">
                <span className="w-full border-t border-border/60" />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-card px-2 text-muted-foreground">
                  Or continue with
                </span>
              </div>
            </div>
            {/* Placeholder for Social Buttons */}
            <p className="text-center text-sm text-muted-foreground py-4">Social logins coming soon!</p>
          </div>
        </CardFooter>
      )}
       {/* Adjusted footer padding and button style */}
      <CardFooter className="flex justify-center px-6 sm:px-8 pt-2 pb-6">
        <Button variant="link" className="px-0 font-normal text-sm text-muted-foreground hover:text-primary" size="sm" asChild>
          <Link href={backButtonHref}>{backButtonLabel}</Link>
        </Button>
      </CardFooter>
    </Card>
  );
};// END OF FILE: components/auth/auth-card-wrapper.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/auth/forgot-password-form.tsx

// FILE: components/auth/forgot-password-form.tsx
"use client";

import React, { useState, useTransition } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";

import { AuthCardWrapper } from "./auth-card-wrapper";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertTriangle, CheckCircle } from "lucide-react";

const ForgotPasswordSchema = z.object({
  email: z.string().email({ message: "Please enter a valid email address." }),
});

type ForgotPasswordFormValues = z.infer<typeof ForgotPasswordSchema>;

export const ForgotPasswordForm = () => {
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [isPending, startTransition] = useTransition();

  const form = useForm<ForgotPasswordFormValues>({
    resolver: zodResolver(ForgotPasswordSchema),
    defaultValues: {
      email: "",
    },
  });

  const onSubmit = (values: ForgotPasswordFormValues) => {
    setError(null);
    setSuccess(null);

    startTransition(async () => {
      // !!! IMPORTANT: Replace this with an API call to your backend !!!
      // Your backend should:
      // 1. Check if the email exists.
      // 2. Generate a secure password reset token.
      // 3. Store the token (with expiry) associated with the user.
      // 4. Send an email to the user with a link containing the token.
      console.log("Simulating password reset request for:", values.email);
      try {
        // --- Start Placeholder ---
        await new Promise(resolve => setTimeout(resolve, 1000));
        // Simulate success
        console.log("Simulated password reset email sent to:", values.email);
        // --- End Placeholder ---

        setSuccess("Password reset email sent! Please check your inbox.");

      } catch (err) {
        console.error("Forgot Password Simulation Error:", err);
        setError("Something went wrong. Please try again.");
      }
      // !!! END OF REPLACEMENT BLOCK !!!
    });
  };

  return (
    <AuthCardWrapper
      title="Forgot Your Password?"
      description="Enter your email to receive reset instructions"
      backButtonLabel="Back to Sign In"
      backButtonHref="/login"
    >
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-4">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email Address</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="email"
                      placeholder="you@example.com"
                      disabled={isPending}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          {error && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          {success && (
            <Alert variant="default" className="bg-green-100 dark:bg-green-900/30 border-green-300 dark:border-green-700">
              <CheckCircle className="h-4 w-4 text-green-600 dark:text-green-400" />
              <AlertTitle className="text-green-800 dark:text-green-300">Success!</AlertTitle>
              <AlertDescription className="text-green-700 dark:text-green-400">
                {success}
              </AlertDescription>
            </Alert>
          )}

          <Button type="submit" className="w-full" disabled={isPending || !!success}>
            {isPending ? "Sending..." : "Send Reset Instructions"}
          </Button>
        </form>
      </Form>
    </AuthCardWrapper>
  );
};// END OF FILE: components/auth/forgot-password-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/auth/login-form.tsx

"use client";

import React, { useState, useTransition } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { signIn } from "next-auth/react";
import { useSearchParams } from "next/navigation";
import Link from "next/link";
import { AuthCardWrapper } from "./auth-card-wrapper";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertTriangle, Eye, EyeOff, Loader2 } from "lucide-react";
import { toast } from "sonner";

const LoginSchema = z.object({
  username: z
    .string()
    .min(1, { message: "Username, email or phone is required." }),
  password: z.string().min(1, { message: "Password is required." }),
});

type LoginFormValues = z.infer<typeof LoginSchema>;

export const LoginForm = () => {
  const searchParams = useSearchParams();
  const callbackUrl = searchParams.get("callbackUrl");
  const [error, setError] = useState<string | null>(null);
  const [isPending, startTransition] = useTransition();
  const [showPassword, setShowPassword] = useState(false);
  const isNewUser = searchParams.get("new_user") === "true";

  const form = useForm<LoginFormValues>({
    resolver: zodResolver(LoginSchema),
    defaultValues: { username: "", password: "" },
  });

  const onSubmit: SubmitHandler<LoginFormValues> = (values) => {
    setError(null);
    startTransition(async () => {
      try {
        const result = await signIn("credentials", {
          redirect: false,
          username: values.username,
          password: values.password,
        });

        if (result?.error) {
          const errorMessage =
            result.error === "CredentialsSignin"
              ? "Invalid username or password."
              : result.error;
          setError(errorMessage);
          toast.error(errorMessage);
        } else if (result?.ok) {
          toast.success("Login successful! Redirecting...");
          const destination = isNewUser
            ? "/welcome"
            : callbackUrl || "/dashboard";
          window.location.href =destination
        } else {
          setError("An unexpected error occurred during login.");
          toast.error("An unexpected login error occurred.");
        }
      } catch (err) {
        setError("An unexpected error occurred. Please try again.");
        toast.error("An unexpected error occurred.");
      }
    });
  };

  return (
    <AuthCardWrapper
      title="Welcome Back"
      description="Sign in to access your dashboard"
      backButtonLabel="Don't have an account? Sign Up"
      backButtonHref="/signup"
    >
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-4">
            <FormField
              control={form.control}
              name="username"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Username, Email or Phone</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="yourusername"
                      {...field}
                      disabled={isPending}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <div className="flex justify-between items-center">
                    <FormLabel>Password</FormLabel>
                    <Button
                      size="sm"
                      variant="link"
                      asChild
                      className="px-0 font-normal text-xs h-auto text-muted-foreground hover:text-primary"
                    >
                      <Link href="/forgot-password" tabIndex={-1}>
                        Forgot password?
                      </Link>
                    </Button>
                  </div>
                  <FormControl>
                    <div className="relative">
                      <Input
                        type={showPassword ? "text" : "password"}
                        placeholder="••••••••"
                        {...field}
                        disabled={isPending}
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7"
                        onClick={() => setShowPassword(!showPassword)}
                        tabIndex={-1}
                      >
                        {showPassword ? (
                          <EyeOff className="h-4 w-4" />
                        ) : (
                          <Eye className="h-4 w-4" />
                        )}
                      </Button>
                    </div>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          {error && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Login Failed</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          <Button type="submit" className="w-full" disabled={isPending}>
            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isPending ? "Signing In..." : "Sign In"}
          </Button>
        </form>
      </Form>
    </AuthCardWrapper>
  );
};
// END OF FILE: components/auth/login-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/auth/signup-form.tsx

"use client";

import React, { useState, useTransition } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useRouter } from "next/navigation";
import { AuthCardWrapper } from "./auth-card-wrapper";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertTriangle, CheckCircle, Eye, EyeOff, Loader2 } from "lucide-react";
import { authRepository } from "@/lib/data-repo/auth";
import { CreateUserRequest } from "@/types/auth";
import { toast } from "sonner";

const SignUpSchema = z
  .object({
    username: z
      .string()
      .min(3, { message: "Username must be at least 3 characters." }),
    email: z
      .string()
      .email({ message: "Please enter a valid email address." })
      .optional()
      .or(z.literal("")),
    password: z
      .string()
      .min(6, { message: "Password must be at least 6 characters." }),
    confirmPassword: z
      .string()
      .min(6, { message: "Please confirm your password." }),
    first_name: z
      .string()
      .min(3, { message: "First name must be at least 3 characters." })
      .max(50),
    last_name: z.string().max(50).optional().or(z.literal("")),
    phone_number: z.string().optional().or(z.literal("")),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords do not match.",
    path: ["confirmPassword"],
  });

type SignUpFormValues = z.infer<typeof SignUpSchema>;

export const SignUpForm = () => {
  const router = useRouter();
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [isPending, startTransition] = useTransition();
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const form = useForm<SignUpFormValues>({
    resolver: zodResolver(SignUpSchema),
    defaultValues: {
      username: "",
      email: "",
      password: "",
      confirmPassword: "",
      first_name: "",
      last_name: "",
      phone_number: "",
    },
  });

  const onSubmit: SubmitHandler<SignUpFormValues> = (values) => {
    setError(null);
    setSuccess(null);
    startTransition(async () => {
      try {
        const requestPayload: CreateUserRequest = {
          username: values.username,
          password: values.password,
          first_name: values.first_name,
          ...(values.email && { email: values.email }),
          ...(values.last_name && { last_name: values.last_name }),
          ...(values.phone_number && { phone_number: values.phone_number }),
        };

        const registeredUser = await authRepository.register(requestPayload);
        toast.success(
          `Account for ${registeredUser.username} created! Redirecting to login...`
        );
        setSuccess(`Account created successfully! Please proceed to login.`);

        setTimeout(() => {
          // Redirect to login with a query param to indicate a new user
          router.push("/login?new_user=true");
        }, 2000);
      } catch (err) {
        const apiErrorMessage =
          err.message || "An unknown error occurred during sign up.";
        setError(apiErrorMessage);
        toast.error(apiErrorMessage);
      }
    });
  };

  return (
    <AuthCardWrapper
      title="Create an Account"
      description="Enter your details to get started"
      backButtonLabel="Already have an account? Sign In"
      backButtonHref="/login"
    >
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="first_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>
                    First Name <span className="text-destructive">*</span>
                  </FormLabel>
                  <FormControl>
                    <Input placeholder="John" {...field} disabled={isPending} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="last_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Last Name</FormLabel>
                  <FormControl>
                    <Input placeholder="Doe" {...field} disabled={isPending} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="username"
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  Username <span className="text-destructive">*</span>
                </FormLabel>
                <FormControl>
                  <Input
                    placeholder="johndoe"
                    {...field}
                    disabled={isPending}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Email</FormLabel>
                <FormControl>
                  <Input
                    type="email"
                    placeholder="you@example.com"
                    {...field}
                    disabled={isPending}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="phone_number"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Phone Number</FormLabel>
                <FormControl>
                  <Input
                    type="tel"
                    placeholder="+1234567890"
                    {...field}
                    disabled={isPending}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="password"
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  Password <span className="text-destructive">*</span>
                </FormLabel>
                <FormControl>
                  <div className="relative">
                    <Input
                      type={showPassword ? "text" : "password"}
                      placeholder="••••••••"
                      {...field}
                      disabled={isPending}
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      className="absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7"
                      onClick={() => setShowPassword(!showPassword)}
                      tabIndex={-1}
                    >
                      {showPassword ? (
                        <EyeOff className="h-4 w-4" />
                      ) : (
                        <Eye className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="confirmPassword"
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  Confirm Password <span className="text-destructive">*</span>
                </FormLabel>
                <FormControl>
                  <div className="relative">
                    <Input
                      type={showConfirmPassword ? "text" : "password"}
                      placeholder="••••••••"
                      {...field}
                      disabled={isPending}
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      className="absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7"
                      onClick={() =>
                        setShowConfirmPassword(!showConfirmPassword)
                      }
                      tabIndex={-1}
                    >
                      {showConfirmPassword ? (
                        <EyeOff className="h-4 w-4" />
                      ) : (
                        <Eye className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          {error && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Sign Up Failed</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          {success && (
            <Alert
              variant="default"
              className="bg-green-100 dark:bg-green-900/30 border-green-300 dark:border-green-700"
            >
              <CheckCircle className="h-4 w-4 text-green-600 dark:text-green-400" />
              <AlertTitle className="text-green-800 dark:text-green-300">
                Success!
              </AlertTitle>
              <AlertDescription className="text-green-700 dark:text-green-400">
                {success}
              </AlertDescription>
            </Alert>
          )}
          <Button
            type="submit"
            className="w-full transition-all hover:brightness-110 active:scale-[0.98]"
            disabled={isPending || !!success}
          >
            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isPending ? "Creating Account..." : "Create Account"}
          </Button>
        </form>
      </Form>
    </AuthCardWrapper>
  );
};
// END OF FILE: components/auth/signup-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/business-actor/business-actor-form.tsx

"use client";

import React, { useState, useEffect, useMemo } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useSession } from "next-auth/react";
import { toast } from "sonner";
import { organizationRepository } from "@/lib/data-repo/organization";
import { mediaRepository } from "@/lib/data-repo/media";
import {
  CreateBusinessActorRequest,
  BusinessActorTypeValues,
  GenderValues,
  BusinessActorDto,
  UpdateBusinessActorRequest,
} from "@/types/organization";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { ImageUploader } from "@/components/ui/image-uploader";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { User, Briefcase, Mail, CalendarIcon } from "lucide-react";
import { cn } from "@/lib/utils";
import { format, isValid } from "date-fns";
import { Switch } from "../ui/switch";

// Step 1: Personal Information Schema
const personalInfoSchema = z.object({
  first_name: z.string().min(2, "First name is required."),
  last_name: z.string().min(2, "Last name is required."),
  gender: z.enum(GenderValues, { required_error: "Gender is required." }),
  birth_date: z
    .date({ required_error: "Date of birth is required." })
    .max(new Date(), "Date of birth cannot be in the future."),
  nationality: z.string().min(2, "Nationality is required."),
  is_individual: z.boolean().default(true),
});

// Step 2: Professional Information Schema
const professionalInfoSchema = z.object({
  type: z.enum(BusinessActorTypeValues, {
    required_error: "Actor type is required.",
  }),
  profession: z.string().min(2, "Profession is required."),
  biography: z.string().min(10, "A brief biography is required.").max(500),
});

// Step 3: Contact & Media Schema
const contactAndMediaSchema = z.object({
  email: z.string().email("A valid contact email is required."),
  phone_number: z.string().optional().or(z.literal("")),
  avatarFile: z.any().optional(),
  profileFile: z.any().optional(),
  avatar_picture: z
    .string()
    .url("Invalid URL")
    .or(z.literal(""))
    .nullable()
    .optional(),
  profile_picture: z
    .string()
    .url("Invalid URL")
    .or(z.literal(""))
    .nullable()
    .optional(),
});

// Combined schema for the entire form
const fullBASchema = personalInfoSchema
  .merge(professionalInfoSchema)
  .merge(contactAndMediaSchema);
type BAFormData = z.infer<typeof fullBASchema>;

// Configuration for the multi-step wizard
const formSteps = [
  {
    id: "personal",
    name: "Personal Details",
    icon: User,
    fields: Object.keys(personalInfoSchema.shape),
  },
  {
    id: "professional",
    name: "Professional Info",
    icon: Briefcase,
    fields: Object.keys(professionalInfoSchema.shape),
  },
  {
    id: "contact",
    name: "Contact & Media",
    icon: Mail,
    fields: Object.keys(contactAndMediaSchema.shape),
  },
];

interface BusinessActorFormProps {
  mode: "create" | "edit";
  initialData?: Partial<BusinessActorDto>;
  onSuccessAction: (data: BusinessActorDto) => void;
}

export function BusinessActorForm({
  mode,
  initialData,
  onSuccessAction,
}: BusinessActorFormProps) {
  const { data: session } = useSession();
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<BAFormData>({
    resolver: zodResolver(fullBASchema),
    mode: "onChange",
    defaultValues: useMemo(
      () => ({
        first_name: initialData?.first_name || session?.user.first_name || "",
        last_name: initialData?.last_name || session?.user.last_name || "",
        gender: initialData?.gender || undefined,
        birth_date:
          initialData?.birth_date && isValid(new Date(initialData.birth_date))
            ? new Date(initialData.birth_date)
            : undefined,
        nationality: initialData?.nationality || "",
        is_individual: initialData?.is_individual ?? true,
        type: initialData?.type || undefined,
        profession: initialData?.profession || "",
        biography: initialData?.biography || "",
        email: initialData?.email || session?.user.email || "",
        phone_number:
          initialData?.phone_number || session?.user.phone_number || "",
        avatar_picture: initialData?.avatar_picture || "",
        profile_picture: initialData?.profile_picture || "",
      }),
      [initialData, session]
    ),
  });

  const onSubmit = async (data: BAFormData) => {
    if (!session?.user.id) {
      toast.error("User session not found. Please log in again.");
      return;
    }
    setIsLoading(true);

    let avatarUrl: string | undefined | null = form.getValues("avatar_picture");
    let profileUrl: string | undefined | null =
      form.getValues("profile_picture");

    try {
      if (data.avatarFile instanceof File) {
        const res = await toast.promise(
          mediaRepository.uploadFile(
            "business-actor",
            "image",
            "avatars",
            session.user.id,
            data.avatarFile
          ),
          {
            loading: "Uploading avatar...",
            success: "Avatar uploaded!",
            error: "Avatar upload failed.",
          }
        );
        avatarUrl =
          typeof res === "object" && res !== null && "url" in res
            ? String((res as { url: string }).url)
            : undefined;
      } else if (data.avatar_picture === null) {
        avatarUrl = null;
      }

      if (data.profileFile instanceof File) {
        const res = await toast.promise(
          mediaRepository.uploadFile(
            "business-actor",
            "image",
            "profiles",
            session.user.id,
            data.profileFile
          ),
          {
            loading: "Uploading profile picture...",
            success: "Profile picture uploaded!",
            error: "Upload failed.",
          }
        );
        profileUrl =
          typeof res === "object" && res !== null && "url" in res
            ? String((res as { url: string }).url)
            : undefined;
      } else if (data.profile_picture === null) {
        profileUrl = null;
      }

      const payload: CreateBusinessActorRequest | UpdateBusinessActorRequest = {
        first_name: data.first_name,
        last_name: data.last_name,
        email: data.email,
        phone_number: data.phone_number,
        gender: data.gender,
        birth_date: data.birth_date.toISOString(),
        nationality: data.nationality,
        type: data.type,
        profession: data.profession,
        biography: data.biography,
        avatar_picture: avatarUrl ?? undefined,
        profile_picture: profileUrl ?? undefined,
        is_individual: data.is_individual,
      };

      if (mode === "edit" && initialData?.business_actor_id) {
        const updatedBA = await organizationRepository.updateBusinessActor(
          initialData.business_actor_id,
          payload
        );
        onSuccessAction(updatedBA);
      } else {
        const newBA = await organizationRepository.createBusinessActor(
          payload as CreateBusinessActorRequest
        );
        onSuccessAction(newBA);
      }
    } catch (error) {
      toast.error(error.message || `An error occurred during profile ${mode}.`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={onSubmit}
      isLoading={isLoading}
      title={
        mode === "create"
          ? "Become a Business Actor"
          : "Edit Business Actor Profile"
      }
      description={
        mode === "create"
          ? "Complete your professional profile to unlock business management tools."
          : "Manage your global professional information."
      }
      steps={formSteps}
      submitButtonText={mode === "create" ? "Submit Profile" : "Save Changes"}
    >
      {(currentStep) => (
        <div className="min-h-[450px] p-1">
          {currentStep === 0 && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="first_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>First Name *</FormLabel>
                      <FormControl>
                        <Input placeholder="John" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="last_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Last Name *</FormLabel>
                      <FormControl>
                        <Input placeholder="Doe" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="gender"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Gender *</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select gender..." />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {GenderValues.map((g) => (
                            <SelectItem key={g} value={g}>
                              {g}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="birth_date"
                  render={({ field }) => (
                    <FormItem className="flex flex-col">
                      <FormLabel>Date of Birth *</FormLabel>
                      <Popover>
                        <PopoverTrigger asChild>
                          <FormControl>
                            <Button
                              variant={"outline"}
                              className={cn(
                                "w-full justify-start text-left font-normal",
                                !field.value && "text-muted-foreground"
                              )}
                            >
                              <CalendarIcon className="mr-2 h-4 w-4" />
                              {field.value ? (
                                format(field.value, "PPP")
                              ) : (
                                <span>Pick a date</span>
                              )}
                            </Button>
                          </FormControl>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start">
                          <Calendar
                            mode="single"
                            selected={field.value}
                            onSelect={field.onChange}
                            disabled={(date) => date > new Date()}
                            fromYear={1900}
                            toYear={new Date().getFullYear()}
                            initialFocus
                            captionLayout="dropdown-buttons"
                          />
                        </PopoverContent>
                      </Popover>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <FormField
                control={form.control}
                name="nationality"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nationality *</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g., American" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="is_individual"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4 shadow-sm">
                    <div className="space-y-0.5">
                      <FormLabel>Individual Actor</FormLabel>
                      <FormDescription>
                        Is this profile for an individual or a company entity?
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
            </div>
          )}
          {currentStep === 1 && (
            <div className="space-y-6">
              <FormField
                control={form.control}
                name="type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Actor Type *</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select your primary role..." />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {BusinessActorTypeValues.map((t) => (
                          <SelectItem key={t} value={t}>
                            {t.replace(/_/g, " ")}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormDescription>
                      This defines your main function on the platform.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="profession"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Profession / Job Title *</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g., Software Engineer" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="biography"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Biography *</FormLabel>
                    <FormControl>
                      <Textarea
                        rows={5}
                        placeholder="Tell us a little about your professional background..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
          )}
          {currentStep === 2 && (
            <div className="space-y-6">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Contact Email *</FormLabel>
                    <FormControl>
                      <Input
                        type="email"
                        placeholder="you@example.com"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="phone_number"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Phone Number</FormLabel>
                    <FormControl>
                      <Input type="tel" placeholder="+1234567890" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 pt-4">
                <FormField
                  control={form.control}
                  name="avatarFile"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Avatar (Square)</FormLabel>
                      <FormControl>
                        <ImageUploader
                          currentImageUrl={form.getValues("avatar_picture")}
                          onImageSelectedAction={(file, url) => {
                            field.onChange(file);
                            form.setValue("avatar_picture", url);
                          }}
                          aspectRatio="square"
                          fallbackName={form.getValues("first_name")}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="profileFile"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Profile Picture (Wider)</FormLabel>
                      <FormControl>
                        <ImageUploader
                          currentImageUrl={form.getValues("profile_picture")}
                          onImageSelectedAction={(file, url) => {
                            field.onChange(file);
                            form.setValue("profile_picture", url);
                          }}
                          aspectRatio="landscape"
                          fallbackName={form.getValues("first_name")}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>
          )}
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/business-actor/business-actor-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/command-palette.tsx

"use client";

import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import {
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandSeparator,
} from "@/components/ui/command";
import {
  LayoutGrid,
  Building,
  Users,
  Settings,
  HelpCircle,
  FileText,
} from "lucide-react";

interface CommandPaletteProps {
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
}

export function CommandPalette({ isOpen, setIsOpen }: CommandPaletteProps) {
  const router = useRouter();
  const { userOrganizations, agenciesForCurrentOrg, activeOrganizationId } =
    useActiveOrganization();

  const runCommand = (command: () => unknown) => {
    setIsOpen(false);
    command();
  };

  return (
    <CommandDialog open={isOpen} onOpenChange={setIsOpen}>
      <CommandInput placeholder="Type a command or search..." />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>

        <CommandGroup heading="Navigation">
          <CommandItem
            onSelect={() => runCommand(() => router.push("/dashboard"))}
          >
            <LayoutGrid className="mr-2 h-4 w-4" />
            <span>Dashboard</span>
          </CommandItem>
          <CommandItem
            onSelect={() => runCommand(() => router.push("/settings"))}
          >
            <Settings className="mr-2 h-4 w-4" />
            <span>Settings</span>
          </CommandItem>
          <CommandItem onSelect={() => runCommand(() => router.push("/help"))}>
            <HelpCircle className="mr-2 h-4 w-4" />
            <span>Help & Support</span>
          </CommandItem>
        </CommandGroup>

        {activeOrganizationId && (
          <>
            <CommandSeparator />
            <CommandGroup heading="Active Organization">
              <CommandItem
                onSelect={() =>
                  runCommand(() => router.push("/business-actor/org/agencies"))
                }
              >
                <Building className="mr-2 h-4 w-4" />
                <span>Manage Agencies</span>
              </CommandItem>
              <CommandItem
                onSelect={() =>
                  runCommand(() => router.push("/business-actor/org/employees"))
                }
              >
                <Users className="mr-2 h-4 w-4" />
                <span>Manage Employees</span>
              </CommandItem>
            </CommandGroup>
          </>
        )}

        {userOrganizations.length > 0 && (
          <>
            <CommandSeparator />
            <CommandGroup heading="Organizations">
              {userOrganizations.map((org) => (
                <CommandItem
                  key={org.organization_id}
                  onSelect={() =>
                    runCommand(() => router.push("/business-actor/dashboard"))
                  }
                >
                  <FileText className="mr-2 h-4 w-4" />
                  <span>{org.long_name}</span>
                </CommandItem>
              ))}
            </CommandGroup>
          </>
        )}

        {agenciesForCurrentOrg.length > 0 && (
          <>
            <CommandSeparator />
            <CommandGroup heading="Agencies">
              {agenciesForCurrentOrg.map((agency) => (
                <CommandItem
                  key={agency.agency_id}
                  onSelect={() =>
                    runCommand(() =>
                      router.push("/business-actor/agency/dashboard")
                    )
                  }
                >
                  <Building className="mr-2 h-4 w-4" />
                  <span>{agency.long_name}</span>
                </CommandItem>
              ))}
            </CommandGroup>
          </>
        )}
      </CommandList>
    </CommandDialog>
  );
}
// END OF FILE: components/command-palette.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/customer/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import Image from "next/image";
import { ProductListItemData } from "@/types/product";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  ShoppingCart, Info, Package, Combine, 
  PlayCircle, CheckCircle2, InfoIcon as StatusInfoIcon, CircleSlash // Renamed to avoid conflict
} from "lucide-react";
import { ImagePlaceholder } from "@/components/ui/image-placeholder";

// Helper for state display (can be moved to a shared utils file if used elsewhere)
interface StateDisplayInfo {
  variant: "default" | "secondary" | "outline" | "destructive";
  icon: React.ElementType;
  label: string;
}

const getStateDisplayInfo = (state: string = ""): StateDisplayInfo => {
  const upperState = state.toUpperCase();
  const label = upperState.toLowerCase().replace(/_/g, " ");
  switch (upperState) {
    case "PUBLISHED": case "AVAILABLE": case "FINISHED":
      return { variant: "default", icon: CheckCircle2, label };
    case "PLANNED": // Assuming customers might see planned services
      return { variant: "secondary", icon: PlayCircle, label }; // Or a clock icon
    case "ONGOING": // For active services
      return { variant: "outline", icon: PlayCircle, label };
    // case "IN_USE": // For resources, might not be a primary filter for customers
    //   return { variant: "outline", icon: PlayCircle, label };
    case "CANCELLED":
      return { variant: "destructive", icon: CircleSlash, label };
    default:
      return { variant: "outline", icon: StatusInfoIcon, label: label || "Unknown" };
  }
};


export interface CustomerProductRowActionsProps {
  product: ProductListItemData;
  onViewDetails: (product: ProductListItemData) => void;
  onReserve: (product: ProductListItemData) => void;
}

const CustomerProductRowActions: React.FC<CustomerProductRowActionsProps> = ({
  product, onViewDetails, onReserve
}) => {
  return (
    <div className="flex items-center justify-end gap-2">
      <Button
        variant="outline"
        size="sm"
        className="h-8 px-2"
        onClick={() => onViewDetails(product)}
        title="View Details"
      >
        <Info className="h-3.5 w-3.5" />
        <span className="sr-only sm:not-sr-only sm:ml-1.5">Details</span>
      </Button>
      <Button
        variant="default"
        size="sm"
        className="h-8 px-2"
        onClick={() => onReserve(product)}
        title="Reserve or Enquire"
      >
        <ShoppingCart className="h-3.5 w-3.5" />
        <span className="sr-only sm:not-sr-only sm:ml-1.5">Reserve</span>
      </Button>
    </div>
  );
};

export const getCustomerProductColumns = (
  actionHandlers: Omit<CustomerProductRowActionsProps, 'product'>
): ColumnDef<ProductListItemData>[] => [
    {
      id: "select",
      header: ({ table }) => (
        <Checkbox
          checked={
            table.getIsAllPageRowsSelected() ||
            (table.getIsSomePageRowsSelected() && "indeterminate")
          }
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all rows on this page"
          className="translate-y-[2px]"
        />
      ),
      cell: ({ row }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          className="translate-y-[2px]"
        />
      ),
      enableSorting: false,
      enableHiding: false,
      size: 40,
    },
    {
      id: "imageAndName",
      accessorFn: (row) => row.name,
      header: ({ column }) => <DataTableColumnHeader column={column} title="Product / Service" />,
      cell: ({ row }) => { /* ... same as before ... */
        const product = row.original;
        return (
          <div className="flex items-center gap-3 py-1">
            <div className="h-12 w-12 flex-shrink-0 rounded-md overflow-hidden">
              {product.imageUrl && product.imageUrl !== "/placeholder.svg" ? (
                <Image
                  src={product.imageUrl}
                  alt={product.name}
                  width={48}
                  height={48}
                  className="object-cover h-full w-full"
                />
              ) : (
                <ImagePlaceholder iconType={product.productType === 'RESOURCE' ? 'resource' : 'service'} className="h-12 w-12" iconClassName="h-6 w-6" />
              )}
            </div>
            <div className="flex flex-col min-w-0">
              <span
                className="font-medium text-sm leading-snug line-clamp-2 hover:text-primary cursor-pointer truncate"
                onClick={() => actionHandlers.onViewDetails(product)}
                title={product.name}
              >
                {product.name}
              </span>
              {product.baInfo && (
                <span className="text-xs text-muted-foreground flex items-center mt-0.5 truncate" title={`Offered by ${product.baInfo.name}`}>
                  <Avatar className="h-4 w-4 mr-1.5 border flex-shrink-0">
                    <AvatarImage src={product.baInfo.logoUrl} alt={product.baInfo.name} />
                    <AvatarFallback className="text-[8px] bg-secondary text-secondary-foreground">
                      {product.baInfo.name.charAt(0)}
                    </AvatarFallback>
                  </Avatar>
                  <span className="truncate">{product.baInfo.name}</span>
                </span>
              )}
            </div>
          </div>
        );
      },
      enableHiding: false,
      size: 300,
    },
    {
      accessorKey: "productType",
      header: ({ column }) => <DataTableColumnHeader column={column} title="Type" />,
      cell: ({ row }) => { /* ... same as before ... */
        const ProductIcon = row.original.productType === "RESOURCE" ? Package : Combine;
        return (
          <Badge variant={row.original.productType === "RESOURCE" ? "outline" : "secondary"} className="capitalize text-xs items-center font-normal">
            <ProductIcon className="mr-1.5 h-3.5 w-3.5 opacity-80" />
            {row.original.productType.toLowerCase()}
          </Badge>
        );
      },
      filterFn: (row, id, value) => value.includes(row.getValue(id)),
      size: 120,
    },
    { // ADDED currentState column for filtering
      accessorKey: "currentState",
      header: ({ column }) => <DataTableColumnHeader column={column} title="Status" />,
      cell: ({ row }) => {
        const stateInfo = getStateDisplayInfo(row.original.currentState);
        const StatusIconComponent = stateInfo.icon;
        return (
          <Badge variant={stateInfo.variant} className="capitalize text-xs items-center font-normal">
            <StatusIconComponent className="mr-1.5 h-3.5 w-3.5 opacity-80" />
            {stateInfo.label}
          </Badge>
        );
      },
      filterFn: (row, id, value) => value.includes(row.getValue(id)), // Faceted filter needs this
      size: 130,
    },
    {
      accessorKey: "basePrice",
      header: ({ column }) => <DataTableColumnHeader column={column} title="Price" className="justify-end" />,
      cell: ({ row }) => { /* ... same as before ... */
        const amount = row.original.basePrice;
        if (amount === undefined || amount === null) return <div className="text-right text-sm text-muted-foreground italic">N/A</div>;
        const formatted = new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(amount);
        return <div className="text-right font-medium text-sm">{formatted}</div>;
      },
      sortingFn: "alphanumeric",
      size: 100,
    },
    {
      id: "actions",
      cell: ({ row }) => (
        <CustomerProductRowActions
          product={row.original}
          onViewDetails={actionHandlers.onViewDetails}
          onReserve={actionHandlers.onReserve}
        />
      ),
      enableSorting: false,
      enableHiding: false, // Typically keep actions visible for customers
      size: 150,
    },
  ];// END OF FILE: components/customer/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/customer/CustomerProductCard.tsx

"use client";

import React from "react";
import Image from "next/image";
import { ProductListItemData } from "@/types/product";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { DollarSign, ShoppingCart, Info, Package, Combine } from "lucide-react"; // Removed UserCircle
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
// import { cn } from "@/lib/utils";
import { ImagePlaceholder } from "@/components/ui/image-placeholder"; // Import placeholder

interface CustomerProductCardProps {
  product: ProductListItemData;
  onViewDetailsClick: (product: ProductListItemData) => void;
  onReserveClick: (product: ProductListItemData) => void;
}

export function CustomerProductCard({ product, onViewDetailsClick, onReserveClick }: CustomerProductCardProps) {
  const ProductIcon = product.productType === "RESOURCE" ? Package : Combine;
  const baNameInitial = product.baInfo?.name ? product.baInfo.name.charAt(0).toUpperCase() : "B";

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-all duration-300 ease-in-out transform hover:-translate-y-1 group">
      <div className="relative w-full aspect-[16/10] overflow-hidden rounded-t-lg bg-muted"> {/* Added bg-muted as fallback */}
        {product.imageUrl ? (
          <Image
            src={product.imageUrl}
            alt={product.name}
            fill
            sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
            className="object-cover transition-transform duration-500 group-hover:scale-105"
          />
        ) : (
          <ImagePlaceholder iconType={product.productType === 'RESOURCE' ? 'resource' : 'service'} className="h-full w-full rounded-t-lg" iconClassName="h-16 w-16" />
        )}
        <Badge
          variant={product.productType === "RESOURCE" ? "outline" : "secondary"}
          className="absolute top-2.5 right-2.5 capitalize text-xs items-center backdrop-blur-sm bg-background/80 dark:bg-card/80 px-2.5 py-1 shadow"
        >
          <ProductIcon className="mr-1.5 h-3.5 w-3.5 opacity-90" />
          {product.productType.toLowerCase()}
        </Badge>
      </div>

      <CardHeader className="pb-2 pt-4">
        <CardTitle
          className="text-base sm:text-lg font-semibold leading-tight line-clamp-2 hover:text-primary cursor-pointer"
          onClick={() => onViewDetailsClick(product)}
          title={product.name}
        >
          {product.name}
        </CardTitle>
        {product.baInfo && (
          <CardDescription className="text-xs mt-1 flex items-center group-hover:text-foreground/90 transition-colors">
            <Avatar className="h-5 w-5 mr-1.5 border">
              <AvatarImage src={product.baInfo.logoUrl} alt={product.baInfo.name} />
              <AvatarFallback className="text-[9px] bg-secondary text-secondary-foreground">
                {baNameInitial}
              </AvatarFallback>
            </Avatar>
            By <span className="font-medium text-foreground/80 group-hover:text-foreground">{product.baInfo.name}</span>
          </CardDescription>
        )}
      </CardHeader>

      <CardContent className="flex-grow space-y-2 text-sm py-2">
        {product.description && (
          <p className="text-muted-foreground line-clamp-3 text-xs leading-relaxed min-h-[48px]">
            {product.description}
          </p>
        )}
        <div className="flex items-baseline text-xl font-bold text-primary pt-1">
          {product.basePrice != null ? (
            <>
              <DollarSign className="h-5 w-5 mr-0.5 opacity-90" />
              {product.basePrice.toFixed(2)}
              <span className="text-xs font-normal text-muted-foreground ml-1">
                {product.productType === 'SERVICE' ? '/session' : '/item'}
              </span>
            </>
          ) : (
            <span className="italic text-base text-muted-foreground">Price on enquiry</span>
          )}
        </div>
      </CardContent>

      <CardFooter className="pt-3 pb-4 flex flex-col sm:flex-row gap-2.5 items-stretch sm:items-center">
        <Button variant="outline" size="sm" onClick={() => onViewDetailsClick(product)} className="w-full sm:w-auto flex-1 group/button hover:border-primary/70">
          <Info className="mr-2 h-4 w-4 text-primary/80 group-hover/button:text-primary" /> Details
        </Button>
        <Button size="sm" onClick={() => onReserveClick(product)} className="w-full sm:w-auto flex-1 group/button">
          <ShoppingCart className="mr-2 h-4 w-4" /> Reserve
        </Button>
      </CardFooter>
    </Card>
  );
}// END OF FILE: components/customer/CustomerProductCard.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/customer/CustomerProductDataTableToolbar.tsx

"use client";

import { Table } from "@tanstack/react-table";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { ProductListItemData } from "@/types/product";
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  SlidersHorizontal,
  X,
  Package,
  Combine,
  Search,
  PlayCircle, // For ONGOING/IN_USE
  CheckCircle2, // For PUBLISHED/AVAILABLE/FINISHED
  InfoIcon, // For generic states
} from "lucide-react";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { DataTableFilterOption } from "@/types/table";
import { cn } from "@/lib/utils";

export const customerProductTypeOptions: DataTableFilterOption[] = [
  { label: "Resource", value: "RESOURCE", icon: Package },
  { label: "Service", value: "SERVICE", icon: Combine },
];

// Customer-facing product states - ensure these values match your data
export const customerProductStateOptions: DataTableFilterOption[] = [
  { label: "Published", value: "PUBLISHED", icon: CheckCircle2 }, // For Services
  { label: "Available", value: "AVAILABLE", icon: CheckCircle2 }, // For Resources
  { label: "Ongoing", value: "ONGOING", icon: PlayCircle },       // For Services
  // { label: "In Use", value: "IN_USE", icon: PlayCircle },      // For Resources (maybe less relevant as a filter *for* customers)
  // { label: "Finished", value: "FINISHED", icon: CheckCircle2 }, // For Services (maybe less relevant as primary filter)
  // Add other states if applicable, e.g., "PLANNED" if you show upcoming services
];


interface CustomerProductDataTableToolbarProps<TData extends ProductListItemData> {
  table: Table<TData>;
  globalFilter: string;
  setGlobalFilterAction: (value: string) => void;
}

export function CustomerProductDataTableToolbar<TData extends ProductListItemData>({
  table,
  globalFilter,
  setGlobalFilterAction,
}: CustomerProductDataTableToolbarProps<TData>) {
  const isFiltered = table.getState().columnFilters.length > 0 || !!globalFilter;

  const resetAllFilters = () => {
    table.resetColumnFilters();
    setGlobalFilterAction("");
  };

  return (
    <div className="flex flex-col sm:flex-row items-center justify-between gap-x-4 gap-y-2 py-4">
      <div className="flex flex-1 flex-col sm:flex-row items-center gap-2 w-full sm:w-auto">
        <div className="relative w-full sm:w-auto">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none" />
          <Input
            placeholder="Search all..."
            value={globalFilter ?? ""}
            onChange={(event) => setGlobalFilterAction(event.target.value)}
            className="h-10 w-full sm:w-[180px] lg:w-[250px] pl-10" // Adjusted width
          />
        </div>
        {table.getColumn("productType") && (
          <DataTableFacetedFilter
            column={table.getColumn("productType")}
            title="Type"
            options={customerProductTypeOptions}
          />
        )}
        {/* Add State Filter */}
        {table.getColumn("currentState") && (
          <DataTableFacetedFilter
            column={table.getColumn("currentState")}
            title="Status"
            options={customerProductStateOptions}
          />
        )}
      </div>

      <div className="flex items-center gap-x-2 w-full sm:w-auto justify-between sm:justify-end">
        {isFiltered && (
          <Button
            variant="ghost"
            onClick={resetAllFilters}
            className="h-10 px-2 lg:px-3 text-sm"

          >
            Reset Filters
            <X className="ml-2 h-4 w-4" />
          </Button>
        )}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" size="sm" className="h-10">
              <SlidersHorizontal className="mr-2 h-4 w-4" />
              View Columns
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-[180px]">
            <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>
            <DropdownMenuSeparator />
            {table
              .getAllColumns()
              .filter(
                (column) =>
                  typeof column.accessorFn !== "undefined" && column.getCanHide()
              )
              .map((column) => {
                const formatColumnId = (id: string) => {
                  return id
                    .replace(/([A-Z](?=[a-z]))|([A-Z]+(?=[A-Z][a-z]|$))/g, ' $1$2')
                    .replace(/_/g, " ")
                    .trim()
                    .replace(/\b\w/g, char => char.toUpperCase());
                };
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    className="capitalize"
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) => column.toggleVisibility(!!value)}
                  >
                    {formatColumnId(column.id)}
                  </DropdownMenuCheckboxItem>
                );
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </div>
  );
}// END OF FILE: components/customer/CustomerProductDataTableToolbar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/customer/ReservationModal.tsx

"use client";

import React, { useState } from "react";
import { ProductListItemData } from "@/types/product";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
import { CalendarIcon, Loader2 } from "lucide-react";
import { format, isValid } from "date-fns";
import { toast } from "sonner";
import { cn } from "@/lib/utils";
// Assume an API function for creating reservations will exist in apiClient.ts
// import { reservationApi } from "@/lib/apiClient";

interface ReservationModalProps {
  product?: ProductListItemData | null;
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  onReservationSuccess: () => void; // Callback after successful reservation
}

interface ReservationFormData {
  preferredDate?: Date;
  notes?: string;
}

export function ReservationModal({ product, isOpen, onOpenChange, onReservationSuccess }: ReservationModalProps) {
  const [formData, setFormData] = useState<ReservationFormData>({});
  const [isLoading, setIsLoading] = useState(false);

  const handleDateSelect = (date?: Date) => {
    setFormData(prev => ({ ...prev, preferredDate: date }));
  };

  const handleNotesChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setFormData(prev => ({ ...prev, notes: e.target.value }));
  };

  const handleSubmitReservation = async () => {
    if (!product) return;
    setIsLoading(true);

    // Basic validation (can be expanded with Zod)
    if (product.productType === "SERVICE" && !formData.preferredDate) {
      toast.error("Please select a preferred date for the service.");
      setIsLoading(false);
      return;
    }

    console.log("Submitting reservation for:", product.id, "with data:", formData);

    // SIMULATE API CALL
    try {
      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay
      // const reservationPayload = {
      //   productId: product.id,
      //   productType: product.productType,
      //   preferredDate: formData.preferredDate?.toISOString(),
      //   notes: formData.notes,
      //   // customerId would be added on the backend from the session/token
      // };
      // await reservationApi.create(reservationPayload); // Example API call

      toast.success(`Reservation request for "${product.name}" submitted!`);
      onReservationSuccess();
      onOpenChange(false); // Close modal
      setFormData({}); // Reset form
    } catch (error)  {
      console.error("Reservation submission error:", error);
      toast.error(error.message || "Failed to submit reservation. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  if (!product) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>Reserve: {product.name}</DialogTitle>
          <DialogDescription>
            Confirm your interest or select preferences for this {product.productType.toLowerCase()}.
            {product.basePrice && <span className="block mt-1">Price: ${product.basePrice.toFixed(2)}</span>}
          </DialogDescription>
        </DialogHeader>

        <div className="py-4 space-y-4">
          {product.productType === "SERVICE" && ( // Date picker typically for services
            <div className="space-y-1.5">
              <Label htmlFor="preferredDate">Preferred Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant={"outline"}
                    className={cn(
                      "w-full justify-start text-left font-normal h-10",
                      !formData.preferredDate && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {formData.preferredDate && isValid(formData.preferredDate) ? format(formData.preferredDate, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={formData.preferredDate}
                    onSelect={handleDateSelect}
                    disabled={(date) => date < new Date(new Date().setDate(new Date().getDate() - 1))} // Disable past dates
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
          )}

          <div className="space-y-1.5">
            <Label htmlFor="notes">Additional Notes or Questions</Label>
            <Textarea
              id="notes"
              placeholder={`Any specific requests for ${product.name}? (Optional)`}
              value={formData.notes || ""}
              onChange={handleNotesChange}
              rows={3}
            />
          </div>
        </div>

        <DialogFooter className="gap-2 sm:gap-0">
          <DialogClose asChild>
            <Button type="button" variant="outline">Cancel</Button>
          </DialogClose>
          <Button type="button" onClick={handleSubmitReservation} disabled={isLoading}>
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isLoading ? "Submitting..." : (product.productType === "RESOURCE" ? "Express Interest" : "Submit Request")}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}// END OF FILE: components/customer/ReservationModal.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dashboard/agency/team-roster.tsx

"use client";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { EmployeeDto } from "@/types/organization";

interface TeamRosterProps {
  employees: EmployeeDto[];
}

export function TeamRoster({ employees }: TeamRosterProps) {
  return (
    <Card className="col-span-4 md:col-span-3">
      <CardHeader>
        <CardTitle>Team Roster</CardTitle>
        <CardDescription>Employees assigned to this agency.</CardDescription>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[350px]">
          {employees.length > 0 ? (
            <div className="space-y-6">
              {employees.map((employee) => (
                <div key={employee.employee_id} className="flex items-center">
                  <Avatar className="h-9 w-9">
                    <AvatarImage src={employee.logo} alt="Avatar" />
                    <AvatarFallback>{employee.first_name?.charAt(0)}{employee.last_name?.charAt(0)}</AvatarFallback>
                  </Avatar>
                  <div className="ml-4 space-y-1">
                    <p className="text-sm font-medium leading-none">{employee.first_name} {employee.last_name}</p>
                    <p className="text-sm text-muted-foreground capitalize">{employee.employee_role?.replace(/_/g, " ").toLowerCase() || "Member"}</p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="flex h-[300px] items-center justify-center text-center text-sm text-muted-foreground">
              <p>No employees assigned to this agency yet.</p>
            </div>
          )}
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/dashboard/agency/team-roster.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dashboard/dashboard-card.tsx

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { cn } from "@/lib/utils";
import React from "react";

interface DashboardCardProps {
  title: string;
  description?: string;
  icon: React.ElementType;
  className?: string;
  children: React.ReactNode;
}

export function DashboardCard({ title, description, icon: Icon, className, children }: DashboardCardProps) {
  return (
    <Card className={cn("flex flex-col", className)}>
      <CardHeader>
        <div className="flex items-start justify-between">
          <div className="space-y-1">
            <CardTitle className="text-lg flex items-center gap-2">
              <Icon className="h-5 w-5 text-muted-foreground" />
              {title}
            </CardTitle>
            {description && <CardDescription>{description}</CardDescription>}
          </div>
        </div>
      </CardHeader>
      <CardContent className="flex-grow">
        {children}
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/dashboard/dashboard-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dashboard/organization/recent-activity.tsx

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";

// Mock Data
const activities = [
  { user: "Liam Johnson", avatar: "https://i.pravatar.cc/150?u=a1", action: "added a new employee:", target: "Olivia Davis" },
  { user: "Emma Williams", avatar: "https://i.pravatar.cc/150?u=a2", action: "updated the agency:", target: "Innovate East" },
  { user: "Noah Brown", avatar: "https://i.pravatar.cc/150?u=a3", action: "created a new customer profile:", target: "TechCorp Inc." },
  { user: "Ava Jones", avatar: "https://i.pravatar.cc/150?u=a4", action: "added a new supplier:", target: "Global Supplies" },
  { user: "William Garcia", avatar: "https://i.pravatar.cc/150?u=a5", action: "changed the status of:", target: "Main Project" },
];

export function RecentActivity() {
  return (
    <Card className="col-span-4 md:col-span-3">
      <CardHeader>
        <CardTitle>Recent Activity</CardTitle>
        <CardDescription>An overview of recent actions within your organization.</CardDescription>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[350px]">
          <div className="space-y-6">
            {activities.map((activity, index) => (
              <div key={index} className="flex items-center">
                <Avatar className="h-9 w-9">
                  <AvatarImage src={activity.avatar} alt="Avatar" />
                  <AvatarFallback>{activity.user.charAt(0)}</AvatarFallback>
                </Avatar>
                <div className="ml-4 space-y-1">
                  <p className="text-sm font-medium leading-none">
                    <span className="font-semibold text-primary">{activity.user}</span> {activity.action}
                  </p>
                  <p className="text-sm text-muted-foreground">{activity.target}</p>
                </div>
              </div>
            ))}
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/dashboard/organization/recent-activity.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dashboard/organization/sales-chart.tsx

"use client";

import {
  Bar,
  BarChart,
  ResponsiveContainer,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  CartesianGrid,
} from "recharts";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

const data = [
  { month: "Jan", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Feb", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Mar", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Apr", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "May", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Jun", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Jul", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Aug", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Sep", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Oct", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Nov", total: Math.floor(Math.random() * 5000) + 1000 },
  { month: "Dec", total: Math.floor(Math.random() * 5000) + 1000 },
];

export function SalesChart() {
  return (
    <Card className="col-span-4">
      <CardHeader>
        <CardTitle>Revenue Overview</CardTitle>
        <CardDescription>
          A summary of revenue generated per month this year.
        </CardDescription>
      </CardHeader>
      <CardContent className="pl-2">
        <ResponsiveContainer width="100%" height={350}>
          <BarChart data={data}>
            <CartesianGrid strokeDasharray="3 3" vertical={false} />
            <XAxis
              dataKey="month"
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
            />
            <YAxis
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
              tickFormatter={(value) => `$${value / 1000}K`}
            />
            <Tooltip
              cursor={{ fill: "hsl(var(--muted))" }}
              contentStyle={{
                backgroundColor: "hsl(var(--background))",
                border: "1px solid hsl(var(--border))",
              }}
            />
            <Legend iconType="circle" />
            <Bar
              dataKey="total"
              fill="hsl(var(--primary))"
              radius={[4, 4, 0, 0]}
              name="Monthly Revenue"
            />
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/dashboard/organization/sales-chart.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dashboard/organization/stat-card.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { cn } from "@/lib/utils";
import React from "react";

interface StatCardProps {
  title: string;
  value: string;
  description?: string;
  icon: React.ElementType;
  className?: string;
}

export function StatCard({ title, value, description, icon: Icon, className }: StatCardProps) {
  return (
    <Card className={cn("hover:shadow-md transition-shadow", className)}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <Icon className="h-4 w-4 text-muted-foreground" />
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
        {description && (
          <p className="text-xs text-muted-foreground">{description}</p>
        )}
      </CardContent>
    </Card>
  );
}

export function StatCardSkeleton() {
    return <Skeleton className="h-[126px] w-full" />;
}
// END OF FILE: components/dashboard/organization/stat-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dashboard-ui.tsx

"use client";

import { usePathname } from "next/navigation";
import { MainSidebar } from "@/components/main-sidebar";
import { AgencySidebar } from "@/components/organization/agencies/agency-sidebar";
// import { Sidebar } from "@/components/main-sidebar";

export function DashboardUI() {
  const pathname = usePathname();

  // This component now *only* decides which self-contained sidebar to render.
  if (pathname.startsWith("/business-actor/agency")) {
    return <AgencySidebar />;
  }

  // Default to the main sidebar for all other dashboard routes.
  return <MainSidebar />;
}
// END OF FILE: components/dashboard-ui.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/date-range-picker.tsx

"use client"

import * as React from "react"
import { CalendarIcon } from "@radix-ui/react-icons"
import { addDays, format } from "date-fns"
import type { DateRange } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"

export function DateRangePicker({ className }: React.HTMLAttributes<HTMLDivElement>) {
  const [date, setDate] = React.useState<DateRange | undefined>({
    from: new Date(2023, 0, 20),
    to: addDays(new Date(2023, 0, 20), 20),
  })

  return (
    <div className={cn("grid gap-2", className)}>
      <Popover>
        <PopoverTrigger asChild>
          <Button
            id="date"
            variant={"outline"}
            className={cn("w-[300px] justify-start text-left font-normal", !date && "text-muted-foreground")}
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {date?.from ? (
              date.to ? (
                <>
                  {format(date.from, "LLL dd, y")} - {format(date.to, "LLL dd, y")}
                </>
              ) : (
                format(date.from, "LLL dd, y")
              )
            ) : (
              <span>Pick a date</span>
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0" align="start">
          <Calendar
            initialFocus
            mode="range"
            defaultMonth={date?.from}
            selected={date}
            onSelect={setDate}
            numberOfMonths={2}
          />
        </PopoverContent>
      </Popover>
    </div>
  )
}

// END OF FILE: components/date-range-picker.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/dev/role-switcher.tsx

"use client";

import * as React from "react";
import { useRouter, usePathname } from "next/navigation";
import { User, ShieldAlert } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { cn } from "@/lib/utils";

type Role = "user" | "super-admin";

interface DevRoleSwitcherProps {
  className?: string;
}

export function DevRoleSwitcher({ className }: DevRoleSwitcherProps) {
  const router = useRouter();
  const pathname = usePathname();

  const currentRole: Role = pathname.startsWith('/super-admin') ? 'super-admin' : 'user';

  const handleRoleChange = (newRole: Role) => {
    if (newRole === 'super-admin') {
      router.push(`/super-admin/dashboard`);
    } else {
      router.push(`/dashboard`);
    }
  };

  // This component will only render in the development environment
  if (process.env.NODE_ENV !== 'development') {
    return null;
  }

  return (
    <div className={cn("flex items-center gap-2", className)}>
      <Select value={currentRole} onValueChange={handleRoleChange}>
        <SelectTrigger className="w-auto h-9 text-xs sm:text-sm focus:ring-0 focus:ring-offset-0 focus-visible:ring-offset-0 focus-visible:ring-0 shadow-sm border-dashed border-amber-500/50">
          <SelectValue placeholder="Switch Role..." />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="user" className="text-xs sm:text-sm">
            <div className="flex items-center gap-2"><User className="h-4 w-4 text-muted-foreground" /><span>User View</span></div>
          </SelectItem>
          <SelectItem value="super-admin" className="text-xs sm:text-sm">
            <div className="flex items-center gap-2"><ShieldAlert className="h-4 w-4 text-muted-foreground" /><span>Super Admin View</span></div>
          </SelectItem>
        </SelectContent>
      </Select>
    </div>
  );
}
// END OF FILE: components/dev/role-switcher.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/main-sidebar.tsx

"use client";

import React, { useState, useMemo, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { usePathname, useRouter } from "next/navigation";
import { useSession, signOut } from "next-auth/react";
import {
  Award,
  Briefcase,
  Building,
  Combine,
  FileText,
  FolderHeart,
  HandCoins,
  HelpCircle,
  LayoutGrid,
  Lightbulb,
  LogOut,
  Landmark,
  Menu,
  MessagesSquare,
  Package,
  Server,
  Settings,
  Share2,
  SidebarClose,
  Truck,
  UserCheck,
  Users,
  Users2,
  UsersRound,
  Wallet,
  Webhook,
  ArrowLeft,
  UserCog,
  Power,
  Info,
  Handshake,
  UserPlus,
  Shield,
  User,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { OrganizationSwitcher } from "@/components/organization/organization-switcher";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Separator } from "./ui/separator";
import { AgencySwitcher } from "./organization/agencies/agency-switcher";
import { toast } from "sonner";

// --- Navigation Definitions (No changes here) ---
const baOrgNavigation = [
  {
    name: "Organizations Hub",
    href: "/business-actor/organizations",
    icon: Building,
    isOrgSpecific: false,
  },
  {
    name: "Org. Dashboard",
    href: "/business-actor/dashboard",
    icon: LayoutGrid,
    isOrgSpecific: true,
  },
  {
    name: "Org. Profile",
    href: "/business-actor/org/profile",
    icon: Landmark,
    isOrgSpecific: true,
  },
  {
    name: "Agencies",
    href: "/business-actor/org/agencies",
    icon: Users2,
    isOrgSpecific: true,
  },
  {
    name: "Employees",
    href: "/business-actor/org/employees",
    icon: Users,
    isOrgSpecific: true,
  },
  {
    name: "Customers",
    href: "/business-actor/org/customers",
    icon: UsersRound,
    isOrgSpecific: true,
  },
  {
    name: "Suppliers",
    href: "/business-actor/org/suppliers",
    icon: Truck,
    isOrgSpecific: true,
  },
  {
    name: "Sales People",
    href: "/business-actor/org/sales-people",
    icon: UserCheck,
    isOrgSpecific: true,
  },
  {
    name: "Prospects",
    href: "/business-actor/org/prospects",
    icon: UserPlus,
    isOrgSpecific: true,
  },
  {
    name: "Third Parties",
    href: "/business-actor/org/third-parties",
    icon: Handshake,
    isOrgSpecific: true,
  },
  {
    name: "Products & Services",
    href: "/business-actor/org/products",
    icon: Package,
    isOrgSpecific: true,
  },
  {
    name: "Business Domains",
    href: "/super-admin/business-domains",
    icon: Briefcase,
    isOrgSpecific: true,
  },
  {
    name: "Proposed Activities",
    href: "/business-actor/org/proposed-activities",
    icon: Lightbulb,
    isOrgSpecific: true,
  },
  {
    name: "Certifications",
    href: "/business-actor/org/certifications",
    icon: Award,
    isOrgSpecific: true,
  },
  {
    name: "Practical Info",
    href: "/business-actor/org/practical-info",
    icon: Info,
    isOrgSpecific: true,
  },
];

const agencyNavigation = [
  {
    name: "Agency Dashboard",
    href: "/business-actor/agency/dashboard",
    icon: LayoutGrid,
  },
  {
    name: "Agency Profile",
    href: "/business-actor/agency/profile",
    icon: Landmark,
  },
  {
    name: "Agency Employees",
    href: "/business-actor/agency/employees",
    icon: Users,
  },
  {
    name: "Agency Customers",
    href: "/business-actor/agency/customers",
    icon: UsersRound,
  },
  {
    name: "Agency Suppliers",
    href: "/business-actor/agency/suppliers",
    icon: Truck,
  },
  {
    name: "Agency Sales People",
    href: "/business-actor/agency/sales-people",
    icon: UserCheck,
  },
  {
    name: "Agency Prospects",
    href: "/business-actor/agency/prospects",
    icon: UserPlus,
  },
];

const baGlobalNavigation = [
  { name: "My BA Profile", href: "/business-actor/profile", icon: UserCog },
  { name: "Wallet", href: "/business-actor/wallet", icon: Wallet },
  { name: "Bonus Config", href: "/business-actor/bonus", icon: HandCoins },
  { name: "API & Webhooks", href: "/business-actor/webhooks", icon: Webhook },
];

const userNavigation = [
  { name: "Dashboard", href: "/dashboard", icon: LayoutGrid },
  { name: "Services", href: "/services", icon: Briefcase },
  { name: "Invoices", href: "/invoices", icon: FileText },
  { name: "My Bonus", href: "/bonus", icon: HandCoins },
];

const superAdminNavigation = [
  { name: "Dashboard", href: "/super-admin/dashboard", icon: LayoutGrid },
  {
    name: "Business Actors",
    href: "/super-admin/business-actors",
    icon: Building,
  },
  { name: "Organizations", href: "/super-admin/organizations", icon: Users },
  { name: "Users", href: "/super-admin/users", icon: User },
  { name: "Roles", href: "/super-admin/roles", icon: Shield },
  {
    name: "Business Domains",
    href: "/super-admin/business-domains",
    icon: Briefcase,
  },
];

const bottomNavigation = [
  { name: "Help & Support", href: "/help", icon: HelpCircle },
  { name: "Settings", href: "/settings", icon: Settings },
];

export function MainSidebar() {
  const pathname = usePathname();
  const router = useRouter();
  const { data: session } = useSession();
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isMobileOpen, setIsMobileOpen] = useState(false);
  const {
    activeOrganizationId,
    activeAgencyDetails,
    clearActiveAgency,
    clearActiveOrganization,
  } = useActiveOrganization();

  // [FIX] This effect now correctly resets the collapsed state on mobile screen sizes.
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth < 1024) {
        setIsCollapsed(false); // Force sidebar to be expanded in its logic for mobile
      }
    };
    window.addEventListener("resize", handleResize);
    handleResize(); // Run on initial mount
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const { isBusinessActor, isSuperAdmin } = useMemo(
    () => ({
      isBusinessActor: !!session?.user.businessActorId,
      isSuperAdmin: session?.user.roles?.includes("SUPER_ADMIN_ROLE"),
    }),
    [session]
  );

  const isAgencyContext = pathname.startsWith("/business-actor/agency");
  const isWorkspace = pathname.startsWith("/business-actor");

  let mainNav: any[] = userNavigation;
  let globalNav: any[] = [];
  let sidebarTitle = "My Account";
  let homeLink = "/dashboard";
  let ContextSwitcher = null;

  if (isSuperAdmin) {
    mainNav = superAdminNavigation;
    sidebarTitle = "Platform Admin";
    homeLink = "/super-admin/dashboard";
  } else if (isBusinessActor && isWorkspace) {
    if (isAgencyContext) {
      mainNav = agencyNavigation;
      sidebarTitle = activeAgencyDetails?.short_name || "Agency";
      homeLink = "/business-actor/agency/dashboard";
      ContextSwitcher = () => <AgencySwitcher isCollapsed={isCollapsed} />;
      // Con
    } else {
      mainNav = baOrgNavigation;
      globalNav = baGlobalNavigation;
      sidebarTitle = "BA Workspace";
      // homeLink = "/business-actor/dashboard";
      homeLink = "/business-actor/organizations"; // This is the new default home
      ContextSwitcher = () => (
        <OrganizationSwitcher isCollapsed={isCollapsed} />
      );
    }
  } else if (session?.user) {
    mainNav = userNavigation;
    globalNav = baGlobalNavigation;
    sidebarTitle = "My Account";
    homeLink = "/dashboard";
  }

  const ExitButton = () => {
    if (isAgencyContext) {
      return (
        <Tooltip delayDuration={0}>
          <TooltipTrigger asChild>
            <Button
              onClick={() => {
                clearActiveAgency();
                router.push("/business-actor/dashboard");
              }}
              variant="ghost"
              className="w-full justify-start h-9 px-3 text-destructive hover:text-destructive hover:bg-destructive/10"
            >
              <ArrowLeft
                className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")}
              />
              {!isCollapsed && "Exit Agency"}
            </Button>
          </TooltipTrigger>
          {isCollapsed && (
            <TooltipContent side="right">Exit Agency</TooltipContent>
          )}
        </Tooltip>
      );
    }
    if (isBusinessActor && isWorkspace) {
      return (
        <Tooltip delayDuration={0}>
          <TooltipTrigger asChild>
            <Button
              onClick={() => {
                clearActiveOrganization();
                router.replace("/dashboard");
                toast.info("Exited Business Workspace.");
              }}
              variant="ghost"
              className="flex items-center w-full justify-start h-9 px-3 text-sidebar-foreground hover:bg-amber-500/10 hover:text-amber-600"
            >
              <Power
                className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")}
              />
              {!isCollapsed && "Exit Workspace"}
            </Button>
          </TooltipTrigger>
          {isCollapsed && (
            <TooltipContent side="right">Exit Workspace</TooltipContent>
          )}
        </Tooltip>
      );
    }
    return null;
  };

  const NavItem = ({
    item,
  }: {
    item: {
      name: string;
      href: string;
      icon: React.ElementType;
      isOrgSpecific?: boolean;
    };
  }) => {
    const isDisabled = item.isOrgSpecific && !activeOrganizationId;
    const isActive = !isDisabled && pathname.startsWith(item.href);

    return (
      <Tooltip delayDuration={0}>
        <TooltipTrigger asChild>
          <Link
            href={isDisabled ? "#" : item.href}
            className={cn(
              "flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors h-9",
              isActive && "bg-sidebar-accent text-sidebar-accent-foreground",
              !isDisabled &&
                !isActive &&
                "text-sidebar-foreground hover:bg-sidebar-accent/80",
              isDisabled && "cursor-not-allowed text-muted-foreground/50",
              isCollapsed && "justify-center px-2"
            )}
            onClick={() =>
              isMobileOpen && !isDisabled && setIsMobileOpen(false)
            }
          >
            <item.icon
              className={cn(
                "h-[18px] w-[18px] shrink-0",
                !isCollapsed && "mr-3"
              )}
            />
            {!isCollapsed && <span className="truncate">{item.name}</span>}
          </Link>
        </TooltipTrigger>
        {isCollapsed && (
          <TooltipContent side="right">{item.name}</TooltipContent>
        )}
      </Tooltip>
    );
  };

  return (
    <TooltipProvider>
      <Button
        variant="outline"
        size="icon"
        className="lg:hidden fixed top-4 left-4 z-[60]"
        onClick={() => setIsMobileOpen((v) => !v)}
      >
        <Menu className="h-5 w-5" />
      </Button>
      <div
        className={cn(
          "fixed inset-y-0 left-0 z-50 flex h-full flex-col border-r bg-sidebar text-sidebar-foreground transition-all duration-300 ease-in-out lg:sticky lg:top-0 lg:h-screen",
          isCollapsed ? "w-[72px]" : "w-64",
          isMobileOpen
            ? "translate-x-0 shadow-xl"
            : "-translate-x-full lg:translate-x-0"
        )}
      >
        <div
          className={cn(
            "flex h-16 shrink-0 items-center border-b px-4",
            isCollapsed && "justify-center px-2"
          )}
        >
          <Link
            href={homeLink}
            className="flex items-center gap-2 font-semibold"
          >
            <Image
              src="/logo.svg"
              alt="Logo"
              width={32}
              height={32}
              priority
              className="shrink-0"
            />
            {!isCollapsed && (
              <span className="text-lg truncate">{sidebarTitle}</span>
            )}
          </Link>
          <Button
            variant="ghost"
            size="icon"
            className={cn("h-8 w-8 ml-auto hidden lg:flex")}
            onClick={() => setIsCollapsed(!isCollapsed)}
          >
            <SidebarClose
              className={cn(
                "h-4 w-4 transition-transform",
                isCollapsed && "rotate-180"
              )}
            />
          </Button>
          {isMobileOpen && (
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8 ml-auto lg:hidden"
              onClick={() => setIsMobileOpen(false)}
            >
              <SidebarClose className="h-4 w-4" />
            </Button>
          )}
        </div>
        {ContextSwitcher && <ContextSwitcher />}
        <div className="flex flex-1 flex-col overflow-y-auto overflow-x-hidden">
          <nav
            className={cn(
              "flex-1 space-y-1 py-4",
              isCollapsed ? "px-2" : "px-4"
            )}
          >
            {mainNav.map((item) => (
              <NavItem key={item.name} item={item} />
            ))}
            {globalNav.length > 0 && (
              <>
                <Separator className="my-3" />
                {globalNav.map((item) => (
                  <NavItem key={item.name} item={item} />
                ))}
              </>
            )}
          </nav>
          <div
            className={cn("mt-auto border-t", isCollapsed ? "px-2" : "px-4")}
          >
            <div className="space-y-1 py-4">
              <ExitButton />
              {bottomNavigation.map((item) => (
                <NavItem key={item.name} item={item} />
              ))}
              <Tooltip delayDuration={0}>
                <TooltipTrigger asChild>
                  <Button
                    onClick={() => signOut({ callbackUrl: "/login" })}
                    variant="ghost"
                    className="flex items-center w-full justify-start h-9 px-3 text-sidebar-foreground hover:bg-destructive/10 hover:text-destructive"
                  >
                    <LogOut
                      className={cn(
                        "h-[18px] w-[18px]",
                        !isCollapsed && "mr-3"
                      )}
                    />
                    {!isCollapsed && "Logout"}
                  </Button>
                </TooltipTrigger>
                {isCollapsed && (
                  <TooltipContent side="right">Logout</TooltipContent>
                )}
              </Tooltip>
            </div>
          </div>
        </div>
      </div>
      {isMobileOpen && (
        <div
          className="fixed inset-0 z-40 bg-black/50 lg:hidden"
          onClick={() => setIsMobileOpen(false)}
        />
      )}
    </TooltipProvider>
  );
}
// END OF FILE: components/main-sidebar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/map/map-component.tsx

"use client";

import React, { useEffect } from "react";
import {
  MapContainer,
  TileLayer,
  Marker,
  Popup,
  useMapEvents,
  useMap,
} from "react-leaflet";
import L, { LatLngExpression, Icon } from "leaflet";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Expand, Shrink } from "lucide-react";

import "leaflet/dist/leaflet.css";
import markerIcon2x from "leaflet/dist/images/marker-icon-2x.png";
import markerIcon from "leaflet/dist/images/marker-icon.png";
import markerShadow from "leaflet/dist/images/marker-shadow.png";

L.Icon.Default.mergeOptions({
  iconUrl: markerIcon.src,
  iconRetinaUrl: markerIcon2x.src,
  shadowUrl: markerShadow.src,
});

export interface MapMarker {
  id: string | number;
  position: LatLngExpression;
  popupContent?: React.ReactNode;
  icon?: Icon;
}

export interface MapComponentProps {
  center: LatLngExpression;
  zoom: number;
  markers?: MapMarker[];
  onLocationSelectAction?: (lat: number, lng: number) => void;
  className?: string;
  isLocationPicker?: boolean;
  isFullscreen?: boolean;
  onToggleFullscreenAction?: () => void;
}

function LocationPicker({
  onLocationSelectAction,
}: {
  onLocationSelectAction: (lat: number, lng: number) => void;
}) {
  useMapEvents({
    click(e)  {
      onLocationSelectAction(e.latlng.lat, e.latlng.lng);
    },
  });
  return null;
}

function ChangeView({
  center,
  zoom,
}: {
  center: LatLngExpression;
  zoom: number;
}) {
  const map = useMap();
  useEffect(() => {
    map.flyTo(center, zoom, {
      animate: true,
      duration: 1.5,
    });
    setTimeout(() => {
      map.invalidateSize();
    }, 400);
  }, [center, zoom, map]);
  return null;
}

export function MapComponent({
  center,
  zoom,
  markers = [],
  onLocationSelectAction,
  className,
  isLocationPicker = false,
  isFullscreen = false,
  onToggleFullscreenAction,
}: MapComponentProps) {
  const handleToggleFullscreen = (e: React.MouseEvent) => {
    // CRITICAL: Stop the event from bubbling up to the map click listener
    e.stopPropagation();
    if (onToggleFullscreenAction) {
      onToggleFullscreenAction();
    }
  };
  const icon = new L.Icon({
    iconUrl: "/maps/marker-icon.png",
    shadowUrl: "/maps/marker-shadow.png",
    iconSize: [22, 32],
    shadowSize: [41, 41], // size of the shadow
    iconAnchor: [22, 64], // point of the icon which will correspond to marker location
    shadowAnchor: [24, 72], // the same for the shadow
    popupAnchor: [-11, -62], // point from which the popup should open relative to the iconAnchor
  });

  return (
    // The new wrapper div that enables overlaying
    <div className={cn("relative h-full w-full", className)}>
      <MapContainer
        center={center}
        zoom={zoom}
        scrollWheelZoom={true}
        // The MapContainer itself should always fill its relative parent
        className="h-full w-full z-0"
      >
        <ChangeView center={center} zoom={zoom} />
        <TileLayer
          attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />

        {markers.map((marker) => (
          <Marker key={marker.id} position={marker.position} icon={icon}>
            {marker.popupContent && <Popup>{marker.popupContent}</Popup>}
          </Marker>
        ))}

        {isLocationPicker && onLocationSelectAction && (
          <LocationPicker onLocationSelectAction={onLocationSelectAction} />
        )}
      </MapContainer>

      {/* The button is now a sibling to the map, overlaid with absolute positioning */}
      {onToggleFullscreenAction && (
        <div className="absolute top-3 right-3 z-[1000]">
          <Button
            variant="secondary"
            size="icon"
            onClick={handleToggleFullscreen}
            className=" h-9 w-9"
            title={isFullscreen ? "Exit Fullscreen" : "Enter Fullscreen"}
          >
            {isFullscreen ? (
              <Shrink className="h-4 w-4" />
            ) : (
              <Expand className="h-4 w-4" />
            )}
          </Button>
        </div>
      )}
    </div>
  );
}
// END OF FILE: components/map/map-component.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/map/map-skeleton.tsx

import { Skeleton } from "@/components/ui/skeleton";
import { MapPin } from "lucide-react";
import { cn } from "@/lib/utils";

export function MapSkeleton({ className }: { className?: string }) {
  return (
    <div
      className={cn(
        "relative w-full h-full min-h-[300px] bg-muted rounded-md flex items-center justify-center overflow-hidden",
        className
      )}
    >
      <div className="absolute inset-0 bg-grid-pattern opacity-5"></div>
      <div className="flex flex-col items-center text-muted-foreground z-10">
        <MapPin className="h-10 w-10 animate-bounce" />
        <p className="mt-2 text-sm font-medium">Loading Map...</p>
      </div>
      <Skeleton className="absolute inset-0 w-full h-full" />
    </div>
  );
}
// END OF FILE: components/map/map-skeleton.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/map/map-view.tsx

import dynamic from "next/dynamic";
import { MapSkeleton } from "./map-skeleton";
import { MapComponentProps } from "./map-component";

const DynamicMapComponent = dynamic(
  () => import("./map-component").then((mod) => mod.MapComponent),
  {
    ssr: false,
    loading: () => <MapSkeleton />,
  }
);

// The props type is now correctly imported from the implementation file.
export function MapView(props: MapComponentProps) {
  return <DynamicMapComponent {...props} />;
}
// END OF FILE: components/map/map-view.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/mode-toggle.tsx

"use client"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>Light</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>Dark</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>System</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

// END OF FILE: components/mode-toggle.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/not-found-buttons.tsx

// FILE: components/not-found-buttons.tsx
"use client"; // <-- Mark as Client Component

import Link from 'next/link';
import { useRouter } from 'next/navigation'; // Use App Router router
import { ArrowLeft } from 'lucide-react'; // Add ArrowLeft icon

import { Button } from '@/components/ui/button';
import { DashboardIcon } from '@radix-ui/react-icons';

interface NotFoundButtonsProps {
  isAuthenticated: boolean;
  primaryLinkHref: string;
  primaryLinkText: string;
}

export function NotFoundButtons({
  primaryLinkHref,
  primaryLinkText,
}: NotFoundButtonsProps) {
  const router = useRouter();

  const handleGoBack = () => {
    router.back(); // Use router.back() for navigation
  };

  return (
    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
      {/* Go Back Button */}
      <Button
        variant="outline" // Style as secondary action
        size="lg"
        onClick={handleGoBack}
        className="transition-transform hover:scale-105"
      >
        <ArrowLeft className="mr-2 h-5 w-5" />
        Go Back
      </Button>

      {/* Primary Action Button (Dashboard/Homepage) */}
      <Button asChild size="lg" className="transition-transform hover:scale-105">
        <Link href={primaryLinkHref} className="inline-flex items-center gap-2">
          <DashboardIcon className="h-5 w-5" />
          {primaryLinkText}
        </Link>
      </Button>
    </div>
  );
}// END OF FILE: components/not-found-buttons.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/notifications.tsx

"use client"

import { useState } from "react"
import { Bell, X, Info, AlertTriangle, CreditCard, TrendingUp, Gift } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"

const notifications = [
  {
    id: 1,
    title: "New Feature",
    message: "Check out our new budget tracking tool!",
    date: "2023-07-15",
    icon: Info,
    color: "text-blue-500",
  },
  {
    id: 2,
    title: "Account Alert",
    message: "Unusual activity detected on your account.",
    date: "2023-07-14",
    icon: AlertTriangle,
    color: "text-yellow-500",
  },
  {
    id: 3,
    title: "Payment Due",
    message: "Your credit card payment is due in 3 days.",
    date: "2023-07-13",
    icon: CreditCard,
    color: "text-red-500",
  },
  {
    id: 4,
    title: "Investment Update",
    message: "Your investment portfolio has grown by 5% this month.",
    date: "2023-07-12",
    icon: TrendingUp,
    color: "text-green-500",
  },
  {
    id: 5,
    title: "New Offer",
    message: "Youe eligible for a new savings account with higher interest!",
    date: "2023-07-11",
    icon: Gift,
    color: "text-purple-500",
  },
]

export function Notifications() {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <div className="relative">
      <Button
        variant="ghost"
        size="icon"
        className="relative"
        onClick={() => setIsOpen(!isOpen)}
        aria-label="Notifications"
      >
        <Bell className="h-5 w-5" />
        <span className="absolute top-0 right-0 h-2 w-2 bg-red-500 rounded-full" />
      </Button>
      {isOpen && (
        <Card className="absolute right-0 mt-2 w-96 z-50">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Notifications</CardTitle>
            <Button variant="ghost" size="icon" onClick={() => setIsOpen(false)} aria-label="Close notifications">
              <X className="h-4 w-4" />
            </Button>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-[400px] pr-4">
              {notifications.map((notification) => (
                <Card key={notification.id} className="mb-4 last:mb-0 border shadow-sm">
                  <CardContent className="p-4">
                    <div className="flex items-start space-x-4">
                      <div className={`${notification.color} p-2 rounded-full bg-opacity-10`}>
                        <notification.icon className={`h-5 w-5 ${notification.color}`} />
                      </div>
                      <div className="flex-1 space-y-1">
                        <p className="text-sm font-medium leading-none">{notification.title}</p>
                        <p className="text-sm text-muted-foreground">{notification.message}</p>
                        <p className="text-xs text-muted-foreground">{notification.date}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </ScrollArea>
          </CardContent>
        </Card>
      )}
    </div>
  )
}

// END OF FILE: components/notifications.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/address-list.tsx

"use client";

import React, { useState, useEffect, useCallback } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  AddressDto,
  AddressableType,
  CreateAddressRequest,
} from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { OrgAddressForm, addressSchema } from "./forms/org-address-form";
import {
  PlusCircle,
  Edit2,
  Trash2,
  Star,
  MapPin,
  Loader2,
  Eye,
} from "lucide-react";
import { toast } from "sonner";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import { MapView } from "../map/map-view";
import { Form } from "@/components/ui/form";

interface AddressListProps {
  organizationId: string;
  addressableType: AddressableType;
}

export function AddressList({
  organizationId,
  addressableType,
}: AddressListProps) {
  const [addresses, setAddresses] = useState<AddressDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isMapViewOpen, setIsMapViewOpen] = useState(false);
  const [editingAddress, setEditingAddress] = useState<AddressDto | undefined>(
    undefined
  );
  const [addressToView, setAddressToView] = useState<AddressDto | null>(null);

  const form = useForm<z.infer<typeof addressSchema>>({
    resolver: zodResolver(addressSchema),
    defaultValues: {
      address_line_1: "",
      city: "",
      state: "",
      zip_code: "",
      country: "",
    },
  });

  const fetchAddresses = useCallback(async () => {
    setIsLoading(true);
    try {
      const data = await organizationRepository.getAddresses(
        addressableType,
        organizationId
      );
      setAddresses(data || []);
    } catch (error) {
      toast.error("Failed to load addresses.");
    } finally {
      setIsLoading(false);
    }
  }, [organizationId, addressableType]);

  useEffect(() => {
    fetchAddresses();
  }, [fetchAddresses]);

  const handleFormSubmit = async (data: z.infer<typeof addressSchema>) => {
    const payload = { ...data, country_id: data.country };
    if (editingAddress && editingAddress.address_id) {
      await organizationRepository.updateAddress(
        addressableType,
        organizationId,
        editingAddress.address_id,
        payload
      );
      toast.success("Address updated successfully!");
    } else {
      await organizationRepository.createAddress(
        addressableType,
        organizationId,
        payload as CreateAddressRequest
      );
      toast.success("Address added successfully!");
    }
    await fetchAddresses();
    setIsFormOpen(false);
    setEditingAddress(undefined);
  };

  const handleEdit = (address: AddressDto) => {
    form.reset({
      address_line_1: address.address_line_1 || "",
      address_line_2: address.address_line_2 || "",
      city: address.city || "",
      state: address.state || "",
      zip_code: address.zip_code || "",
      country: address.country_id || "",
      latitude: address.latitude,
      longitude: address.longitude,
    });
    setEditingAddress(address);
    setIsFormOpen(true);
  };

  const handleCreate = () => {
    form.reset({
      address_line_1: "",
      city: "",
      state: "",
      zip_code: "",
      country: "",
    });
    setEditingAddress(undefined);
    setIsFormOpen(true);
  };

  const handleDelete = async (addressId?: string) => {
    if (!addressId || !confirm("Are you sure?")) return;
    try {
      await organizationRepository.deleteAddressById(
        addressableType,
        organizationId,
        addressId
      );
      toast.success("Address deleted.");
      fetchAddresses();
    } catch (error)  {
      toast.error(error.message || "Failed to delete address.");
    }
  };

  const handleSetDefault = async (addressId?: string) => {
    if (!addressId) return;
    try {
      await organizationRepository.markAddressAsFavorite(
        addressableType,
        organizationId,
        addressId
      );
      toast.success("Default address updated.");
      await fetchAddresses();
    } catch (error)  {
      toast.error(error.message || "Failed to set default address.");
    }
  };

  const handleViewOnMap = (address: AddressDto) => {
    setAddressToView(address);
    setIsMapViewOpen(true);
  };

  if (isLoading)
    return (
      <div className="space-y-3">
        <Skeleton className="h-20 w-full rounded-md" />
        <Skeleton className="h-20 w-full rounded-md" />
      </div>
    );

  return (
    <div className="space-y-4">
      <Button size="sm" variant="outline" onClick={handleCreate}>
        <PlusCircle className="mr-2 h-4 w-4" /> Add Address
      </Button>

      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
        {/* THE FIX: Increased max-width for the address form dialog */}
        <DialogContent className="sm:max-w-4xl">
          <DialogHeader>
            <DialogTitle>
              {editingAddress ? "Edit Address" : "Add New Address"}
            </DialogTitle>
          </DialogHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleFormSubmit)}>
              {/* Note: The OrgAddressForm doesnapper here */}
              <OrgAddressForm form={form} title="" description="" />
              <DialogFooter className="mt-6 pt-4 border-t sm:justify-end">
                <DialogClose asChild>
                  <Button type="button" variant="outline">
                    Cancel
                  </Button>
                </DialogClose>
                <Button type="submit" disabled={form.formState.isSubmitting}>
                  {form.formState.isSubmitting && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}{" "}
                  Save
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      <Dialog open={isMapViewOpen} onOpenChange={setIsMapViewOpen}>
        <DialogContent className="max-w-3xl h-[70vh] flex flex-col p-2">
          <DialogHeader className="p-4 pb-2">
            <DialogTitle>Address Location</DialogTitle>
            <DialogDescription>
              {addressToView?.address_line_1}, {addressToView?.city}
            </DialogDescription>
          </DialogHeader>
          <div className="flex-grow w-full h-full rounded-md overflow-hidden">
            {addressToView?.latitude && addressToView?.longitude && (
              <MapView
                center={[addressToView.latitude, addressToView.longitude]}
                zoom={16}
                markers={[
                  {
                    id: addressToView.address_id!,
                    position: [addressToView.latitude, addressToView.longitude],
                  },
                ]}
              />
            )}
          </div>
        </DialogContent>
      </Dialog>

      {addresses.length === 0 ? (
        <p className="text-sm text-muted-foreground text-center py-6">
          No addresses found.
        </p>
      ) : (
        <div className="space-y-3">
          {addresses.map((addr) => (
            <div
              key={addr.address_id}
              className="p-4 border rounded-lg flex justify-between items-start text-sm"
            >
              <div>
                <p className="font-semibold text-foreground flex items-center">
                  <MapPin className="h-4 w-4 mr-2 text-muted-foreground" />
                  {addr.address_line_1}
                  {addr.address_line_2 && `, ${addr.address_line_2}`}
                </p>
                <p className="text-muted-foreground pl-6">
                  {addr.city}, {addr.state} {addr.zip_code}
                </p>
                {addr.is_default && (
                  <Badge
                    variant="secondary"
                    className="mt-2 ml-6 text-xs font-normal"
                  >
                    Default Address
                  </Badge>
                )}
              </div>
              <div className="flex items-center gap-1 flex-shrink-0 ml-2">
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8"
                  onClick={() => handleViewOnMap(addr)}
                  title="View on map"
                  disabled={!addr.latitude || !addr.longitude}
                >
                  <Eye className="h-4 w-4" />
                </Button>
                {!addr.is_default && (
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-8 w-8"
                    onClick={() => handleSetDefault(addr.address_id)}
                    title="Set as default"
                  >
                    <Star className="h-4 w-4" />
                  </Button>
                )}
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8"
                  onClick={() => handleEdit(addr)}
                  title="Edit address"
                >
                  <Edit2 className="h-4 w-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-destructive hover:text-destructive"
                  onClick={() => handleDelete(addr.address_id)}
                  title="Delete address"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
// END OF FILE: components/organization/address-list.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-basic-info-form.tsx

"use client";

import { useFormContext } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { CardContent } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { BusinessDomainSearchPicker } from "../forms/business-domain-search-picker";

export function AgencyBasicInfoForm() {
  const { control } = useFormContext();
  return (
    <CardContent className="space-y-4">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <FormField
          control={control}
          name="long_name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Official Name *</FormLabel>
              <FormControl>
                <Input
                  placeholder="e.g., Yowyob West Coast Division"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="short_name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Short Name / Branch Name *</FormLabel>
              <FormControl>
                <Input placeholder="e.g., Yowyob West" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>
      <FormField
        control={control}
        name="location"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Location *</FormLabel>
            <FormControl>
              <Input placeholder="e.g., San Francisco, CA" {...field} />
            </FormControl>
            <FormDescription>
              A general location identifier (e.g., city, state).
            </FormDescription>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        control={control}
        name="description"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Description</FormLabel>
            <FormControl>
              <Textarea
                rows={4}
                placeholder="Describe the agency purpose or specialty."
                {...field}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <BusinessDomainSearchPicker
        name="business_domains"
        label="Business Domains *"
      />
      <FormField
        control={control}
        name="transferable"
        render={({ field }) => (
          <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm">
            <div className="space-y-0.5">
              <FormLabel>Transferable</FormLabel>
              <FormDescription>
                Can resources/personnel be transferred from this agency?
              </FormDescription>
            </div>
            <FormControl>
              <Switch checked={field.value} onCheckedChange={field.onChange} />
            </FormControl>
          </FormItem>
        )}
      />
    </CardContent>
  );
}
// END OF FILE: components/organization/agencies/agency-basic-info-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-branding-form.tsx

"use client";

import { useFormContext, useFieldArray, UseFormReturn } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { PlusCircle, Trash2 } from "lucide-react";

// THE FIX: Define the props interface
interface AgencyBrandingFormProps {
  form: UseFormReturn<any>;
}

export function AgencyBrandingForm({ form }: AgencyBrandingFormProps) {
  // THE FIX: Destructure props
  const { control } = form; // THE FIX: Get control from the passed form prop

  const { fields, append, remove } = useFieldArray({
    control,
    name: "images",
  });

  return (
    <Card className="ml-2 mr-2">
      <CardContent className="space-y-4">
        <FormField
          control={control}
          name="logo"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Logo URL</FormLabel>
              <FormControl>
                <Input
                  type="url"
                  placeholder="https://example.com/logo.png"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="greeting_message"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Greeting Message</FormLabel>
              <FormControl>
                <Textarea placeholder="Welcome to our branch!" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="social_network"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Social Network URL</FormLabel>
              <FormControl>
                <Input
                  type="url"
                  placeholder="https://linkedin.com/company/yowyob-west"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        {/* <FormField
          control={control}
          name="keywords"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Keywords</FormLabel>
              <FormControl>
                <Input placeholder="tech, west-coast, innovation" {...field} />
              </FormControl>
              <FormDescription>
                Comma-separated keywords for searchability.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        /> */}
        <div className="space-y-3">
          <FormLabel>Image Gallery URLs</FormLabel>
          <FormDescription>
            Add URLs for images showcasing the agency.
          </FormDescription>
          {fields.map((field, index) => (
            <FormField
              key={field.id}
              control={control}
              name={`images.${index}`}
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center gap-2">
                    <FormControl>
                      <Input
                        placeholder="https://example.com/image.png"
                        {...field}
                      />
                    </FormControl>
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      onClick={() => remove(index)}
                      className="text-destructive hover:text-destructive h-9 w-9 flex-shrink-0"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          ))}
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() => append({ value: "" })}
          >
            <PlusCircle className="mr-2 h-4 w-4" /> Add Image URL
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/organization/agencies/agency-branding-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-card.tsx

"use client";

import React from "react";
import { AgencyDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  LogIn,
  Building,
  MapPin,
  CheckCircle,
  XCircle,
} from "lucide-react";
import { cn } from "@/lib/utils";
import Image from "next/image";

interface AgencyCardProps {
  agency: AgencyDto;
  onEnterAction: (agency: AgencyDto) => void;
  onEditAction: (agencyId: string) => void;
  onDeleteAction: (agency: AgencyDto) => void;
}

export function AgencyCard({
  agency,
  onEnterAction,
  onEditAction,
  onDeleteAction,
}: AgencyCardProps) {
  const statusInfo = agency.is_active
    ? { icon: CheckCircle, color: "text-green-500", label: "Active" }
    : { icon: XCircle, color: "text-destructive", label: "Inactive" };

  return (
    // [FIX] Added flex, flex-col, and h-full to ensure consistent card height in a grid
    <Card className="flex flex-col h-full shadow-md hover:shadow-xl transition-all duration-300 ease-in-out transform hover:-translate-y-1 group">
      <CardHeader>
        <div className="flex justify-between items-start gap-3">
          <div className="flex items-center gap-4">
            {agency.logo ? (
              <Image
                src={agency.logo}
                alt={agency.long_name || ""}
                width={48}
                height={48}
                className="h-12 w-12 rounded-lg object-cover border"
              />
            ) : (
              <div className="h-12 w-12 rounded-lg bg-muted flex items-center justify-center border">
                <Building className="h-6 w-6 text-muted-foreground" />
              </div>
            )}
            <div>
              <CardTitle
                className="text-md font-bold leading-tight line-clamp-2"
                title={agency.long_name}
              >
                {agency.long_name}
              </CardTitle>
              <CardDescription className="text-xs">
                {agency.short_name}
              </CardDescription>
            </div>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 flex-shrink-0"
              >
                <MoreHorizontal className="h-4 w-4" />
                <span className="sr-only">Agency actions</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onEditAction(agency.agency_id!)}>
                <Edit3 className="mr-2 h-4 w-4" /> Edit Details
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => onDeleteAction(agency)}
                className="text-destructive focus:text-destructive"
              >
                <Trash2 className="mr-2 h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      {/* [FIX] Added flex-grow to make this section expand and push the footer down */}
      <CardContent className="flex-grow space-y-3 text-sm py-2">
        <div className="flex items-center text-muted-foreground text-xs">
          <MapPin className="h-3.5 w-3.5 mr-1.5 flex-shrink-0" />
          <span>{agency.location || "Location not set"}</span>
        </div>
        <p className="text-muted-foreground line-clamp-3 text-xs leading-relaxed min-h-[48px]">
          {agency.description || "No description provided."}
        </p>
        <div className="flex flex-wrap gap-1">
          {agency.business_domains?.slice(0, 2).map((domain, index) => (
            <Badge key={index} variant="secondary" className="font-normal">
              {domain}
            </Badge>
          ))}
          {(agency.business_domains?.length ?? 0) > 2 && (
            <Badge variant="outline">
              +{(agency.business_domains?.length ?? 0) - 2} more
            </Badge>
          )}
        </div>
      </CardContent>
      <CardFooter className="pt-3 pb-4 flex justify-between items-center">
        <Badge
          variant={agency.is_active ? "default" : "destructive"}
          className={cn(
            "capitalize text-xs items-center px-2 py-0.5",
            agency.is_active
              ? "bg-green-100 text-green-800 border-green-200 dark:bg-green-900/30 dark:text-green-300 dark:border-green-700"
              : ""
          )}
        >
          <statusInfo.icon className="mr-1.5 h-3.5 w-3.5" />
          {statusInfo.label}
        </Badge>
        <Button size="sm" onClick={() => onEnterAction(agency)}>
          <LogIn className="mr-2 h-4 w-4" /> Enter
        </Button>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/agencies/agency-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { CreateAgencyRequest, AgencyDto, UpdateAgencyRequest } from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { toast } from "sonner";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Info, FileText, Building } from "lucide-react";
import { AgencyBasicInfoForm } from "./agency-basic-info-form";
import { AgencyLegalForm } from "./agency-legal-form";
import { AgencyBrandingForm } from "./agency-branding-form";
import { isValid } from "date-fns";

const basicInfoSchema = z.object({
  long_name: z.string().min(3, "Official name is required.").max(100),
  short_name: z.string().min(2, "Short name is required.").max(50),
  location: z.string().min(2, "Location is required."),
  description: z.string().max(500).optional(),
  business_domains: z.array(z.string()).min(1, "At least one business domain is required."),
  transferable: z.boolean().default(false),
});
const legalSchema = z.object({
  registration_number: z.string().optional(),
  tax_number: z.string().optional(),
  capital_share: z.coerce.number().positive().optional().nullable(),
  average_revenue: z.coerce.number().positive().optional().nullable(),
  registration_date: z.date().optional().nullable(),
});
const brandingSchema = z.object({
  logo: z.string().url("Invalid URL").optional().or(z.literal("")),
  greeting_message: z.string().optional(),
  social_network: z.string().url("Invalid URL").optional().or(z.literal("")),
  images: z.array(z.string().url()).optional(),
});
const fullAgencySchema = basicInfoSchema.merge(legalSchema).merge(brandingSchema);
type AgencyFormData = z.infer<typeof fullAgencySchema>;

interface AgencyFormProps {
  organizationId: string;
  mode: "create" | "edit";
  initialData?: Partial<AgencyDto>;
  onSuccessAction: (data: AgencyDto) => void;
}

const formSteps = [
  { id: "basic", name: "Basic Info", icon: Info, fields: Object.keys(basicInfoSchema.shape) },
  { id: "legal", name: "Legal", icon: FileText, fields: Object.keys(legalSchema.shape) },
  { id: "branding", name: "Branding", icon: Building, fields: Object.keys(brandingSchema.shape) },
];

export function AgencyForm({ organizationId, mode, initialData, onSuccessAction }: AgencyFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<AgencyFormData>({
    resolver: zodResolver(fullAgencySchema),
    mode: "onChange",
    defaultValues: {
      long_name: initialData?.long_name || "",
      short_name: initialData?.short_name || "",
      location: initialData?.location || "",
      description: initialData?.description || "",
      business_domains: initialData?.business_domains || [],
      transferable: initialData?.transferable || false,
      registration_number: initialData?.registration_number || "",
      tax_number: initialData?.tax_number || "",
      capital_share: initialData?.capital_share || null,
      average_revenue: initialData?.average_revenue || null,
      registration_date: initialData?.registration_date && isValid(new Date(initialData.registration_date)) ? new Date(initialData.registration_date) : undefined,
      logo: initialData?.logo || "",
      greeting_message: initialData?.greeting_message || "",
      social_network: initialData?.social_network || "",
      images: initialData?.images || [],
    },
  });

  const onSubmit = async (data: AgencyFormData) => {
    setIsLoading(true);
    const payload: CreateAgencyRequest | UpdateAgencyRequest = {
      ...data,
      capital_share: data.capital_share ?? undefined,
      registration_date: data.registration_date?.toISOString(),
      average_revenue: data.average_revenue ?? undefined,
    };
    try {
      if (mode === "edit" && initialData?.agency_id) {
        const updatedAgency = await organizationRepository.updateAgency(organizationId, initialData.agency_id, payload);
        onSuccessAction(updatedAgency);
      } else {
        const newAgency = await organizationRepository.createAgency(organizationId, payload as CreateAgencyRequest);
        onSuccessAction(newAgency);
      }
    } catch (error: any) {
      toast.error(error.message || `Failed to ${mode} agency.`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={onSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Create New Agency" : `Edit Agency: ${initialData?.short_name}`}
      description="Fill in the agency's details across all sections."
      steps={formSteps}
      submitButtonText={mode === 'create' ? "Create Agency" : "Save Changes"}
    >
      {(currentStep) => (
        <div className="min-h-[400px]">
          {currentStep === 0 && <AgencyBasicInfoForm />}
          {currentStep === 1 && <AgencyLegalForm form={form} />}
          {currentStep === 2 && <AgencyBrandingForm form={form} />}
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/agencies/agency-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-legal-form.tsx

"use client";

import { UseFormReturn } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { CalendarDays } from "lucide-react";

// THE FIX: Define the props interface
interface AgencyLegalFormProps {
  form: UseFormReturn<any>; // Use UseFormReturn<any> for simplicity or the specific form type
}

export function AgencyLegalForm({ form }: AgencyLegalFormProps) {
  // THE FIX: Destructure props
  const { control } = form; // THE FIX: Get control from the passed form prop

  return (
    <Card className="ml-2 mr-2">
      <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <FormField
          control={control}
          name="registration_number"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Registration Number</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="tax_number"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Tax ID / VAT Number</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="capital_share"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Capital Share (USD)</FormLabel>
              <FormControl>
                <Input type="number" {...field} value={field.value ?? ""} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="average_revenue"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Average Revenue (USD)</FormLabel>
              <FormControl>
                <Input type="number" {...field} value={field.value ?? ""} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={control}
          name="registration_date"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>Registration Date</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "h-10 w-full justify-start font-normal",
                        !field.value && "text-muted-foreground"
                      )}
                    >
                      <CalendarDays className="mr-2 h-4 w-4" />
                      {field.value ? (
                        format(field.value, "PPP")
                      ) : (
                        <span>Pick a date</span>
                      )}
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent
                  className="w-auto p-0"
                  onInteractOutside={(e) => e.preventDefault()}
                >
                  <Calendar
                    mode="single"
                    selected={field.value || undefined}
                    onSelect={field.onChange}
                    captionLayout="dropdown-buttons"
                    fromYear={1900}
                    toYear={new Date().getFullYear()}
                  />
                </PopoverContent>
              </Popover>
              <FormMessage />
            </FormItem>
          )}
        />
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/organization/agencies/agency-legal-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-selector-dialog.tsx

"use client";

import React, { useState, useMemo } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { AgencyDto } from "@/types/organization";
import { cn } from "@/lib/utils";
import {
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Search,
  Building,
  Check,
  PlusCircle,
  Loader2,
  LayoutGrid,
  List,
} from "lucide-react";
import Image from "next/image";

interface AgencySelectorDialogProps {
  onCloseAction: () => void;
}

export function AgencySelectorDialog({
  onCloseAction,
}: AgencySelectorDialogProps) {
  const router = useRouter();
  const {
    agenciesForCurrentOrg,
    activeAgencyId,
    setActiveAgency,
    isLoadingAgencies,
  } = useActiveOrganization();

  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [searchQuery, setSearchQuery] = useState("");

  const filteredAgencies = useMemo(() => {
    if (!searchQuery) return agenciesForCurrentOrg;
    const lowercasedQuery = searchQuery.toLowerCase();
    return agenciesForCurrentOrg.filter(
      (agency) =>
        agency.long_name?.toLowerCase().includes(lowercasedQuery) ||
        agency.short_name?.toLowerCase().includes(lowercasedQuery)
    );
  }, [agenciesForCurrentOrg, searchQuery]);

  const handleSelectAndClose = (agency: AgencyDto) => {
    if (!agency.agency_id) return;
    setActiveAgency(agency.agency_id, agency);
    onCloseAction();
  };

  const handleCreateNew = () => {
    router.push("/business-actor/org/agencies/create");
    onCloseAction();
  };

  return (
    <div className="flex flex-col h-full">
      <DialogHeader className="px-6 pt-6 flex-shrink-0">
        <DialogTitle className="text-xl">Switch Agency</DialogTitle>
        <DialogDescription>
          Select an agency to manage within this organization.
        </DialogDescription>
      </DialogHeader>

      <div className="px-6 pt-4 pb-2 border-b flex-shrink-0 flex items-center justify-between gap-2">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search agencies..."
            value={searchQuery}
            onChange={(e: any)  => setSearchQuery(e.target.value)}
            className="pl-10 h-10"
          />
        </div>
        <div className="flex items-center p-1 bg-muted rounded-lg">
          <Button
            variant={viewMode === "grid" ? "default" : "ghost"}
            size="sm"
            onClick={() => setViewMode("grid")}
          >
            <LayoutGrid className="h-4 w-4" />
          </Button>
          <Button
            variant={viewMode === "list" ? "default" : "ghost"}
            size="sm"
            onClick={() => setViewMode("list")}
          >
            <List className="h-4 w-4" />
          </Button>
        </div>
      </div>

      <ScrollArea className="flex-grow overflow-auto">
        <div className="p-6">
          {isLoadingAgencies ? (
            <div className="flex items-center justify-center h-full">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
            </div>
          ) : viewMode === "grid" ? (
            <div className="grid grid-cols-2 gap-4">
              {filteredAgencies.map((agency) => (
                <Card
                  key={agency.agency_id}
                  onClick={() => handleSelectAndClose(agency)}
                  className={cn(
                    "cursor-pointer hover:shadow-md transition-shadow relative group",
                    activeAgencyId === agency.agency_id &&
                      "border-2 border-primary"
                  )}
                >
                  <CardHeader className="p-4 flex flex-col items-center text-center">
                    {agency.logo ? (
                      <Image
                        src={agency.logo}
                        alt="Logo"
                        width={40}
                        height={40}
                        className="h-10 w-10 rounded-lg object-cover mb-2"
                      />
                    ) : (
                      <div className="h-10 w-10 rounded-lg bg-muted flex items-center justify-center mb-2">
                        <Building className="h-5 w-5 text-muted-foreground" />
                      </div>
                    )}
                    <CardTitle className="text-sm font-semibold line-clamp-1">
                      {agency.short_name}
                    </CardTitle>
                    <CardDescription className="text-xs line-clamp-1">
                      {agency.location}
                    </CardDescription>
                  </CardHeader>
                  {activeAgencyId === agency.agency_id && (
                    <div className="absolute top-1 right-1 p-0.5 bg-primary text-primary-foreground rounded-full">
                      <Check className="h-3 w-3" />
                    </div>
                  )}
                </Card>
              ))}
            </div>
          ) : (
            <div className="space-y-2">
              {filteredAgencies.map((agency) => (
                <div
                  key={agency.agency_id}
                  onClick={() => handleSelectAndClose(agency)}
                  className={cn(
                    "flex items-center p-3 rounded-lg border hover:bg-accent cursor-pointer",
                    activeAgencyId === agency.agency_id &&
                      "bg-accent border-primary/50"
                  )}
                >
                  <div className="flex items-center gap-4 flex-1 min-w-0">
                    {agency.logo ? (
                      <Image
                        src={agency.logo}
                        alt="Logo"
                        width={32}
                        height={32}
                        className="h-8 w-8 rounded-md object-cover"
                      />
                    ) : (
                      <div className="h-8 w-8 rounded-md bg-muted flex-shrink-0 flex items-center justify-center">
                        <Building className="h-4 w-4 text-muted-foreground" />
                      </div>
                    )}
                    <div className="min-w-0">
                      <p className="font-medium text-sm truncate">
                        {agency.long_name}
                      </p>
                      <p className="text-xs text-muted-foreground truncate">
                        {agency.location}
                      </p>
                    </div>
                  </div>
                  {activeAgencyId === agency.agency_id && (
                    <Check className="ml-4 h-5 w-5 text-primary flex-shrink-0" />
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </ScrollArea>

      <DialogFooter className="px-6 py-4 border-t flex-shrink-0 flex sm:justify-between">
        <DialogClose asChild>
          <Button
            type="button"
            variant="secondary"
            className="w-full sm:w-auto"
          >
            Cancel
          </Button>
        </DialogClose>
        <Button onClick={handleCreateNew} className="w-full sm:w-auto">
          <PlusCircle className="mr-2 h-4 w-4" /> Create Agency
        </Button>
      </DialogFooter>
    </div>
  );
}
// END OF FILE: components/organization/agencies/agency-selector-dialog.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/agency-switcher.tsx

"use client";

import React, { useState } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { ChevronsUpDown, Building } from "lucide-react";
import Image from "next/image";
import { AgencySelectorDialog } from "./agency-selector-dialog";

interface AgencySwitcherProps {
  isCollapsed: boolean;
}

export function AgencySwitcher({ isCollapsed }: AgencySwitcherProps) {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const { activeAgencyDetails } = useActiveOrganization();

  if (isCollapsed) {
    return (
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <TooltipProvider>
          <Tooltip delayDuration={0}>
            <TooltipTrigger asChild>
              <DialogTrigger asChild>
                {/* [FIX] Add w-full and justify-center */}
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-14 w-full flex justify-center items-center"
                >
                  {activeAgencyDetails?.logo ? (
                    <Image
                      src={activeAgencyDetails.logo}
                      alt="Agency Logo"
                      width={28}
                      height={28}
                      className="h-7 w-7 rounded-md object-cover"
                    />
                  ) : (
                    <Building className="h-6 w-6" />
                  )}
                  <span className="sr-only">Switch Agency</span>
                </Button>
              </DialogTrigger>
            </TooltipTrigger>
            <TooltipContent side="right">
              {activeAgencyDetails?.short_name || "Switch Agency"}
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        {/* ... DialogContent ... */}
      </Dialog>
    );
  }
  return (
    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
      <DialogTrigger asChild>
        <div className="px-2 py-2">
          <Button
            variant="outline"
            role="combobox"
            aria-expanded={isDialogOpen}
            className="w-full h-14 justify-between text-left hover:bg-muted/50 focus:ring-1 focus:ring-primary"
          >
            <div className="flex items-center gap-3 min-w-0">
              {activeAgencyDetails?.logo ? (
                <Image
                  src={activeAgencyDetails.logo}
                  alt="Agency Logo"
                  width={32}
                  height={32}
                  className="h-8 w-8 rounded-md object-cover"
                />
              ) : (
                <div className="h-8 w-8 rounded-md bg-muted flex items-center justify-center">
                  <Building className="h-5 w-5 text-muted-foreground" />
                </div>
              )}
              <div className="flex flex-col items-start min-w-0">
                <span className="truncate font-semibold text-sm">
                  {activeAgencyDetails?.short_name || "Select Agency"}
                </span>
                <span className="truncate text-xs text-muted-foreground">
                  Switch agency
                </span>
              </div>
            </div>
            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </div>
      </DialogTrigger>
      <DialogContent className="p-0 gap-0 w-[95vw] max-w-md h-[70vh] flex flex-col">
        <AgencySelectorDialog onCloseAction={() => setIsDialogOpen(false)} />
      </DialogContent>
    </Dialog>
  );
}
// END OF FILE: components/organization/agencies/agency-switcher.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/agencies/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { AgencyDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  LogIn,
  Building,
  CheckCircle,
  XCircle,
} from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface AgencyRowActionsProps {
  agency: AgencyDto;
  onEnterAction: (agency: AgencyDto) => void;
  onEditAction: (agencyId: string) => void;
  onDeleteAction: (agency: AgencyDto) => void;
}

const AgencyRowActions: React.FC<AgencyRowActionsProps> = ({
  agency,
  onEnterAction,
  onEditAction,
  onDeleteAction,
}) => {
  return (
    <div className="flex items-center justify-end gap-2">
      <Button
        variant="outline"
        size="sm"
        className="h-8 px-2"
        onClick={() => onEnterAction(agency)}
      >
        <LogIn className="mr-1.5 h-3.5 w-3.5" /> Enter
      </Button>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            className="h-8 w-8 p-0 data-[state=open]:bg-muted"
          >
            <span className="sr-only">Open menu</span>
            <MoreHorizontal className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="w-[160px]">
          <DropdownMenuItem onClick={() => onEditAction(agency.agency_id!)}>
            <Edit3 className="mr-2 h-4 w-4" /> Edit
          </DropdownMenuItem>
          <DropdownMenuItem
            onClick={() => onDeleteAction(agency)}
            className="text-destructive focus:text-destructive"
          >
            <Trash2 className="mr-2 h-4 w-4" /> Delete
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
};

export const getAgencyColumns = (
  actionHandlers: Omit<AgencyRowActionsProps, "agency">
): ColumnDef<AgencyDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
    size: 40,
  },
  {
    accessorKey: "long_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Agency Name" />
    ),
    cell: ({ row }) => {
      const agency = row.original;
      const fallback = agency.long_name
        ? agency.long_name.charAt(0).toUpperCase()
        : "A";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border">
            <AvatarImage src={agency.logo} alt={agency.long_name} />
            <AvatarFallback>{fallback}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{agency.long_name}</div>
            <div className="text-xs text-muted-foreground">
              {agency.short_name}
            </div>
          </div>
        </div>
      );
    },
    size: 300,
  },
  {
    accessorKey: "location",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Location" />
    ),
  },
  {
    accessorKey: "is_active",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Status" />
    ),
    cell: ({ row }) => {
      const isActive = row.getValue("is_active");
      const StatusIcon = isActive ? CheckCircle : XCircle;
      return (
        <Badge
          variant={isActive ? "default" : "destructive"}
          className="capitalize text-xs items-center font-normal"
        >
          <StatusIcon className="mr-1.5 h-3.5 w-3.5" />
          {isActive ? "Active" : "Inactive"}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(String(row.getValue(id))),
  },
  {
    accessorKey: "manager_name",
    header: "Manager",
  },
  {
    accessorKey: "total_affiliated_customers",
    header: ({ column }) => (
      <DataTableColumnHeader
        column={column}
        title="Customers"
        className="justify-end"
      />
    ),
    cell: ({ row }) => (
      <div className="text-right">
        {row.getValue("total_affiliated_customers") || 0}
      </div>
    ),
  },
  {
    id: "actions",
    cell: ({ row }) => (
      <AgencyRowActions agency={row.original} {...actionHandlers} />
    ),
  },
];
// END OF FILE: components/organization/agencies/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/certifications/certification-card.tsx

"use client";

import React from "react";
import { CertificationDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  Award,
  CalendarCheck2,
} from "lucide-react";
import { format, parseISO, isValid } from "date-fns";
import { cn } from "@/lib/utils";

interface CertificationCardProps {
  item: CertificationDto;
  onEditAction: (item: CertificationDto) => void;
  onDeleteAction: (item: CertificationDto) => void;
  className?: string;
}

export function CertificationCard({
  item,
  onEditAction,
  onDeleteAction,
  className,
}: CertificationCardProps) {
  return (
    <Card
      className={cn(
        "flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow duration-200 ease-in-out group",
        className
      )}
    >
      <CardHeader>
        <div className="flex justify-between items-start gap-2">
          <CardTitle className="text-base sm:text-md font-semibold leading-tight line-clamp-2 flex items-center">
            <Award className="h-5 w-5 mr-2 text-primary opacity-80 flex-shrink-0" />
            <span className="truncate" title={item.name}>
              {item.name || "Untitled Certification"}
            </span>
          </CardTitle>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-7 w-7 flex-shrink-0 opacity-70 group-hover:opacity-100"
              >
                <MoreHorizontal className="h-4 w-4" />
                <span className="sr-only">Actions</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-[160px]">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => onEditAction(item)}>
                <Edit3 className="mr-2 h-4 w-4" /> Edit
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => onDeleteAction(item)}
                className="text-destructive focus:text-destructive"
              >
                <Trash2 className="mr-2 h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
        <CardDescription className="text-xs pt-1 truncate">
          Type: {item.type || "N/A"}
        </CardDescription>
      </CardHeader>
      <CardContent className="flex-grow space-y-1.5 text-sm py-2">
        <p className="text-foreground whitespace-pre-wrap break-words line-clamp-3 min-h-[4.5em]">
          {item.description || (
            <span className="italic text-muted-foreground">
              No description provided.
            </span>
          )}
        </p>
      </CardContent>
      <CardFooter className="pt-2 pb-3 text-xs text-muted-foreground justify-end flex items-center gap-1.5">
        <CalendarCheck2 className="h-3 w-3" />
        Obtained:{" "}
        {item.obtainment_date && isValid(parseISO(item.obtainment_date))
          ? format(parseISO(item.obtainment_date), "PP")
          : "-"}
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/certifications/certification-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/certifications/certification-form.tsx

"use client";

import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  CreateCertificationRequest,
  UpdateCertificationRequest,
  CertificationDto,
} from "@/types/organization";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { cn } from "@/lib/utils";
import { format, isValid } from "date-fns";
import { CalendarIcon } from "lucide-react";
import { FormWrapper } from "@/components/ui/form-wrapper";

const certificationFormSchema = z.object({
  name: z
    .string()
    .min(3, "Name must be at least 3 characters.")
    .max(150, "Name is too long."),
  type: z
    .string()
    .min(3, "Type must be at least 3 characters.")
    .max(100, "Type is too long."),
  description: z
    .string()
    .max(500, "Description is too long.")
    .optional()
    .or(z.literal("")),
  obtainment_date: z.date().optional().nullable(),
});

export type CertificationFormData = z.infer<typeof certificationFormSchema>;

interface CertificationFormProps {
  initialData?: Partial<CertificationDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: CertificationFormData) => Promise<boolean>;
}

export function CertificationForm({
  initialData,
  mode,
  onSubmitAction,
}: CertificationFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<CertificationFormData>({
    resolver: zodResolver(certificationFormSchema),
    defaultValues: {
      name: initialData?.name || "",
      type: initialData?.type || "",
      description: initialData?.description || "",
      obtainment_date:
        initialData?.obtainment_date &&
        isValid(new Date(initialData.obtainment_date))
          ? new Date(initialData.obtainment_date)
          : null,
    },
  });

  useEffect(() => {
    form.reset({
      name: initialData?.name || "",
      type: initialData?.type || "",
      description: initialData?.description || "",
      obtainment_date:
        initialData?.obtainment_date &&
        isValid(new Date(initialData.obtainment_date))
          ? new Date(initialData.obtainment_date)
          : null,
    });
  }, [initialData, form.reset]);

  const handleSubmit = async (data: CertificationFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === "create" ? "Add New Certification" : "Edit Certification"}
      description={
        mode === "create"
          ? "Provide details for the new certification."
          : `Update details for "${initialData?.name}"`
      }
      submitButtonText={
        mode === "create" ? "Add Certification" : "Save Changes"
      }
    >
      {() => (
        <div className="space-y-6 p-1">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Certification Name *</FormLabel>
                <FormControl>
                  <Input
                    placeholder="e.g., Certified Scrum Master"
                    {...field}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Certification Type/Body *</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., Scrum Alliance, ISO" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="obtainment_date"
            render={({ field }) => (
              <FormItem className="flex flex-col">
                <FormLabel>Obtainment Date</FormLabel>
                <Popover>
                  <PopoverTrigger asChild>
                    <FormControl>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-[240px] pl-3 text-left font-normal",
                          !field.value && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                        {field.value ? (
                          format(field.value, "PPP")
                        ) : (
                          <span>Pick a date</span>
                        )}
                      </Button>
                    </FormControl>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={field.value ?? undefined}
                      onSelect={field.onChange}
                      disabled={(date) => date > new Date()}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="description"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Description (Optional)</FormLabel>
                <FormControl>
                  <Textarea
                    placeholder="Any relevant details..."
                    {...field}
                    rows={4}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/certifications/certification-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/certifications/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { CertificationDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Award } from "lucide-react";
import { format, parseISO, isValid } from "date-fns";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

export interface CertificationRowActionsProps {
  item: CertificationDto;
  onEditAction: (item: CertificationDto) => void;
  onDeleteAction: (item: CertificationDto) => void;
}

const CertificationRowActions: React.FC<CertificationRowActionsProps> = ({
  item,
  onEditAction,
  onDeleteAction,
}) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className="h-8 w-8 p-0 data-[state=open]:bg-muted"
        >
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuLabel>Actions</DropdownMenuLabel>
        <DropdownMenuItem onClick={() => onEditAction(item)}>
          <Edit3 className="mr-2 h-4 w-4" /> Edit
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          onClick={() => onDeleteAction(item)}
          className="text-destructive focus:text-destructive"
        >
          <Trash2 className="mr-2 h-4 w-4" /> Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getCertificationColumns = (
  actionHandlers: Omit<CertificationRowActionsProps, "item">
): ColumnDef<CertificationDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all rows"
        className="translate-y-[2px]"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
        className="translate-y-[2px]"
      />
    ),
    enableSorting: false,
    enableHiding: false,
    size: 40,
  },
  {
    accessorKey: "name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Certification Name" />
    ),
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        <Award className="h-4 w-4 text-muted-foreground flex-shrink-0" />
        <span className="font-medium truncate max-w-xs">
          {row.getValue("name")}
        </span>
      </div>
    ),
    size: 300,
  },
  {
    accessorKey: "type",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Type" />
    ),
    cell: ({ row }) => (
      <div className="text-sm text-muted-foreground truncate max-w-sm">
        {row.getValue("type")}
      </div>
    ),
    size: 250,
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "obtainment_date",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Obtainment Date" />
    ),
    cell: ({ row }) => {
      const date = row.getValue("obtainment_date") as string;
      return (
        <div className="text-sm text-muted-foreground whitespace-nowrap">
          {isValid(parseISO(date || "")) ? format(parseISO(date), "PP") : "-"}
        </div>
      );
    },
    size: 180,
  },
  {
    id: "actions",
    cell: ({ row }) => (
      <div className="text-right">
        <CertificationRowActions
          item={row.original}
          onEditAction={actionHandlers.onEditAction}
          onDeleteAction={actionHandlers.onDeleteAction}
        />
      </div>
    ),
    size: 80,
  },
];
// END OF FILE: components/organization/certifications/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/contact-list.tsx

"use client";

import React, { useState, useEffect, useCallback } from "react";
import {
  ContactDto,
  ContactableType,
  CreateContactRequest,
  UpdateContactRequest,
} from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { ContactForm } from "./forms/contact-form";
import {
  PlusCircle,
  Edit2,
  Trash2,
  Star,
  Mail,
  Phone,
} from "lucide-react";
import { toast } from "sonner";
import { Skeleton } from "@/components/ui/skeleton";

interface ContactListProps {
  organizationId: string;
  contactableType: ContactableType;
}

export function ContactList({
  organizationId,
  contactableType,
}: ContactListProps) {
  const [contacts, setContacts] = useState<ContactDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingContact, setEditingContact] = useState<ContactDto | undefined>(
    undefined
  );

  const fetchContacts = useCallback(async () => {
    setIsLoading(true);
    try {
      const data = await organizationRepository.getContacts(
        contactableType,
        organizationId
      );
      setContacts(data || []);
    } catch (_error: any) {
      toast.error("Failed to load contacts.");
    } finally {
      setIsLoading(false);
    }
  }, [organizationId, contactableType]);

  useEffect(() => {
    fetchContacts();
  }, [fetchContacts]);

  const handleFormSubmit = async (
    data: CreateContactRequest | UpdateContactRequest
  ) => {
    if (editingContact && editingContact.contact_id) {
      await organizationRepository.updateContact(
        contactableType,
        organizationId,
        editingContact.contact_id,
        data
      );
      toast.success("Contact updated successfully!");
    } else {
      await organizationRepository.createContact(
        contactableType,
        organizationId,
        data
      );
      toast.success("Contact added successfully!");
    }
    await fetchContacts();
    setIsFormOpen(false);
    setEditingContact(undefined);
  };

  const handleEdit = (contact: ContactDto) => {
    setEditingContact(contact);
    setIsFormOpen(true);
  };

  const handleDelete = async (contactId?: string) => {
    if (!contactId || !confirm("Are you sure you want to delete this contact?"))
      return;
    try {
      await organizationRepository.deleteContactById(
        contactableType,
        organizationId,
        contactId
      );
      toast.success("Contact deleted.");
      fetchContacts();
    } catch (error)  {
      toast.error(error.message || "Failed to delete contact.");
    }
  };

  // const handleToggleFavorite = async (contact: ContactDto) => {
  //   if (!contact.contact_id) return;
  //   toast.info(`Favorite toggle for ${contact.first_name} TBD.`);
  // };

  if (isLoading) {
    return (
      <div className="space-y-3">
        {Array.from({ length: 2 }).map((_, i) => (
          <Skeleton key={i} className="h-20 w-full rounded-md" />
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
        <DialogTrigger asChild>
          <Button
            size="sm"
            variant="outline"
            onClick={() => setEditingContact(undefined)}
          >
            <PlusCircle className="mr-2 h-4 w-4" /> Add Contact
          </Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-lg">
          <DialogHeader>
            <DialogTitle>
              {editingContact ? "Edit Contact" : "Add New Contact"}
            </DialogTitle>
            <DialogDescription>
              {editingContact
                ? "Update the details of this contact."
                : "Enter details for the new contact."}
            </DialogDescription>
          </DialogHeader>
          <ContactForm
            initialData={editingContact}
            mode={editingContact ? "edit" : "create"}
            onSubmitAction={handleFormSubmit}
            onCancelAction={() => setIsFormOpen(false)}
          />
        </DialogContent>
      </Dialog>

      {contacts.length === 0 ? (
        <p className="text-sm text-muted-foreground text-center py-6">
          No contacts found.
        </p>
      ) : (
        <div className="space-y-3">
          {contacts.map((contact) => (
            <div
              key={contact.contact_id}
              className="p-4 border rounded-lg flex justify-between items-start text-sm"
            >
              <div>
                <p className="font-semibold text-foreground flex items-center">
                  {contact.first_name} {contact.last_name}
                  {contact.is_favorite && (
                    <Star className="inline ml-2 h-4 w-4 text-yellow-500 fill-yellow-400" />
                  )}
                </p>
                {contact.title && (
                  <p className="text-xs text-muted-foreground">
                    {contact.title}
                  </p>
                )}
                <div className="space-y-1 mt-2">
                  {contact.email && (
                    <div className="flex items-center text-xs text-muted-foreground">
                      <Mail className="h-3 w-3 mr-1.5" />
                      {contact.email}
                    </div>
                  )}
                  {contact.phone_number && (
                    <div className="flex items-center text-xs text-muted-foreground">
                      <Phone className="h-3 w-3 mr-1.5" />
                      {contact.phone_number}
                    </div>
                  )}
                </div>
              </div>
              <div className="flex items-center gap-1 flex-shrink-0 ml-2">
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8"
                  onClick={() => handleEdit(contact)}
                  title="Edit contact"
                >
                  <Edit2 className="h-4 w-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-destructive hover:text-destructive"
                  onClick={() => handleDelete(contact.contact_id)}
                  title="Delete contact"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
// END OF FILE: components/organization/contact-list.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/customers/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { AgencyDto, CustomerDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2 } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface CustomerRowActionsProps {
  customer: CustomerDto;
  onEditAction: (customer: CustomerDto) => void;
  onDeleteAction: (customer: CustomerDto) => void;
}

const CustomerRowActions: React.FC<CustomerRowActionsProps> = ({ customer, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(customer)}>
          <Edit3 className="mr-2 h-4 w-4" /> Edit
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(customer)} className="text-destructive focus:text-destructive">
          <Trash2 className="mr-2 h-4 w-4" /> Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getCustomerColumns = (
  actionHandlers: Omit<CustomerRowActionsProps, "customer">, agencies: AgencyDto[] 
): ColumnDef<CustomerDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected()
            ? true
            : table.getIsSomePageRowsSelected()
            ? "indeterminate"
            : false
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "first_name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => {
      const customer = row.original;
      const fullName = `${customer.first_name || ""} ${customer.last_name || ""}`.trim();
      const fallback = fullName ? fullName.charAt(0).toUpperCase() : "C";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border">
            <AvatarImage src={customer.logo} alt={fullName} />
            <AvatarFallback>{fallback}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{fullName}</div>
            <div className="text-xs text-muted-foreground">{customer.short_description}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "payment_method",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Last Payment Method" />,
    cell: ({ row }) => <div className="text-sm text-muted-foreground">{row.getValue("payment_method") || "N/A"}</div>,
  },
  {
    accessorKey: "amount_paid",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Last Amount Paid" className="justify-end" />,
    cell: ({ row }) => {
      const amount = parseFloat(row.getValue("amount_paid"));
      const formatted = isNaN(amount) ? "N/A" : new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(amount);
      return <div className="text-right font-medium text-sm">{formatted}</div>;
    },
  },
   {
    accessorKey: "agency_id",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Assignment" />,
    cell: ({ row }) => {
      const agencyId = row.getValue("agency_id");
      if (!agencyId) {
        return <div className="text-sm text-muted-foreground">Headquarters</div>;
      }
      const agency = agencies.find(a => a.agency_id === agencyId);
      return (
        <div className="text-sm font-medium flex items-center gap-2">
          <Building2 className="h-4 w-4 text-muted-foreground" />
          <span className="truncate">{agency ? agency.short_name : "Unknown Agency"}</span>
        </div>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id) || "headquarters"),},
  {
    id: "actions",
    cell: ({ row }) => <CustomerRowActions customer={row.original} {...actionHandlers} />,
  },
];// END OF FILE: components/organization/customers/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/customers/customer-card.tsx

"use client";

import React from "react";
import { AgencyDto, CustomerDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  DollarSign,
  CreditCard,
  Building2,
} from "lucide-react";

interface CustomerCardProps {
  customer: CustomerDto;
  agencies: AgencyDto[]; // [ADD] Pass agencies list
  onEditAction: (customer: CustomerDto) => void;
  onDeleteAction: (customer: CustomerDto) => void;
}

export function CustomerCard({
  customer,
  agencies,
  onEditAction,
  onDeleteAction,
}: CustomerCardProps) {
  const fullName = `${customer.first_name || ""} ${
    customer.last_name || ""
  }`.trim();
  const fallback = fullName ? fullName.charAt(0).toUpperCase() : "C";
  const agency = agencies.find((a) => a.agency_id === customer.agency_id);

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border">
            <AvatarImage src={customer.logo} alt={fullName} />
            <AvatarFallback className="text-lg">{fallback}</AvatarFallback>
          </Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">
              {fullName}
            </CardTitle>
            <p className="text-xs text-muted-foreground">
              {customer.short_description || "Customer"}
            </p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8 flex-shrink-0"
            >
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(customer)}>
              <Edit3 className="mr-2 h-4 w-4" /> Edit
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() => onDeleteAction(customer)}
              className="text-destructive focus:text-destructive"
            >
              <Trash2 className="mr-2 h-4 w-4" /> Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow space-y-2 text-sm">
        <div className="flex items-center text-muted-foreground">
          <CreditCard className="mr-2 h-4 w-4" />
          <span>Last Payment: {customer.payment_method || "N/A"}</span>
        </div>
        <div className="flex items-center text-muted-foreground">
          <DollarSign className="mr-2 h-4 w-4" />
          <span>Last Amount: {customer.amount_paid || "N/A"}</span>
        </div>
        <div className="flex items-center text-muted-foreground pt-2">
          <Building2 className="mr-2 h-4 w-4" />
          <span>{agency ? agency.short_name : "Headquarters"}</span>
        </div>
      </CardContent>
      <CardFooter>
        <Button
          variant="outline"
          className="w-full"
          onClick={() => onEditAction(customer)}
        >
          View Details
        </Button>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/customers/customer-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/customers/customer-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { CustomerDto, AgencyDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const customerFormSchema = z.object({
  first_name: z.string().min(2, "First name is required."),
  last_name: z.string().min(2, "Last name is required."),
  short_description: z.string().optional(),
  long_description: z.string().optional(),
  payment_method: z.string().optional(),
  amount_paid: z.string().optional(),
  // [ADD] Add agency_id to the form schema
  agency_id: z.string().nullable().optional(),
});

export type CustomerFormData = z.infer<typeof customerFormSchema>;

interface CustomerFormProps {
  initialData?: Partial<CustomerDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: CustomerFormData) => Promise<boolean>;
  // [ADD] Pass agencies for the assignment dropdown
  agencies: AgencyDto[];
  // [ADD] Prop to hide the selector when in agency context
  hideAgencySelector?: boolean;
}

export function CustomerForm({ initialData, mode, onSubmitAction, agencies, hideAgencySelector = false }: CustomerFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<CustomerFormData>({
    resolver: zodResolver(customerFormSchema),
    defaultValues: {
      first_name: initialData?.first_name || "",
      last_name: initialData?.last_name || "",
      short_description: initialData?.short_description || "",
      long_description: initialData?.long_description || "",
      payment_method: initialData?.payment_method || "",
      amount_paid: initialData?.amount_paid || "",
      agency_id: initialData?.agency_id || null,
    },
  });

  const handleSubmit = async (data: CustomerFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) {
      setIsLoading(false);
    }
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Add New Customer" : "Edit Customer"}
      description="Manage customer information for your organization."
      submitButtonText={mode === 'create' ? "Add Customer" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <FormField control={form.control} name="first_name" render={({ field }) => (<FormItem><FormLabel>First Name *</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
            <FormField control={form.control} name="last_name" render={({ field }) => (<FormItem><FormLabel>Last Name *</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
          </div>
          <FormField control={form.control} name="short_description" render={({ field }) => (<FormItem><FormLabel>Title / Tagline</FormLabel><FormControl><Input placeholder="e.g., VIP Client" {...field} /></FormControl><FormMessage /></FormItem>)} />
          
          {/* [ADD] Conditionally render the agency selector */}
          {!hideAgencySelector && (
            <FormField
              control={form.control}
              name="agency_id"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Agency Assignment</FormLabel>
                  <Select onValueChange={(value) => field.onChange(value === "headquarters" ? null : value)} defaultValue={field.value || "headquarters"}>
                    <FormControl><SelectTrigger><SelectValue placeholder="Assign to an agency..." /></SelectTrigger></FormControl>
                    <SelectContent>
                      <SelectItem value="headquarters">Headquarters (No Agency)</SelectItem>
                      {agencies.map((agency) => (
                        <SelectItem key={agency.agency_id} value={agency.agency_id!}>{agency.long_name}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}

          <FormField control={form.control} name="long_description" render={({ field }) => (<FormItem><FormLabel>Notes</FormLabel><FormControl><Textarea placeholder="Add any relevant notes about this customer..." {...field} /></FormControl><FormMessage /></FormItem>)} />
        </div>
      )}
    </FormWrapper>
  );
}// END OF FILE: components/organization/customers/customer-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/employees/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { EmployeeDto, AgencyDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2 } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { Badge } from "@/components/ui/badge";

interface EmployeeRowActionsProps {
  employee: EmployeeDto;
  onEditAction: (employeeId: string) => void;
  onDeleteAction: (employee: EmployeeDto) => void;
}

const RowActions: React.FC<EmployeeRowActionsProps> = ({ employee, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(employee.employee_id!)}><Edit3 className="mr-2 h-4 w-4" /> Edit Details</DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(employee)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getEmployeeColumns = (
  actionHandlers: Omit<EmployeeRowActionsProps, "employee">,
  agencies: AgencyDto[]
): ColumnDef<EmployeeDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "first_name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => {
      const employee = row.original;
      const fullName = `${employee.first_name || ""} ${employee.last_name || ""}`.trim();
      const fallback = fullName ? fullName.charAt(0).toUpperCase() : "E";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border"><AvatarImage src={employee.logo} alt={fullName} /><AvatarFallback>{fallback}</AvatarFallback></Avatar>
          <div>
            <div className="font-medium">{fullName}</div>
            <div className="text-xs text-muted-foreground">{employee.short_description || "No title"}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "employee_role",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Role" />,
    cell: ({ row }) => <Badge variant="outline" className="capitalize">{row.getValue("employee_role")?.toString().replace(/_/g, ' ').toLowerCase() || "N/A"}</Badge>,
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "department",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Department" />,
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "agency_id",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Assignment" />,
    cell: ({ row }) => {
      const agencyId = row.getValue("agency_id");
      if (!agencyId) return <div className="text-sm text-muted-foreground">Headquarters</div>;
      const agency = agencies.find(a => a.agency_id === agencyId);
      return (
        <div className="text-sm text-muted-foreground flex items-center gap-2">
          <Building2 className="h-4 w-4 flex-shrink-0" />
          <span className="truncate">{agency ? agency.short_name : "Unknown Agency"}</span>
        </div>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id) || "headquarters"),
  },
  {
    id: "actions",
    cell: ({ row }) => <RowActions employee={row.original} {...actionHandlers} />,
  },
];
// END OF FILE: components/organization/employees/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/employees/employee-card.tsx

"use client";

import React from "react";
import { EmployeeDto, AgencyDto } from "@/types/organization";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2, Briefcase } from "lucide-react";

interface EmployeeCardProps {
  employee: EmployeeDto;
  agency?: AgencyDto | null;
  onEditAction: (employeeId: string) => void;
  onDeleteAction: (employee: EmployeeDto) => void;
}

export function EmployeeCard({ employee, agency, onEditAction, onDeleteAction }: EmployeeCardProps) {
  const fullName = `${employee.first_name || ""} ${employee.last_name || ""}`.trim();
  const fallback = fullName ? fullName.charAt(0).toUpperCase() : "E";
  const roleDisplay = employee.employee_role?.replace(/_/g, " ").toLowerCase() || "N/A";

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow group">
      <CardHeader className="flex-row items-center justify-between">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border-2 border-background ring-1 ring-ring"><AvatarImage src={employee.logo} alt={fullName} /><AvatarFallback className="text-lg bg-muted">{fallback}</AvatarFallback></Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">{fullName}</CardTitle>
            <p className="text-xs text-muted-foreground line-clamp-1">{employee.short_description || "No job title"}</p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(employee.employee_id!)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onDeleteAction(employee)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow space-y-3 pt-0">
        <div className="flex flex-wrap gap-2">
          <Badge variant="secondary" className="capitalize text-xs items-center font-normal"><Briefcase className="mr-1.5 h-3 w-3" />{roleDisplay}</Badge>
          {employee.department && <Badge variant="outline" className="capitalize text-xs items-center font-normal">{employee.department}</Badge>}
        </div>
        <div className="text-sm text-muted-foreground flex items-center gap-2 pt-2">
          <Building2 className="h-4 w-4 flex-shrink-0" />
          <span>{agency ? agency.short_name : "Headquarters"}</span>
        </div>
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/organization/employees/employee-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/employees/employee-form.tsx

"use client";

import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  AgencyDto,
  EmployeeDto,
  EmployeeRoleValues,
} from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ImageUploader } from "@/components/ui/image-uploader";
import { User, Building2 } from "lucide-react";

const employeeDetailsSchema = z.object({
  first_name: z.string().min(2, "First name is required."),
  last_name: z.string().min(2, "Last name is required."),
  employee_role: z.enum(EmployeeRoleValues, {
    required_error: "Employee role is required.",
  }),
  department: z
    .string()
    .min(2, "Department is required.")
    .optional()
    .or(z.literal("")),
  short_description: z.string().max(100, "Title is too long.").optional(),
  long_description: z.string().max(500, "Description is too long.").optional(),
  logo: z.string().url("Invalid URL").optional().or(z.literal("")),
  logoFile: z.any().optional(),
});

const assignmentSchema = z.object({
  agency_id: z.string().nullable().optional(),
});

const fullEmployeeSchema = employeeDetailsSchema.merge(assignmentSchema);
export type EmployeeFormData = z.infer<typeof fullEmployeeSchema>;

const formSteps = [
  {
    id: "details",
    name: "Employee Details",
    icon: User,
    fields: Object.keys(employeeDetailsSchema.shape),
  },
  {
    id: "assignment",
    name: "Agency Assignment",
    icon: Building2,
    fields: Object.keys(assignmentSchema.shape),
  },
];

interface EmployeeFormProps {
  agencies: AgencyDto[];
  mode: "create" | "edit";
  onSubmitAction: (data: EmployeeFormData) => Promise<boolean>;
  initialData?: Partial<EmployeeDto>;
  // [ADD] Prop to lock the form to a specific agency
  scopedAgencyId?: string | null;
}

export function EmployeeForm({
  initialData,
  agencies,
  mode,
  onSubmitAction,
  scopedAgencyId,
}: EmployeeFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<EmployeeFormData>({
    resolver: zodResolver(fullEmployeeSchema),
    defaultValues: {
      first_name: initialData?.first_name || "",
      last_name: initialData?.last_name || "",
      employee_role: initialData?.employee_role || undefined,
      department: initialData?.department || "",
      short_description: initialData?.short_description || "",
      long_description: initialData?.long_description || "",
      logo: initialData?.logo || "",
      // [CHANGE] If scoped to an agency, use that ID, otherwise use initial data.
      agency_id:
        scopedAgencyId !== undefined
          ? scopedAgencyId
          : initialData?.agency_id || null,
    },
  });

  const handleSubmit = async (data: EmployeeFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={
        mode === "create"
          ? "Add New Employee"
          : `Edit Employee: ${initialData?.first_name} ${initialData?.last_name}`
      }
      description="Provide the employee's details and assign them to an agency."
      steps={formSteps}
      submitButtonText={mode === "create" ? "Create Employee" : "Save Changes"}
    >
      {(currentStep) => (
        <div className="min-h-[450px] p-1">
          {currentStep === 0 && (
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="first_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>First Name *</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="last_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Last Name *</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <FormField
                control={form.control}
                name="logoFile"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Profile Photo</FormLabel>
                    <FormControl>
                      <ImageUploader
                        currentImageUrl={form.getValues("logo")}
                        onImageSelectedAction={(file, url) => {
                          field.onChange(file);
                          form.setValue("logo", url || "");
                        }}
                        label=""
                        fallbackName={`${form.getValues(
                          "first_name"
                        )} ${form.getValues("last_name")}`}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="employee_role"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Role *</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select a role" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {EmployeeRoleValues.map((role) => (
                          <SelectItem key={role} value={role}>
                            {role.replace(/_/g, " ").charAt(0).toUpperCase() +
                              role.replace(/_/g, " ").slice(1).toLowerCase()}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="department"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Department</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="short_description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Job Title</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., Senior Software Engineer"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="long_description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Responsibilities</FormLabel>
                    <FormControl>
                      <Textarea rows={4} {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
          )}
          {currentStep === 1 && (
            <div className="space-y-4">
              <FormField
                control={form.control}
                name="agency_id"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Agency Assignment</FormLabel>
                    <Select
                      onValueChange={(value) =>
                        field.onChange(value === "headquarters" ? null : value)
                      }
                      defaultValue={field.value || "headquarters"}
                      // [CHANGE] Disable the select if we are scoped to a specific agency
                      disabled={scopedAgencyId !== undefined}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select an agency" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="headquarters">
                          Headquarters
                        </SelectItem>
                        {agencies.map((agency) => (
                          <SelectItem
                            key={agency.agency_id}
                            value={agency.agency_id!}
                          >
                            {agency.long_name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
          )}
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/employees/employee-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/forms/business-domain-search-picker.tsx

"use client";

import React, { useState, useEffect, useMemo } from "react";
import { useFormContext } from "react-hook-form";
import { BusinessDomainDto } from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Checkbox } from "@/components/ui/checkbox";
import { Skeleton } from "@/components/ui/skeleton";

interface BusinessDomainSearchPickerProps {
  name: string;
  label: string;
}

export function BusinessDomainSearchPicker({
  name,
  label,
}: BusinessDomainSearchPickerProps) {
  const { control } = useFormContext();
  const [availableDomains, setAvailableDomains] = useState<BusinessDomainDto[]>(
    []
  );
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    setIsLoading(true);
    organizationRepository
      .getAllBusinessDomains()
      .then((data) => setAvailableDomains(data || []))
      .catch(() => setAvailableDomains([]))
      .finally(() => setIsLoading(false));
  }, []);

  const filteredDomains = useMemo(() => {
    if (!searchTerm) return availableDomains;
    return availableDomains.filter((d) =>
      d.name?.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [searchTerm, availableDomains]);

  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <div className="border rounded-md p-2">
            <Input
              placeholder="Search domains..."
              className="mb-2 h-9"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <ScrollArea className="h-40">
              {isLoading ? (
                <div className="space-y-2 p-1">
                  <Skeleton className="h-5 w-3/4" />
                  <Skeleton className="h-5 w-2/3" />
                  <Skeleton className="h-5 w-4/5" />
                </div>
              ) : (
                <div className="space-y-2 p-1">
                  {filteredDomains.map((domain) => (
                    <FormItem
                      key={domain.id}
                      className="flex flex-row items-center space-x-3 space-y-0"
                    >
                      <FormControl>
                        <Checkbox
                          checked={field.value?.includes(domain.id!)}
                          onCheckedChange={(checked) => {
                            const currentValues = field.value || [];
                            return checked
                              ? field.onChange([...currentValues, domain.id!])
                              : field.onChange(
                                  currentValues.filter(
                                    (value: string) => value !== domain.id!
                                  )
                                );
                          }}
                        />
                      </FormControl>
                      <FormLabel className="font-normal text-sm cursor-pointer">
                        {domain.name}
                      </FormLabel>
                    </FormItem>
                  ))}
                </div>
              )}
            </ScrollArea>
          </div>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}
// END OF FILE: components/organization/forms/business-domain-search-picker.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/forms/contact-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { ContactDto } from "@/types/organization";
import { Input } from "@/components/ui/input";
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { toast } from "sonner";
import { FormWrapper } from "@/components/ui/form-wrapper"; // [ADD] Import the wrapper

const contactFormSchema = z.object({
  first_name: z.string().min(2, "First name is required."),
  last_name: z.string().min(2, "Last name is required."),
  title: z.string().optional().or(z.literal("")),
  email: z
    .string()
    .email("Invalid email address.")
    .optional()
    .or(z.literal("")),
  phone_number: z.string().optional().or(z.literal("")),
  secondary_email: z
    .string()
    .email("Invalid secondary email.")
    .optional()
    .or(z.literal("")),
  secondary_phone_number: z.string().optional().or(z.literal("")),
  fax_number: z.string().optional().or(z.literal("")),
});

type ContactFormData = z.infer<typeof contactFormSchema>;

interface ContactFormProps {
  initialData?: Partial<ContactDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: ContactFormData) => Promise<void>;
  onCancelAction: () => void;
}

export function ContactForm({
  initialData,
  mode,
  onSubmitAction,
  onCancelAction,
}: ContactFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<ContactFormData>({
    resolver: zodResolver(contactFormSchema),
    defaultValues: {
      /* ... same default values ... */
    },
  });

  const handleSubmit = async (data: ContactFormData) => {
    setIsLoading(true);
    try {
      await onSubmitAction(data);
    } catch (error) {
      toast.error(error.message || `Failed to ${mode} contact.`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    // [CHANGE] Wrap the entire form content with FormWrapper
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === "create" ? "Add New Contact" : "Edit Contact"}
      description="Fill in the contact's details below."
      submitButtonText={mode === "create" ? "Add Contact" : "Save Changes"}
    >
      {() => (
        // The children function simply returns the form fields
        <div className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="first_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>First Name *</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="last_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Last Name *</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="title"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Title/Position</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Primary Email</FormLabel>
                  <FormControl>
                    <Input type="email" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="phone_number"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Primary Phone</FormLabel>
                  <FormControl>
                    <Input type="tel" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="secondary_email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Secondary Email</FormLabel>
                  <FormControl>
                    <Input type="email" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="secondary_phone_number"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Secondary Phone</FormLabel>
                  <FormControl>
                    <Input type="tel" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/forms/contact-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/forms/org-address-form.tsx

"use client";

import React, { useState, useEffect } from "react";
import * as z from "zod";
import { LatLngExpression } from "leaflet";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,

} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { MapView } from "@/components/map/map-view";
import { mapRepository } from "@/lib/data-repo/map";
import { toast } from "sonner";
import { Loader2, Search } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

export const addressSchema = z.object({
  address_line_1: z.string().min(3, "Address line 1 is required."),
  address_line_2: z.string().optional().or(z.literal("")),
  city: z.string().min(2, "City is required."),
  state: z.string().min(2, "State/Province is required."),
  zip_code: z.string().min(3, "Zip/Postal code is required."),
  country: z.string().min(2, "Country is required."),
  latitude: z.coerce
    .number()
    .min(-90, "Invalid Latitude")
    .max(90, "Invalid Latitude")
    .optional(),
  longitude: z.coerce
    .number()
    .min(-180, "Invalid Longitude")
    .max(180, "Invalid Longitude")
    .optional(),
});

export type AddressFormData = z.infer<typeof addressSchema>;

interface OrgAddressFormProps {
  form: any;
  title?: string;
  description?: string;
}

const DEFAULT_CENTER: LatLngExpression = [51.505, -0.09];
const DEFAULT_ZOOM = 4;

export function OrgAddressForm({
  form,
  title = "Headquarters Address",
  description = "Provide the primary address. Click the map or enter coordinates to pinpoint the location.",
}: OrgAddressFormProps) {
  const [markerPosition, setMarkerPosition] = useState<LatLngExpression | null>(
    null
  );
  const [mapCenter, setMapCenter] = useState<LatLngExpression>(DEFAULT_CENTER);
  const [mapZoom, setMapZoom] = useState(DEFAULT_ZOOM);
  const [isGeocoding, setIsGeocoding] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);

  const { watch, getValues, setValue } = form;

  // REFINED LOGIC: Separate watch for coordinates to drive the map marker directly.
  const watchedCoords = watch(["latitude", "longitude"]);

  // Effect to initialize or update map from coordinate fields
  useEffect(() => {
    const [lat, lon] = watchedCoords;
    if (typeof lat === "number" && typeof lon === "number") {
      const newPos: LatLngExpression = [lat, lon];
      // Check if marker needs updating to avoid unnecessary re-renders
      const currentMarker = markerPosition as [number, number] | null;
      if (currentMarker?.[0] !== lat || currentMarker?.[1] !== lon) {
        setMarkerPosition(newPos);
        setMapCenter(newPos);
        setMapZoom(16);
      }
    }
  }, [watchedCoords, markerPosition]); // Reruns when lat/lon fields change

  const handleLocationSelectAction = async (lat: number, lng: number) => {
    setIsGeocoding(true);
    toast.loading("Fetching address from coordinates...");
    try {
      setValue("latitude", parseFloat(lat.toFixed(6)), {
        shouldValidate: true,
      });
      setValue("longitude", parseFloat(lng.toFixed(6)), {
        shouldValidate: true,
      });
      // The useEffect above will handle setting the marker position

      const data = await mapRepository.reverseGeocode(lat, lng);
      if (data?.address) {
        const addressLine1 = [data.address.house_number, data.address.road]
          .filter(Boolean)
          .join(" ");
        setValue("address_line_1", addressLine1, { shouldValidate: true });
        setValue("city", data.address.city || data.address.municipality || "", {
          shouldValidate: true,
        });
        setValue(
          "state",
          data.address.state || data.address.state_district || "",
          { shouldValidate: true }
        );
        setValue("zip_code", data.address.postcode || "", {
          shouldValidate: true,
        });
        setValue("country", data.address.country || "", {
          shouldValidate: true,
        });
        toast.success("Address updated from map!");
      } else {
        toast.warning("Could not find a specific address for this location.");
      }
    } catch (error) {
      toast.error("Failed to fetch address.");
    } finally {
      setIsGeocoding(false);
      toast.dismiss();
    }
  };

  // This logic for searching based on address text remains separate and tied to the search button.
  const handleSearchAddressAction = async () => {
    const addressParts = [
      getValues("address_line_1"),
      getValues("city"),
      getValues("state"),
      getValues("country"),
    ];
    const fullAddress = addressParts.filter(Boolean).join(", ");
    if (fullAddress.length < 5) {
      toast.info("Please enter an address to search.");
      return;
    }

    setIsGeocoding(true);
    toast.loading("Searching for address...");
    try {
      const results = await mapRepository.geocodeAddress(fullAddress);
      if (results && results.length > 0) {
        const { lat, lon } = results[0];
        setValue("latitude", parseFloat(lat), { shouldValidate: true });
        setValue("longitude", parseFloat(lon), { shouldValidate: true });
        toast.success("Address found on map!");
      } else {
        toast.warning("Could not find this address.");
      }
    } catch (error) {
      toast.error("Failed to search address.");
    } finally {
      toast.dismiss();
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div className="space-y-4">
            <div className="flex items-end gap-2">
              <FormField
                name="address_line_1"
                control={form.control}
                render={({ field }) => (
                  <FormItem className="flex-grow">
                    <FormLabel>Address Line 1 *</FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        placeholder="e.g., 1600 Amphitheatre Pkwy"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button
                type="button"
                variant="outline"
                size="icon"
                onClick={handleSearchAddressAction}
                disabled={isGeocoding}
                title="Search Address on Map"
              >
                <Search className="h-4 w-4" />
              </Button>
            </div>
            <FormField
              name="address_line_2"
              control={form.control}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Address Line 2</FormLabel>
                  <FormControl>
                    <Input {...field} placeholder="e.g., Suite 100" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="grid grid-cols-2 gap-4">
              <FormField
                name="city"
                control={form.control}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>City *</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                name="state"
                control={form.control}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>State/Province *</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <FormField
                name="zip_code"
                control={form.control}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Zip/Postal Code *</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                name="country"
                control={form.control}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Country *</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <div className="grid grid-cols-2 gap-4 pt-2">
              <FormField
                name="latitude"
                control={form.control}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Latitude</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        step="any"
                        {...field}
                        value={field.value ?? ""}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                name="longitude"
                control={form.control}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Longitude</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        step="any"
                        {...field}
                        value={field.value ?? ""}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
          </div>
          <div
            className={cn(
              "relative rounded-md overflow-hidden min-h-[400px] transition-all duration-300",
              isFullscreen && "fixed inset-0 z-50"
            )}
          >
            {isGeocoding && !isFullscreen && (
              <div className="absolute inset-0 bg-background/50 z-20 flex items-center justify-center">
                <Loader2 className="h-6 w-6 animate-spin" />
              </div>
            )}
            <MapView
              center={mapCenter}
              zoom={mapZoom}
              markers={
                markerPosition
                  ? [{ id: "selected", position: markerPosition }]
                  : []
              }
              onLocationSelectAction={handleLocationSelectAction}
              isLocationPicker={true}
              className="h-full w-full"
              isFullscreen={isFullscreen}
              onToggleFullscreenAction={() => setIsFullscreen(!isFullscreen)}
            />
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
// END OF FILE: components/organization/forms/org-address-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/forms/org-basic-info-form.tsx

"use client";

import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { CardContent } from "@/components/ui/card";
import { BusinessDomainSearchPicker } from "./business-domain-search-picker";

export function OrgBasicInfoForm({ form }: { form: any }) {
  return (
    <CardContent className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <FormField
          name="long_name"
          control={form.control}
          render={({ field }) => (
            <FormItem>
              <FormLabel>Official Name *</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          name="short_name"
          control={form.control}
          render={({ field }) => (
            <FormItem>
              <FormLabel>Short Name / Acronym *</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>
      <FormField
        name="email"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Contact Email *</FormLabel>
            <FormControl>
              <Input type="email" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="description"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Description *</FormLabel>
            <FormControl>
              <Textarea rows={4} {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <BusinessDomainSearchPicker
        name="business_domains"
        label="Business Domains *"
      />
    </CardContent>
  );
}
// END OF FILE: components/organization/forms/org-basic-info-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/forms/org-branding-form.tsx

"use client";

import { useFieldArray } from "react-hook-form";
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { CardContent } from "@/components/ui/card";
import { ImageUploader } from "@/components/ui/image-uploader";
import { Link as LinkIcon, Trash2, PlusCircle } from "lucide-react";

export function OrgBrandingForm({ form }: { form: any }) {
  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "social_networks",
  });

  return (
    <CardContent className="space-y-6">
      <FormField
        name="logoFile"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Organization Logo</FormLabel>
            <FormControl>
              <ImageUploader
                currentImageUrl={form.getValues("logo_url")}
                onImageSelectedAction={(file, url) => {
                  field.onChange(file);
                  form.setValue("logo_url", url);
                }}
                label=""
                aspectRatio="square"
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="web_site_url"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Website URL</FormLabel>
            <FormControl>
              <Input type="url" {...field} value={field.value || ""} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <div className="space-y-3">
        <FormLabel>Social Media Links</FormLabel>
        {fields.map((field, index) => (
          <FormField
            key={field.id}
            control={form.control}
            name={`social_networks.${index}.url`}
            render={({ field }) => (
              <FormItem>
                <div className="flex items-center gap-2">
                  <LinkIcon className="h-4 w-4 text-muted-foreground" />
                  <FormControl>
                    <Input
                      placeholder="https://facebook.com/your-page"
                      {...field}
                    />
                  </FormControl>
                  {fields.length > 1 && (
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      onClick={() => remove(index)}
                      className="text-destructive hover:text-destructive h-9 w-9 flex-shrink-0"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  )}
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        ))}
        <Button
          type="button"
          variant="outline"
          size="sm"
          onClick={() => append({ url: "" })}
        >
          <PlusCircle className="mr-2 h-4 w-4" /> Add Social Link
        </Button>
      </div>
      <FormField
        name="keywords"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Keywords</FormLabel>
            <FormControl>
              <Input {...field} />
            </FormControl>
            <FormDescription>
              Comma-separated values (e.g., tech, saas).
            </FormDescription>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="number_of_employees"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Number of Employees</FormLabel>
            <FormControl>
              <Input type="number" {...field} value={field.value ?? ""} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
    </CardContent>
  );
}
// END OF FILE: components/organization/forms/org-branding-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/forms/org-legal-form.tsx

"use client";

import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { CardContent } from "@/components/ui/card";
import { OrganizationLegalForm as OrgLegalFormEnum } from "@/types/organization";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { CalendarDays } from "lucide-react";

const legalFormOptions: { value: OrgLegalFormEnum; label: string }[] = [
  { value: "11", label: "Sole Proprietorship" },
  { value: "31", label: "Private Limited Company (Ltd)" },
  { value: "32", label: "Public Limited Company (PLC)" },
  { value: "51", label: "Cooperative" },
];

export function OrgLegalForm({ form }: { form: any }) {
  return (
    <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-6">
      <FormField
        name="legal_form"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Legal Form *</FormLabel>
            <Select onValueChange={field.onChange} defaultValue={field.value}>
              <FormControl>
                <SelectTrigger>
                  <SelectValue placeholder="Select..." />
                </SelectTrigger>
              </FormControl>
              <SelectContent>
                {legalFormOptions.map((opt) => (
                  <SelectItem key={opt.value} value={opt.value}>
                    {opt.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="business_registration_number"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Business Registration No.</FormLabel>
            <FormControl>
              <Input {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="tax_number"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Tax ID / VAT Number</FormLabel>
            <FormControl>
              <Input {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="capital_share"
        control={form.control}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Capital Share (USD)</FormLabel>
            <FormControl>
              <Input type="number" {...field} value={field.value ?? ""} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="registration_date"
        control={form.control}
        render={({ field }) => (
          <FormItem className="flex flex-col">
            <FormLabel>Registration Date</FormLabel>
            <Popover>
              <PopoverTrigger asChild>
                <FormControl>
                  <Button
                    variant={"outline"}
                    className={cn(
                      "h-10 w-full justify-start font-normal",
                      !field.value && "text-muted-foreground"
                    )}
                  >
                    <CalendarDays className="mr-2 h-4 w-4" />
                    {field.value ? (
                      format(field.value, "PPP")
                    ) : (
                      <span>Pick a date</span>
                    )}
                  </Button>
                </FormControl>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={field.value || undefined}
                  onSelect={field.onChange}
                  fromYear={1900}
                  toYear={new Date().getFullYear()}
                />
              </PopoverContent>
            </Popover>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        name="year_founded"
        control={form.control}
        render={({ field }) => (
          <FormItem className="flex flex-col">
            <FormLabel>Year Founded</FormLabel>
            <Popover>
              <PopoverTrigger asChild>
                <FormControl>
                  <Button
                    variant={"outline"}
                    className={cn(
                      "h-10 w-full justify-start font-normal",
                      !field.value && "text-muted-foreground"
                    )}
                  >
                    <CalendarDays className="mr-2 h-4 w-4" />
                    {field.value ? (
                      format(field.value, "yyyy")
                    ) : (
                      <span>Pick year</span>
                    )}
                  </Button>
                </FormControl>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={field.value || undefined}
                  onSelect={field.onChange}
                  captionLayout="dropdown-buttons"
                  fromYear={1900}
                  toYear={new Date().getFullYear()}
                />
              </PopoverContent>
            </Popover>
            <FormMessage />
          </FormItem>
        )}
      />
    </CardContent>
  );
}
// END OF FILE: components/organization/forms/org-legal-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/organization-card.tsx

"use client";

import React from "react";
import { OrganizationDto, OrganizationDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  LogIn,
  Building,
  CheckCircle,
  XCircle,
  Clock,
} from "lucide-react";
import { cn } from "@/lib/utils";
import Image from "next/image";

interface OrganizationCardProps {
  organization: OrganizationDto;
  onEnterAction: (organization: OrganizationDto) => void;
  onEditAction: (organizationId: string) => void;
  onDeleteAction: (organization: OrganizationDto) => void;
}

const getStatusInfo = (status: OrganizationDto["status"]) => {
  switch (status) {
    case "ACTIVE":
      return { icon: CheckCircle, color: "text-green-600", label: "Active" };
    case "INACTIVE":
      return { icon: XCircle, color: "text-slate-500", label: "Inactive" };
    case "PENDING_APPROVAL":
      return { icon: Clock, color: "text-amber-600", label: "Pending" };
    default:
      return {
        icon: XCircle,
        color: "text-destructive",
        label: status || "Unknown",
      };
  }
};

export function OrganizationCard({
  organization,
  onEnterAction,
  onEditAction,
  onDeleteAction,
}: OrganizationCardProps) {
  const statusInfo = getStatusInfo(organization.status);

  return (
    <Card className="flex flex-col h-full shadow-md hover:shadow-xl transition-all duration-300 ease-in-out transform hover:-translate-y-1 group">
      <CardHeader>
        <div className="flex justify-between items-start gap-3">
          <div className="flex items-center gap-4">
            {organization.logo_url ? (
              <Image
                src={organization.logo_url}
                alt={organization.long_name || ""}
                width={48}
                height={48}
                className="h-12 w-12 rounded-lg object-cover border"
              />
            ) : (
              <div className="h-12 w-12 rounded-lg bg-muted flex items-center justify-center border">
                <Building className="h-6 w-6 text-muted-foreground" />
              </div>
            )}
            <div>
              <CardTitle
                className="text-md font-bold leading-tight line-clamp-2"
                title={organization.long_name}
              >
                {organization.long_name}
              </CardTitle>
              <CardDescription className="text-xs">
                {organization.short_name}
              </CardDescription>
            </div>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 flex-shrink-0"
              >
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem
                onClick={() => onEditAction(organization.organization_id!)}
              >
                <Edit3 className="mr-2 h-4 w-4" /> Edit Details
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => onDeleteAction(organization)}
                className="text-destructive focus:text-destructive"
              >
                <Trash2 className="mr-2 h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent className="flex-grow">
        <p className="text-muted-foreground line-clamp-3 text-sm leading-relaxed min-h-[60px]">
          {organization.description || "No description provided."}
        </p>
      </CardContent>
      <CardFooter className="pt-3 pb-4 flex justify-between items-center">
        <Badge
          variant="outline"
          className={cn(
            "capitalize text-xs items-center font-normal",
            statusInfo.color
          )}
        >
          <statusInfo.icon className="mr-1.5 h-3.5 w-3.5" />
          {statusInfo.label}
        </Badge>
        <Button size="sm" onClick={() => onEnterAction(organization)}>
          <LogIn className="mr-2 h-4 w-4" /> Enter
        </Button>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/organization-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/organization-columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { OrganizationDto, OrganizationDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  LogIn,
  Building,
  CheckCircle,
  XCircle,
  Clock,
} from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

const getStatusInfo = (status: OrganizationDto["status"]) => {
  switch (status) {
    case "ACTIVE":
      return { icon: CheckCircle, color: "text-green-600", label: "Active" };
    case "INACTIVE":
      return { icon: XCircle, color: "text-slate-500", label: "Inactive" };
    case "PENDING_APPROVAL":
      return { icon: Clock, color: "text-amber-600", label: "Pending" };
    default:
      return {
        icon: XCircle,
        color: "text-destructive",
        label: status || "Unknown",
      };
  }
};

interface OrganizationRowActionsProps {
  organization: OrganizationDto;
  onEnterAction: (organization: OrganizationDto) => void;
  onEditAction: (organizationId: string) => void;
  onDeleteAction: (organization: OrganizationDto) => void;
}

const OrganizationRowActions: React.FC<OrganizationRowActionsProps> = ({
  organization,
  onEnterAction,
  onEditAction,
  onDeleteAction,
}) => {
  return (
    <div className="flex items-center justify-end gap-2">
      <Button
        variant="outline"
        size="sm"
        className="h-8 px-2"
        onClick={() => onEnterAction(organization)}
      >
        <LogIn className="mr-1.5 h-3.5 w-3.5" /> Enter
      </Button>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            className="h-8 w-8 p-0 data-[state=open]:bg-muted"
          >
            <MoreHorizontal className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="w-[160px]">
          <DropdownMenuItem
            onClick={() => onEditAction(organization.organization_id!)}
          >
            <Edit3 className="mr-2 h-4 w-4" /> Edit
          </DropdownMenuItem>
          <DropdownMenuItem
            onClick={() => onDeleteAction(organization)}
            className="text-destructive focus:text-destructive"
          >
            <Trash2 className="mr-2 h-4 w-4" /> Delete
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
};

export const getOrganizationColumns = (
  actionHandlers: Omit<OrganizationRowActionsProps, "organization">
): ColumnDef<OrganizationDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "long_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Organization" />
    ),
    cell: ({ row }) => {
      const org = row.original;
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border">
            <AvatarImage src={org.logo_url} alt={org.long_name} />
            <AvatarFallback>{org.short_name?.charAt(0) || "O"}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{org.long_name}</div>
            <div className="text-xs text-muted-foreground">
              {org.short_name}
            </div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "status",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Status" />
    ),
    cell: ({ row }) => {
      const statusInfo = getStatusInfo(row.getValue("status"));
      return (
        <Badge variant="outline" className={`capitalize ${statusInfo.color}`}>
          <statusInfo.icon className="mr-1.5 h-3.5 w-3.5" />
          {statusInfo.label}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "email",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Contact Email" />
    ),
  },
  {
    id: "actions",
    cell: ({ row }) => (
      <OrganizationRowActions organization={row.original} {...actionHandlers} />
    ),
  },
];
// END OF FILE: components/organization/organization-columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/organization-form.tsx

"use client";

import React, { useState, useMemo } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  CreateOrganizationRequest,
  UpdateOrganizationRequest,
  OrganizationDto,
  AddressDto,
  OrganizationLegalForm,
} from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { mediaRepository } from "@/lib/data-repo/media";
import { toast } from "sonner";
import { useSession } from "next-auth/react";
import { FormWrapper } from "../ui/form-wrapper";
import { Info, FileText, Building, MapPin } from "lucide-react";
import { OrgBasicInfoForm } from "./forms/org-basic-info-form";
import { OrgLegalForm } from "./forms/org-legal-form";
import { OrgBrandingForm } from "./forms/org-branding-form";
import { OrgAddressForm, addressSchema } from "./forms/org-address-form";
import { isValid } from "date-fns";

const basicInfoSchema = z.object({
  long_name: z.string().min(3, "Official name is required.").max(100),
  short_name: z.string().min(2, "Short name is required.").max(50),
  email: z.string().email("A valid contact email is required."),
  description: z
    .string()
    .min(10, "Description must be at least 10 characters.")
    .max(500),
  business_domains: z
    .array(z.string())
    .min(1, "At least one business domain is required."),
});
const legalFormSchema = z.object({
  legal_form: z.string().min(1, "Legal form is required."),
  business_registration_number: z.string().optional().or(z.literal("")),
  tax_number: z.string().optional().or(z.literal("")),
  capital_share: z.coerce
    .number()
    .positive("Capital share must be positive.")
    .optional()
    .nullable(),
  registration_date: z.date().optional().nullable(),
  year_founded: z.date().optional().nullable(),
  ceo_name: z.string().optional().or(z.literal("")),
});
const brandingSchema = z.object({
  logoFile: z.any().optional(),
  logo_url: z.string().url("Invalid URL").optional().or(z.literal("")),
  web_site_url: z
    .string()
    .url("Invalid website URL.")
    .optional()
    .or(z.literal("")),
  social_network: z
    .string()
    .url("Invalid social network URL.")
    .optional()
    .or(z.literal("")),
  keywords: z.string().optional().or(z.literal("")),
  number_of_employees: z.coerce.number().int().min(0).optional().nullable(),
});
const fullOrganizationSchema = basicInfoSchema
  .merge(legalFormSchema)
  .merge(brandingSchema)
  .merge(addressSchema);
type OrganizationFormData = z.infer<typeof fullOrganizationSchema>;

const formSteps = [
  {
    id: "basic",
    name: "Basic Info",
    icon: Info,
    fields: Object.keys(basicInfoSchema.shape),
  },
  {
    id: "legal",
    name: "Legal & Financial",
    icon: FileText,
    fields: Object.keys(legalFormSchema.shape),
  },
  {
    id: "branding",
    name: "Branding & Details",
    icon: Building,
    fields: Object.keys(brandingSchema.shape),
  },
  {
    id: "address",
    name: "Headquarters",
    icon: MapPin,
    fields: Object.keys(addressSchema.shape),
  },
];

interface OrganizationFormProps {
  mode: "create" | "edit";
  initialData?: Partial<OrganizationDto>;
  defaultAddress?: AddressDto | null;
  onSuccessAction: (data: OrganizationDto) => void;
}

export function OrganizationForm({
  mode,
  initialData,
  defaultAddress,
  onSuccessAction,
}: OrganizationFormProps) {
  const { data: session } = useSession();
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<OrganizationFormData>({
    resolver: zodResolver(fullOrganizationSchema),
    mode: "onChange",
    defaultValues: useMemo(
      () => ({
        long_name: initialData?.long_name || "",
        short_name: initialData?.short_name || "",
        email: initialData?.email || "",
        description: initialData?.description || "",
        business_domains: initialData?.business_domains || [],
        legal_form: initialData?.legal_form || "",
        business_registration_number:
          initialData?.business_registration_number || "",
        tax_number: initialData?.tax_number || "",
        capital_share: initialData?.capital_share || null,
        registration_date:
          initialData?.registration_date &&
          isValid(new Date(initialData.registration_date))
            ? new Date(initialData.registration_date)
            : undefined,
        year_founded:
          initialData?.year_founded &&
          isValid(new Date(initialData.year_founded))
            ? new Date(initialData.year_founded)
            : undefined,
        ceo_name: initialData?.ceo_name || "",
        logo_url: initialData?.logo_url || "",
        web_site_url: initialData?.website_url || "",
        social_network: initialData?.social_network || "",
        keywords: Array.isArray(initialData?.keywords)
          ? initialData.keywords.join(", ")
          : "",
        number_of_employees: (initialData as any)?.number_of_employees || null,
        address_line_1: defaultAddress?.address_line_1 || "",
        address_line_2: defaultAddress?.address_line_2 || "",
        city: defaultAddress?.city || "",
        state: defaultAddress?.state || "",
        zip_code: defaultAddress?.zip_code || "",
        country: defaultAddress?.country_id || "",
        latitude: defaultAddress?.latitude,
        longitude: defaultAddress?.longitude,
      }),
      [initialData, defaultAddress]
    ),
  });

  const onSubmit = async (data: OrganizationFormData) => {
    setIsLoading(true);
    try {
      let logoUrl = data.logo_url || undefined;
      if (data.logoFile instanceof File) {
        const response = await mediaRepository.uploadFile(
          "organization",
          "image",
          "logos",
          session!.user.id,
          data.logoFile,
          true
        );
        logoUrl = response.url;
      }

      const orgPayload: CreateOrganizationRequest | UpdateOrganizationRequest =
        {
          long_name: data.long_name,
          short_name: data.short_name,
          email: data.email,
          description: data.description,
          business_domains: data.business_domains,
          legal_form: data.legal_form as OrganizationLegalForm,
          logo_url: logoUrl,
          web_site_url: data.web_site_url,
          social_network: data.social_network,
          keywords: data.keywords
            ? data.keywords
                .split(",")
                .map((k) => k.trim())
                .filter(Boolean)
            : [],
          business_registration_number: data.business_registration_number,
          tax_number: data.tax_number,
          capital_share: data.capital_share ?? undefined,
          registration_date: data.registration_date?.toISOString(),
          year_founded: data.year_founded?.toISOString(),
          ceo_name: data.ceo_name,
          number_of_employees: data.number_of_employees ?? undefined,
        };

      const addressPayload = {
        address_line_1: data.address_line_1,
        address_line_2: data.address_line_2,
        city: data.city,
        state: data.state,
        zip_code: data.zip_code,
        country_id: data.country,
        latitude: data.latitude,
        longitude: data.longitude,
      };

      if (mode === "create") {
        const orgResponse = await organizationRepository.createOrganization(
          orgPayload as CreateOrganizationRequest
        );
        if (orgResponse?.organization_id) {
          await organizationRepository.createAddress(
            "ORGANIZATION",
            orgResponse.organization_id,
            addressPayload
          );
        }
        onSuccessAction(orgResponse);
      } else if (mode === "edit" && initialData?.organization_id) {
        const updatedOrg = await organizationRepository.updateOrganization(
          initialData.organization_id,
          orgPayload as UpdateOrganizationRequest
        );
        if (defaultAddress?.address_id) {
          await organizationRepository.updateAddress(
            "ORGANIZATION",
            initialData.organization_id,
            defaultAddress.address_id,
            addressPayload
          );
        } else {
          await organizationRepository.createAddress(
            "ORGANIZATION",
            initialData.organization_id,
            addressPayload
          );
        }
        onSuccessAction(updatedOrg);
      }
    } catch (error: any) {
      toast.error(error.message || `Failed to ${mode} organization.`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={onSubmit}
      isLoading={isLoading}
      title={
        mode === "create"
          ? "Create New Organization"
          : `Editing: ${initialData?.long_name}`
      }
      description="Complete all steps to save your organization's profile."
      steps={formSteps}
      submitButtonText={
        mode === "create" ? "Create Organization" : "Save All Changes"
      }
    >
      {(currentStep) => (
        <div className="min-h-[450px]">
          {currentStep === 0 && <OrgBasicInfoForm form={form} />}
          {currentStep === 1 && <OrgLegalForm form={form} />}
          {currentStep === 2 && <OrgBrandingForm form={form} />}
          {currentStep === 3 && <OrgAddressForm form={form} />}
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/organization-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/organization-selector-dialog.tsx

"use client";

import React, { useState, useMemo } from "react";
import { useRouter } from "next/navigation";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import {OrganizationDto } from "@/types/organization";
import { cn } from "@/lib/utils";
import {
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  LayoutGrid,
  List,
  Search,
  Building,
  Check,
  PlusCircle,
  Loader2,
  Briefcase,
} from "lucide-react";
import Image from "next/image";

interface OrganizationSelectorDialogProps {
  onCloseAction: () => void;
}

export function OrganizationSelectorDialog({
  onCloseAction,
}: OrganizationSelectorDialogProps) {
  const router = useRouter();
  const {
    userOrganizations,
    activeOrganizationId,
    setActiveOrganization,
    isLoadingUserOrgs,
  } = useActiveOrganization();

  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [searchQuery, setSearchQuery] = useState("");

  const filteredOrganizations = useMemo(() => {
    if (!searchQuery) return userOrganizations;
    const lowercasedQuery = searchQuery.toLowerCase();
    return userOrganizations.filter(
      (org) =>
        org.long_name?.toLowerCase().includes(lowercasedQuery) ||
        org.short_name?.toLowerCase().includes(lowercasedQuery) ||
        org.email?.toLowerCase().includes(lowercasedQuery)
    );
  }, [userOrganizations, searchQuery]);

  const handleSelectAndClose = (org: OrganizationDto) => {
    if (!org.organization_id) return;
    setActiveOrganization(org.organization_id, org as OrganizationDto).then(
      () => {
        router.push(`/business-actor/dashboard`);
        onCloseAction();
      }
    );
  };

  const handleCreateNew = () => {
    router.push("/business-actor/organization/create");
    onCloseAction();
  };

  const NoOrganizationsPrompt = () => (
    <div className="flex flex-col items-center justify-center h-full text-center p-10 bg-muted/50 rounded-lg">
      <Briefcase className="h-16 w-16 text-muted-foreground mb-4" />
      <h3 className="text-xl font-semibold">No Organizations Yet</h3>
      <p className="text-muted-foreground mt-2 mb-6 max-w-sm">
        It looks like you have not created or joined an organization. Get started
        by creating your first one.
      </p>
      <Button onClick={handleCreateNew}>
        <PlusCircle className="mr-2 h-4 w-4" />
        Create Your First Organization
      </Button>
    </div>
  );

  return (
    <div className="flex flex-col h-full">
      <DialogHeader className="px-6 pt-6 flex-shrink-0">
        <DialogTitle className="text-xl">Switch Organization</DialogTitle>
        <DialogDescription>
          Select an organization to manage or create a new one.
        </DialogDescription>
      </DialogHeader>

      <div className="px-6 pt-4 pb-2 border-b flex-shrink-0">
        <div className="flex flex-col sm:flex-row gap-2 justify-between">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search organizations..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 h-10"
            />
          </div>
          <div className="flex items-center p-1 bg-muted rounded-lg w-full sm:w-auto">
            <Button
              variant={viewMode === "grid" ? "default" : "ghost"}
              size="sm"
              onClick={() => setViewMode("grid")}
              className="flex-1 sm:flex-initial"
            >
              <LayoutGrid className="h-4 w-4" />
              <span className="ml-2 hidden sm:inline">Grid</span>
            </Button>
            <Button
              variant={viewMode === "list" ? "default" : "ghost"}
              size="sm"
              onClick={() => setViewMode("list")}
              className="flex-1 sm:flex-initial"
            >
              <List className="h-4 w-4" />
              <span className="ml-2 hidden sm:inline">List</span>
            </Button>
          </div>
        </div>
      </div>

      <ScrollArea className="flex-grow overflow-auto">
        <div className="p-6">
          {isLoadingUserOrgs ? (
            <div className="flex items-center justify-center h-full">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
            </div>
          ) : filteredOrganizations.length === 0 && !searchQuery ? (
            <NoOrganizationsPrompt />
          ) : (
            <>
              {viewMode === "grid" && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {filteredOrganizations.map((org) => (
                    <Card
                      key={org.organization_id}
                      onClick={() => handleSelectAndClose(org)}
                      className={cn(
                        "cursor-pointer hover:shadow-lg transition-shadow hover:border-primary/50 relative group",
                        activeOrganizationId === org.organization_id &&
                        "border-2 border-primary shadow-lg"
                      )}
                    >
                      <CardHeader>
                        <div className="flex items-center gap-3">
                          {org.logo_url ? (
                            <Image
                              src={org.logo_url}
                              alt="Logo"
                              width={40}
                              height={40}
                              className="h-10 w-10 rounded-md object-cover"
                            />
                          ) : (
                            <div className="h-10 w-10 rounded-md bg-muted flex items-center justify-center">
                              <Building className="h-5 w-5 text-muted-foreground" />
                            </div>
                          )}
                          <CardTitle className="text-base line-clamp-2">
                            {org.long_name}
                          </CardTitle>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <CardDescription className="text-xs line-clamp-2 min-h-[32px]">
                          {org.description}
                        </CardDescription>
                      </CardContent>
                      {activeOrganizationId === org.organization_id && (
                        <div className="absolute top-2 right-2 p-1 bg-primary text-primary-foreground rounded-full">
                          <Check className="h-3 w-3" />
                        </div>
                      )}
                    </Card>
                  ))}
                </div>
              )}
              {viewMode === "list" && (
                <div className="space-y-2">
                  {filteredOrganizations.length > 0 ? (
                    filteredOrganizations.map((org) => (
                      <div
                        key={org.organization_id}
                        onClick={() => handleSelectAndClose(org)}
                        className={cn(
                          "flex items-center p-3 rounded-lg border hover:bg-accent cursor-pointer",
                          activeOrganizationId === org.organization_id &&
                          "bg-accent border-primary/50"
                        )}
                      >
                        <div className="flex items-center gap-4 flex-1 min-w-0">
                          {org.logo_url ? (
                            <Image
                              src={org.logo_url}
                              alt="Logo"
                              width={32}
                              height={32}
                              className="h-8 w-8 rounded-md object-cover"
                            />
                          ) : (
                            <div className="h-8 w-8 rounded-md bg-muted flex-shrink-0 flex items-center justify-center">
                              <Building className="h-4 w-4 text-muted-foreground" />
                            </div>
                          )}
                          <div className="min-w-0">
                            <p className="font-medium text-sm truncate">
                              {org.long_name}
                            </p>
                            <p className="text-xs text-muted-foreground truncate">
                              {org.email}
                            </p>
                          </div>
                        </div>
                        {activeOrganizationId === org.organization_id && (
                          <Check className="ml-4 h-5 w-5 text-primary flex-shrink-0" />
                        )}
                      </div>
                    ))
                  ) : (
                    <p className="text-center text-sm text-muted-foreground py-10">
                      No organizations match your search.
                    </p>
                  )}
                </div>
              )}
            </>
          )}
        </div>
      </ScrollArea>

      <DialogFooter className="px-6 py-4 border-t flex-shrink-0 flex sm:justify-between">
        <DialogClose asChild>
          <Button
            type="button"
            variant="secondary"
            className="w-full sm:w-auto"
          >
            Cancel
          </Button>
        </DialogClose>
        <Button onClick={handleCreateNew} className="w-full sm:w-auto">
          <PlusCircle className="mr-2 h-4 w-4" />
          Create Organization
        </Button>
      </DialogFooter>
    </div>
  );
}
// END OF FILE: components/organization/organization-selector-dialog.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/organization-switcher.tsx

"use client";

import React, { useState } from "react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { ChevronsUpDown, Building } from "lucide-react";
import Image from "next/image";
import { Skeleton } from "@/components/ui/skeleton";
import { OrganizationSelectorDialog } from "./organization-selector-dialog";

interface OrganizationSwitcherProps {
  isCollapsed: boolean;
}

export function OrganizationSwitcher({
  isCollapsed,
}: OrganizationSwitcherProps) {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const {
    userOrganizations,
    activeOrganizationId,
    activeOrganizationDetails,
    isLoadingUserOrgs,
  } = useActiveOrganization();

  if (isLoadingUserOrgs) {
    return (
      <div className="px-2 py-2">
        <Skeleton className="h-14 w-full" />
      </div>
    );
  }

  const activeOrg =
    activeOrganizationDetails ||
    userOrganizations.find(
      (org) => org.organization_id === activeOrganizationId
    );

  if (isCollapsed) {
    return (
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <TooltipProvider>
          <Tooltip delayDuration={0}>
            <TooltipTrigger asChild>
              <DialogTrigger asChild>
                {/* [FIX] Add w-full and justify-center */}
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-14 w-full flex justify-center items-center"
                >
                  {activeOrg?.logo_url ? (
                    <Image
                      src={activeOrg.logo_url}
                      alt="Org Logo"
                      width={28}
                      height={28}
                      className="h-7 w-7 rounded-md object-cover"
                    />
                  ) : (
                    <Building className="h-6 w-6" />
                  )}
                  <span className="sr-only">Switch Organization</span>
                </Button>
              </DialogTrigger>
            </TooltipTrigger>
            <TooltipContent side="right">
              {activeOrg?.short_name || "Switch Organization"}
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        {/* ... DialogContent ... */}
      </Dialog>
    );
  }
  return (
    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
      <DialogTrigger asChild>
        <div className="px-2 py-2">
          <Button
            variant="outline"
            role="combobox"
            aria-expanded={isDialogOpen}
            className="w-full h-14 justify-between text-left hover:bg-muted/50 focus:ring-1 focus:ring-primary"
          >
            <div className="flex items-center gap-3 min-w-0">
              {activeOrg?.logo_url ? (
                <Image
                  src={activeOrg.logo_url}
                  alt="Org Logo"
                  width={32}
                  height={32}
                  className="h-8 w-8 rounded-md object-cover"
                />
              ) : (
                <div className="h-8 w-8 rounded-md bg-muted flex items-center justify-center">
                  <Building className="h-5 w-5 text-muted-foreground" />
                </div>
              )}
              <div className="flex flex-col items-start min-w-0">
                <span className="truncate font-semibold text-sm">
                  {activeOrg?.short_name || "Select Organization"}
                </span>
                <span className="truncate text-xs text-muted-foreground">
                  {activeOrg
                    ? "Switch organization"
                    : "No organization selected"}
                </span>
              </div>
            </div>
            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </div>
      </DialogTrigger>
      <DialogContent className="p-0 gap-0 w-[95vw] max-w-md h-[70vh] flex flex-col">
        <OrganizationSelectorDialog
          onCloseAction={() => setIsDialogOpen(false)}
        />
      </DialogContent>
    </Dialog>
  );
}
// END OF FILE: components/organization/organization-switcher.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/practical-info/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { PracticalInformationDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, FileText } from "lucide-react"; // Using FileText as a generic icon for info type
import { format, parseISO, isValid } from "date-fns";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

export interface PracticalInfoRowActionsProps {
  item: PracticalInformationDto;
  onEditAction: (item: PracticalInformationDto) => void;
  onDeleteAction: (item: PracticalInformationDto) => void;
  // No onViewDetails for this simple DTO, edit serves that purpose
}

const PracticalInfoRowActions: React.FC<PracticalInfoRowActionsProps> = ({
  item,
  onEditAction,
  onDeleteAction,
}) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className="h-8 w-8 p-0 data-[state=open]:bg-muted"
        >
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuLabel>Actions</DropdownMenuLabel>
        <DropdownMenuItem onClick={() => onEditAction(item)}>
          <Edit3 className="mr-2 h-4 w-4" /> Edit
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          onClick={() => onDeleteAction(item)}
          className="text-destructive focus:text-destructive"
        >
          <Trash2 className="mr-2 h-4 w-4" /> Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getPracticalInfoColumns = (
  actionHandlers: Omit<PracticalInfoRowActionsProps, "item">
): ColumnDef<PracticalInformationDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all rows"
        className="translate-y-[2px]"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
        className="translate-y-[2px]"
      />
    ),
    enableSorting: false,
    enableHiding: false,
    size: 40,
  },
  {
    accessorKey: "type",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Type" />
    ),
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        <FileText className="h-4 w-4 text-muted-foreground flex-shrink-0" />
        <span className="font-medium truncate max-w-xs">
          {row.getValue("type")}
        </span>
      </div>
    ),
    size: 250,
    filterFn: (row, id, value) => value.includes(row.getValue(id)), // For faceted filter
  },
  {
    accessorKey: "value",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Value" />
    ),
    cell: ({ row }) => (
      <div className="truncate max-w-md text-sm text-muted-foreground">
        {row.getValue("value")}
      </div>
    ),
    size: 400,
  },
  {
    accessorKey: "notes",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Notes" />
    ),
    cell: ({ row }) => (
      <div className="text-xs text-muted-foreground/80 truncate max-w-sm">
        {row.getValue("notes") || ""}
      </div>
    ),
  },
  {
    accessorKey: "updated_at",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Last Updated" />
    ),
    cell: ({ row }) => {
      const date = row.getValue("updated_at") as string;
      return (
        <div className="text-xs text-muted-foreground whitespace-nowrap">
          {isValid(parseISO(date)) ? format(parseISO(date), "PPp") : "-"}
        </div>
      );
    },
    size: 170,
  },
  {
    id: "actions",
    cell: ({ row }) => (
      <div className="text-right">
        <PracticalInfoRowActions
          item={row.original}
          onEditAction={actionHandlers.onEditAction}
          onDeleteAction={actionHandlers.onDeleteAction}
        />
      </div>
    ),
    size: 80,
  },
];
// END OF FILE: components/organization/practical-info/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/practical-info/practical-info-card.tsx

"use client";

import React from "react";
import { PracticalInformationDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  StickyNote,
} from "lucide-react"; // Use specific icon
import { format, parseISO, isValid } from "date-fns";
import { cn } from "@/lib/utils";

interface PracticalInfoCardProps {
  item: PracticalInformationDto;
  onEditAction: (item: PracticalInformationDto) => void;
  onDeleteAction: (item: PracticalInformationDto) => void;
  className?: string;
}

export function PracticalInfoCard({
  item,
  onEditAction,
  onDeleteAction,
  className,
}: PracticalInfoCardProps) {
  return (
    <Card
      className={cn(
        "flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow duration-200 ease-in-out group",
        className
      )}
    >
      <CardHeader>
        <div className="flex justify-between items-start gap-2">
          <CardTitle className="text-base sm:text-md font-semibold leading-tight line-clamp-2 flex items-center">
            <StickyNote className="h-4 w-4 mr-2 text-primary opacity-80 flex-shrink-0" />
            <span className="truncate" title={item.type}>
              {item.type || "Untitled Information"}
            </span>
          </CardTitle>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-7 w-7 flex-shrink-0 opacity-70 group-hover:opacity-100"
              >
                <MoreHorizontal className="h-4 w-4" />{" "}
                <span className="sr-only">Actions</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-[160px]">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => onEditAction(item)}>
                <Edit3 className="mr-2 h-4 w-4" /> Edit
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => onDeleteAction(item)}
                className="text-destructive focus:text-destructive"
              >
                <Trash2 className="mr-2 h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent className="flex-grow space-y-1.5 text-sm py-2">
        <p className="text-foreground whitespace-pre-wrap break-words line-clamp-3 min-h-[4.5em]">
          {item.value || (
            <span className="italic text-muted-foreground">
              No value provided.
            </span>
          )}
        </p>
        {item.notes && (
          <p className="text-xs text-muted-foreground pt-1 line-clamp-2">
            <strong>Notes:</strong> {item.notes}
          </p>
        )}
      </CardContent>
      <CardFooter className="pt-2 pb-3 text-xs text-muted-foreground justify-end">
        Updated:{" "}
        {isValid(parseISO(item.updated_at!))
          ? format(parseISO(item.updated_at!), "PP")
          : "-"}
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/practical-info/practical-info-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/practical-info/practical-info-form.tsx

"use client";

import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { PracticalInformationDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

const practicalInfoFormSchema = z.object({
  type: z.string().min(3, "Type must be at least 3 characters long.").max(100, "Type is too long."),
  value: z.string().min(1, "Value cannot be empty.").max(1000, "Value is too long."),
  notes: z.string().max(500, "Notes are too long.").optional().or(z.literal("")),
});

export type PracticalInfoFormData = z.infer<typeof practicalInfoFormSchema>;

interface PracticalInfoFormProps {
  initialData?: Partial<PracticalInformationDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: PracticalInfoFormData) => Promise<boolean>;
}

export function PracticalInfoForm({ initialData, mode, onSubmitAction }: PracticalInfoFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<PracticalInfoFormData>({
    resolver: zodResolver(practicalInfoFormSchema),
    defaultValues: {
      type: initialData?.type || "",
      value: initialData?.value || "",
      notes: initialData?.notes || "",
    },
  });

  useEffect(() => {
    form.reset({
      type: initialData?.type || "",
      value: initialData?.value || "",
      notes: initialData?.notes || "",
    });
  }, [initialData, form.reset]);

  const handleSubmit = async (data: PracticalInfoFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Add New Information" : "Edit Information"}
      description={mode === 'create' ? "Provide a new piece of practical information." : `Update details for "${initialData?.type}"`}
      submitButtonText={mode === 'create' ? "Add Information" : "Save Changes"}
    >
      {() => (
        <div className="space-y-6 p-1">
          <FormField control={form.control} name="type" render={({ field }) => (<FormItem><FormLabel>Information Type *</FormLabel><FormControl><Input placeholder="e.g., Opening Hours, WiFi Password" {...field} /></FormControl><FormDescription>A clear category for this piece of information.</FormDescription><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="value" render={({ field }) => (<FormItem><FormLabel>Value / Content *</FormLabel><FormControl><Textarea placeholder="Enter the detailed information here..." {...field} rows={5} /></FormControl><FormDescription>The actual piece of information (e.g., Mon-Fri: 9 AM - 5 PM).</FormDescription><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="notes" render={({ field }) => (<FormItem><FormLabel>Additional Notes (Optional)</FormLabel><FormControl><Textarea placeholder="Any relevant context or extra details..." {...field} rows={3} /></FormControl><FormMessage /></FormItem>)} />
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/practical-info/practical-info-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/profile-nav.tsx

"use client";

import Link from "next/link";
import { cn } from "@/lib/utils";
import { Building, BookUser, MapPinned } from "lucide-react";

const navLinks = [
  {
    name: "Edit Profile",
    href: "/business-actor/org/profile",
    tab: "edit_profile",
    icon: Building,
  },
  {
    name: "Contacts",
    href: "/business-actor/org/profile?tab=contacts",
    tab: "contacts",
    icon: BookUser,
  },
  {
    name: "Addresses",
    href: "/business-actor/org/profile?tab=addresses",
    tab: "addresses",
    icon: MapPinned,
  },
];

interface ProfileNavProps {
  activeTab: string;
}

export function ProfileNav({ activeTab }: ProfileNavProps) {
  return (
    <nav className="flex flex-col space-y-1" aria-label="Profile Sections">
      {navLinks.map((link) => (
        <Link
          key={link.name}
          href={link.href}
          scroll={false}
          className={cn(
            "group flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors",
            activeTab === link.tab
              ? "bg-muted text-primary font-semibold"
              : "hover:bg-muted/50 hover:text-foreground"
          )}
        >
          <link.icon className="mr-3 h-5 w-5 flex-shrink-0 text-muted-foreground group-hover:text-primary transition-colors" />
          <span>{link.name}</span>
        </Link>
      ))}
    </nav>
  );
}
// END OF FILE: components/organization/profile-nav.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/proposed-activities/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ProposedActivityDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Activity } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface RowActionsProps {
  activity: ProposedActivityDto;
  onEditAction: (activity: ProposedActivityDto) => void;
  onDeleteAction: (activity: ProposedActivityDto) => void;
}

const RowActions: React.FC<RowActionsProps> = ({ activity, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(activity)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(activity)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getProposedActivityColumns = (
  actionHandlers: Omit<RowActionsProps, "activity">
): ColumnDef<ProposedActivityDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Activity Name" />,
    cell: ({ row }) => {
      return (
        <div className="flex items-center gap-3">
          <Activity className="h-4 w-4 text-muted-foreground" />
          <span className="font-medium">{row.getValue("name")}</span>
        </div>
      );
    },
  },
  {
    accessorKey: "type",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Type" />,
    cell: ({ row }) => <div className="text-sm text-muted-foreground">{row.getValue("type")}</div>,
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "rate",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Rate" className="justify-end" />,
    cell: ({ row }) => {
      const rate = parseFloat(row.getValue("rate"));
      const formatted = isNaN(rate) ? "N/A" : new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(rate);
      return <div className="text-right font-medium text-sm">{formatted}</div>;
    },
  },
  {
    id: "actions",
    cell: ({ row }) => <RowActions activity={row.original} {...actionHandlers} />,
  },
];
// END OF FILE: components/organization/proposed-activities/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/proposed-activities/proposed-activity-card.tsx

"use client";

import React from "react";
import { ProposedActivityDto } from "@/types/organization";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Activity, DollarSign } from "lucide-react";

interface ProposedActivityCardProps {
  activity: ProposedActivityDto;
  onEditAction: (activity: ProposedActivityDto) => void;
  onDeleteAction: (activity: ProposedActivityDto) => void;
}

export function ProposedActivityCard({ activity, onEditAction, onDeleteAction }: ProposedActivityCardProps) {
  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-muted border">
            <Activity className="h-5 w-5 text-muted-foreground" />
          </div>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">{activity.name}</CardTitle>
            <p className="text-xs text-muted-foreground">{activity.type}</p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(activity)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onDeleteAction(activity)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow text-sm text-muted-foreground">
        <p className="line-clamp-2">{activity.description || "No description provided."}</p>
      </CardContent>
      <CardFooter className="flex justify-end items-center">
        <div className="font-semibold text-lg flex items-center">
          <DollarSign className="h-4 w-4 mr-1 text-muted-foreground" />
          {activity.rate?.toFixed(2) || "N/A"}
        </div>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/proposed-activities/proposed-activity-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/proposed-activities/proposed-activity-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { ProposedActivityDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

const formSchema = z.object({
  name: z.string().min(3, "Activity name is required."),
  type: z.string().min(3, "Activity type is required."),
  rate: z.coerce.number().min(0, "Rate must be a positive number.").optional(),
  description: z.string().optional(),
});

export type ProposedActivityFormData = z.infer<typeof formSchema>;

interface ProposedActivityFormProps {
  initialData?: Partial<ProposedActivityDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: ProposedActivityFormData) => Promise<boolean>;
}

export function ProposedActivityForm({ initialData, mode, onSubmitAction }: ProposedActivityFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<ProposedActivityFormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: initialData?.name || "",
      type: initialData?.type || "",
      rate: initialData?.rate || 0,
      description: initialData?.description || "",
    },
  });

  const handleSubmit = async (data: ProposedActivityFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Propose New Activity" : "Edit Activity"}
      description="Define a service or activity your organization offers."
      submitButtonText={mode === 'create' ? "Add Activity" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <FormField control={form.control} name="name" render={({ field }) => (<FormItem><FormLabel>Activity Name *</FormLabel><FormControl><Input placeholder="e.g., Business Consultation" {...field} /></FormControl><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="type" render={({ field }) => (<FormItem><FormLabel>Type *</FormLabel><FormControl><Input placeholder="e.g., Consulting, Workshop" {...field} /></FormControl><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="rate" render={({ field }) => (<FormItem><FormLabel>Rate (USD)</FormLabel><FormControl><Input type="number" placeholder="e.g., 150.00" {...field} /></FormControl><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="description" render={({ field }) => (<FormItem><FormLabel>Description</FormLabel><FormControl><Textarea placeholder="Describe the activity..." {...field} /></FormControl><FormMessage /></FormItem>)} />
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/proposed-activities/proposed-activity-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/prospects/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ProspectDto, AgencyDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2 } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface ProspectRowActionsProps {
  prospect: ProspectDto;
  onEditAction: (prospect: ProspectDto) => void;
  onDeleteAction: (prospect: ProspectDto) => void;
}

const ProspectRowActions: React.FC<ProspectRowActionsProps> = ({ prospect, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(prospect)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(prospect)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getProspectColumns = (
  actionHandlers: Omit<ProspectRowActionsProps, "prospect">,
  agencies: AgencyDto[]
): ColumnDef<ProspectDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "first_name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => {
      const prospect = row.original;
      const fullName = `${prospect.first_name || ""} ${prospect.last_name || ""}`.trim();
      const fallback = fullName ? fullName.charAt(0).toUpperCase() : "P";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border"><AvatarImage src={prospect.logo} alt={fullName} /><AvatarFallback>{fallback}</AvatarFallback></Avatar>
          <div>
            <div className="font-medium">{fullName}</div>
            <div className="text-xs text-muted-foreground">{prospect.short_description}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "interest_level",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Interest Level" />,
    cell: ({ row }) => <div className="text-sm text-muted-foreground">{row.getValue("interest_level") || "N/A"}</div>,
  },
  {
    accessorKey: "agency_id",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Assignment" />,
    cell: ({ row }) => {
      const agencyId = row.getValue("agency_id");
      if (!agencyId) return <div className="text-sm text-muted-foreground">Headquarters</div>;
      const agency = agencies.find(a => a.agency_id === agencyId);
      return (
        <div className="text-sm font-medium flex items-center gap-2">
          <Building2 className="h-4 w-4 text-muted-foreground" />
          <span className="truncate">{agency ? agency.short_name : "Unknown Agency"}</span>
        </div>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id) || "headquarters"),
  },
  {
    id: "actions",
    cell: ({ row }) => <ProspectRowActions prospect={row.original} {...actionHandlers} />,
  },
];
// END OF FILE: components/organization/prospects/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/prospects/prospect-card.tsx

"use client";

import React from "react";
import { ProspectDto, AgencyDto } from "@/types/organization";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2, Thermometer } from "lucide-react";

interface ProspectCardProps {
  prospect: ProspectDto;
  agencies: AgencyDto[];
  onEditAction: (prospect: ProspectDto) => void;
  onDeleteAction: (prospect: ProspectDto) => void;
}

export function ProspectCard({ prospect, agencies, onEditAction, onDeleteAction }: ProspectCardProps) {
  const fullName = `${prospect.first_name || ""} ${prospect.last_name || ""}`.trim();
  const fallback = fullName ? fullName.charAt(0).toUpperCase() : "P";
  const agency = agencies.find(a => a.agency_id === prospect.agency_id);

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border"><AvatarImage src={prospect.logo} alt={fullName} /><AvatarFallback className="text-lg">{fallback}</AvatarFallback></Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">{fullName}</CardTitle>
            <p className="text-xs text-muted-foreground">{prospect.short_description || "Prospect"}</p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(prospect)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onDeleteAction(prospect)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow space-y-2 text-sm">
        <div className="flex items-center text-muted-foreground">
          <Thermometer className="mr-2 h-4 w-4" />
          <span>Interest: {prospect.interest_level || "Not set"}</span>
        </div>
        <div className="flex items-center text-muted-foreground">
          <Building2 className="mr-2 h-4 w-4" />
          <span>{agency ? agency.short_name : "Headquarters"}</span>
        </div>
      </CardContent>
      <CardFooter>
        <Button variant="outline" className="w-full" onClick={() => onEditAction(prospect)}>View Details</Button>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/prospects/prospect-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/prospects/prospect-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { ProspectDto, AgencyDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const prospectFormSchema = z.object({
  first_name: z.string().min(2, "First name is required."),
  last_name: z.string().min(2, "Last name is required."),
  short_description: z.string().optional(),
  long_description: z.string().optional(),
  interest_level: z.string().optional(),
  agency_id: z.string().nullable().optional(),
});

export type ProspectFormData = z.infer<typeof prospectFormSchema>;

interface ProspectFormProps {
  initialData?: Partial<ProspectDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: ProspectFormData) => Promise<boolean>;
  agencies: AgencyDto[];
  hideAgencySelector?: boolean;
}

export function ProspectForm({ initialData, mode, onSubmitAction, agencies, hideAgencySelector = false }: ProspectFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<ProspectFormData>({
    resolver: zodResolver(prospectFormSchema),
    defaultValues: {
      first_name: initialData?.first_name || "",
      last_name: initialData?.last_name || "",
      short_description: initialData?.short_description || "",
      long_description: initialData?.long_description || "",
      interest_level: initialData?.interest_level || "",
      agency_id: initialData?.agency_id || null,
    },
  });

  const handleSubmit = async (data: ProspectFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Add New Prospect" : "Edit Prospect"}
      description="Manage potential customer information and their assignments."
      submitButtonText={mode === 'create' ? "Add Prospect" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <FormField control={form.control} name="first_name" render={({ field }) => (<FormItem><FormLabel>First Name *</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
            <FormField control={form.control} name="last_name" render={({ field }) => (<FormItem><FormLabel>Last Name *</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
          </div>
          <FormField control={form.control} name="interest_level" render={({ field }) => (<FormItem><FormLabel>Interest Level</FormLabel><FormControl><Input placeholder="e.g., High, Warm, Cold" {...field} /></FormControl><FormMessage /></FormItem>)} />
          {!hideAgencySelector && (
            <FormField control={form.control} name="agency_id" render={({ field }) => (<FormItem><FormLabel>Agency Assignment</FormLabel><Select onValueChange={(value) => field.onChange(value === "headquarters" ? null : value)} defaultValue={field.value || "headquarters"}><FormControl><SelectTrigger><SelectValue placeholder="Assign to an agency..." /></SelectTrigger></FormControl><SelectContent><SelectItem value="headquarters">Headquarters</SelectItem>{agencies.map((agency) => (<SelectItem key={agency.agency_id} value={agency.agency_id!}>{agency.long_name}</SelectItem>))}</SelectContent></Select><FormMessage /></FormItem>)} />
          )}
          <FormField control={form.control} name="long_description" render={({ field }) => (<FormItem><FormLabel>Notes</FormLabel><FormControl><Textarea placeholder="Add any relevant notes about this prospect..." {...field} /></FormControl><FormMessage /></FormItem>)} />
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/prospects/prospect-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/sales-people/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { SalesPersonDto, AgencyDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2, UserCheck } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface SalesPersonRowActionsProps {
  salesPerson: SalesPersonDto;
  onEditAction: (salesPerson: SalesPersonDto) => void;
  onDeleteAction: (salesPerson: SalesPersonDto) => void;
}

const SalesPersonRowActions: React.FC<SalesPersonRowActionsProps> = ({ salesPerson, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(salesPerson)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(salesPerson)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getSalesPersonColumns = (
  actionHandlers: Omit<SalesPersonRowActionsProps, "salesPerson">,
  agencies: AgencyDto[]
): ColumnDef<SalesPersonDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => {
      const salesPerson = row.original;
      const name = salesPerson.name || `${salesPerson.first_name || ""} ${salesPerson.last_name || ""}`.trim();
      const fallback = name ? name.charAt(0).toUpperCase() : "S";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border"><AvatarImage src={salesPerson.logo} alt={name} /><AvatarFallback>{fallback}</AvatarFallback></Avatar>
          <div>
            <div className="font-medium">{name}</div>
            <div className="text-xs text-muted-foreground">{salesPerson.short_description}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "commission_rate",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Commission Rate" className="justify-end" />,
    cell: ({ row }) => <div className="text-right font-medium text-sm">{row.getValue("commission_rate") ? `${row.getValue("commission_rate")}%` : "N/A"}</div>,
  },
  {
    accessorKey: "agency_id",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Assignment" />,
    cell: ({ row }) => {
      const agencyId = row.getValue("agency_id");
      if (!agencyId) return <div className="text-sm text-muted-foreground">Headquarters</div>;
      const agency = agencies.find(a => a.agency_id === agencyId);
      return (
        <div className="text-sm font-medium flex items-center gap-2">
          <Building2 className="h-4 w-4 text-muted-foreground" />
          <span className="truncate">{agency ? agency.short_name : "Unknown Agency"}</span>
        </div>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id) || "headquarters"),
  },
  {
    id: "actions",
    cell: ({ row }) => <SalesPersonRowActions salesPerson={row.original} {...actionHandlers} />,
  },
]// END OF FILE: components/organization/sales-people/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/sales-people/sales-person-card.tsx

"use client";

import React from "react";
import { SalesPersonDto, AgencyDto } from "@/types/organization";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2, Percent } from "lucide-react";

interface SalesPersonCardProps {
  salesPerson: SalesPersonDto;
  agencies: AgencyDto[];
  onEditAction: (salesPerson: SalesPersonDto) => void;
  onDeleteAction: (salesPerson: SalesPersonDto) => void;
}

export function SalesPersonCard({ salesPerson, agencies, onEditAction, onDeleteAction }: SalesPersonCardProps) {
  const name = salesPerson.name || `${salesPerson.first_name || ""} ${salesPerson.last_name || ""}`.trim();
  const fallback = name ? name.charAt(0).toUpperCase() : "S";
  const agency = agencies.find(a => a.agency_id === salesPerson.agency_id);

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border"><AvatarImage src={salesPerson.logo} alt={name} /><AvatarFallback className="text-lg">{fallback}</AvatarFallback></Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">{name}</CardTitle>
            <p className="text-xs text-muted-foreground">{salesPerson.short_description || "Sales Representative"}</p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(salesPerson)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onDeleteAction(salesPerson)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow space-y-2 text-sm">
        <div className="flex items-center text-muted-foreground">
          <Percent className="mr-2 h-4 w-4" />
          <span>Commission: {salesPerson.commission_rate ? `${salesPerson.commission_rate}%` : "Not set"}</span>
        </div>
        <div className="flex items-center text-muted-foreground">
          <Building2 className="mr-2 h-4 w-4" />
          <span>{agency ? agency.short_name : "Headquarters"}</span>
        </div>
      </CardContent>
      <CardFooter>
        <Button variant="outline" className="w-full" onClick={() => onEditAction(salesPerson)}>View Details</Button>
      </CardFooter>
    </Card>
  );
}// END OF FILE: components/organization/sales-people/sales-person-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/sales-people/sales-person-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { SalesPersonDto, AgencyDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const salesPersonFormSchema = z.object({
  name: z.string().min(2, "Name is required."),
  commission_rate: z.coerce.number().min(0, "Commission rate cannot be negative.").optional(),
  agency_id: z.string().nullable().optional(),
});

export type SalesPersonFormData = z.infer<typeof salesPersonFormSchema>;

interface SalesPersonFormProps {
  initialData?: Partial<SalesPersonDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: SalesPersonFormData) => Promise<boolean>;
  agencies: AgencyDto[];
  hideAgencySelector?: boolean;
}

export function SalesPersonForm({ initialData, mode, onSubmitAction, agencies, hideAgencySelector = false }: SalesPersonFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<SalesPersonFormData>({
    resolver: zodResolver(salesPersonFormSchema),
    defaultValues: {
      name: initialData?.name || "",
      commission_rate: initialData?.commission_rate || 0,
      agency_id: initialData?.agency_id || null,
    },
  });

  const handleSubmit = async (data: SalesPersonFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Add New Sales Person" : "Edit Sales Person"}
      description="Manage sales team members and their assignments."
      submitButtonText={mode === 'create' ? "Add Sales Person" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <FormField control={form.control} name="name" render={({ field }) => (<FormItem><FormLabel>Full Name *</FormLabel><FormControl><Input placeholder="e.g., Jane Smith" {...field} /></FormControl><FormMessage /></FormItem>)} />
          <FormField control={form.control} name="commission_rate" render={({ field }) => (<FormItem><FormLabel>Commission Rate (%)</FormLabel><FormControl><Input type="number" placeholder="e.g., 5" {...field} /></FormControl><FormMessage /></FormItem>)} />
          {!hideAgencySelector && (
            <FormField control={form.control} name="agency_id" render={({ field }) => (<FormItem><FormLabel>Agency Assignment</FormLabel><Select onValueChange={(value) => field.onChange(value === "headquarters" ? null : value)} defaultValue={field.value || "headquarters"}><FormControl><SelectTrigger><SelectValue placeholder="Assign to an agency..." /></SelectTrigger></FormControl><SelectContent><SelectItem value="headquarters">Headquarters</SelectItem>{agencies.map((agency) => (<SelectItem key={agency.agency_id} value={agency.agency_id!}>{agency.long_name}</SelectItem>))}</SelectContent></Select><FormMessage /></FormItem>)} />
          )}
        </div>
      )}
    </FormWrapper>
  );
}// END OF FILE: components/organization/sales-people/sales-person-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/suppliers/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ProviderDto, AgencyDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2, Truck } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface SupplierRowActionsProps {
  supplier: ProviderDto;
  onEditAction: (supplier: ProviderDto) => void;
  onDeleteAction: (supplier: ProviderDto) => void;
}

const SupplierRowActions: React.FC<SupplierRowActionsProps> = ({ supplier, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(supplier)}>
          <Edit3 className="mr-2 h-4 w-4" /> Edit
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(supplier)} className="text-destructive focus:text-destructive">
          <Trash2 className="mr-2 h-4 w-4" /> Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getSupplierColumns = (
  actionHandlers: Omit<SupplierRowActionsProps, "supplier">,
  agencies: AgencyDto[]
): ColumnDef<ProviderDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "first_name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Supplier Name" />,
    cell: ({ row }) => {
      const supplier = row.original;
      const fullName = `${supplier.first_name || ""} ${supplier.last_name || ""}`.trim();
      const fallback = fullName ? fullName.charAt(0).toUpperCase() : "S";
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border">
            <AvatarImage src={supplier.logo} alt={fullName} />
            <AvatarFallback>{fallback}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{fullName}</div>
            <div className="text-xs text-muted-foreground">{supplier.short_description}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "product_service_type",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Service Type" />,
    cell: ({ row }) => <div className="text-sm text-muted-foreground">{row.getValue("product_service_type") || "N/A"}</div>,
  },
  {
    accessorKey: "agency_id",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Assignment" />,
    cell: ({ row }) => {
      const agencyId = row.getValue("agency_id");
      if (!agencyId) return <div className="text-sm text-muted-foreground">Headquarters</div>;
      const agency = agencies.find(a => a.agency_id === agencyId);
      return (
        <div className="text-sm font-medium flex items-center gap-2">
          <Building2 className="h-4 w-4 text-muted-foreground" />
          <span className="truncate">{agency ? agency.short_name : "Unknown Agency"}</span>
        </div>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id) || "headquarters"),
  },
  {
    id: "actions",
    cell: ({ row }) => <SupplierRowActions supplier={row.original} {...actionHandlers} />,
  },
];// END OF FILE: components/organization/suppliers/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/suppliers/supplier-card.tsx

"use client";

import React from "react";
import { ProviderDto, AgencyDto } from "@/types/organization";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Building2, Truck } from "lucide-react";

interface SupplierCardProps {
  supplier: ProviderDto;
  agencies: AgencyDto[];
  onEditAction: (supplier: ProviderDto) => void;
  onDeleteAction: (supplier: ProviderDto) => void;
}

export function SupplierCard({ supplier, agencies, onEditAction, onDeleteAction }: SupplierCardProps) {
  const fullName = `${supplier.first_name || ""} ${supplier.last_name || ""}`.trim();
  const fallback = fullName ? fullName.charAt(0).toUpperCase() : "S";
  const agency = agencies.find(a => a.agency_id === supplier.agency_id);

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border">
            <AvatarImage src={supplier.logo} alt={fullName} />
            <AvatarFallback className="text-lg">{fallback}</AvatarFallback>
          </Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">{fullName}</CardTitle>
            <p className="text-xs text-muted-foreground">{supplier.short_description || "Supplier"}</p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(supplier)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onDeleteAction(supplier)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow space-y-2 text-sm">
        <div className="flex items-center text-muted-foreground">
          <Truck className="mr-2 h-4 w-4" />
          <span>Service: {supplier.product_service_type || "Not specified"}</span>
        </div>
        <div className="flex items-center text-muted-foreground">
          <Building2 className="mr-2 h-4 w-4" />
          <span>{agency ? agency.short_name : "Headquarters"}</span>
        </div>
      </CardContent>
      <CardFooter>
        <Button variant="outline" className="w-full" onClick={() => onEditAction(supplier)}>View Details</Button>
      </CardFooter>
    </Card>
  );
}// END OF FILE: components/organization/suppliers/supplier-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/suppliers/supplier-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { ProviderDto, AgencyDto } from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const supplierFormSchema = z.object({
  first_name: z.string().min(2, "First name is required."),
  last_name: z.string().min(2, "Last name is required."),
  short_description: z.string().optional(),
  long_description: z.string().optional(),
  product_service_type: z.string().min(3, "Service type is required."),
  agency_id: z.string().nullable().optional(),
});

export type SupplierFormData = z.infer<typeof supplierFormSchema>;

interface SupplierFormProps {
  initialData?: Partial<ProviderDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: SupplierFormData) => Promise<boolean>;
  agencies: AgencyDto[];
  hideAgencySelector?: boolean;
}

export function SupplierForm({ initialData, mode, onSubmitAction, agencies, hideAgencySelector = false }: SupplierFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<SupplierFormData>({
    resolver: zodResolver(supplierFormSchema),
    defaultValues: {
      first_name: initialData?.first_name || "",
      last_name: initialData?.last_name || "",
      short_description: initialData?.short_description || "",
      long_description: initialData?.long_description || "",
      product_service_type: initialData?.product_service_type || "",
      agency_id: initialData?.agency_id || null,
    },
  });

  const handleSubmit = async (data: SupplierFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === 'create' ? "Add New Supplier" : "Edit Supplier"}
      description="Manage supplier information and their assignments."
      submitButtonText={mode === 'create' ? "Add Supplier" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <FormField control={form.control} name="first_name" render={({ field }) => (<FormItem><FormLabel>First Name *</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
            <FormField control={form.control} name="last_name" render={({ field }) => (<FormItem><FormLabel>Last Name *</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
          </div>
          <FormField control={form.control} name="product_service_type" render={({ field }) => (<FormItem><FormLabel>Primary Service/Product Type *</FormLabel><FormControl><Input placeholder="e.g., Raw Materials, Logistics" {...field} /></FormControl><FormMessage /></FormItem>)} />
          {!hideAgencySelector && (
            <FormField control={form.control} name="agency_id" render={({ field }) => (<FormItem><FormLabel>Agency Assignment</FormLabel><Select onValueChange={(value) => field.onChange(value === "headquarters" ? null : value)} defaultValue={field.value || "headquarters"}><FormControl><SelectTrigger><SelectValue placeholder="Assign to an agency..." /></SelectTrigger></FormControl><SelectContent><SelectItem value="headquarters">Headquarters (No Agency)</SelectItem>{agencies.map((agency) => (<SelectItem key={agency.agency_id} value={agency.agency_id!}>{agency.long_name}</SelectItem>))}</SelectContent></Select><FormMessage /></FormItem>)} />
          )}
          <FormField control={form.control} name="long_description" render={({ field }) => (<FormItem><FormLabel>Notes</FormLabel><FormControl><Textarea placeholder="Add any relevant notes about this supplier..." {...field} /></FormControl><FormMessage /></FormItem>)} />
        </div>
      )}
    </FormWrapper>
  );
}// END OF FILE: components/organization/suppliers/supplier-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/third-parties/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ThirdPartyDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Briefcase, CheckCircle, XCircle } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { Badge } from "@/components/ui/badge";

interface ThirdPartyRowActionsProps {
  thirdParty: ThirdPartyDto;
  onEditAction: (thirdParty: ThirdPartyDto) => void;
  onDeleteAction: (thirdParty: ThirdPartyDto) => void;
}

const ThirdPartyRowActions: React.FC<ThirdPartyRowActionsProps> = ({ thirdParty, onEditAction, onDeleteAction }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0 data-[state=open]:bg-muted">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuItem onClick={() => onEditAction(thirdParty)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
        <DropdownMenuItem onClick={() => onDeleteAction(thirdParty)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getThirdPartyColumns = (
  actionHandlers: Omit<ThirdPartyRowActionsProps, "thirdParty">
): ColumnDef<ThirdPartyDto>[] => [
  {
    id: "select",
    header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />,
    cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" />,
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />,
    cell: ({ row }) => {
      const thirdParty = row.original;
      const name = thirdParty.name || "Unnamed Party";
      const fallback = name.charAt(0).toUpperCase();
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border"><AvatarImage src={thirdParty.logo} alt={name} /><AvatarFallback>{fallback}</AvatarFallback></Avatar>
          <div>
            <div className="font-medium">{name}</div>
            <div className="text-xs text-muted-foreground">{thirdParty.acronym}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "type",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Type" />,
    cell: ({ row }) => <div className="text-sm text-muted-foreground">{row.getValue("type") || "N/A"}</div>,
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "is_active",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Status" />,
    cell: ({ row }) => {
      const isActive = row.original.is_active;
      const StatusIcon = isActive ? CheckCircle : XCircle;
      return (
        <Badge variant={isActive ? "default" : "destructive"} className="capitalize text-xs items-center font-normal">
          <StatusIcon className="mr-1.5 h-3.5 w-3.5" />
          {isActive ? "Active" : "Inactive"}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(String(row.getValue(id))),
  },
  {
    id: "actions",
    cell: ({ row }) => <ThirdPartyRowActions thirdParty={row.original} {...actionHandlers} />,
  },
];
// END OF FILE: components/organization/third-parties/columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/third-parties/third-party-card.tsx

"use client";

import React from "react";
import { ThirdPartyDto } from "@/types/organization";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, Briefcase, CheckCircle, XCircle } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";

interface ThirdPartyCardProps {
  thirdParty: ThirdPartyDto;
  onEditAction: (thirdParty: ThirdPartyDto) => void;
  onDeleteAction: (thirdParty: ThirdPartyDto) => void;
}

export function ThirdPartyCard({ thirdParty, onEditAction, onDeleteAction }: ThirdPartyCardProps) {
  const name = thirdParty.name || "Unnamed Party";
  const fallback = name.charAt(0).toUpperCase();
  const statusInfo = thirdParty.is_active ? { icon: CheckCircle, color: "text-green-600", label: "Active" } : { icon: XCircle, color: "text-destructive", label: "Inactive" };

  return (
    <Card className="flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow">
      <CardHeader className="flex-row items-start justify-between gap-4">
        <div className="flex items-center gap-3">
          <Avatar className="h-12 w-12 border"><AvatarImage src={thirdParty.logo} alt={name} /><AvatarFallback className="text-lg">{fallback}</AvatarFallback></Avatar>
          <div>
            <CardTitle className="text-base font-semibold line-clamp-1">{name}</CardTitle>
            <p className="text-xs text-muted-foreground">{thirdParty.acronym}</p>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEditAction(thirdParty)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
            <DropdownMenuItem onClick={() => onDeleteAction(thirdParty)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow space-y-2 text-sm">
        <div className="flex items-center text-muted-foreground">
          <Briefcase className="mr-2 h-4 w-4" />
          <span>Type: {thirdParty.type || "N/A"}</span>
        </div>
      </CardContent>
      <CardFooter className="flex justify-between items-center">
        <Badge variant={thirdParty.is_active ? "default" : "destructive"} className={cn("capitalize text-xs items-center font-normal", statusInfo.color)}>
          <statusInfo.icon className="mr-1.5 h-3.5 w-3.5" />
          {statusInfo.label}
        </Badge>
        <Button variant="outline" size="sm" onClick={() => onEditAction(thirdParty)}>View Details</Button>
      </CardFooter>
    </Card>
  );
}
// END OF FILE: components/organization/third-parties/third-party-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/third-parties/third-party-form.tsx

"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  ThirdPartyDto,
  ThirdPartyType,
  ThirdPartyTypeValues,
} from "@/types/organization";
import { FormWrapper } from "@/components/ui/form-wrapper";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  
} from "@/components/ui/select";
import { SelectPortal } from "@radix-ui/react-select";

const thirdPartyFormSchema = z.object({
  name: z.string().min(2, "Name is required."),
  acronym: z.string().optional(),
  long_name: z.string().optional(),
  type: z.enum(ThirdPartyTypeValues, {
    required_error: "Third-party type is required.",
  }),
  tax_number: z.string().optional(),
});

export type ThirdPartyFormData = z.infer<typeof thirdPartyFormSchema>;

interface ThirdPartyFormProps {
  initialData?: Partial<ThirdPartyDto>;
  mode: "create" | "edit";
  onSubmitAction: (data: ThirdPartyFormData) => Promise<boolean>;
}

export function ThirdPartyForm({
  initialData,
  mode,
  onSubmitAction,
}: ThirdPartyFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<ThirdPartyFormData>({
    resolver: zodResolver(thirdPartyFormSchema),
    defaultValues: {
      name: initialData?.name || "",
      acronym: initialData?.acronym || "",
      long_name: initialData?.long_name || "",
      type: initialData?.type || undefined,
      tax_number: initialData?.tax_number || "",
    },
  });

  const handleSubmit = async (data: ThirdPartyFormData) => {
    setIsLoading(true);
    const success = await onSubmitAction(data);
    if (!success) setIsLoading(false);
  };

  return (
    <FormWrapper
      form={form}
      onFormSubmit={handleSubmit}
      isLoading={isLoading}
      title={mode === "create" ? "Add New Third-Party" : "Edit Third-Party"}
      description="Manage information for your external partners and entities."
      submitButtonText={mode === "create" ? "Add Third-Party" : "Save Changes"}
    >
      {() => (
        <div className="space-y-4">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Name *</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., Global Logistics" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Type *</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  disabled={mode === "edit"}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a type..." />
                    </SelectTrigger>
                  </FormControl>
                  {/* [CHANGE] Wrap SelectContent in SelectPortal */}
                  <SelectPortal>
                    <SelectContent>
                      {ThirdPartyTypeValues.map((type) => (
                        <SelectItem key={type} value={type}>
                          {type}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </SelectPortal>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="acronym"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Acronym</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., GL" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="tax_number"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Tax / VAT Number</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
      )}
    </FormWrapper>
  );
}
// END OF FILE: components/organization/third-parties/third-party-form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/providers/session-provider.tsx

// FILE: components/providers/session-provider.tsx
"use client";

import { SessionProvider as NextAuthSessionProvider } from "next-auth/react";
import React from "react";

interface SessionProviderProps {
  children: React.ReactNode;
  // session?: any; // Optional: Pass initial session if needed (usually not for App Router)
}

export const SessionProvider = ({ children }: SessionProviderProps) => {
  return <NextAuthSessionProvider>{children}</NextAuthSessionProvider>;
};// END OF FILE: components/providers/session-provider.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/resource-management/assignment-dialog.tsx

"use client";

import React, { useState, useMemo } from "react";
import { Command, CommandDialog, CommandInput, CommandEmpty, CommandGroup, CommandItem, CommandList } from "@/components/ui/command";
import { DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Check, PlusCircle } from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { cn } from "@/lib/utils";

export interface AssignableItem {
  id: string;
  name: string;
  description?: string;
  avatarUrl?: string;
}

interface AssignmentDialogProps {
  title: string;
  description: string;
  itemsToAssign: AssignableItem[];
  alreadyAssignedIds: string[];
  onAssignAction: (selectedIds: string[]) => void;
  isLoading: boolean;
}

export function AssignmentDialog({ title, description, itemsToAssign, alreadyAssignedIds, onAssignAction, isLoading }: AssignmentDialogProps) {
  const [selectedIds, setSelectedIds] = useState<Set<string>>(new Set());

  const availableItems = useMemo(() => {
    const assignedSet = new Set(alreadyAssignedIds);
    return itemsToAssign.filter(item => !assignedSet.has(item.id));
  }, [itemsToAssign, alreadyAssignedIds]);

  const handleSelect = (id: string) => {
    setSelectedIds(prev => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  const handleConfirmAssignment = () => {
    onAssignAction(Array.from(selectedIds));
  };

  return (
    <>
      <DialogHeader>
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <Command className="rounded-lg border shadow-md">
        <CommandInput placeholder="Search by name..." />
        <ScrollArea className="h-[300px]">
          <CommandList>
            <CommandEmpty>No unassigned items found.</CommandEmpty>
            <CommandGroup>
              {availableItems.map((item) => (
                <CommandItem
                  key={item.id}
                  value={`${item.name} ${item.description}`}
                  onSelect={() => handleSelect(item.id)}
                  className="cursor-pointer"
                >
                  <div className={cn("mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary", selectedIds.has(item.id) ? "bg-primary text-primary-foreground" : "opacity-50 [&_svg]:invisible")}>
                    <Check className="h-4 w-4" />
                  </div>
                  <div className="flex flex-col">
                    <span className="font-medium">{item.name}</span>
                    {item.description && <span className="text-xs text-muted-foreground">{item.description}</span>}
                  </div>
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </ScrollArea>
      </Command>
      <DialogFooter>
        <Button
          onClick={handleConfirmAssignment}
          disabled={selectedIds.size === 0 || isLoading}
        >
          <PlusCircle className="mr-2 h-4 w-4" />
          Assign Selected ({selectedIds.size})
        </Button>
      </DialogFooter>
    </>
  );
}// END OF FILE: components/resource-management/assignment-dialog.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/resource-management/resource-data-table.tsx

"use client";

import React, { useState, useMemo } from "react";
import {
  ColumnDef,
  SortingState,
  ColumnFiltersState,
  VisibilityState,
  PaginationState,
  RowSelectionState,
  useReactTable,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  getFacetedRowModel,
  getFacetedUniqueValues,
  Table,
} from "@tanstack/react-table";
import { Card, CardContent } from "@/components/ui/card";
import { DataTable } from "@/components/ui/data-table";
import { DataGrid } from "@/components/ui/data-grid";
import { DataTableToolbar } from "@/components/ui/data-table-toolbar";
import { DataTablePagination } from "@/components/ui/data-table-pagination";
import { ListViewSkeleton } from "@/components/ui/list-view-skeleton";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { AlertTriangle, Trash2, Search as SearchIcon } from "lucide-react";
import { Button } from "@/components/ui/button";
import { fuzzyGlobalFilterFn } from "@/lib/utils";
import { ViewMode } from "@/types/common";
import { useLocalStorage } from "@/hooks/use-local-storage"; // [ADD] Import the new hook
import { exportToCsv } from "@/lib/export"; // [ADD] Import the export utility

interface ResourceDataTableProps<TData extends Record<string, any>, TValue> {
  data: TData[];
  columns: ColumnDef<TData, TValue>[];
  isLoading: boolean;
  error: string | null;
  onRefreshAction: () => void;
  pageHeader: React.ReactNode;
  filterControls?: (table: Table<TData>) => React.ReactNode;
  searchPlaceholder: string;
  emptyState: React.ReactNode;
  // [ADD] New prop for when filters result in no data
  filteredEmptyState?: React.ReactNode;
  renderGridItemAction: (item: TData) => React.ReactNode;
  onDeleteItemsAction: (items: TData[]) => void;
  // [ADD] Unique key for storing view mode preference
  viewModeStorageKey: string;
  // [ADD] Filename for the CSV export
  exportFileName: string;
}

export function ResourceDataTable<TData extends Record<string, any>, TValue>({
  data,
  columns,
  isLoading,
  error,
  onRefreshAction,
  pageHeader,
  filterControls,
  searchPlaceholder,
  emptyState,
  filteredEmptyState,
  renderGridItemAction,
  onDeleteItemsAction,
  viewModeStorageKey,
  exportFileName,
}: ResourceDataTableProps<TData, TValue>) {
  // [CHANGE] Use the local storage hook for viewMode
  const [viewMode, setViewMode] = useLocalStorage<ViewMode>(
    viewModeStorageKey,
    "list"
  );

  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [globalFilter, setGlobalFilter] = useState<string>("");
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [pagination, setPagination] = useState<PaginationState>({
    pageIndex: 0,
    pageSize: 10,
  });

  const table = useReactTable({
    data,
    columns,
    state: {
      sorting,
      columnFilters,
      globalFilter,
      columnVisibility,
      rowSelection,
      pagination,
    },
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onGlobalFilterChange: setGlobalFilter,
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    onPaginationChange: setPagination,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getFacetedRowModel: getFacetedRowModel(),
    getFacetedUniqueValues: getFacetedUniqueValues(),
    globalFilterFn: fuzzyGlobalFilterFn,
    enableRowSelection: true,
  });

  const handleExport = () => {
    exportToCsv(data, exportFileName);
  };

  const renderContent = () => {
    if (isLoading) return <ListViewSkeleton viewMode={viewMode} />;
    if (error) {
      return (
        <FeedbackCard
          variant="destructive"
          icon={AlertTriangle}
          title="Failed to Load Data"
          description={error}
          actionButton={<Button onClick={onRefreshAction}>Try Again</Button>}
        />
      );
    }
    // [CHANGE] Context-aware empty state logic
    const isFiltered = globalFilter || columnFilters.length > 0;
    if (table.getRowModel().rows.length === 0) {
      if (isFiltered && filteredEmptyState) {
        return filteredEmptyState;
      }
      return emptyState;
    }

    return viewMode === "grid" ? (
      <DataGrid
        table={table}
        renderCardAction={({ row }) => renderGridItemAction(row.original)}
      />
    ) : (
      <DataTable tableInstance={table} columns={columns} data={data} />
    );
  };

  return (
    <div className="space-y-6">
      {pageHeader}
      <Card>
        <CardContent className="pt-6">
          <DataTableToolbar
            table={table}
            viewMode={viewMode}
            onViewModeChange={setViewMode}
            globalFilter={globalFilter}
            onGlobalFilterChangeAction={setGlobalFilter}
            searchPlaceholder={searchPlaceholder}
            filterControls={filterControls ? filterControls(table) : null}
            onExportAction={handleExport} // Pass the export handler
            bulkActions={
              <Button
                variant="destructive"
                size="sm"
                onClick={() =>
                  onDeleteItemsAction(
                    table
                      .getFilteredSelectedRowModel()
                      .rows.map((r) => r.original)
                  )
                }
                className="h-9"
              >
                <Trash2 className="mr-2 h-4 w-4" />
                Delete ({table.getFilteredSelectedRowModel().rows.length})
              </Button>
            }
          />
          <main className="mt-4">{renderContent()}</main>
        </CardContent>
      </Card>
      {!isLoading && !error && table.getPageCount() > 0 && (
        <DataTablePagination table={table} viewMode={viewMode} />
      )}
    </div>
  );
}
// END OF FILE: components/resource-management/resource-data-table.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/sidebar.old.tsx.txt

"use client"

import { useState } from "react"
import Link from "next/link"
import Image from "next/image";
import { usePathname } from "next/navigation"
import {
  Home, BarChart2, Building2, Users2, Briefcase, Folder, Wallet, Receipt,
  CreditCard, ShoppingCart, Calendar, Send, Star, Bell, Shield, Settings,
  MessagesSquare, Gift, HelpCircle, LogOut, Menu, SidebarClose, Users, Server,
  FileText, // Added for Invoices
  LifeBuoy, // Added for Help
  UserCog, // Added for Profile/Settings link clearer icon
  Webhook, // Added for Webhooks clearer icon
  Ticket, // Added for Reservations clearer icon
  Tag, // Added for Products clearer icon
  UsersRound, // Added for Personnel clearer icon
  Share2, // Added for Invite/Referrals clearer icon
  LayoutGrid, // Added for general Dashboard clearer icon
  FolderHeart, // Added for Favorites clearer icon
  ListChecks, // Added for Wishlist clearer icon
  CalendarClock, // Added for Planning clearer icon
  Newspaper, // Added for Posts clearer icon
  HandCoins,
  Package, // Added for Bonus clearer icon
} from "lucide-react"
import { signOut } from "next-auth/react"; // Import signOut

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from "@/components/ui/tooltip"
import { Separator } from "@/components/ui/separator"; // Import Separator

// --- Navigation Arrays (Updated based on file structure & spec) ---
const baNavigation = [
  { name: "Dashboard", href: "/business-actor/dashboard", icon: LayoutGrid },
  {
    name: "Organization", href: "/business-actor/organization", icon: Building2,
    subItems: [ // Example: Add sub-items if needed later for better organization
      { name: "Analytics", href: "/business-actor/organization?tab=analytics", icon: BarChart2 },
      { name: "Headquarter", href: "/business-actor/organization?tab=headquarter", icon: Building2 },
      { name: "Personnel", href: "/business-actor/organization?tab=personnel", icon: UsersRound },
      { name: "Agencies", href: "/business-actor/organization?tab=agencies", icon: Users2 },
      { name: "Products", href: "/business-actor/organization?tab=products", icon: Tag },
    ]
  },
  { name: "Products", href: "/business-actor/products", icon: Package }, // Product ma
  { name: "Business", href: "/business-actor/business", icon: Briefcase }, // General Business Ops
  { name: "Transactions", href: "/business-actor/transactions", icon: Receipt }, // Sales focused
  { name: "Invoices", href: "/business-actor/invoices", icon: FileText },
  { name: "Reservations", href: "/business-actor/reservations", icon: Ticket },
  { name: "Payments", href: "/business-actor/payments", icon: CreditCard },
  { name: "Subscription", href: "/business-actor/subscription", icon: Star }, // Pricing Plan/Usage/Limits
  { name: "Wallet", href: "/business-actor/wallet", icon: Wallet }, // Portefeuille
  { name: "Bonus Config", href: "/business-actor/bonus", icon: HandCoins },
  { name: "Webhooks", href: "/business-actor/webhooks", icon: Webhook },
  { name: "Wishlist", href: "/business-actor/wishlist", icon: ListChecks },
  { name: "Planning", href: "/business-actor/planning", icon: CalendarClock },
  { name: "Posts", href: "/business-actor/posts", icon: Newspaper },
  { name: "Chat", href: "/business-actor/chat", icon: MessagesSquare },
  { name: "Referrals", href: "/business-actor/referrals", icon: Share2 },
  { name: "Reviews", href: "/business-actor/reviews", icon: Star },
];

const customerNavigation = [
  { name: "Dashboard", href: "/customer/dashboard", icon: LayoutGrid },
  { name: "Services", href: "/customer/services", icon: Briefcase }, // Announcements/Offers & Transactions/Wishlist
  { name: "Invoices", href: "/customer/invoices", icon: FileText },
  { name: "My Bonus", href: "/customer/bonus", icon: HandCoins },
  { name: "Favorites", href: "/customer/favorites", icon: FolderHeart },
  { name: "Invite Friends", href: "/customer/invite", icon: Share2 }, // Referrals page
  { name: "Chat", href: "/customer/chat", icon: MessagesSquare },
];

const superAdminNavigation = [
  { name: "Dashboard", href: "/super-admin/dashboard", icon: LayoutGrid },
  { name: "Platforms", href: "/super-admin/platforms", icon: Server },
  { name: "Business Actors", href: "/super-admin/business-actors", icon: Building2 }, // Changed icon
  { name: "Customers", href: "/super-admin/customers", icon: Users },
  { name: "Webhooks Config", href: "/super-admin/webhooks", icon: Webhook },
  { name: "Bonus Overview", href: "/super-admin/bonus", icon: HandCoins },
  { name: "Admin Comm.", href: "/super-admin/chat", icon: MessagesSquare }, // Renamed for clarity
  // Super Admin Profile/Settings handled by bottom nav
];

// --- Bottom Navigation (Common) ---
const bottomNavigation = [
  { name: "Help & Support", href: "/help", icon: LifeBuoy }, // Example: Shared help page
  { name: "Settings", href: "/settings", icon: Settings }, // Shared settings page link
];

export function Sidebar() {
  const pathname = usePathname();
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isMobileOpen, setIsMobileOpen] = useState(false);

  // --- Role Determination Logic ---
  let userRole = 'business-actor'; // Default assumption
  let sidebarTitle = "BA Workspace";
  let logoSrc = "/logo.svg"; // Consider making this dynamic based on role/org if needed
  let currentNavigation = baNavigation;
  let settingsHrefPrefix = "/business-actor"; // Base path for role-specific pages

  if (pathname.startsWith('/customer')) {
    userRole = 'customer';
    sidebarTitle = "My Account";
    currentNavigation = customerNavigation;
    settingsHrefPrefix = "/customer";
  } else if (pathname.startsWith('/super-admin')) {
    userRole = 'super-admin';
    sidebarTitle = "Platform Admin";
    currentNavigation = superAdminNavigation;
    settingsHrefPrefix = "/super-admin";
  } else if (pathname.startsWith('/business-actor')) {
    userRole = 'business-actor';
    sidebarTitle = "BA Workspace";
    currentNavigation = baNavigation;
    settingsHrefPrefix = "/business-actor";
  } else {
    // Handle cases like /settings, /help, or unexpected paths
    // Try to infer from the last known good path or use a default
    // This part might need refinement based on how shared pages are handled
    const segments = pathname.split('/').filter(Boolean);
    if (segments.length > 0 && ['settings', 'help'].includes(segments[0])) {
      // If on a shared page, try to guess the role from referer or session? Or keep previous role?
      // For now, let's default to BA if path is ambiguous but not auth/landing
      userRole = 'business-actor';
      sidebarTitle = "BA Workspace";
      currentNavigation = baNavigation;
      settingsHrefPrefix = "/business-actor";
      console.warn("Sidebar: Ambiguous path, defaulting role display to Business Actor.");
    }
  }
  // --- End Role Determination ---

  // --- Logout Handler ---
  const handleLogout = async () => {
    await signOut({ callbackUrl: '/login' }); // Redirect to login after sign out
  };
  // --- End Logout Handler ---


  // --- NavItem Component ---
  type NavItemProps = {
    item: {
      name: string;
      href: string;
      icon: React.ComponentType<{ className?: string }>;
    };
    isBottom?: boolean;
  };

  const NavItem = ({ item, isBottom = false }: NavItemProps) => {
    let href = item.href;

    // Adjust href based on context (bottom nav vs main nav)
    // Assumption: Settings is now a shared page at /settings
    // Assumption: Help is now a shared page at /help
    if (isBottom && (item.name === "Settings" || item.name === "Help & Support")) {
      // Keep the direct path for shared pages
      href = item.href;
    } else if (!isBottom) {
      // Main navigation items use the auto-detected prefix from their definition
      href = item.href; // Href should already include the role prefix
    }
    // else: Handle potential future role-specific bottom links if needed

    const isActive = pathname === href || pathname.startsWith(href + '/') || (item.href !== '/' && pathname.startsWith(item.href + '?')); // Improved active check

    return (
      <Tooltip delayDuration={0}>
        <TooltipTrigger asChild>
          <Link
            href={href}
            className={cn(
              "flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors h-9", // Consistent height
              isActive
                ? "bg-sidebar-accent text-sidebar-accent-foreground"
                : "text-sidebar-foreground hover:bg-sidebar-accent/80 hover:text-sidebar-accent-foreground", // Subtle hover
              isCollapsed && "justify-center px-2",
            )}
            onClick={() => isMobileOpen && setIsMobileOpen(false)}
          >
            <item.icon className={cn("h-[18px] w-[18px] shrink-0", !isCollapsed && "mr-3")} /> {/* Slightly adjusted icon size */}
            {!isCollapsed && <span className="truncate">{item.name}</span>}
          </Link>
        </TooltipTrigger>
        {isCollapsed && (
          <TooltipContent side="right" className="flex items-center gap-4">
            {item.name}
          </TooltipContent>
        )}
      </Tooltip>
    );
  };
  // --- End NavItem Component ---

  return (
    <TooltipProvider>
      <>
        {/* Mobile Menu Toggle */}
        <Button
          variant="outline"
          size="icon"
          className="lg:hidden fixed top-4 left-4 z-[60] rounded-md shadow-md bg-background/80 backdrop-blur-sm" // Ensure high z-index
          onClick={() => setIsMobileOpen(!isMobileOpen)}
          aria-label="Toggle sidebar"
        >
          <Menu className="h-5 w-5" />
        </Button>

        {/* Sidebar Container */}
        <div
          className={cn(
            "fixed inset-y-0 left-0 z-50 flex h-full flex-col border-r border-sidebar-border bg-sidebar text-sidebar-foreground transition-all duration-300 ease-in-out lg:sticky lg:top-0 lg:h-screen",
            isCollapsed ? "w-[72px]" : "w-64", // Slightly narrower width when expanded
            isMobileOpen ? "translate-x-0 shadow-xl" : "-translate-x-full lg:translate-x-0",
          )}
          data-collapsed={isCollapsed}
        >
          {/* Sidebar Header */}
          <div className={cn(
            "flex h-16 shrink-0 items-center border-b border-sidebar-border",
            isCollapsed ? "justify-center px-2" : "justify-between px-4"
          )}>
            <Link
              href={`${settingsHrefPrefix}/dashboard`} // Links to role-specific dashboard
              className={cn("flex items-center gap-2 font-semibold")}
              onClick={() => isMobileOpen && setIsMobileOpen(false)}
              aria-label={sidebarTitle}
            >
              <Image
                src={logoSrc}
                alt={`${sidebarTitle} Logo`}
                width={32}
                height={32}
                className="h-8 w-8 shrink-0"
                priority
              />
              {!isCollapsed && (
                <span className="text-lg truncate">{sidebarTitle}</span>
              )}
            </Link>

            {/* Desktop Collapse/Expand Button */}
            <Button
              variant="ghost"
              size="icon"
              className={cn("hidden h-8 w-8 lg:flex", isCollapsed ? "" : "ml-auto")}
              onClick={() => setIsCollapsed(!isCollapsed)}
              aria-label={isCollapsed ? "Expand Sidebar" : "Collapse Sidebar"}
            >
              <SidebarClose className={cn("h-4 w-4 transition-transform", isCollapsed && "rotate-180")} />
            </Button>

            {/* Mobile Close Button */}
            {isMobileOpen && (
              <Button
                variant="ghost"
                size="icon"
                className="ml-auto h-8 w-8 lg:hidden"
                onClick={() => setIsMobileOpen(false)}
                aria-label="Close Sidebar"
              >
                <SidebarClose className="h-4 w-4" />
              </Button>
            )}
          </div>

          {/* Main Navigation Area */}
          <div className="flex flex-1 flex-col overflow-y-auto overflow-x-hidden">
            <nav className={cn("flex-1 space-y-1 py-4", isCollapsed ? "px-2" : "px-4")}>
              {currentNavigation.map((item) => (
                <NavItem key={item.name} item={item} />
              ))}
            </nav>

            {/* Bottom Navigation Area */}
            <div className={cn("mt-auto border-t border-sidebar-border", isCollapsed ? "px-2" : "px-4")}>
              {/* <Separator className={cn("my-2", isCollapsed ? "-mx-2" : "-mx-4")} /> Visual separator */}
              <div className="space-y-1 py-4">
                {bottomNavigation.map((item) => (
                  // Use the correct settingsHrefPrefix for Settings link
                  <NavItem key={item.name} item={{ ...item, href: item.name === 'Settings' ? `${settingsHrefPrefix}/settings` : item.href }} isBottom />
                ))}
                {/* Logout Button */}
                <Tooltip delayDuration={0}>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost" // Use ghost variant for less emphasis
                      className={cn(
                        "flex items-center w-full rounded-md px-3 py-2 text-sm font-medium transition-colors h-9",
                        "text-sidebar-foreground hover:bg-destructive/10 hover:text-destructive", // Destructive hover
                        isCollapsed ? "justify-center px-2" : "justify-start",
                      )}
                      onClick={() => {
                        handleLogout();
                        if (isMobileOpen) setIsMobileOpen(false);
                      }}
                    >
                      <LogOut className={cn("h-[18px] w-[18px] shrink-0", !isCollapsed && "mr-3")} />
                      {!isCollapsed && <span className="truncate">Logout</span>}
                    </Button>
                  </TooltipTrigger>
                  {isCollapsed && (
                    <TooltipContent side="right" className="flex items-center gap-4">
                      Logout
                    </TooltipContent>
                  )}
                </Tooltip>
              </div>
            </div>
          </div>
        </div>

        {/* Overlay for mobile */}
        {isMobileOpen && (
          <div
            className="fixed inset-0 z-40 bg-black/50 lg:hidden" // Ensure z-index is below sidebar but above content
            aria-hidden="true"
            onClick={() => setIsMobileOpen(false)}
          />
        )}
      </>
    </TooltipProvider>
  );
}// END OF FILE: components/sidebar.old.tsx.txt

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/theme-toggle.tsx

"use client"

import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { useState, useEffect } from "react"

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()
  const [mounted, setMounted] = useState(false)

  // Ensure component only renders after mounting on client
  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null // or a placeholder
  }

  return (
    <button
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      className="p-2 rounded-md bg-gray-200 dark:bg-gray-700 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
    >
      {theme === "dark" ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
    </button>
  )
}// END OF FILE: components/theme-toggle.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/top-nav.tsx

"use client";

import React from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { Home, Search } from "lucide-react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { UserNav } from "./user-nav";
import { ModeToggle } from "./mode-toggle";
import { Button } from "./ui/button";
import { signOut } from "next-auth/react";
import { DevRoleSwitcher } from "./dev/role-switcher";

interface TopNavProps {
  onOpenCommandPalette: () => void;
}

export function TopNav({ onOpenCommandPalette }: TopNavProps) {
  const pathname = usePathname();
  const { activeOrganizationDetails, activeAgencyDetails } = useActiveOrganization();

  const getBreadcrumbs = () => {
    const pathSegments = pathname.split("/").filter(Boolean);
    if (pathSegments.length === 0) return null;

    const breadcrumbs: React.ReactNode[] = [];
    let currentPath = "";

    pathSegments.forEach((segment, index) => {
      currentPath += `/${segment}`;
      let text = segment.replace(/-/g, " ");

      // Replace IDs with names from context
      if (segment === activeOrganizationDetails?.organization_id) {
        text = activeOrganizationDetails.short_name || "Organization";
      } else if (segment === activeAgencyDetails?.agency_id) {
        text = activeAgencyDetails.short_name || "Agency";
      }

      // Don't link the very last segment (the current page)
      const isLast = index === pathSegments.length - 1;

      breadcrumbs.push(
        <React.Fragment key={currentPath}>
          <span className="text-muted-foreground mx-1">/</span>
          {isLast ? (
            <span className="font-medium text-foreground capitalize">{text}</span>
          ) : (
            <Link href={currentPath} className="capitalize text-muted-foreground hover:text-foreground">
              {text}
            </Link>
          )}
        </React.Fragment>
      );
    });

    return (
      <>
        <Link href="/dashboard" className="flex items-center gap-1.5 text-muted-foreground hover:text-foreground">
          <Home className="h-4 w-4" />
        </Link>
        {breadcrumbs}
      </>
    );
  };

  return (
    <header className="sticky top-0 z-30 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="flex h-16 items-center justify-between px-4 sm:px-6 lg:px-8">
        <div className="hidden items-center gap-1.5 text-sm md:flex flex-wrap mr-4">
          {getBreadcrumbs()}
        </div>
        <div className="flex items-center gap-x-2">
          <DevRoleSwitcher />
          <Button variant="outline" size="sm" className="h-9 gap-2" onClick={onOpenCommandPalette}>
            <Search className="h-4 w-4" />
            <span className="hidden lg:inline-block">Search...</span>
            <kbd className="hidden lg:inline-block pointer-events-none select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium opacity-100">
              <span className="text-xs">⌘</span>K
            </kbd>
          </Button>
          <ModeToggle />
          <UserNav onLogoutAction={() => signOut({ callbackUrl: "/login" })} />
        </div>
      </div>
    </header>
  );
}
// END OF FILE: components/top-nav.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/accordion.tsx

"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />
}

function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props}
    />
  )
}

function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180",
          className
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
}

function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn("pt-0 pb-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
// END OF FILE: components/ui/accordion.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/alert-dialog.tsx

"use client";

import * as React from "react";
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
);
AlertDialogHeader.displayName = "AlertDialogHeader";

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
);
AlertDialogFooter.displayName = "AlertDialogFooter";

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};
// END OF FILE: components/ui/alert-dialog.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/alert.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }
// END OF FILE: components/ui/alert.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/avatar.tsx

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }
// END OF FILE: components/ui/avatar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/badge.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }
// END OF FILE: components/ui/badge.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/button.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
// END OF FILE: components/ui/button.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/calendar.tsx

"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: React.ComponentProps<typeof DayPicker>) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row gap-2",
        month: "flex flex-col gap-4",
        caption: "flex justify-center pt-1 relative items-center w-full",
        caption_label: "text-sm font-medium",
        nav: "flex items-center gap-1",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "size-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-x-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "size-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start:
          "day-range-start aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_range_end:
          "day-range-end aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("size-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("size-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}

export { Calendar }
// END OF FILE: components/ui/calendar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/card.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
// END OF FILE: components/ui/card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/checkbox.tsx

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }
// END OF FILE: components/ui/checkbox.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/command.tsx

"use client"

import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props}
    />
  )
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  )
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
// END OF FILE: components/ui/command.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-grid.tsx

"use client";

import React from "react";
import { Table, Row } from "@tanstack/react-table";
import { cn } from "@/lib/utils";

interface DataGridProps<TData> {
  /** The TanStack Table instance which manages state (selection, pagination, etc.). */
  table: Table<TData>;
  /** A function that takes a table row and returns the React component to render for that item. */
  renderCardAction: (props: { row: Row<TData> }) => React.ReactNode;
  /** Optional class name for the grid container. */
  className?: string;
}

/**
 * A generic, reusable grid component for displaying data from a TanStack Table instance.
 * It uses a render prop (`renderCard`) to display a custom component for each item,
 * making it adaptable to any data type.
 */
export function DataGrid<TData>({
  table,
  renderCardAction,
  className,
}: DataGridProps<TData>) {
  const { rows } = table.getRowModel();

  return (
    <div
      className={cn(
        "grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3 sm:gap-6",
        className
      )}
    >
      {rows.map((row) => (
        <div key={row.id}>{renderCardAction({ row })}</div>
      ))}
    </div>
  );
}
// END OF FILE: components/ui/data-grid.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table-column-header.tsx

"use client";

import { Column } from "@tanstack/react-table";
import { ArrowDownIcon, ArrowUpIcon, ChevronsUpDownIcon, EyeOffIcon } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface DataTableColumnHeaderProps<TData, TValue>
  extends React.HTMLAttributes<HTMLDivElement> {
  column: Column<TData, TValue>;
  title: string;
}

export function DataTableColumnHeader<TData, TValue>({
  column,
  title,
  className,
}: DataTableColumnHeaderProps<TData, TValue>) {
  if (!column.getCanSort() && !column.getCanHide()) {
    return <div className={cn(className)}>{title}</div>;
  }

  return (
    <div className={cn("flex items-center space-x-2", className)}>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            size="sm"
            className="-ml-3 h-8 data-[state=open]:bg-accent"
          >
            <span>{title}</span>
            {column.getCanSort() && column.getIsSorted() === "desc" ? (
              <ArrowDownIcon className="ml-2 h-4 w-4" />
            ) : column.getCanSort() && column.getIsSorted() === "asc" ? (
              <ArrowUpIcon className="ml-2 h-4 w-4" />
            ) : column.getCanSort() ? (
              <ChevronsUpDownIcon className="ml-2 h-4 w-4" />
            ) : null}
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="start">
          {column.getCanSort() && (
            <>
              <DropdownMenuItem onClick={() => column.toggleSorting(false)}>
                <ArrowUpIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Asc
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => column.toggleSorting(true)}>
                <ArrowDownIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Desc
              </DropdownMenuItem>
            </>
          )}
          {column.getCanSort() && column.getCanHide() && <DropdownMenuSeparator />}
          {column.getCanHide() && (
            <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>
              <EyeOffIcon className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
              Hide
            </DropdownMenuItem>
          )}
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
}// END OF FILE: components/ui/data-table-column-header.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table-faceted-filter.tsx

"use client";

import * as React from "react";
import { Column } from "@tanstack/react-table";
import { CheckIcon, PlusCircledIcon } from "@radix-ui/react-icons"; // Or use Lucide icons

import { cn } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Separator } from "@/components/ui/separator";

interface DataTableFacetedFilterProps<TData, TValue> {
  column?: Column<TData, TValue>;
  title?: string;
  options: {
    label: string;
    value: string;
    icon?: React.ComponentType<{ className?: string }>;
  }[];
}

export function DataTableFacetedFilter<TData, TValue>({
  column,
  title,
  options,
}: DataTableFacetedFilterProps<TData, TValue>) {
  const facets = column?.getFacetedUniqueValues();
  const selectedValues = new Set(column?.getFilterValue() as string[]);

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="sm" className="h-9 border-dashed">
          <PlusCircledIcon className="mr-2 h-4 w-4" /> {/* Lucide: FilterIcon or ListFilter */}
          {title}
          {selectedValues?.size > 0 && (
            <>
              <Separator orientation="vertical" className="mx-2 h-4" />
              <Badge
                variant="secondary"
                className="rounded-sm px-1 font-normal lg:hidden"
              >
                {selectedValues.size}
              </Badge>
              <div className="hidden space-x-1 lg:flex">
                {selectedValues.size > 2 ? (
                  <Badge
                    variant="secondary"
                    className="rounded-sm px-1 font-normal"
                  >
                    {selectedValues.size} selected
                  </Badge>
                ) : (
                  options
                    .filter((option) => selectedValues.has(option.value))
                    .map((option) => (
                      <Badge
                        variant="secondary"
                        key={option.value}
                        className="rounded-sm px-1 font-normal"
                      >
                        {option.label}
                      </Badge>
                    ))
                )}
              </div>
            </>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[200px] p-0" align="start">
        <Command>
          <CommandInput placeholder={title} />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>
            <CommandGroup>
              {options.map((option) => {
                const isSelected = selectedValues.has(option.value);
                return (
                  <CommandItem
                    key={option.value}
                    onSelect={() => {
                      if (isSelected) {
                        selectedValues.delete(option.value);
                      } else {
                        selectedValues.add(option.value);
                      }
                      const filterValues = Array.from(selectedValues);
                      column?.setFilterValue(
                        filterValues.length ? filterValues : undefined
                      );
                    }}
                  >
                    <div
                      className={cn(
                        "mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary",
                        isSelected
                          ? "bg-primary text-primary-foreground"
                          : "opacity-50 [&_svg]:invisible"
                      )}
                    >
                      <CheckIcon className={cn("h-4 w-4")} />
                    </div>
                    {option.icon && (
                      <option.icon className="mr-2 h-4 w-4 text-muted-foreground" />
                    )}
                    <span>{option.label}</span>
                    {facets?.get(option.value) && (
                      <span className="ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs">
                        {facets.get(option.value)}
                      </span>
                    )}
                  </CommandItem>
                );
              })}
            </CommandGroup>
            {selectedValues.size > 0 && (
              <>
                <CommandSeparator />
                <CommandGroup>
                  <CommandItem
                    onSelect={() => column?.setFilterValue(undefined)}
                    className="justify-center text-center"
                  >
                    Clear filters
                  </CommandItem>
                </CommandGroup>
              </>
            )}
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}// END OF FILE: components/ui/data-table-faceted-filter.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table-pagination.tsx

"use client";

import {
  ChevronLeftIcon,
  ChevronRightIcon,
  DoubleArrowLeftIcon,
  DoubleArrowRightIcon,
} from "@radix-ui/react-icons"; // Using Radix icons as per shadcn example
import { Table } from "@tanstack/react-table";

import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ViewMode } from "@/types/common";

interface DataTablePaginationProps<TData> {
  table: Table<TData>;
  viewMode: ViewMode;
}

export function DataTablePagination<TData>({
  table,
  viewMode,
}: DataTablePaginationProps<TData>) {
  return (
    <div className="flex items-center justify-between px-2 py-4 border-t">
      <div className="flex-1 text-sm text-muted-foreground">
        {table.getFilteredSelectedRowModel().rows.length} of{" "}
        {table.getFilteredRowModel().rows.length}{" "}
        {viewMode === "list" ? "row(s) selected" : "item(s) selected"} .
      </div>
      <div className="flex items-center space-x-6 lg:space-x-8">
        <div className="flex items-center space-x-2">
          <p className="text-sm font-medium">
            {viewMode === "list" ? "Rows per page" : "Items per page"}
          </p>
          <Select
            value={`${table.getState().pagination.pageSize}`}
            onValueChange={(value) => {
              table.setPageSize(Number(value));
            }}
          >
            <SelectTrigger className="h-8 w-[70px]">
              <SelectValue placeholder={table.getState().pagination.pageSize} />
            </SelectTrigger>
            <SelectContent side="top">
              {[10, 20, 30, 40, 50].map((pageSize) => (
                <SelectItem key={pageSize} value={`${pageSize}`}>
                  {pageSize}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="flex w-[100px] items-center justify-center text-sm font-medium">
          Page {table.getState().pagination.pageIndex + 1} of{" "}
          {table.getPageCount()}
        </div>
        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(0)}
            disabled={!table.getCanPreviousPage()}
          >
            <span className="sr-only">Go to first page</span>
            <DoubleArrowLeftIcon className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            className="h-8 w-8 p-0"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            <span className="sr-only">Go to previous page</span>
            <ChevronLeftIcon className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            className="h-8 w-8 p-0"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            <span className="sr-only">Go to next page</span>
            <ChevronRightIcon className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(table.getPageCount() - 1)}
            disabled={!table.getCanNextPage()}
          >
            <span className="sr-only">Go to last page</span>
            <DoubleArrowRightIcon className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}
// END OF FILE: components/ui/data-table-pagination.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table-toolbar.tsx

"use client";

import React from "react";
import { Table } from "@tanstack/react-table";
import { SlidersHorizontal, X, Search, LayoutGrid, LayoutList, Download } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent,
  DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { ViewMode } from "@/types/common";
import { cn } from "@/lib/utils";

const formatColumnIdForDisplay = (id: string) => {
  return id
    .replace(/_/g, " ")
    .replace(/([a-z])([A-Z])/g, "$1 $2")
    .replace(/\b\w/g, (char) => char.toUpperCase());
};

interface DataTableToolbarProps<TData> {
  table: Table<TData>;
  globalFilter: string;
  onGlobalFilterChangeAction: (value: string) => void;
  searchPlaceholder?: string;
  filterControls?: React.ReactNode;
  bulkActions?: React.ReactNode;
  viewMode: ViewMode;
  onViewModeChange: (mode: ViewMode) => void;
  onExportAction?: () => void;
}

export function DataTableToolbar<TData>({
  table,
  globalFilter,
  onGlobalFilterChangeAction,
  searchPlaceholder = "Search...",
  filterControls,
  bulkActions,
  viewMode,
  onViewModeChange,
  onExportAction,
}: DataTableToolbarProps<TData>) {
  const isFiltered = table.getState().columnFilters.length > 0 || !!globalFilter;
  const numSelected = table.getFilteredSelectedRowModel().rows.length;

  if (numSelected > 0 && bulkActions) {
    return (
      <div className="flex w-full items-center justify-between gap-4 rounded-md border border-dashed bg-muted/50 p-2.5 transition-all">
        <div className="flex-1 text-sm font-medium text-muted-foreground">
          {numSelected} {numSelected === 1 ? "item" : "items"} selected
        </div>
        <div className="flex items-center gap-2">
          {bulkActions}
          <Button variant="ghost" size="sm" onClick={() => table.resetRowSelection()} className="h-9" aria-label="Clear selection">
            <X className="mr-2 h-4 w-4" /> Clear
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
      <div className="flex flex-1 flex-col items-stretch gap-2 sm:flex-row sm:items-center">
        <div className="relative w-full sm:w-auto">
          <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
          <Input
            placeholder={searchPlaceholder}
            value={globalFilter ?? ""}
            onChange={(event) => onGlobalFilterChangeAction(event.target.value)}
            className="h-10 w-full pl-10 sm:w-[200px] lg:w-[280px]"
          />
        </div>
        {filterControls}
        {isFiltered && (
          <Button variant="ghost" onClick={() => { table.resetColumnFilters(); onGlobalFilterChangeAction(""); }} className="h-10 px-3">
            Reset <X className="ml-2 h-4 w-4" />
          </Button>
        )}
      </div>

      <div className="flex items-center gap-2">
        {/* [START OF CHANGE] */}
        <div className="flex items-center p-0.5 bg-muted rounded-md">
          <Button variant={viewMode === "grid" ? "default" : "ghost"} size="sm" onClick={() => onViewModeChange("grid")} className={cn("h-9 px-3", viewMode === "grid" && "bg-background text-foreground shadow-sm")}>
            <LayoutGrid className="h-4 w-4" />
            <span className="ml-1.5 hidden sm:inline">Grid</span>
          </Button>
          <Button variant={viewMode === "list" ? "default" : "ghost"} size="sm" onClick={() => onViewModeChange("list")} className={cn("h-9 px-3", viewMode === "list" && "bg-background text-foreground shadow-sm")}>
            <LayoutList className="h-4 w-4" />
            <span className="ml-1.5 hidden sm:inline">List</span>
          </Button>
        </div>
        {/* [END OF CHANGE] */}

        {onExportAction && (
          <Button variant="outline" size="sm" className="h-10" onClick={onExportAction}>
            <Download className="mr-2 h-4 w-4" />
            <span className="hidden sm:inline">Export</span>
          </Button>
        )}

        {viewMode === "list" && (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="h-10 w-full sm:w-auto">
                <SlidersHorizontal className="mr-2 h-4 w-4" />
                <span className="hidden sm:inline">Columns</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-[180px]">
              <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>
              <DropdownMenuSeparator />
              {table.getAllColumns().filter((col) => typeof col.accessorFn !== "undefined" && col.getCanHide()).map((column) => (
                <DropdownMenuCheckboxItem key={column.id} checked={column.getIsVisible()} onCheckedChange={(value) => column.toggleVisibility(!!value)}>
                  {formatColumnIdForDisplay(column.id)}
                </DropdownMenuCheckboxItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>
        )}
      </div>
    </div>
  );
}
// END OF FILE: components/ui/data-table-toolbar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/data-table.tsx

"use client";

import * as React from "react";
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFacetedRowModel,
  getFacetedUniqueValues,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  Table as TanstackTableInstance,
  PaginationState,
  RowSelectionState,
} from "@tanstack/react-table";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

// Extend props to accept an optional, pre-configured table instance
export interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[];
  data: TData[];
  pageCount?: number; // For server-side pagination, if tableInstance is not provided

  // Props for controlled state if tableInstance is NOT provided
  sorting?: SortingState;
  onSortingChange?: React.Dispatch<React.SetStateAction<SortingState>>;
  columnFilters?: ColumnFiltersState;
  onColumnFiltersChange?: React.Dispatch<
    React.SetStateAction<ColumnFiltersState>
  >;
  globalFilter?: string;
  onGlobalFilterChangeAction?: React.Dispatch<React.SetStateAction<string>>;
  columnVisibility?: VisibilityState;
  onColumnVisibilityChange?: React.Dispatch<
    React.SetStateAction<VisibilityState>
  >;
  rowSelection?: RowSelectionState;
  onRowSelectionChange?: React.Dispatch<
    React.SetStateAction<RowSelectionState>
  >;
  pagination?: PaginationState;
  onPaginationChange?: React.Dispatch<React.SetStateAction<PaginationState>>;

  manualPagination?: boolean;
  manualSorting?: boolean;
  manualFiltering?: boolean;

  tableInstance?: TanstackTableInstance<TData>; // Optional pre-configured table instance
}

export function DataTable<TData, TValue>({
  columns,
  data,
  pageCount: parentPageCount,
  sorting: controlledSorting,
  onSortingChange,
  columnFilters: controlledColumnFilters,
  onColumnFiltersChange,
  globalFilter: controlledGlobalFilter,
  onGlobalFilterChangeAction,
  columnVisibility: controlledColumnVisibility,
  onColumnVisibilityChange,
  rowSelection: controlledRowSelection,
  onRowSelectionChange,
  pagination: controlledPagination,
  onPaginationChange,
  manualPagination = false,
  manualSorting = false,
  manualFiltering = false,
  tableInstance, // Use this if provided
}: DataTableProps<TData, TValue>) {
  // Use the provided table instance, or create one if not provided
  const internalTable = useReactTable({
    data,
    columns,
    pageCount: parentPageCount ?? -1, // Use parentPageCount or default for internal calculation
    state: {
      sorting: controlledSorting,
      columnFilters: controlledColumnFilters,
      globalFilter: controlledGlobalFilter,
      columnVisibility: controlledColumnVisibility,
      rowSelection: controlledRowSelection,
      pagination: controlledPagination,
    },
    enableRowSelection: true,
    onRowSelectionChange: onRowSelectionChange,
    onSortingChange: onSortingChange,
    onColumnFiltersChange: onColumnFiltersChange,
    onGlobalFilterChange: onGlobalFilterChangeAction,
    onColumnVisibilityChange: onColumnVisibilityChange,
    onPaginationChange: onPaginationChange,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFacetedRowModel: getFacetedRowModel(),
    getFacetedUniqueValues: getFacetedUniqueValues(),
    manualPagination,
    manualSorting,
    manualFiltering,
  });

  const table = tableInstance || internalTable; // Prioritize passed instance

  return (
    <div className="w-full space-y-0">
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead
                    key={header.id}
                    colSpan={header.colSpan}
                    style={{
                      width:
                        header.getSize() !== 150 ? header.getSize() : undefined,
                    }} // Default size in tanstack table v8
                  >
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell
                      key={cell.id}
                      style={{
                        width:
                          cell.column.getSize() !== 150
                            ? cell.column.getSize()
                            : undefined,
                      }}
                    >
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={table.getAllColumns().length}
                  className="h-24 text-center"
                >
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}
// END OF FILE: components/ui/data-table.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/dialog.tsx

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
// END OF FILE: components/ui/dialog.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/dropdown-menu.tsx

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}
// END OF FILE: components/ui/dropdown-menu.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/feedback-card.tsx

import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface FeedbackCardProps {
  icon: React.ElementType;
  title: string;
  description: string;
  actionButton?: React.ReactNode;
  variant?: "default" | "destructive";
  className?: string;
}

export function FeedbackCard({
  icon: Icon,
  title,
  description,
  actionButton,
  variant = "default",
  className,
}: FeedbackCardProps) {
  return (
    <Card
      className={cn(
        "w-full",
        variant === "destructive" && "border-destructive/50 bg-destructive/10",
        className
      )}
    >
      <CardContent className="flex min-h-[300px] flex-col items-center justify-center p-6 text-center">
        <div
          className={cn(
            "mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-muted",
            variant === "destructive" && "bg-destructive/20"
          )}
        >
          <Icon
            className={cn(
              "h-8 w-8 text-muted-foreground",
              variant === "destructive" && "text-destructive"
            )}
          />
        </div>
        <h3 className="text-xl font-semibold text-foreground">{title}</h3>
        <p className="mt-2 max-w-sm text-sm text-muted-foreground">
          {description}
        </p>
        {actionButton && <div className="mt-6">{actionButton}</div>}
      </CardContent>
    </Card>
  );
}// END OF FILE: components/ui/feedback-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/form.tsx

"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form";

import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState } = useFormContext();
  const formState = useFormState({ name: fieldContext.name });
  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
);

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  );
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField();

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField();

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message ?? "") : props.children;

  if (!body) {
    return null;
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  );
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
// END OF FILE: components/ui/form.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/form-wizard.tsx

"use client";

import { cn } from "@/lib/utils";
import { Check } from "lucide-react";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

interface Step {
  id: string;
  name: string;
  icon: React.ElementType;
}

interface FormWizardProps {
  steps: Step[];
  currentStepIndex: number;
  onStepClick: (stepIndex: number) => void;
  mode: "create" | "edit";
  className?: string;
}

export function FormWizard({
  steps,
  currentStepIndex,
  onStepClick,
  mode,
  className,
}: FormWizardProps) {
  const stepCount = steps.length;
  if (mode === "edit") {
    return (
      <Tabs
        value={steps[currentStepIndex].id}
        onValueChange={(value) => {
          const newIndex = steps.findIndex((step) => step.id === value);
          if (newIndex !== -1) {
            onStepClick(newIndex);
          }
        }}
        className={cn("w-full", className)}
      >
        <TabsList className={`grid w-full grid-cols-${stepCount}`}>
          {steps.map((step) => (
            <TabsTrigger key={step.id} value={step.id}>
              <step.icon className="mr-2 h-4 w-4" />
              {step.name}
            </TabsTrigger>
          ))}
        </TabsList>
      </Tabs>
    );
  }

  // --- CREATE MODE: Use the sequential wizard layout ---
  return (
    <nav aria-label="Progress" className={cn("pb-4", className)}>
      <ol
        role="list"
        className="flex flex-col space-y-4 md:flex-row md:space-y-0 md:space-x-8"
      >
        {steps.map((step, index) => {
          const isCurrent = index === currentStepIndex;
          const isCompleted = index < currentStepIndex;
          const isClickable = index < currentStepIndex; // Only completed steps are clickable in create mode

          return (
            <li key={step.name} className="md:flex-1">
              <div
                onClick={() => isClickable && onStepClick(index)}
                className={cn(
                  "group flex w-full flex-col border-l-4 py-2 pl-4 transition-colors md:border-l-0 md:border-t-4 md:pb-0 md:pl-0 md:pt-4",
                  isClickable ? "cursor-pointer" : "cursor-default",
                  isCurrent && "border-primary",
                  isCompleted
                    ? "border-primary/50 hover:border-primary"
                    : "border-border"
                )}
                aria-current={isCurrent ? "step" : undefined}
              >
                <div className="flex items-center gap-3">
                  <div
                    className={cn(
                      "flex h-7 w-7 shrink-0 items-center justify-center rounded-full text-sm font-bold transition-all duration-300",
                      isCurrent &&
                        "scale-110 ring-4 ring-primary/20 bg-primary text-primary-foreground",
                      isCompleted
                        ? "bg-primary text-primary-foreground"
                        : "bg-muted text-muted-foreground group-hover:bg-accent"
                    )}
                  >
                    {isCompleted ? (
                      <Check className="h-5 w-5" />
                    ) : (
                      <span>{index + 1}</span>
                    )}
                  </div>
                  <div>
                    <span
                      className={cn(
                        "text-sm font-semibold transition-colors",
                        isCurrent ? "text-primary" : "text-muted-foreground",
                        isClickable && "group-hover:text-foreground"
                      )}
                    >
                      {step.name}
                    </span>
                  </div>
                </div>
              </div>
            </li>
          );
        })}
      </ol>
    </nav>
  );
}
// END OF FILE: components/ui/form-wizard.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/form-wrapper.tsx

"use client";

import React, { useState } from "react";
import { UseFormReturn, FieldValues, Path } from "react-hook-form";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Form } from "@/components/ui/form";
import { ChevronLeft, ChevronRight, Loader2 } from "lucide-react";
import { FormWizard } from "./form-wizard"; // We will use the stepper version

interface Step {
  id: string;
  name: string;
  icon: React.ElementType;
  fields?: string[];
}

interface FormWrapperProps<T extends FieldValues> {
  form: UseFormReturn<T>;
  onFormSubmit: (data: T) => void;
  isLoading: boolean;
  title: string;
  description: string;
  steps?: Step[];
  children: (currentStep: number) => React.ReactNode;
  submitButtonText?: string;
  className?: string;
}

export function FormWrapper<T extends FieldValues>({
  form,
  onFormSubmit,
  isLoading,
  title,
  description,
  steps,
  children,
  submitButtonText = "Submit",
  className,
}: FormWrapperProps<T>) {
  const [currentStep, setCurrentStep] = useState(0);
  const isMultiStep = steps && steps.length > 1;

  const handleNextStep = async () => {
    // Import Path from react-hook-form
    // import { UseFormReturn, FieldValues, Path } from "react-hook-form";
    const fieldsToValidate = steps?.[currentStep]?.fields as
      | import("react-hook-form").Path<T>[]
      | undefined;
    const isStepValid = fieldsToValidate
      ? await form.trigger(fieldsToValidate)
      : true;

    if (isStepValid && isMultiStep && currentStep < steps.length - 1) {
      setCurrentStep((prev) => prev + 1);
    }
  };

  const handleFinalSubmit = form.handleSubmit(onFormSubmit);

  const handleKeyDown = (e: React.KeyboardEvent<HTMLFormElement>) => {
    if (e.key === "Enter") {
      // Prevents accidental submission from any input field
      e.preventDefault();
    }
  };

  return (
    <Form {...form}>
      <form
        onSubmit={(e) => e.preventDefault()} // Prevent default form submission
        onKeyDown={handleKeyDown}
        className={cn("w-full", className)}
      >
        <Card className="shadow-lg border">
          <CardHeader>
            <CardTitle>{title}</CardTitle>
            <CardDescription>{description}</CardDescription>
          </CardHeader>

          {isMultiStep && (
            <div className="px-6 pb-4 border-b">
              <FormWizard
                steps={steps}
                currentStepIndex={currentStep}
                onStepClick={setCurrentStep}
                mode="create" // Always use stepper visual for clarity
              />
            </div>
          )}

          <CardContent className="pt-6">{children(currentStep)}</CardContent>

          <CardFooter className="flex justify-between border-t pt-6">
            <div>
              {isMultiStep && (
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setCurrentStep((p) => p - 1)}
                  disabled={currentStep === 0 || isLoading}
                >
                  <ChevronLeft className="mr-2 h-4 w-4" />
                  Back
                </Button>
              )}
            </div>

            <div>
              {isMultiStep && currentStep < steps.length - 1 ? (
                <Button type="button" onClick={handleNextStep}>
                  Next
                  <ChevronRight className="ml-2 h-4 w-4" />
                </Button>
              ) : (
                <Button
                  type="button"
                  onClick={handleFinalSubmit}
                  disabled={isLoading}
                >
                  {isLoading && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  {submitButtonText}
                </Button>
              )}
            </div>
          </CardFooter>
        </Card>
      </form>
    </Form>
  );
}
// END OF FILE: components/ui/form-wrapper.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/image-placeholder.tsx

import React from 'react';
import { Image as ImageIcon, Package, Combine } from 'lucide-react'; // Or any other generic icon
import { cn } from '@/lib/utils';

interface ImagePlaceholderProps {
  iconType?: 'resource' | 'service' | 'generic';
  className?: string;
  iconClassName?: string;
}

export function ImagePlaceholder({
  iconType = 'generic',
  className,
  iconClassName,
}: ImagePlaceholderProps) {
  let IconComponent;
  switch (iconType) {
    case 'resource':
      IconComponent = Package;
      break;
    case 'service':
      IconComponent = Combine;
      break;
    default:
      IconComponent = ImageIcon;
  }

  return (
    <div
      className={cn(
        "flex h-full w-full items-center justify-center rounded-md bg-muted aspect-square",
        className
      )}
    >
      <IconComponent
        className={cn("h-1/2 w-1/2 text-muted-foreground/50", iconClassName)}
        strokeWidth={1.5}
      />
    </div>
  );
}// END OF FILE: components/ui/image-placeholder.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/image-uploader.tsx

"use client";
import imageCompression from "browser-image-compression";
import React, {
  useState,
  useCallback,
  ChangeEvent,
  useEffect,
  useRef,
} from "react";
import { Label } from "@/components/ui/label";
import Image from "next/image";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { UploadCloud, XCircle, Maximize } from "lucide-react"; // Removed zoom/pan icons
import { toast } from "sonner";
import { cn } from "@/lib/utils";
import {
  Dialog,
  DialogContent,
  DialogTrigger,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";

interface ImageUploaderProps {
  currentImageUrl?: string | null;
  onImageSelectedAction: (file: File | null, previewUrl: string | null) => void;
  label?: string;
  aspectRatio?: "square" | "portrait" | "landscape" | "auto";
  fallbackName?: string;
  className?: string;
  imagePreviewContainerClassName?: string;
  dropzoneClassName?: string;
}

export function ImageUploader({
  currentImageUrl,
  onImageSelectedAction,
  label = "",
  aspectRatio = "square",
  fallbackName = "User",
  className,
  imagePreviewContainerClassName,
  dropzoneClassName,
}: ImageUploaderProps) {
  const [preview, setPreview] = useState<string | null>(
    currentImageUrl || null
  );
  const [fileName, setFileName] = useState<string | null>(null);
  const [isFullViewOpen, setIsFullViewOpen] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    setPreview(currentImageUrl || null);
    if (!currentImageUrl) setFileName(null);
  }, [currentImageUrl]);

  const handleFileChange = useCallback(
    async (event: ChangeEvent<HTMLInputElement>) => {
      const file = event.target.files?.[0];
      if (!file) return;

      if (file.size > 5 * 1024 * 1024) {
        toast.error("Max file size is 5MB.");
        return;
      }
      if (
        !["image/jpeg", "image/png", "image/webp", "image/gif"].includes(
          file.type
        )
      ) {
        toast.error("Invalid file type. Please use JPG, PNG, WEBP, or GIF.");
        return;
      }

      const compressionToast = toast.loading("Compressing image...");

      try {
        // [ADD] Compression logic
        const options = {
          maxSizeMB: 1,
          maxWidthOrHeight: 1920,
          useWebWorker: true,
        };
        const compressedFile = await imageCompression(file, options);
        toast.success("Image compressed successfully!", {
          id: compressionToast,
        });

        const reader = new FileReader();
        reader.onloadend = () => {
          setPreview(reader.result as string);
          setFileName(compressedFile.name);
          onImageSelectedAction(compressedFile, reader.result as string);
        };
        reader.readAsDataURL(compressedFile);
      } catch (error) {
        toast.error("Failed to compress image.", { id: compressionToast });
        console.error(error);
      } finally {
        if (event.target) event.target.value = "";
      }
    },
    [onImageSelectedAction]
  );

  const handleClearImage = (e?: React.MouseEvent<HTMLButtonElement>) => {
    if (e) e.stopPropagation();
    setPreview(null);
    setFileName(null);
    onImageSelectedAction(null, null);
    if (fileInputRef.current) fileInputRef.current.value = "";
  };

  const getFallbackInitial = () => {
    if (!fallbackName) return "U";
    const parts = fallbackName.split(" ");
    if (parts.length === 1 && fallbackName.length > 0)
      return fallbackName.substring(0, 2).toUpperCase();
    if (parts.length > 1 && parts[0] && parts[parts.length - 1])
      return `${parts[0][0]}${parts[parts.length - 1][0]}`.toUpperCase();
    return fallbackName.substring(0, 2).toUpperCase() || "P";
  };

  const handleDropzoneClick = () => {
    if (!preview && fileInputRef.current) fileInputRef.current.click();
  };

  const imageToDisplayInDialog = preview || currentImageUrl;

  return (
    <div className={cn("space-y-2", className)}>
      {label && (
        <Label
          htmlFor="image-upload-input-trigger"
          className="text-base font-medium"
        >
          {label}
        </Label>
      )}
      <div
        className={cn(
          "relative group w-full border-2 border-dashed border-muted-foreground/30 rounded-lg p-1 flex flex-col items-center justify-center text-center transition-colors",
          "data-[has-preview=false]:hover:border-primary/70 data-[has-preview=false]:cursor-pointer",
          aspectRatio === "square" && "aspect-square max-w-xs mx-auto",
          aspectRatio === "portrait" && "aspect-[3/4] max-w-sm mx-auto",
          aspectRatio === "landscape" && "aspect-video max-w-md mx-auto",
          aspectRatio === "auto" && "min-h-[150px] max-w-md mx-auto",
          preview && "border-solid border-primary/30 p-0",
          dropzoneClassName
        )}
        onClick={handleDropzoneClick}
        data-has-preview={!!preview}
        id="image-upload-input-trigger"
      >
        <Input
          type="file"
          id="image-upload-file-input"
          accept="image/jpeg,image/png,image/webp,image/gif"
          onChange={handleFileChange}
          className="hidden"
          ref={fileInputRef}
          aria-label={`Upload ${label}`}
        />
        {preview ? (
          <div
            className={cn(
              "relative w-full h-full",
              imagePreviewContainerClassName
            )}
          >
            <Image
              src={preview}
              alt={fileName || label || "Selected preview"}
              layout="fill"
              objectFit="contain"
              className="rounded-md"
              unoptimized
            />
            <div className="absolute top-1.5 right-1.5 z-20 flex gap-1.5">
              <Dialog open={isFullViewOpen} onOpenChange={setIsFullViewOpen}>
                <DialogTrigger asChild>
                  <Button
                    variant="secondary"
                    size="icon"
                    className="h-7 w-7 opacity-80 group-hover:opacity-100 transition-opacity bg-background/70 hover:bg-background/90"
                    aria-label="View full image"
                    onClick={(e) => {
                      e.stopPropagation();
                      setIsFullViewOpen(true);
                    }}
                  >
                    <Maximize className="h-4 w-4" />
                  </Button>
                </DialogTrigger>
                <DialogContent className="w-[calc(100vw-4rem)] h-[calc(100vh-4rem)] max-w-[1200px] max-h-[900px] p-2 sm:p-4 flex items-center justify-center bg-background/95 dark:bg-background/80 backdrop-blur-md border-border shadow-2xl rounded-lg">
                  <DialogHeader className="sr-only">
                    <DialogTitle>
                      {fileName || label || "Image Preview"}
                    </DialogTitle>
                    <DialogDescription>
                      Full size preview of the selected image.
                    </DialogDescription>
                  </DialogHeader>
                  {/* <DialogClose className="absolute right-3 top-3 z-50 rounded-full bg-background/50 hover:bg-accent p-1.5 text-muted-foreground hover:text-accent-foreground transition-colors">
                    <XCircle className="h-5 w-5" />
                    <span className="sr-only">Close</span>
                  </DialogClose> */}
                  <div className="relative w-full h-full">
                    {imageToDisplayInDialog && (
                      <Image
                        src={imageToDisplayInDialog}
                        alt={fileName || label || "Full view"}
                        layout="fill"
                        objectFit="contain" // Key for fitting image within bounds
                        className="rounded"
                        unoptimized
                        priority
                      />
                    )}
                    {!imageToDisplayInDialog && (
                      <p className="text-muted-foreground text-center">
                        Image not available.
                      </p>
                    )}
                  </div>
                  {/* Footer with controls removed */}
                </DialogContent>
              </Dialog>
              <Button
                variant="destructive"
                size="icon"
                onClick={handleClearImage}
                className="h-7 w-7 opacity-80 group-hover:opacity-100 transition-opacity"
                aria-label="Clear image"
              >
                <XCircle className="h-4 w-4" />
              </Button>
            </div>
          </div>
        ) : (
          <label
            htmlFor="image-upload-file-input"
            className="flex flex-col items-center justify-center text-muted-foreground cursor-pointer p-4 w-full h-full"
          >
            {currentImageUrl && currentImageUrl !== "/placeholder.svg" ? (
              <Avatar
                className={cn(
                  "h-20 w-20 mb-2 border",
                  imagePreviewContainerClassName,
                  aspectRatio !== "square" && "h-24 w-24"
                )}
              >
                <AvatarImage
                  src={currentImageUrl}
                  alt={fallbackName || "Current Profile"}
                />
                <AvatarFallback className="text-3xl bg-muted">
                  {getFallbackInitial()}
                </AvatarFallback>
              </Avatar>
            ) : (
              <UploadCloud
                className={cn(
                  "h-10 w-10 mb-2",
                  aspectRatio !== "square" && "h-12 w-12"
                )}
              />
            )}
            <p className="text-sm mt-1">
              <span className="font-semibold text-primary">
                Click to upload
              </span>{" "}
              or drag & drop
            </p>
            <p className="text-xs mt-1">PNG, JPG, GIF, WEBP (MAX. 5MB)</p>
          </label>
        )}
      </div>
      {fileName && (
        <p className="text-xs text-muted-foreground text-center mt-1">
          File: {fileName}
        </p>
      )}
    </div>
  );
}
// END OF FILE: components/ui/image-uploader.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/input.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }
// END OF FILE: components/ui/input.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/label.tsx

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }
// END OF FILE: components/ui/label.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/list-view-skeleton.tsx

"use client";

import React from "react";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
} from "@/components/ui/card";
import { cn } from "@/lib/utils";
import { ViewMode } from "@/types/common";

interface ListViewSkeletonProps {
  viewMode: ViewMode;
  className?: string;
  gridItemCount?: number;
  listItemCount?: number;
}

export function ListViewSkeleton({
  viewMode,
  className,
  gridItemCount = 6,
  listItemCount = 5,
}: ListViewSkeletonProps) {
  if (viewMode === "grid") {
    return (
      <div
        className={cn(
          "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4",
          className
        )}
      >
        {Array.from({ length: gridItemCount }).map((_, i) => (
          <Card key={i} className="h-[220px]">
            <CardHeader className="flex flex-row items-center gap-4">
              <Skeleton className="h-12 w-12 rounded-lg" />
              <div className="space-y-2">
                <Skeleton className="h-4 w-[150px]" />
                <Skeleton className="h-3 w-[100px]" />
              </div>
            </CardHeader>
            <CardContent className="space-y-2">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-4/5" />
            </CardContent>
            <CardFooter>
              <Skeleton className="h-8 w-20 ml-auto" />
            </CardFooter>
          </Card>
        ))}
      </div>
    );
  }

  // Default to list view skeleton
  return (
    <div className={cn("rounded-md border", className)}>
      <div className="divide-y">
        {Array.from({ length: listItemCount }).map((_, i) => (
          <div key={i} className="flex items-center gap-4 p-4">
            <Skeleton className="h-10 w-10 rounded-md" />
            <div className="space-y-2 flex-1">
              <Skeleton className="h-4 w-3/5" />
              <Skeleton className="h-3 w-4/5" />
            </div>
            <Skeleton className="h-8 w-24" />
          </div>
        ))}
      </div>
    </div>
  );
}
// END OF FILE: components/ui/list-view-skeleton.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/multi-select.tsx

"use client";

import * as React from "react";
import { X } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Command, CommandGroup, CommandItem, CommandInput } from "@/components/ui/command";
import { cn } from "@/lib/utils";

export type MultiSelectOption = {
  value: string;
  label: string;
};

interface MultiSelectProps {
  options: MultiSelectOption[];
  selected: string[];
  onChange: (selected: string[]) => void;
  placeholder?: string;
  isLoading?: boolean;
  className?: string;
}

export function MultiSelect({ options, selected, onChange, placeholder = "Select...", isLoading, className }: MultiSelectProps) {
  const [open, setOpen] = React.useState(false);
  const selectedSet = new Set(selected);

  const handleUnselect = (value: string) => {
    onChange(selected.filter((s) => s !== value));
  };

  return (
    <Command className={cn("overflow-visible bg-transparent", className)}>
      <div className="group rounded-md border border-input px-3 py-2 text-sm ring-offset-background focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2">
        <div className="flex flex-wrap gap-1">
          {selected.map((value) => {
            const option = options.find((opt) => opt.value === value);
            return (
              <Badge key={value} variant="secondary">
                {option?.label || value}
                <button
                  className="ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2"
                  onKeyDown={(e) => { if (e.key === "Enter") handleUnselect(value); }}
                  onMouseDown={(e) => { e.preventDefault(); e.stopPropagation(); }}
                  onClick={() => handleUnselect(value)}
                >
                  <X className="h-3 w-3 text-muted-foreground hover:text-foreground" />
                </button>
              </Badge>
            );
          })}
          <CommandInput
            placeholder={placeholder}
            onFocus={() => setOpen(true)}
            onBlur={() => setOpen(false)}
            className="flex-1 border-0 p-0 shadow-none focus-visible:ring-0"
          />
        </div>
      </div>
      <div className="relative mt-2">
        {open && (
          <div className="absolute top-0 z-10 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none animate-in">
            <CommandGroup className="h-full overflow-auto">
              {isLoading ? (
                <CommandItem disabled>Loading...</CommandItem>
              ) : (
                options.map((option) => (
                  <CommandItem
                    key={option.value}
                    onMouseDown={(e) => { e.preventDefault(); e.stopPropagation(); }}
                    onSelect={() => {
                      onChange(selectedSet.has(option.value)
                        ? selected.filter((s) => s !== option.value)
                        : [...selected, option.value]
                      );
                      setOpen(true);
                    }}
                    className={"cursor-pointer"}
                  >
                    {option.label}
                  </CommandItem>
                ))
              )}
            </CommandGroup>
          </div>
        )}
      </div>
    </Command>
  );
}// END OF FILE: components/ui/multi-select.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/page-header.tsx

import React from 'react';
import { cn } from '@/lib/utils';

interface PageHeaderProps {
  title: string;
  description?: string;
  action?: React.ReactNode;
  className?: string;
}

export function PageHeader({ title, description, action, className }: PageHeaderProps) {
  return (
    <header className={cn("flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4", className)}>
      <div>
        <h1 className="text-2xl font-bold tracking-tight">{title}</h1>
        {description && (
          <p className="text-muted-foreground mt-1">{description}</p>
        )}
      </div>
      {action && <div className="flex-shrink-0">{action}</div>}
    </header>
  );
}// END OF FILE: components/ui/page-header.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/popover.tsx

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
// END OF FILE: components/ui/popover.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/progress.tsx

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }
// END OF FILE: components/ui/progress.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/radio-group.tsx

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn("grid gap-3", className)}
      {...props}
    />
  )
}

function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        "border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <CircleIcon className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
}

export { RadioGroup, RadioGroupItem }
// END OF FILE: components/ui/radio-group.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/scroll-area.tsx

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }
// END OF FILE: components/ui/scroll-area.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/select.tsx

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
// END OF FILE: components/ui/select.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/separator.tsx

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }
// END OF FILE: components/ui/separator.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/skeleton.tsx

import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }
// END OF FILE: components/ui/skeleton.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/slider.tsx

"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }
// END OF FILE: components/ui/slider.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/sonner.tsx

"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  )
}

export { Toaster }
// END OF FILE: components/ui/sonner.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/switch.tsx

"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }
// END OF FILE: components/ui/switch.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/table.tsx

"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
// END OF FILE: components/ui/table.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/tabs.tsx

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }
// END OF FILE: components/ui/tabs.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/textarea.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }
// END OF FILE: components/ui/textarea.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/ui/tooltip.tsx

"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
// END OF FILE: components/ui/tooltip.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/user-nav.tsx

"use client";

import { LogOut } from "lucide-react"; // Removed Link and other icons for simplicity
import { useSettings } from "@/contexts/settings-context";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import Link from "next/link"; // Added Link back for explicit settings link
import { Settings as SettingsIcon, User as UserIcon } from "lucide-react"; // Added UserIcon

interface UserNavProps {
  onLogoutAction: () => void;
}

export function UserNav({ onLogoutAction }: UserNavProps) {
  const { settings } = useSettings();

  const avatarFallback = settings.fullName
    ? settings.fullName
        .split(" ")
        .map((n) => n[0])
        .join("")
        .toUpperCase()
    : settings.username
    ? settings.username.charAt(0).toUpperCase()
    : "U";

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-9 w-9 rounded-full">
          <Avatar className="h-8 w-8">
            <AvatarImage
              src={settings.avatar}
              alt={settings.fullName || "User Avatar"}
            />
            <AvatarFallback>{avatarFallback}</AvatarFallback>
          </Avatar>
          <span className="sr-only">Open user menu</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">
              {settings.fullName || settings.username || "User"}
            </p>
            <p className="text-xs leading-none text-muted-foreground">
              {settings.email || "No email provided"}
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        {/* Link to the "Account" tab of the unified settings page */}
        <DropdownMenuItem asChild>
          <Link href="/settings?tab=account">
            <UserIcon className="mr-2 h-4 w-4" />
            <span>My Account</span>
          </Link>
        </DropdownMenuItem>
        <DropdownMenuItem asChild>
          <Link href="/settings">
            <SettingsIcon className="mr-2 h-4 w-4" />
            <span>All Settings</span>
          </Link>
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          onClick={onLogoutAction}
          className="cursor-pointer text-destructive focus:bg-destructive/10 focus:text-destructive"
        >
          <LogOut className="mr-2 h-4 w-4" />
          <span>Log out</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
// END OF FILE: components/user-nav.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/contexts/active-agency-context.tsx

"use client";

import React, {
  createContext,
  useContext,
  useState,
  useCallback,
  ReactNode,
  useEffect,
} from "react";
import { AgencyDto } from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { useActiveOrganization } from "./active-organization-context";
import { toast } from "sonner";
import { useRouter } from "next/navigation";

interface ActiveAgencyContextType {
  activeAgencyId: string | null;
  setActiveAgency: (
    agencyId: string | null,
    agencyDetails?: AgencyDto
  ) => Promise<void>;
  activeAgencyDetails: AgencyDto | null;
  agenciesForCurrentOrg: AgencyDto[];
  isLoadingAgencies: boolean;
  isLoadingAgencyDetails: boolean;
  isAgencyContextInitialized: boolean;
  fetchAgenciesForCurrentOrg: () => Promise<void>;
  clearActiveAgency: () => void;
}

const ActiveAgencyContext = createContext<ActiveAgencyContextType | undefined>(
  undefined
);

export const ActiveAgencyProvider = ({ children }: { children: ReactNode }) => {
  const { activeOrganizationId, isOrgContextInitialized } =
    useActiveOrganization();
  const router = useRouter();

  const [activeAgencyId, setActiveAgencyIdState] = useState<string | null>(
    null
  );
  const [activeAgencyDetails, setActiveAgencyDetailsState] =
    useState<AgencyDto | null>(null);
  const [agenciesForCurrentOrg, setAgenciesForCurrentOrg] = useState<
    AgencyDto[]
  >([]);

  const [isLoadingAgencies, setIsLoadingAgencies] = useState(true);
  const [isLoadingAgencyDetails, setIsLoadingAgencyDetails] = useState(false);
  const [isAgencyContextInitialized, setIsAgencyContextInitialized] =
    useState(false);

  const fetchAgenciesForCurrentOrg = useCallback(async () => {
    if (!activeOrganizationId) {
      setAgenciesForCurrentOrg([]);
      setIsLoadingAgencies(false);
      return;
    }
    setIsLoadingAgencies(true);
    try {
      const agencies = await organizationRepository.getAgencies(
        activeOrganizationId
      );
      setAgenciesForCurrentOrg(agencies || []);
    } catch (error) {
      toast.error("Could not load agencies for the organization.");
      setAgenciesForCurrentOrg([]);
    } finally {
      setIsLoadingAgencies(false);
      setIsAgencyContextInitialized(true);
    }
  }, [activeOrganizationId]);

  const fetchAndSetAgencyDetails = useCallback(
    async (agencyId: string) => {
      if (!activeOrganizationId) return;
      setIsLoadingAgencyDetails(true);
      try {
        const details = await organizationRepository.getAgencyById(
          activeOrganizationId,
          agencyId
        );
        setActiveAgencyDetailsState(details);
        if (!details) {
          toast.error(`Could not load details for agency ID: ${agencyId}.`);
          setActiveAgencyIdState(null); // Clear ID if details fail
        }
      } catch (error) {
        toast.error("Failed to fetch agency details.");
        setActiveAgencyDetailsState(null);
        setActiveAgencyIdState(null);
      } finally {
        setIsLoadingAgencyDetails(false);
      }
    },
    [activeOrganizationId]
  );

  const setActiveAgency = useCallback(
    async (agencyId: string | null, agencyDetails?: AgencyDto) => {
      setActiveAgencyIdState(agencyId);
      if (agencyDetails && agencyId === agencyDetails.agency_id) {
        setActiveAgencyDetailsState(agencyDetails);
      } else if (agencyId) {
        await fetchAndSetAgencyDetails(agencyId);
      } else {
        setActiveAgencyDetailsState(null);
      }
    },
    [fetchAndSetAgencyDetails]
  );

  const clearActiveAgency = useCallback(() => {
    setActiveAgencyIdState(null);
    setActiveAgencyDetailsState(null);
  }, []);

  useEffect(() => {
    // When the parent organization context is ready, fetch the list of its agencies.
    if (isOrgContextInitialized) {
      fetchAgenciesForCurrentOrg();
    }
  }, [isOrgContextInitialized, fetchAgenciesForCurrentOrg]);

  return (
    <ActiveAgencyContext.Provider
      value={{
        activeAgencyId,
        setActiveAgency,
        activeAgencyDetails,
        agenciesForCurrentOrg,
        isLoadingAgencies,
        isLoadingAgencyDetails,
        isAgencyContextInitialized,
        fetchAgenciesForCurrentOrg,
        clearActiveAgency,
      }}
    >
      {children}
    </ActiveAgencyContext.Provider>
  );
};

export const useActiveAgency = (): ActiveAgencyContextType => {
  const context = useContext(ActiveAgencyContext);
  if (context === undefined) {
    throw new Error(
      "useActiveAgency must be used within an ActiveAgencyProvider"
    );
  }
  return context;
};
// END OF FILE: contexts/active-agency-context.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/contexts/active-organization-context.tsx

"use client";

import React, {
  createContext,
  useContext,
  useState,
  useCallback,
  ReactNode,
  useEffect,
} from "react";
import {
  AgencyDto,
  OrganizationDto,
} from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { useSession } from "next-auth/react";
import { toast } from "sonner";
import { useLocalStorage } from "@/hooks/use-local-storage";

interface ActiveOrganizationContextType {
  activeOrganizationId: string | null;
  activeOrganizationDetails: OrganizationDto | null;
  isLoadingOrgDetails: boolean;
  isLoadingUserOrgs: boolean;
  isOrgContextInitialized: boolean;
  userOrganizations: OrganizationDto[];
  setActiveOrganization: (
    orgId: string | null,
    orgDetails?: OrganizationDto
  ) => Promise<void>;
  fetchUserOrganizationsList: () => Promise<void>;
  fetchAgenciesForCurrentOrg: () => Promise<void>;
  fetchAndSetOrganizationDetails: (
    id: string
  ) => Promise<OrganizationDto | null>;
  activeAgencyId: string | null;
  activeAgencyDetails: AgencyDto | null;
  isLoadingAgencyDetails: boolean;
  setActiveAgency: (
    agencyId: string | null,
    agencyDetails?: AgencyDto
  ) => Promise<void>;
  agenciesForCurrentOrg: AgencyDto[];
  isLoadingAgencies: boolean;
  clearActiveEntities: () => void;
  clearActiveAgency: () => void;
  clearActiveOrganization: () => void;
}

const ActiveOrganizationContext = createContext<
  ActiveOrganizationContextType | undefined
>(undefined);

export const ActiveOrganizationProvider = ({
  children,
}: {
  children: ReactNode;
}) => {
  const { data: session, status: sessionStatus } = useSession();

  const [activeOrganizationId, setActiveOrganizationIdState] = useLocalStorage<
    string | null
  >("activeOrgId", null);
  const [activeOrganizationDetails, setActiveOrganizationDetailsState] =
    useLocalStorage<OrganizationDto | null>("activeOrgDetails", null);
  const [activeAgencyId, setActiveAgencyIdState] = useLocalStorage<
    string | null
  >("activeAgencyId", null);
  const [activeAgencyDetails, setActiveAgencyDetailsState] =
    useLocalStorage<AgencyDto | null>("activeAgencyDetails", null);

  const [isLoadingOrgDetails, setIsLoadingOrgDetails] =
    useState<boolean>(false);
  const [userOrganizations, setUserOrganizations] = useState<OrganizationDto[]>(
    []
  );
  const [isLoadingUserOrgs, setIsLoadingUserOrgs] = useState<boolean>(true);
  const [isOrgContextInitialized, setIsOrgContextInitialized] =
    useState<boolean>(false);
  const [agenciesForCurrentOrg, setAgenciesForCurrentOrg] = useState<
    AgencyDto[]
  >([]);
  const [isLoadingAgencies, setIsLoadingAgencies] = useState(false);
  const [isLoadingAgencyDetails, setIsLoadingAgencyDetails] = useState(false);

  const clearActiveEntities = useCallback(() => {
    setActiveOrganizationIdState(null);
    setActiveOrganizationDetailsState(null);
    setActiveAgencyIdState(null);
    setActiveAgencyDetailsState(null);
    setAgenciesForCurrentOrg([]);
  }, [
    setActiveOrganizationIdState,
    setActiveOrganizationDetailsState,
    setActiveAgencyIdState,
    setActiveAgencyDetailsState,
  ]);

  const clearActiveOrganization = useCallback(() => {
    setActiveOrganizationIdState(null);
    setActiveOrganizationDetailsState(null);
    // Also clear agency context when exiting the organization
    setActiveAgencyIdState(null);
    setActiveAgencyDetailsState(null);
    setAgenciesForCurrentOrg([]);
  }, [
    setActiveOrganizationIdState,
    setActiveOrganizationDetailsState,
    setActiveAgencyIdState,
    setActiveAgencyDetailsState,
  ]);

  const clearActiveAgency = useCallback(() => {
    setActiveAgencyIdState(null);
    setActiveAgencyDetailsState(null);
    setAgenciesForCurrentOrg([]);
  }, [setActiveAgencyIdState, setActiveAgencyDetailsState]);

  const fetchAndSetOrganizationDetails = useCallback(
    async (id: string): Promise<OrganizationDto | null> => {
      setIsLoadingOrgDetails(true);
      try {
        const details = await organizationRepository.getOrganizationById(id);
        setActiveOrganizationDetailsState(details);
        return details;
      } catch (error) {
        toast.error("Could not load organization details. Clearing selection.");
        clearActiveEntities();
        return null;
      } finally {
        setIsLoadingOrgDetails(false);
      }
    },
    [setActiveOrganizationDetailsState, clearActiveEntities]
  );

  const setActiveOrganization = useCallback(
    async (
      orgId: string | null,
      orgDetails?: OrganizationDto | OrganizationDto
    ) => {
      setActiveOrganizationIdState(orgId);

      if (orgDetails && orgId === orgDetails.organization_id) {
        if ("number_of_employees" in orgDetails) {
          setActiveOrganizationDetailsState(orgDetails as OrganizationDto);
        } else {
          await fetchAndSetOrganizationDetails(orgId);
        }
      } else if (orgId) {
        await fetchAndSetOrganizationDetails(orgId);
      } else {
        setActiveOrganizationDetailsState(null);
      }
    },
    [
      fetchAndSetOrganizationDetails,
      setActiveOrganizationIdState,
      setActiveOrganizationDetailsState /* ... */,
    ]
  );

  const fetchUserOrganizationsList = useCallback(async () => {
    if (!session?.user.businessActorId) {
      setIsLoadingUserOrgs(false);
      setIsOrgContextInitialized(true);
      return;
    }
    setIsLoadingUserOrgs(true);
    try {
      const myOrgs = await organizationRepository.getMyOrganizations();
      setUserOrganizations(myOrgs || []);

      const storedOrgId = getLocalStorageItem("activeOrgId");
      const storedOrgDetails = getLocalStorageItem("activeOrgDetails");

      if (
        storedOrgId &&
        myOrgs.some((org) => org.organization_id === storedOrgId)
      ) {
        if (
          !activeOrganizationDetails ||
          activeOrganizationDetails.organization_id !== storedOrgId
        ) {
          setActiveOrganizationDetailsState(storedOrgDetails);
        }
      } else if (myOrgs.length > 0) {
        await setActiveOrganization(myOrgs[0].organization_id!, myOrgs[0]);
      } else {
        clearActiveEntities();
      }
    } catch (error) {
      toast.error("Could not load your organizations.");
      setUserOrganizations([]);
      clearActiveEntities();
    } finally {
      setIsLoadingUserOrgs(false);
      setIsOrgContextInitialized(true);
    }
  }, [
    session,
    setActiveOrganization,
    clearActiveEntities,
    activeOrganizationDetails,
    setActiveOrganizationDetailsState,
  ]);

  const fetchAgenciesForCurrentOrg = useCallback(async () => {
    if (!activeOrganizationId) return;
    setIsLoadingAgencies(true);
    try {
      const agencies = await organizationRepository.getAgencies(
        activeOrganizationId
      );
      setAgenciesForCurrentOrg(agencies || []);
    } catch (error) {
      toast.error("Could not load agencies for this organization.");
    } finally {
      setIsLoadingAgencies(false);
    }
  }, [activeOrganizationId]);

  const fetchAndSetAgencyDetails = useCallback(
    async (agencyId: string) => {
      if (!activeOrganizationId) return;
      setIsLoadingAgencyDetails(true);
      try {
        const details = await organizationRepository.getAgencyById(
          activeOrganizationId,
          agencyId
        );
        setActiveAgencyDetailsState(details);
      } catch (error) {
        toast.error("Failed to fetch agency details.");
      } finally {
        setIsLoadingAgencyDetails(false);
      }
    },
    [activeOrganizationId, setActiveAgencyDetailsState]
  );

  const setActiveAgency = useCallback(
    async (agencyId: string | null, agencyDetails?: AgencyDto) => {
      setActiveAgencyIdState(agencyId);
      if (agencyDetails && agencyId === agencyDetails.agency_id) {
        setActiveAgencyDetailsState(agencyDetails);
      } else if (agencyId) {
        await fetchAndSetAgencyDetails(agencyId);
      } else {
        setActiveAgencyDetailsState(null);
      }
    },
    [
      fetchAndSetAgencyDetails,
      setActiveAgencyIdState,
      setActiveAgencyDetailsState,
    ]
  );

  useEffect(() => {
    if (sessionStatus === "authenticated") {
      fetchUserOrganizationsList();
    } else if (sessionStatus === "unauthenticated") {
      clearActiveEntities();
      setIsLoadingUserOrgs(false);
      setIsOrgContextInitialized(true);
    }
  }, [sessionStatus, fetchUserOrganizationsList, clearActiveEntities]);

  useEffect(() => {
    if (activeOrganizationId) {
      fetchAgenciesForCurrentOrg();
    } else {
      setAgenciesForCurrentOrg([]);
    }
  }, [activeOrganizationId, fetchAgenciesForCurrentOrg]);

  const getLocalStorageItem = (key: string) => {
    if (typeof window === "undefined") return null;
    const item = localStorage.getItem(key);
    return item ? JSON.parse(item) : null;
  };

  return (
    <ActiveOrganizationContext.Provider
      value={{
        activeOrganizationId,
        activeOrganizationDetails,
        isLoadingOrgDetails,
        userOrganizations,
        isLoadingUserOrgs,
        isOrgContextInitialized,
        setActiveOrganization,
        fetchUserOrganizationsList,
        fetchAgenciesForCurrentOrg,
        fetchAndSetOrganizationDetails,
        activeAgencyId,
        activeAgencyDetails,
        isLoadingAgencyDetails,
        setActiveAgency,
        agenciesForCurrentOrg,
        isLoadingAgencies,
        clearActiveEntities,
        clearActiveAgency,
        clearActiveOrganization,
      }}
    >
      {children}
    </ActiveOrganizationContext.Provider>
  );
};

export const useActiveOrganization = (): ActiveOrganizationContextType => {
  const context = useContext(ActiveOrganizationContext);
  if (context === undefined) {
    throw new Error(
      "useActiveOrganization must be used within an ActiveOrganizationProvider"
    );
  }
  return context;
};
// END OF FILE: contexts/active-organization-context.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/contexts/settings-context.tsx

"use client";

import React, {
  createContext,
  useContext,
  useEffect,
  useState,
  useCallback,
  ReactNode,
} from "react";
import { useSession } from "next-auth/react";
import { UserDto, UserInfo } from "@/types/auth";
import {
  UserPreferencesDto,
  UserDisplayPreferences,
  UserNotificationPreferences,
  UserPrivacyPreferences,
  UpdateUserPreferencesRequest,
} from "@/types/user-preferences";
import { authRepository } from "@/lib/data-repo/auth";
import { userPreferencesRepository } from "@/lib/data-repo/user-preferences";
import { toast } from "sonner";

// Combined state that the UI will consume
export interface CombinedUserSettings
  extends Omit<UserDisplayPreferences, "profilePhotoUrl"> {
  userId?: string;
  username?: string;
  fullName: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  avatar: string;
  emailVerified?: boolean;
  phoneVerified?: boolean;
  notifications: UserNotificationPreferences;
  privacy: UserPrivacyPreferences;
}

const defaultDisplayPrefs: UserDisplayPreferences = {
  language: "en", currency: "usd", dateFormat: "mm-dd-yyyy", fontSize: 16,
  theme: "system", layout: "default", timezone: "utc-8", profilePhotoUrl: "",
};

const defaultCombinedSettings: CombinedUserSettings = {
  userId: undefined, username: "Guest", fullName: "Guest User", firstName: "Guest", lastName: "User",
  email: "", phone: "", avatar: defaultDisplayPrefs.profilePhotoUrl!, emailVerified: false, phoneVerified: false,
  ...defaultDisplayPrefs,
  notifications: { email: true, push: true, sms: false, accountActivity: true, newFeatures: true, marketing: false, frequency: "daily", quietHoursStart: "22:00", quietHoursEnd: "07:00" },
  privacy: { analyticsSharing: true, personalizedAds: false, visibility: "private", dataRetention: "1-year" },
};

interface SettingsContextType {
  settings: CombinedUserSettings;
  isLoadingSettings: boolean;
  fetchAndSetInitialSettings: () => Promise<void>;
  updateUserProfile: (profileData: Partial<Pick<UserDto, "first_name" | "last_name" | "phone_number">>) => Promise<void>;
  updateDisplayPreferences: (prefs: Partial<UserDisplayPreferences>) => Promise<void>;
  updateNotificationPreferences: (prefs: Partial<UserNotificationPreferences>) => Promise<void>;
  updatePrivacyPreferences: (prefs: Partial<UserPrivacyPreferences>) => Promise<void>;
}

const SettingsContext = createContext<SettingsContextType | undefined>(undefined);

export function SettingsProvider({ children }: { children: ReactNode }) {
  const { data: session, status: sessionStatus } = useSession();
  const [settings, setSettings] = useState<CombinedUserSettings>(defaultCombinedSettings);
  const [isLoadingSettings, setIsLoadingSettings] = useState<boolean>(true);

  const fetchAndSetInitialSettings = useCallback(async () => {
    if (sessionStatus === "authenticated" && session?.user?.id) {
      setIsLoadingSettings(true);
      try {
        const userFromSession = session.user;
        const profileData: UserInfo = { // Construct UserInfo from our detailed session user
          id: userFromSession.id,
          username: userFromSession.username,
          first_name: userFromSession.first_name,
          last_name: userFromSession.last_name,
          email: userFromSession?.email || '',
          phone_number: userFromSession.phone_number,
          email_verified: userFromSession.email_verified,
          phone_number_verified: userFromSession.phone_number_verified,
        };

        // This part remains the same, it fetches preferences based on user ID
        let prefsDto = await userPreferencesRepository.getUserPreferences(userFromSession.id);
        if (!prefsDto) {
          const defaultPrefsPayload: UpdateUserPreferencesRequest = { display: defaultDisplayPrefs, notifications: defaultCombinedSettings.notifications, privacy: defaultCombinedSettings.privacy };
          prefsDto = await userPreferencesRepository.updateUserPreferences(userFromSession.id, defaultPrefsPayload);
        }

        // Combine the detailed profile data from session with fetched preferences
        setSettings({
          userId: profileData.id,
          username: profileData.username || "",
          fullName: `${profileData.first_name || ""} ${profileData.last_name || ""}`.trim() || userFromSession.name || "User",
          firstName: profileData.first_name || "",
          lastName: profileData.last_name || "",
          email: profileData.email || "",
          phone: profileData.phone_number || "",
          avatar: prefsDto.display.profilePhotoUrl || userFromSession.image || defaultDisplayPrefs.profilePhotoUrl!,
          emailVerified: profileData.email_verified,
          phoneVerified: profileData.phone_number_verified,
          ...prefsDto.display,
          notifications: prefsDto.notifications,
          privacy: prefsDto.privacy,
        });

      } catch (error) {
        toast.error("Could not load your settings.");
      } finally {
        setIsLoadingSettings(false);
      }
    } else if (sessionStatus === "unauthenticated") {
      setSettings(defaultCombinedSettings);
      setIsLoadingSettings(false);
    }
  }, [session, sessionStatus]);

  useEffect(() => {
    fetchAndSetInitialSettings();
  }, [fetchAndSetInitialSettings]);

  // The update functions remain the same as they operate on the backend, not the session directly.
  const updateUserProfile = async (profileData: Partial<Pick<UserDto, "first_name" | "last_name" | "phone_number">>) => {
    // ... implementation unchanged
    toast.info("Profile update simulation...");
  };
  const updatePreferencesSegment = async <K extends keyof UpdateUserPreferencesRequest>(segmentName: K, prefsDataToUpdate: UpdateUserPreferencesRequest[K]) => {
    // ... implementation unchanged
    if (!session?.user?.id) return;
    toast.info(`${String(segmentName)} preferences update simulation...`);
  };
  const updateDisplayPreferences = (prefs: Partial<UserDisplayPreferences>) => updatePreferencesSegment("display", prefs);
  const updateNotificationPreferences = (prefs: Partial<UserNotificationPreferences>) => updatePreferencesSegment("notifications", prefs);
  const updatePrivacyPreferences = (prefs: Partial<UserPrivacyPreferences>) => updatePreferencesSegment("privacy", prefs);

  return (
    <SettingsContext.Provider value={{ settings, isLoadingSettings, fetchAndSetInitialSettings, updateUserProfile, updateDisplayPreferences, updateNotificationPreferences, updatePrivacyPreferences }}>
      {children}
    </SettingsContext.Provider>
  );
}

export function useSettings() {
  const context = useContext(SettingsContext);
  if (context === undefined) throw new Error("useSettings must be used within a SettingsProvider");
  return context;
}
// END OF FILE: contexts/settings-context.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/.env

NEXTAUTH_SECRET=i7Cuf9Io7Y6p0gmI1l6FdUo/WDfrqKCFAq+iWhR2Jo=
# .env.local
NEXTAUTH_URL=http://localhost:3000
NEXT_PUBLIC_URL=http://localhost:3000

# Base URLs for REMOTE Yowyob APIs
NEXT_PUBLIC_YOWYOB_AUTH_SERVICE_BASE_URL=https://gateway.yowyob.com/auth-service
NEXT_PUBLIC_YOWYOB_ORGANIZATION_SERVICE_BASE_URL=https://gateway.yowyob.com/organization-service

NEXT_PUBLIC_YOWYOB_RESOURCE_SERVICE_BASE_URL=https://gateway.yowyob.com/resource-service
NEXT_PUBLIC_YOWYOB_PRODUCT_STATE_SERVICE_BASE_URL=https://gateway.yowyob.com/product-management-service
NEXT_PUBLIC_YOWYOB_MEDIA_SERVICE_BASE_URL=https://gateway.yowyob.com/media-service

# Client Credentials for Yowyob Auth Service (used by remote auth repository)
# NEXT_PUBLIC_AUTH_SERVICE_CLIENT_ID=test-client
# NEXT_PUBLIC_AUTH_SERVICE_CLIENT_SECRET=secret
NEXT_PUBLIC_AUTH_SERVICE_BEARER_TOKEN="eyJkZXYucmV4aWppZS5zaWduaW5nLmtleSI6IjgwOTE3Y2VjMzI4MmIzN2MzMTNjN2YzOSIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2IiwianRpIjoiTVRjMU1UY3lOemN6TlRVMk1qb3lPRGd3TVRkallUUmgiLCJraWQiOiIzODdjOWEyOC0zODBlLTRmZWUtYTVjOC0wYTEwMzE2ZTAwNGYifQ.eyJzdWIiOiJ0ZXN0LWNsaWVudCIsImF1ZCI6InRlc3QtY2xpZW50IiwibmJmIjoxNzUxNzI3NzM1LCJhdXRoX3RpbWUiOjE3NTE3Mjc3MzUsImlzcyI6Imh0dHA6Ly9hdXRoLXNlcnZpY2U6ODA4MC9vcGVuaWQiLCJzY29wZXMiOlsid3JpdGUiLCJyZWFkIiwibWFuYWdlX2FwaSJdLCJleHAiOjE3NTE3Mjg2MzUsImlhdCI6MTc1MTcyNzczNSwianRpIjoiTVRjMU1UY3lOemN6TlRVMk1qb3lPRGd3TVRkallUUmgifQ.t1UiFj5AFn_DU-lKNHGe8GzXLNV58Qk3FQgDkj6aWMbB67CjVAAxYaWFsJlBoFrU5b_9MnfUN7ffLMdLzg2cDIHrJ-9WCA6RA0WSVoGX0Nd6DUgrAPHBdrhxf29lNgFr4HwsL0mqCpBDiDM_OcK92KAu7zkBnCoO9gDWJAuXxCUH7z20YPrKZKsEDRyA6Smv1Isl5fdluvt3rNq-oMv1_Wa2j_nag9qHtbc3QIX3J7-qMH08FPPZi-cEG1CjwXQbXERPI3JfRLfnS568dfEkaUtGHWI5tNYD2BNz4WmaRUyR7420rUvinOTPnO8xtlxwcwkOn7pSN10oiqo8xSti6w"


# Data Source Configuration
# 'local' = fetch JSON from /data/* and operate in memory
# 'remote' = use actual Yowyob APIs via apiClient.ts
NEXT_PUBLIC_DATA_SOURCE=local
# NEXT_PUBLIC_DATA_SOURCE=remote

NEXT_PUBLIC_API_BASE_URL=https://gateway.yowyob.com

# Yowyob Creation details
# curl -X 'POST' \
#   'https://gateway.yowyob.com/auth-service/api/register' \
#   -H 'accept: */*' \
#   -H 'Authorization: Bearer eyJkZXYucmV4aWppZS5zaWduaW5nLmtleSI6ImQ0OWNlYzcyNWI3OGU3YzNjY2EwMzE2ZSIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2IiwianRpIjoiTVRjMU1EZzVNalUyTURjM05UbzVPR0ZsTmpVNE1UbGkiLCJraWQiOiIzODdjOWEyOC0zODBlLTRmZWUtYTVjOC0wYTEwMzE2ZTAwNGYifQ.eyJzdWIiOiJ0ZXN0LWNsaWVudCIsImF1ZCI6InRlc3QtY2xpZW50IiwibmJmIjoxNzUwODkyNTYwLCJhdXRoX3RpbWUiOjE3NTA4OTI1NjAsImlzcyI6Imh0dHA6Ly9hdXRoLXNlcnZpY2U6ODA4MC9vcGVuaWQiLCJzY29wZXMiOlsicmVhZCIsIndyaXRlIiwibWFuYWdlX2FwaSJdLCJleHAiOjE3NTA4OTM0NjAsImlhdCI6MTc1MDg5MjU2MCwianRpIjoiTVRjMU1EZzVNalUyTURjM05UbzVPR0ZsTmpVNE1UbGkifQ.eiaUNs6pXUbNIwVDtR86JiQtuWWX8jxIj5HXbI_zNqwdTELdTF3diYbGVvMfiNvHiSSgLv27O-EtjqwSvJ85AZ9Y2ScuwyIDnpzse7BUAZo_zQIPkZWl-b1iJrIVIilGmqqKECXN-ZR81PnUY-DVAO3i4ykOzbjL9B7QnhNc9WKTkRy4O0m36PG78cWPHd8v6p9Iyy2JZHLs9kIBaHeUoQJ3ANnOGQZUJS7aVMgtrUMbs4sZ2qf5RhS0THewbdnX3Gi5LE8KTpUX-KhjeMB6yr7gsOxmLEzRHiQmrCLnLuNJf6crEQTqyaXxma1YbmYtN1Hn2V5D63u_mHg2mbD5zQ' \
#   -H 'Content-Type: application/json' \
#   -d '{
#   "username": "dashboard",
#   "email": "dashboard@gmail.com",
#   "password": "Password123@#",
#   "first_name": "Dash",
#   "last_name": "Board",
#   "phone_number": "+23678787878",
#   "authorities": []
# }'// END OF FILE: .env

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/.env.example

NEXTAUTH_SECRET=i7Cuf9Io7Y6p0gmI1l6FdUo/WDfrqKCFAq+iWhR2Jo=
# .env.local
NEXTAUTH_URL=http://localhost:3000
NEXT_PUBLIC_URL=http://localhost:3000

# Base URLs for REMOTE Yowyob APIs
NEXT_PUBLIC_YOWYOB_AUTH_SERVICE_BASE_URL=https://gateway.yowyob.com/auth-service
NEXT_PUBLIC_YOWYOB_ORGANIZATION_SERVICE_BASE_URL=https://gateway.yowyob.com/organization-service

NEXT_PUBLIC_YOWYOB_RESOURCE_SERVICE_BASE_URL=https://gateway.yowyob.com/resource-service
NEXT_PUBLIC_YOWYOB_PRODUCT_STATE_SERVICE_BASE_URL=https://gateway.yowyob.com/product-management-service
NEXT_PUBLIC_YOWYOB_MEDIA_SERVICE_BASE_URL=https://gateway.yowyob.com/media-service

# Client Credentials for Yowyob Auth Service (used by remote auth repository)
# NEXT_PUBLIC_AUTH_SERVICE_CLIENT_ID=test-client
# NEXT_PUBLIC_AUTH_SERVICE_CLIENT_SECRET=secret
NEXT_PUBLIC_AUTH_SERVICE_BEARER_TOKEN=


# Data Source Configuration
# 'local' = fetch JSON from /data/* and operate in memory
# 'remote' = use actual Yowyob APIs via apiClient.ts
NEXT_PUBLIC_DATA_SOURCE=local

NEXT_PUBLIC_API_BASE_URL=https://gateway.yowyob.com
// END OF FILE: .env.example

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/eslint.config.mjs

import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    rules: {
      "@typescript-eslint/no-unused-vars": "off",
      "@typescript-eslint/no-explicit-any": "off",
      "react/no-unescaped-entities": "off",
      "react/display-name": "off",
      "react-hooks/exhaustive-deps": "off"


    },
  },
];

export default eslintConfig;
// END OF FILE: eslint.config.mjs

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/.gitignore

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/
*.puml

# production
/build

!.env.example

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# Local JSON database files
lib/data-repo/local-store/json-data/// END OF FILE: .gitignore

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/hooks/use-command-palette.ts

import { useEffect, useState } from 'react';

export const useCommandPalette = () => {
  const [isOpen, setIsOpen] = useState(false);

  useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        setIsOpen((open) => !open);
      }
    };

    document.addEventListener('keydown', down);
    return () => document.removeEventListener('keydown', down);
  }, []);

  return { isOpen, setIsOpen };
};// END OF FILE: hooks/use-command-palette.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/hooks/use-debounce.ts

import { useState, useEffect } from 'react';

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}// END OF FILE: hooks/use-debounce.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/hooks/use-local-storage.ts

import { useState, useEffect } from 'react';

function getStorageValue<T>(key: string, defaultValue: T): T {
  // getting stored value
  if (typeof window !== 'undefined') {
    const saved = localStorage.getItem(key);
    if (saved) {
      try {
        return JSON.parse(saved);
      } catch (error) {
        console.error("Error parsing localStorage key:", key, error);
        return defaultValue;
      }
    }
  }
  return defaultValue;
}

export function useLocalStorage<T>(key: string, defaultValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {
  const [value, setValue] = useState<T>(() => {
    return getStorageValue(key, defaultValue);
  });

  useEffect(() => {
    // storing value
    localStorage.setItem(key, JSON.stringify(value));
  }, [key, value]);

  return [value, setValue];
}// END OF FILE: hooks/use-local-storage.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/hooks/use-mouse-position.ts

// hooks/use-mouse-position.ts
import { useState, useEffect } from 'react';

export function useMousePosition() {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

  useEffect(() => {
    const updateMousePosition = (ev: MouseEvent) => {
      setMousePosition({ x: ev.clientX, y: ev.clientY });
    };
    window.addEventListener('mousemove', updateMousePosition);
    return () => {
      window.removeEventListener('mousemove', updateMousePosition);
    };
  }, []);

  return mousePosition;
}// END OF FILE: hooks/use-mouse-position.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/apiClient.ts

import { getSession } from "next-auth/react";

import {
  AuthRequest, CreateUserRequest, LoginResponse, UserDto, UserInfo,
  RoleDto, CreateRoleRequest, UpdateRoleRequest,
  PermissionDto, CreatePermissionRequest, UpdatePermissionRequest,
  RolePermissionDto, RbacResource, ApiResponseBoolean
} from "@/types/auth";
import {
  CreateOrganizationRequest, UpdateOrganizationRequest, UpdateOrganizationStatusRequest,
  AddressDto, ContactDto, CreateAddressRequest, UpdateAddressRequest, ContactableType, AddressableType, CreateContactRequest, UpdateContactRequest, BusinessDomainDto, GetBusinessDomainRequest,
  AffectEmployeeRequest,
  AgencyDto,
  ApplicationDto,
  ApplicationKeyDto,
  BusinessActorDto,
  BusinessActorType,
  CertificationDto,
  CreateAgencyRequest,
  CreateApplicationRequest,
  CreateBusinessActorRequest,
  CreateBusinessDomainRequest,
  CreateCertificationRequest,
  CreateEmployeeRequest,
  CreatePracticalInformationRequest,
  CreateProviderRequest,
  EmployeeDto,
  ImageDto,
  PracticalInformationDto,
  ProviderDto,
  UpdateAgencyRequest,
  UpdateAgencyStatusRequest,
  UpdateBusinessActorRequest,
  UpdateBusinessDomainRequest,
  UpdateCertificationRequest,
  UpdateEmployeeRequest,
  UpdatePracticalInformationRequest,
  EmployeeResponse,
  AffectCustomerRequest,
  AffectProviderRequest,
  CreateCustomerRequest,
  CreateProposedActivityRequest,
  CreateProspectRequest,
  CreateSalesPersonRequest,
  CreateThirdPartyRequest,
  CustomerDto,
  GetThirdPartyRequest,
  ProposedActivityDto,
  ProspectDto,
  SalesPersonDto,
  ThirdPartyDto,
  ThirdPartyType,
  UpdateCustomerRequest,
  UpdateProposedActivityRequest,
  UpdateProspectRequest,
  UpdateProviderRequest,
  UpdateSalesPersonRequest,
  UpdateThirdPartyRequest,
  UpdateThirdPartyStatusRequest,
  OrganizationDto
} from "@/types/organization";
import { MediaDto, MediaType, ServiceType, UploadMediaResponse, UploadRequest } from "@/types/media";


interface ApiErrorResponse {
  timestamp?: string; status?: number; error?: string; message?: string; path?: string; errors?: Record<string, string>;
}

const YOWYOB_AUTH_API_BASE_URL = process.env.NEXT_PUBLIC_YOWYOB_AUTH_SERVICE_BASE_URL;
const YOWYOB_ORGANIZATION_API_BASE_URL = process.env.NEXT_PUBLIC_YOWYOB_ORGANIZATION_SERVICE_BASE_URL;
const CLIENT_BASIC_AUTH_TOKEN = process.env.NEXT_PUBLIC_AUTH_SERVICE_BEARER_TOKEN;
const YOWYOB_MEDIA_API_BASE_URL = process.env.NEXT_PUBLIC_YOWYOB_MEDIA_SERVICE_BASE_URL; // Add media service URLconst YOWYOB_MEDIA_API_BASE_URL = process.env.NEXT_PUBLIC_YOWYOB_MEDIA_SERVICE_BASE_URL; // Add media service URL

const PROXY_PATH = "/api/proxy"; // All requests go through here

interface YowyobRequestOptions extends RequestInit {
  isFormData?: boolean;
  useClientBasicAuth?: boolean;
}



export async function yowyobApiRequest<T = any>(
  serviceBaseUrl: string | undefined,
  endpoint: string,
  options: YowyobRequestOptions = {},
  isUserAuthAction: boolean = false
): Promise<T> {
  if (!serviceBaseUrl) {
    console.error("Service base URL is not configured for remote API call. Endpoint:", endpoint);
    throw new Error("Service base URL is not configured.");
  }

  const targetUrl = `${serviceBaseUrl}${endpoint}`;

  const headers: HeadersInit = {
    ...(options.isFormData ? {} : { "Content-Type": "application/json" }),
    ...options.headers,
    'X-Target-URL': targetUrl,
  };

  const session = await getSession();
  if (session?.user?.accessToken) {
    // If a user is logged in, use their personal token
    (headers as Record<string, string>)['Authorization'] = `Bearer ${session.user.accessToken}`;
  } else if (CLIENT_BASIC_AUTH_TOKEN) {
    // Otherwise, use the system-level token (for login, register, etc.)
    (headers as Record<string, string>)["Authorization"] = `Bearer ${CLIENT_BASIC_AUTH_TOKEN}`;
  }

  // THE FIX: The URL for the fetch call must match the dynamic route pattern.
  // We append a generic slug that doesn't affect logic but satisfies routing.
  const fullUrl = `${process.env.NEXT_PUBLIC_URL}${PROXY_PATH}/request`;
  const config: RequestInit = { ...options, headers };

  try {
    const response = await fetch(fullUrl, config);
    if (!response.ok) {
      let errorData: ApiErrorResponse | null = null;
      let errorMessage = `Request failed: ${response.status} ${response.statusText}`;
      try {
        errorData = await response.json();
        errorMessage = errorData?.message || errorMessage;
        if (errorData?.errors) errorMessage += ` (${Object.values(errorData.errors).join(', ')})`;
      } catch (e) { }
      console.error(`YOWYOB API Error (via proxy): ${errorMessage} for ${targetUrl}`, { data: errorData, options: config });
      if (!(isUserAuthAction && (response.status === 401 || response.status === 403))) {
      }
      const error = new Error(errorMessage) as Error & { status?: number; data?: any };
      error.status = response.status; error.data = errorData;
      throw error;
    }
    if (response.status === 204 || response.headers.get("content-length") === "0") return null as T;
    return (await response.json()) as T;
  } catch (error) {
    if (!error.status && !(error instanceof SyntaxError)) {
      console.error("Network or unhandled Yowyob API error:", error);
      if (!isUserAuthAction) {
      }
    }
    throw error;
  }
}

// NEW: Media Service API object
export const yowyobMediaApi = {
  uploadFile: (
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string | null,
    file: File,
    uploadRequest?: UploadRequest
  ) => {
    const formData = new FormData();
    formData.append("file", file);
    if (uploadRequest) {
      formData.append("request", new Blob([JSON.stringify(uploadRequest)], { type: "application/json" }));
    }

    const endpoint = resourceId
      ? `/media/${service}/${type}/${path}/${resourceId}`
      : `/media/${service}/${type}/${path}`;

    return yowyobApiRequest<UploadMediaResponse>(YOWYOB_MEDIA_API_BASE_URL, endpoint, {
      method: "POST",
      body: formData,
      isFormData: true, // This is the key change for multipart requests
    });
  },

  updateFile: (
    service: ServiceType,
    type: MediaType,
    path: string,
    filename: string,
    file: File,
    uploadRequest?: UploadRequest
  ) => {
    const formData = new FormData();
    formData.append("file", file);
    if (uploadRequest) {
      formData.append("request", new Blob([JSON.stringify(uploadRequest)], { type: "application/json" }));
    }
    const endpoint = `/media/${service}/${type}/${path}/${filename}`;
    return yowyobApiRequest<UploadMediaResponse>(YOWYOB_MEDIA_API_BASE_URL, endpoint, {
      method: "PUT",
      body: formData,
      isFormData: true,
    });
  },

  deleteFile: (
    service: ServiceType,
    type: MediaType,
    path: string,
    filename: string
  ) => {
    const endpoint = `/media/${service}/${type}/${path}/${filename}`;
    return yowyobApiRequest<boolean>(YOWYOB_MEDIA_API_BASE_URL, endpoint, {
      method: "DELETE",
    });
  },

  getMediaForResource: (
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string
  ) => {
    const endpoint = `/media/infos/${service}/${type}/${path}/${resourceId}`;
    return yowyobApiRequest<MediaDto[]>(YOWYOB_MEDIA_API_BASE_URL, endpoint, { method: "GET" });
  },
};


export const yowyobAuthApi = {
  register: (data: CreateUserRequest) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, "/api/register", { method: "POST", body: JSON.stringify(data), useClientBasicAuth: true }, true),
  getAllUsers: () => yowyobApiRequest<UserDto[]>(YOWYOB_AUTH_API_BASE_URL, "/api/users", { method: "GET" }),
  getUserByUsername: (username: string) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, `/api/user/username/${username}`, { method: "GET" }),
  getUserByPhoneNumber: (phoneNumber: string) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, `/api/user/phone-number/${phoneNumber}`, { method: "GET" }),
  getUserByEmail: (email: string) => yowyobApiRequest<UserDto>(YOWYOB_AUTH_API_BASE_URL, `/api/user/email/${email}`, { method: "GET" }),
  login: (data: AuthRequest) => yowyobApiRequest<LoginResponse>(YOWYOB_AUTH_API_BASE_URL, "/api/login", { method: "POST", body: JSON.stringify(data), useClientBasicAuth: false }, true),
  getCurrentUser: () => yowyobApiRequest<UserInfo>(YOWYOB_AUTH_API_BASE_URL, "/api/user", { method: "GET" }),
  getRoles: () => yowyobApiRequest<RoleDto[]>(YOWYOB_AUTH_API_BASE_URL, "/api/roles", { method: "GET" }),
  createRole: (data: CreateRoleRequest) => yowyobApiRequest<RoleDto>(YOWYOB_AUTH_API_BASE_URL, "/api/roles", { method: "POST", body: JSON.stringify(data) }),
  updateRole: (roleId: string, data: UpdateRoleRequest) => yowyobApiRequest<RoleDto>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteRole: (roleId: string) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}`, { method: "DELETE" }),
  getAllPermissions: () => yowyobApiRequest<PermissionDto[]>(YOWYOB_AUTH_API_BASE_URL, "/api/permissions", { method: "GET" }),
  getPermissionById: (permissionId: string) => yowyobApiRequest<PermissionDto>(YOWYOB_AUTH_API_BASE_URL, `/api/permissions/${permissionId}`, { method: "GET" }),
  createPermission: (data: CreatePermissionRequest) => yowyobApiRequest<PermissionDto>(YOWYOB_AUTH_API_BASE_URL, "/api/permissions", { method: "POST", body: JSON.stringify(data) }),
  updatePermission: (permissionId: string, data: UpdatePermissionRequest) => yowyobApiRequest<PermissionDto>(YOWYOB_AUTH_API_BASE_URL, `/api/permissions/${permissionId}`, { method: "PUT", body: JSON.stringify(data) }),
  deletePermission: (permissionId: string) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/permissions/${permissionId}`, { method: "DELETE" }),
  assignPermissionsToRole: (roleId: string, permissionIds: string[]) => yowyobApiRequest<RolePermissionDto[]>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions`, { method: "POST", body: JSON.stringify(permissionIds) }),
  removePermissionsFromRole: (roleId: string, permissionIds: string[]) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions`, { method: "DELETE", body: JSON.stringify(permissionIds) }),
  assignPermissionToRole: (roleId: string, permissionId: string) => yowyobApiRequest<RolePermissionDto>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions/${permissionId}`, { method: "POST" }),
  removePermissionFromRole: (roleId: string, permissionId: string) => yowyobApiRequest<void>(YOWYOB_AUTH_API_BASE_URL, `/api/roles/${roleId}/permissions/${permissionId}`, { method: "DELETE" }),
  createRbacResource: (data: RbacResource) => yowyobApiRequest<ApiResponseBoolean>(YOWYOB_AUTH_API_BASE_URL, "/api/resources/save", { method: "POST", body: JSON.stringify(data) }),
  getRolesHierarchy: () => yowyobApiRequest<string>(YOWYOB_AUTH_API_BASE_URL, "/api/roles/hierarchy", { method: "GET" }),
};

export const yowyobOrganizationApi = {
  getMyOrganizations: () => yowyobApiRequest<OrganizationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/organizations/user"),
  getAllOrganizations: () => yowyobApiRequest<OrganizationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/organizations"),
  getOrganizationsByDomain: (domainId: string) => yowyobApiRequest<OrganizationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/domains/${domainId}`),

  getOrganizationById: (orgId: string) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}`),
  createOrganization: (data: CreateOrganizationRequest) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, "/organizations", { method: "POST", body: JSON.stringify(data) }),
  updateOrganization: (orgId: string, data: UpdateOrganizationRequest) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteOrganization: (orgId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}`, { method: "DELETE" }),
  updateOrganizationStatus: (orgId: string, data: UpdateOrganizationStatusRequest) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/status`, { method: "PUT", body: JSON.stringify(data) }),
  addBusinessDomainToOrg: (orgId: string, businessDomainId: string) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/domains/${businessDomainId}`, { method: "PUT" }),
  removeBusinessDomainFromOrg: (orgId: string, businessDomainId: string) => yowyobApiRequest<OrganizationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/domains/${businessDomainId}`, { method: "DELETE" }),
  getContacts: (contactableType: ContactableType, contactableId: string) => yowyobApiRequest<ContactDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts`),
  getContactById: (contactableType: ContactableType, contactableId: string, contactId: string) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}`),
  createContact: (contactableType: ContactableType, contactableId: string, data: CreateContactRequest) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts`, { method: "POST", body: JSON.stringify(data) }),
  updateContact: (contactableType: ContactableType, contactableId: string, contactId: string, data: UpdateContactRequest) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteContactById: (contactableType: ContactableType, contactableId: string, contactId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}`, { method: "DELETE" }),
  markContactAsFavorite: (contactableType: ContactableType, contactableId: string, contactId: string) => yowyobApiRequest<ContactDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${contactableType}/${contactableId}/contacts/${contactId}/favorite`, { method: "GET" }),
  getAddresses: (addressableType: AddressableType, addressableId: string) => yowyobApiRequest<AddressDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses`),
  getAddressById: (addressableType: AddressableType, addressableId: string, addressId: string) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}`),
  createAddress: (addressableType: AddressableType, addressableId: string, data: CreateAddressRequest) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses`, { method: "POST", body: JSON.stringify(data) }),
  updateAddress: (addressableType: AddressableType, addressableId: string, addressId: string, data: UpdateAddressRequest) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteAddressById: (addressableType: AddressableType, addressableId: string, addressId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}`, { method: "DELETE" }),
  markAddressAsFavorite: (addressableType: AddressableType, addressableId: string, addressId: string) => yowyobApiRequest<AddressDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/${addressableType}/${addressableId}/addresses/${addressId}/favorite`, { method: "GET" }),
  getPracticalInformation: (orgId: string, params?: { organizationId: string }) => yowyobApiRequest<PracticalInformationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos${params ? '?' + new URLSearchParams(params).toString() : ''}`),
  createPracticalInformation: (orgId: string, data: CreatePracticalInformationRequest) => yowyobApiRequest<PracticalInformationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos`, { method: "POST", body: JSON.stringify(data) }),
  getPracticalInformationById: (orgId: string, infoId: string) => yowyobApiRequest<PracticalInformationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos/${infoId}`),
  updatePracticalInformation: (orgId: string, infoId: string, data: UpdatePracticalInformationRequest) => yowyobApiRequest<PracticalInformationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos/${infoId}`, { method: "PUT", body: JSON.stringify(data) }),
  deletePracticalInformation: (orgId: string, infoId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/practical-infos/${infoId}`, { method: "DELETE" }),
  getCertifications: (orgId: string) => yowyobApiRequest<CertificationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications`),
  createCertification: (orgId: string, data: CreateCertificationRequest) => yowyobApiRequest<CertificationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications`, { method: "POST", body: JSON.stringify(data) }),
  getCertificationById: (orgId: string, certId: string) => yowyobApiRequest<CertificationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications/${certId}`),
  updateCertification: (orgId: string, certId: string, data: UpdateCertificationRequest) => yowyobApiRequest<CertificationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications/${certId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteCertification: (orgId: string, certId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/certifications/${certId}`, { method: "DELETE" }),
  getAllBusinessDomains: (params?: GetBusinessDomainRequest) => {
    const queryParams = params ? `?${new URLSearchParams(Object.entries(params).filter(([, v]) => v != null) as [string, string][]).toString()}` : "";
    return yowyobApiRequest<BusinessDomainDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains${queryParams}`);
  },
  getBusinessDomainById: (domainId: string) => yowyobApiRequest<BusinessDomainDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains/${domainId}`),
  createBusinessDomain: (data: CreateBusinessDomainRequest) => yowyobApiRequest<BusinessDomainDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains`, { method: "POST", body: JSON.stringify(data) }),
  updateBusinessDomain: (domainId: string, data: UpdateBusinessDomainRequest) => yowyobApiRequest<BusinessDomainDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains/${domainId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteBusinessDomain: (domainId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-domains/${domainId}`, { method: "DELETE" }),
  getAgencies: (orgId: string, active?: boolean) => {
    let endpoint = `/organizations/${orgId}/agencies`;
    if (active !== undefined) endpoint += `?active=${active}`;
    return yowyobApiRequest<AgencyDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, endpoint);
  },
  createAgency: (orgId: string, data: CreateAgencyRequest) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies`, { method: "POST", body: JSON.stringify(data) }),
  getAgencyById: (orgId: string, agencyId: string) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}`),
  updateAgency: (orgId: string, agencyId: string, data: UpdateAgencyRequest) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteAgency: (orgId: string, agencyId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}`, { method: "DELETE" }),
  updateAgencyStatus: (orgId: string, agencyId: string, data: UpdateAgencyStatusRequest) => yowyobApiRequest<AgencyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/status`, { method: "PUT", body: JSON.stringify(data) }),
  getOrgEmployees: (orgId: string) => yowyobApiRequest<EmployeeDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees`),
  createOrgEmployee: (orgId: string, data: CreateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees`, { method: "POST", body: JSON.stringify(data) }),
  getOrgEmployeeById: (orgId: string, employeeId: string) => yowyobApiRequest<EmployeeDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees/${employeeId}`),
  updateOrgEmployee: (orgId: string, employeeId: string, data: UpdateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees/${employeeId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteOrgEmployee: (orgId: string, employeeId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/employees/${employeeId}`, { method: "DELETE" }),
  getAgencyEmployees: (orgId: string, agencyId: string) => yowyobApiRequest<EmployeeDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees`),
  createAgencyEmployee: (orgId: string, agencyId: string, data: CreateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees`, { method: "POST", body: JSON.stringify(data) }),
  getAgencyEmployeeById: (orgId: string, agencyId: string, employeeId: string) => yowyobApiRequest<EmployeeDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/${employeeId}`),
  updateAgencyEmployee: (orgId: string, agencyId: string, employeeId: string, data: UpdateEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/${employeeId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteAgencyEmployee: (orgId: string, agencyId: string, employeeId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/${employeeId}`, { method: "DELETE" }),
  affectEmployeeToAgency: (orgId: string, agencyId: string, data: AffectEmployeeRequest) => yowyobApiRequest<EmployeeResponse>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/employees/add`, { method: "POST", body: JSON.stringify(data) }),
  getOrgSalesPersons: (orgId: string) => yowyobApiRequest<SalesPersonDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people`),
  createOrgSalesPerson: (orgId: string, data: CreateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people`, { method: "POST", body: JSON.stringify(data) }),
  getOrgSalesPersonById: (orgId: string, salesPersonId: string) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people/${salesPersonId}`),
  updateOrgSalesPerson: (orgId: string, salesPersonId: string, data: UpdateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people/${salesPersonId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteOrgSalesPerson: (orgId: string, salesPersonId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/sales-people/${salesPersonId}`, { method: "DELETE" }),
  getAgencySalesPersons: (orgId: string, agencyId: string) => yowyobApiRequest<SalesPersonDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people`),
  createAgencySalesPerson: (orgId: string, agencyId: string, data: CreateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people`, { method: "POST", body: JSON.stringify(data) }),
  getAgencySalesPersonById: (orgId: string, agencyId: string, salesPersonId: string) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`),
  updateAgencySalesPerson: (orgId: string, agencyId: string, salesPersonId: string, data: UpdateSalesPersonRequest) => yowyobApiRequest<SalesPersonDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteAgencySalesPerson: (orgId: string, agencyId: string, salesPersonId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`, { method: "DELETE" }),
  getOrgCustomers: (orgId: string) => yowyobApiRequest<CustomerDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers`),
  createOrgCustomer: (orgId: string, data: CreateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers`, { method: "POST", body: JSON.stringify(data) }),
  getOrgCustomerById: (orgId: string, customerId: string) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers/${customerId}`),
  updateOrgCustomer: (orgId: string, customerId: string, data: UpdateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers/${customerId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteOrgCustomer: (orgId: string, customerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/customers/${customerId}`, { method: "DELETE" }),
  getAgencyCustomers: (orgId: string, agencyId: string) => yowyobApiRequest<CustomerDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers`),
  createAgencyCustomer: (orgId: string, agencyId: string, data: CreateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers`, { method: "POST", body: JSON.stringify(data) }),
  getAgencyCustomerById: (orgId: string, agencyId: string, customerId: string) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/${customerId}`),
  updateAgencyCustomer: (orgId: string, agencyId: string, customerId: string, data: UpdateCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/${customerId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteAgencyCustomer: (orgId: string, agencyId: string, customerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/${customerId}`, { method: "DELETE" }),
  affectCustomerToAgency: (orgId: string, agencyId: string, data: AffectCustomerRequest) => yowyobApiRequest<CustomerDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/customers/add`, { method: "POST", body: JSON.stringify(data) }),
  getOrgSuppliers: (orgId: string) => yowyobApiRequest<ProviderDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers`),
  createOrgSupplier: (orgId: string, data: CreateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers`, { method: "POST", body: JSON.stringify(data) }),
  getOrgSupplierById: (orgId: string, providerId: string) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers/${providerId}`),
  updateOrgSupplier: (orgId: string, providerId: string, data: UpdateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers/${providerId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteOrgSupplier: (orgId: string, providerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/suppliers/${providerId}`, { method: "DELETE" }),
  getAgencySuppliers: (orgId: string, agencyId: string) => yowyobApiRequest<ProviderDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers`),
  createAgencySupplier: (orgId: string, agencyId: string, data: CreateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers`, { method: "POST", body: JSON.stringify(data) }),
  getAgencySupplierById: (orgId: string, agencyId: string, providerId: string) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/${providerId}`),
  updateAgencySupplier: (orgId: string, agencyId: string, providerId: string, data: UpdateProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/${providerId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteAgencySupplier: (orgId: string, agencyId: string, providerId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/${providerId}`, { method: "DELETE" }),
  affectSupplierToAgency: (orgId: string, agencyId: string, data: AffectProviderRequest) => yowyobApiRequest<ProviderDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/suppliers/add`, { method: "POST", body: JSON.stringify(data) }),
  getOrgProspects: (orgId: string) => yowyobApiRequest<ProspectDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects`),
  createOrgProspect: (orgId: string, data: CreateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects`, { method: "POST", body: JSON.stringify(data) }),
  getOrgProspectById: (orgId: string, prospectId: string) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects/${prospectId}`),
  updateOrgProspect: (orgId: string, prospectId: string, data: UpdateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects/${prospectId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteOrgProspect: (orgId: string, prospectId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/prospects/${prospectId}`, { method: "DELETE" }),
  getAgencyProspects: (orgId: string, agencyId: string) => yowyobApiRequest<ProspectDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects`),
  createAgencyProspect: (orgId: string, agencyId: string, data: CreateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects`, { method: "POST", body: JSON.stringify(data) }),
  getAgencyProspectById: (orgId: string, agencyId: string, prospectId: string) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects/${prospectId}`),
  updateAgencyProspect: (orgId: string, agencyId: string, prospectId: string, data: UpdateProspectRequest) => yowyobApiRequest<ProspectDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects/${prospectId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteAgencyProspect: (orgId: string, agencyId: string, prospectId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/agencies/${agencyId}/prospects/${prospectId}`, { method: "DELETE" }),
  getAllBusinessActors: () => yowyobApiRequest<BusinessActorDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/business-actors"),
  createBusinessActor: (data: CreateBusinessActorRequest) => yowyobApiRequest<BusinessActorDto>(YOWYOB_ORGANIZATION_API_BASE_URL, "/business-actors", { method: "POST", body: JSON.stringify(data) }),
  getBusinessActorById: (baId: string) => yowyobApiRequest<BusinessActorDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/${baId}`),
  updateBusinessActor: (baId: string, data: UpdateBusinessActorRequest) => yowyobApiRequest<BusinessActorDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/${baId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteBusinessActor: (baId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/${baId}`, { method: "DELETE" }),
  getBusinessActorsByType: (type: BusinessActorType) => yowyobApiRequest<BusinessActorDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/business-actors/types/${type}`),
  uploadOrganizationImages: (orgId: string, formData: FormData) => yowyobApiRequest<ImageDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/images/${orgId}/add`, { method: "PUT", body: formData, isFormData: true }),
  getOrganizationImageInfo: (imageId: string) => yowyobApiRequest<ImageDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/images/${imageId}`),
  getThirdParties: (orgId: string, params: GetThirdPartyRequest) => yowyobApiRequest<ThirdPartyDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties?${new URLSearchParams(params as Record<string, string>).toString()}`),
  createThirdParty: (orgId: string, type: ThirdPartyType, data: CreateThirdPartyRequest) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${type}`, { method: "POST", body: JSON.stringify(data) }),
  getThirdPartyById: (orgId: string, thirdPartyId: string) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}`),
  updateThirdParty: (orgId: string, thirdPartyId: string, data: UpdateThirdPartyRequest) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteThirdParty: (orgId: string, thirdPartyId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}`, { method: "DELETE" }),
  updateThirdPartyStatus: (orgId: string, thirdPartyId: string, data: UpdateThirdPartyStatusRequest) => yowyobApiRequest<ThirdPartyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/third-parties/${thirdPartyId}/status`, { method: "PUT", body: JSON.stringify(data) }),
  getProposedActivities: (orgId: string, params: { organizationId: string }) => yowyobApiRequest<ProposedActivityDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities?${new URLSearchParams(params).toString()}`),
  createProposedActivity: (orgId: string, data: CreateProposedActivityRequest) => yowyobApiRequest<ProposedActivityDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities`, { method: "POST", body: JSON.stringify(data) }),
  getProposedActivityById: (orgId: string, activityId: string) => yowyobApiRequest<ProposedActivityDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities/${activityId}`),
  updateProposedActivity: (orgId: string, activityId: string, data: UpdateProposedActivityRequest) => yowyobApiRequest<ProposedActivityDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities/${activityId}`, { method: "PUT", body: JSON.stringify(data) }),
  deleteProposedActivity: (orgId: string, activityId: string) => yowyobApiRequest<void>(YOWYOB_ORGANIZATION_API_BASE_URL, `/organizations/${orgId}/proposed-activities/${activityId}`, { method: "DELETE" }),
  getAllApplications: () => yowyobApiRequest<ApplicationDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, "/applications"),
  createApplication: (data: CreateApplicationRequest) => yowyobApiRequest<ApplicationDto>(YOWYOB_ORGANIZATION_API_BASE_URL, "/applications", { method: "POST", body: JSON.stringify(data) }),
  getApplicationKeys: (applicationId: string) => yowyobApiRequest<ApplicationKeyDto[]>(YOWYOB_ORGANIZATION_API_BASE_URL, `/applications/${applicationId}/keys`),
  createApiKey: (applicationId: string) => yowyobApiRequest<ApplicationKeyDto>(YOWYOB_ORGANIZATION_API_BASE_URL, `/applications/${applicationId}/keys/create`, { method: "POST" }),
};// END OF FILE: lib/apiClient.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/auth/auth-local-repository.ts

// lib/data-repo/auth/auth-local-repository.ts
import { IAuthRepository } from './auth-repository-interface';
import {
  AuthRequest, CreateUserRequest, LoginResponse, UserDto, UserInfo,
  RoleDto, CreateRoleRequest, UpdateRoleRequest,
  PermissionDto, CreatePermissionRequest, UpdatePermissionRequest,
  RolePermissionDto, RbacResource, ApiResponseBoolean
} from '@/types/auth';
import { toast } from 'sonner';

const APP_URL = typeof window !== 'undefined' ? window.location.origin : (process.env.NEXTAUTH_URL || process.env.VERCEL_URL || 'http://localhost:3000');
const MOCK_API_AUTH_BASE = `${APP_URL}/api/mock/auth`;

export class AuthLocalRepository implements IAuthRepository {
  private async fetchMockApi<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const response = await fetch(`${MOCK_API_AUTH_BASE}${endpoint}`, {
      ...options,
      headers: { 'Content-Type': 'application/json', ...options.headers },
    });
    const responseContentType = response.headers.get("content-type");
    let responseData;
    if (responseContentType && responseContentType.includes("application/json")) {
      responseData = await response.json();
    } else if (response.status !== 204) {
      responseData = { message: await response.text() || response.statusText };
    }
    if (!response.ok) {
      const errorPayload = responseData || { message: `Request to ${endpoint} failed` };
      console.error(`[AuthLocalRepo] Mock API Error: ${response.status}`, errorPayload);
      // toast.error(errorPayload.message || `Mock API request failed: ${response.status}`);
      throw { status: response.status, message: errorPayload.message, data: errorPayload };
    }
    return responseData as T;
  }

  // User Management
  async register(data: CreateUserRequest): Promise<UserDto> {
    return this.fetchMockApi<UserDto>("/register", { method: "POST", body: JSON.stringify(data) });
  }
  async getAllUsers(): Promise<UserDto[]> {
    return this.fetchMockApi<UserDto[]>("/users", { method: "GET" });
  }
  async getUserByUsername(username: string): Promise<UserDto | null> {
    return this.fetchMockApi<UserDto | null>(`/users/username/${username}`, { method: "GET" });
  }
  async getUserByPhoneNumber(phoneNumber: string): Promise<UserDto | null> {
    return this.fetchMockApi<UserDto | null>(`/users/phone/${phoneNumber}`, { method: "GET" });
  }
  async getUserByEmail(email: string): Promise<UserDto | null> {
    return this.fetchMockApi<UserDto | null>(`/users/email/${email}`, { method: "GET" });
  }

  // Login & Session
  async login(data: AuthRequest): Promise<LoginResponse> {
    return this.fetchMockApi<LoginResponse>("/login", { method: "POST", body: JSON.stringify(data) });
  }
  async getCurrentUser(): Promise<UserInfo | null> {
    return this.fetchMockApi<UserInfo | null>("/user", { method: "GET" });
  }

  // Role Management
  async getRoles(): Promise<RoleDto[]> {
    return this.fetchMockApi<RoleDto[]>("/roles", { method: "GET" });
  }
  async createRole(data: CreateRoleRequest): Promise<RoleDto> {
    return this.fetchMockApi<RoleDto>("/roles", { method: "POST", body: JSON.stringify(data) });
  }
  async updateRole(roleId: string, data: UpdateRoleRequest): Promise<RoleDto> {
    return this.fetchMockApi<RoleDto>(`/roles/${roleId}`, { method: "PUT", body: JSON.stringify(data) });
  }
  async deleteRole(roleId: string): Promise<void> {
    return this.fetchMockApi<void>(`/roles/${roleId}`, { method: "DELETE" });
  }

  // Permission Management
  async getAllPermissions(): Promise<PermissionDto[]> {
    return this.fetchMockApi<PermissionDto[]>("/permissions", { method: "GET" });
  }
  async getPermissionById(permissionId: string): Promise<PermissionDto | null> {
    return this.fetchMockApi<PermissionDto | null>(`/permissions/${permissionId}`, { method: "GET" });
  }
  async createPermission(data: CreatePermissionRequest): Promise<PermissionDto> {
    return this.fetchMockApi<PermissionDto>("/permissions", { method: "POST", body: JSON.stringify(data) });
  }
  async updatePermission(permissionId: string, data: UpdatePermissionRequest): Promise<PermissionDto> {
    return this.fetchMockApi<PermissionDto>(`/permissions/${permissionId}`, { method: "PUT", body: JSON.stringify(data) });
  }
  async deletePermission(permissionId: string): Promise<void> {
    return this.fetchMockApi<void>(`/permissions/${permissionId}`, { method: "DELETE" });
  }

  // Role-Permission Assignments
  async assignPermissionsToRole(roleId: string, permissionIds: string[]): Promise<RolePermissionDto[]> {
    return this.fetchMockApi<RolePermissionDto[]>(`/roles/${roleId}/permissions`, { method: "POST", body: JSON.stringify(permissionIds) });
  }
  async removePermissionsFromRole(roleId: string, permissionIds: string[]): Promise<void> {
    return this.fetchMockApi<void>(`/roles/${roleId}/permissions`, { method: "DELETE", body: JSON.stringify(permissionIds) });
  }
  async assignPermissionToRole(roleId: string, permissionId: string): Promise<RolePermissionDto> {
    return this.fetchMockApi<RolePermissionDto>(`/roles/${roleId}/permissions/${permissionId}`, { method: "POST" });
  }
  async removePermissionFromRole(roleId: string, permissionId: string): Promise<void> {
    return this.fetchMockApi<void>(`/roles/${roleId}/permissions/${permissionId}`, { method: "DELETE" });
  }

  // RBAC Resource
  async createRbacResource(data: RbacResource): Promise<ApiResponseBoolean> {
    return this.fetchMockApi<ApiResponseBoolean>("/resources/save", { method: "POST", body: JSON.stringify(data) });
  }

  // Roles Hierarchy
  async getRolesHierarchy(): Promise<string> {
    return this.fetchMockApi<string>("/roles/hierarchy", { method: "GET" });
  }
}// END OF FILE: lib/data-repo/auth/auth-local-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/auth/auth-remote-repository.ts

import { IAuthRepository } from './auth-repository-interface';
import {
  AuthRequest, CreateUserRequest, LoginResponse, UserDto, UserInfo,
  RoleDto, CreateRoleRequest, UpdateRoleRequest,
  PermissionDto, CreatePermissionRequest, UpdatePermissionRequest,
  RolePermissionDto, RbacResource, ApiResponseBoolean
} from '@/types/auth';
import { yowyobAuthApi } from '@/lib/apiClient'; // Uses the specific Yowyob API wrapper

export class AuthRemoteRepository implements IAuthRepository {
  async register(data: CreateUserRequest): Promise<UserDto> {
    return yowyobAuthApi.register(data);
  }
  async getAllUsers(): Promise<UserDto[]> {
    return yowyobAuthApi.getAllUsers();
  }
  async getUserByUsername(username: string): Promise<UserDto | null> {
    return yowyobAuthApi.getUserByUsername(username).catch(e => (e.status === 404 ? null : Promise.reject(e) ));
  }
  async getUserByPhoneNumber(phoneNumber: string): Promise<UserDto | null> {
    return yowyobAuthApi.getUserByPhoneNumber(phoneNumber).catch(e => (e.status === 404 ? null : Promise.reject(e) ));
  }
  async getUserByEmail(email: string): Promise<UserDto | null> {
    return yowyobAuthApi.getUserByEmail(email).catch(e => (e.status === 404 ? null : Promise.reject(e) ));
  }
  async login(data: AuthRequest): Promise<LoginResponse> {
    return yowyobAuthApi.login(data);
  }
  async getCurrentUser(): Promise<UserInfo | null> {
    try {
      return await yowyobAuthApi.getCurrentUser();
    } catch (error)  {
      if (error.status === 401 || error.status === 403) return null;
      throw error;
    }
  }
  async getRoles(): Promise<RoleDto[]> {
    return yowyobAuthApi.getRoles();
  }
  async createRole(data: CreateRoleRequest): Promise<RoleDto> {
    return yowyobAuthApi.createRole(data);
  }
  async updateRole(roleId: string, data: UpdateRoleRequest): Promise<RoleDto> {
    return yowyobAuthApi.updateRole(roleId, data);
  }
  async deleteRole(roleId: string): Promise<void> {
    return yowyobAuthApi.deleteRole(roleId);
  }
  async getAllPermissions(): Promise<PermissionDto[]> {
    return yowyobAuthApi.getAllPermissions();
  }
  async getPermissionById(permissionId: string): Promise<PermissionDto | null> {
    return yowyobAuthApi.getPermissionById(permissionId).catch(e => (e.status === 404 ? null : Promise.reject(e) ));
  }
  async createPermission(data: CreatePermissionRequest): Promise<PermissionDto> {
    return yowyobAuthApi.createPermission(data);
  }
  async updatePermission(permissionId: string, data: UpdatePermissionRequest): Promise<PermissionDto> {
    return yowyobAuthApi.updatePermission(permissionId, data);
  }
  async deletePermission(permissionId: string): Promise<void> {
    return yowyobAuthApi.deletePermission(permissionId);
  }
  async assignPermissionsToRole(roleId: string, permissionIds: string[]): Promise<RolePermissionDto[]> {
    return yowyobAuthApi.assignPermissionsToRole(roleId, permissionIds);
  }
  async removePermissionsFromRole(roleId: string, permissionIds: string[]): Promise<void> {
    return yowyobAuthApi.removePermissionsFromRole(roleId, permissionIds);
  }
  async assignPermissionToRole(roleId: string, permissionId: string): Promise<RolePermissionDto> {
    return yowyobAuthApi.assignPermissionToRole(roleId, permissionId);
  }
  async removePermissionFromRole(roleId: string, permissionId: string): Promise<void> {
    return yowyobAuthApi.removePermissionFromRole(roleId, permissionId);
  }
  async createRbacResource(data: RbacResource): Promise<ApiResponseBoolean> {
    return yowyobAuthApi.createRbacResource(data);
  }
  async getRolesHierarchy(): Promise<string> {
    return yowyobAuthApi.getRolesHierarchy();
  }
}// END OF FILE: lib/data-repo/auth/auth-remote-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/auth/auth-repository-interface.ts

// lib/data-repo/auth/auth-repository-interface.ts
import {
  AuthRequest, CreateUserRequest, LoginResponse, UserDto, UserInfo,
  RoleDto, CreateRoleRequest, UpdateRoleRequest,
  PermissionDto, CreatePermissionRequest, UpdatePermissionRequest,
  RolePermissionDto, RbacResource, ApiResponseBoolean
} from '@/types/auth';

export interface IAuthRepository {
  // User Management
  register(data: CreateUserRequest): Promise<UserDto>;
  getAllUsers(): Promise<UserDto[]>;
  getUserByUsername(username: string): Promise<UserDto | null>;
  getUserByPhoneNumber(phoneNumber: string): Promise<UserDto | null>;
  getUserByEmail(email: string): Promise<UserDto | null>;
  // (Update/Delete user methods might be via user own profile or admin panel elsewhere)

  // Login & Session
  login(data: AuthRequest): Promise<LoginResponse>;
  getCurrentUser(): Promise<UserInfo | null>; // To get info about the currently authenticated user

  // Role Management
  getRoles(): Promise<RoleDto[]>;
  createRole(data: CreateRoleRequest): Promise<RoleDto>;
  updateRole(roleId: string, data: UpdateRoleRequest): Promise<RoleDto>;
  deleteRole(roleId: string): Promise<void>; // 200 OK, no body

  // Permission Management
  getAllPermissions(): Promise<PermissionDto[]>;
  getPermissionById(permissionId: string): Promise<PermissionDto | null>;
  createPermission(data: CreatePermissionRequest): Promise<PermissionDto>;
  updatePermission(permissionId: string, data: UpdatePermissionRequest): Promise<PermissionDto>;
  deletePermission(permissionId: string): Promise<void>; // 200 OK, no body

  // Role-Permission Assignments
  assignPermissionsToRole(roleId: string, permissionIds: string[]): Promise<RolePermissionDto[]>;
  removePermissionsFromRole(roleId: string, permissionIds: string[]): Promise<void>;
  assignPermissionToRole(roleId: string, permissionId: string): Promise<RolePermissionDto>;
  removePermissionFromRole(roleId: string, permissionId: string): Promise<void>;

  // RBAC Resource (Conceptual - for RBAC setup)
  createRbacResource(data: RbacResource): Promise<ApiResponseBoolean>;

  // Roles Hierarchy
  getRolesHierarchy(): Promise<string>; // Returns a string representation
}// END OF FILE: lib/data-repo/auth/auth-repository-interface.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/auth/index.ts

import { IAuthRepository } from './auth-repository-interface';
import { AuthLocalRepository } from './auth-local-repository';
import { AuthRemoteRepository } from './auth-remote-repository';

let authRepositoryInstance: IAuthRepository;

const dataSource = process.env.NEXT_PUBLIC_DATA_SOURCE;

if (dataSource === 'local') {
  console.log("INFO: Using Local Auth Repository (fetches from /api/mock/*)");
  authRepositoryInstance = new AuthLocalRepository();
} else {
  console.log("INFO: Using Remote Auth Repository (Yowyob Auth API via Proxy)");
  authRepositoryInstance = new AuthRemoteRepository();
}

export const authRepository = authRepositoryInstance;// END OF FILE: lib/data-repo/auth/index.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/local-store/json-data/user-preferences

[
  {
    "user_id": "mock-auth-1750034426505-75",
    "display": {
      "language": "en",
      "currency": "USD",
      "dateFormat": "mm-dd-yyyy",
      "fontSize": 16,
      "theme": "system",
      "layout": "default",
      "timezone": "utc-8",
      "profilePhotoUrl": ""
    },
    "notifications": {
      "email": true,
      "push": true,
      "sms": false,
      "accountActivity": true,
      "newFeatures": true,
      "marketing": false,
      "frequency": "daily",
      "quietHoursStart": "22:00",
      "quietHoursEnd": "07:00"
    },
    "privacy": {
      "analyticsSharing": true,
      "personalizedAds": false,
      "visibility": "private",
      "dataRetention": "1-year"
    },
    "updated_at": "2025-06-18T15:39:08.058Z"
  }
]// END OF FILE: lib/data-repo/local-store/json-data/user-preferences

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/local-store/json-db-manager.ts

// lib/data-repo/local-store/json-db-manager.ts
import fs from "fs";
import path from "path";
import {
  UserDto, RoleDto, PermissionDto, RolePermissionDto, RbacResource,
} from "@/types/auth";
import {
  OrganizationDto, ContactDto, AddressDto, AgencyDto, EmployeeDto, BusinessDomainDto,
  ImageDto, ThirdPartyDto, ProposedActivityDto, SalesPersonDto, CustomerDto, ProviderDto, ProspectDto,
  PracticalInformationDto, CertificationDto, ApplicationDto, ApplicationKeyDto, BusinessActorDto,
} from "@/types/organization";
// import { ResourceDto, ServiceDto } from "@/types/resourceManagement";
import { UserPreferencesDto } from "@/types/user-preferences";
import { MediaDto } from "@/types/media";

export type CollectionName =
  | "authUsers"
  | "authRoles" | "authPermissions" | "authRolePermissions" | "authRbacResources"
  | "organizationsDetails" | "contacts" | "addresses"
  | "agencies" | "employees" | "salesPersons" | "orgCustomers" | "providers" | "userPreferences"
  | "prospects" | "practicalInformation" | "certifications" | "businessDomains"
  | "organizationImages" | "thirdParties" | "proposedActivities" | "businessActors"
  | "applicationsData" | "applicationKeysData" | "media"
// | "resources" 
// | "services";

export interface LocalJsonDBCollections {
  authUsers: UserDto[]; authRoles: RoleDto[]; authPermissions: PermissionDto[]; authRolePermissions: RolePermissionDto[]; authRbacResources: RbacResource[];
  organizationsDetails: OrganizationDto[]; contacts: ContactDto[]; addresses: AddressDto[];
  userPreferences: UserPreferencesDto[]; agencies: AgencyDto[]; employees: EmployeeDto[]; salesPersons: SalesPersonDto[];
  orgCustomers: CustomerDto[]; providers: ProviderDto[]; prospects: ProspectDto[]; practicalInformation: PracticalInformationDto[];
  certifications: CertificationDto[]; businessDomains: BusinessDomainDto[]; organizationImages: ImageDto[]; thirdParties: ThirdPartyDto[];
  proposedActivities: ProposedActivityDto[]; businessActors: BusinessActorDto[]; applicationsData: ApplicationDto[];
  applicationKeysData: ApplicationKeyDto[]; media: MediaDto[]
  // resources: ResourceDto[];
  //  services: ServiceDto[];
}

const collectionFileMap: Record<CollectionName, string> = {
  authUsers: "auth-users.json", authRoles: "auth-roles.json", authPermissions: "auth-permissions.json",
  authRolePermissions: "auth-role-permissions.json", authRbacResources: "auth-rbac-resources.json",
  organizationsDetails: "organizations-details.json",
  contacts: "contacts.json", addresses: "addresses.json", agencies: "agencies.json", employees: "employees.json",
  salesPersons: "sales-persons.json", orgCustomers: "org-customers.json", providers: "providers.json",
  userPreferences: "user-preferences.json", prospects: "prospects.json", practicalInformation: "practical-information.json",
  certifications: "certifications.json", businessDomains: "business-domains.json", organizationImages: "organization-images.json",
  thirdParties: "third-parties.json", proposedActivities: "proposed-activities.json", businessActors: "business-actors.json",
  applicationsData: "applications-data.json", applicationKeysData: "application-keys.json",
  media: "media.json"
};

// NEW: Explicit mapping of collection name to its primary ID field.
const collectionIdMap: Record<CollectionName, string> = {
  authUsers: "id",
  authRoles: "id",
  authPermissions: "id",
  authRolePermissions: "id", // Composite key, but we need one for the manager. 'id' will be auto-generated.
  authRbacResources: "id", // Auto-generated
  organizationsDetails: "organization_id",
  contacts: "contact_id",
  addresses: "address_id",
  agencies: "agency_id",
  employees: "employee_id",
  salesPersons: "sales_person_id",
  orgCustomers: "customer_id",
  providers: "provider_id",
  userPreferences: "user_id", // Specific key for this collection
  prospects: "prospect_id",
  practicalInformation: "information_id",
  certifications: "certification_id",
  businessDomains: "id",
  organizationImages: "id",
  thirdParties: "id",
  proposedActivities: "activity_id",
  businessActors: "business_actor_id",
  applicationsData: "id",
  applicationKeysData: "public_key",
  media: "id"
};


const dataDir = path.resolve(process.cwd(), "lib/data-repo/local-store/json-data");

function getCollectionFilePath(collectionName: CollectionName): string {
  if (!fs.existsSync(dataDir)) fs.mkdirSync(dataDir, { recursive: true });
  const filename = collectionFileMap[collectionName];
  if (!filename) throw new Error(`No filename mapping for collection: ${collectionName}`);
  const filePath = path.join(dataDir, filename);
  if (!fs.existsSync(filePath)) fs.writeFileSync(filePath, JSON.stringify([]), "utf-8");
  return filePath;
}

function readCollectionData<T>(collectionName: CollectionName): T[] {
  const filePath = getCollectionFilePath(collectionName);
  try {
    const fileContent = fs.readFileSync(filePath, "utf-8");
    return fileContent.trim() === "" ? [] : JSON.parse(fileContent) as T[];
  } catch (error) {
    console.error(`Error reading or parsing ${collectionFileMap[collectionName]}:`, error);
    try {
      fs.writeFileSync(filePath, JSON.stringify([]), "utf-8");
    } catch (writeError) {
      console.error(`CRITICAL: Could not write default empty array to ${collectionName}.json:`, writeError);
    }
    return [];
  }
}

function writeCollectionData<T>(collectionName: CollectionName, data: T[]): void {
  const filePath = getCollectionFilePath(collectionName);
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), "utf-8");
  } catch (error) {
    console.error(`Error writing to ${collectionFileMap[collectionName]}:`, error);
  }
}

type Identifiable = { id?: string;[key: string]: any };

// REFACTORED: Use the collectionIdMap for a direct lookup.
function getPrimaryKeyField(collectionName: CollectionName): string {
  return collectionIdMap[collectionName] || "id"; // Fallback to 'id' if not in map
}

export const dbManager = {
  getCollection: <C extends CollectionName>(collectionName: C): LocalJsonDBCollections[C] => {
    return readCollectionData<LocalJsonDBCollections[C][number]>(collectionName) as LocalJsonDBCollections[C];
  },
  saveCollection: <C extends CollectionName>(collectionName: C, data: LocalJsonDBCollections[C]): void => {
    writeCollectionData<LocalJsonDBCollections[C][number]>(collectionName, data);
  },
  addItem: <C extends CollectionName>(
    collectionName: C,
    itemData: Omit<LocalJsonDBCollections[C][number], "created_at" | "updated_at">
  ): LocalJsonDBCollections[C][number] => {
    const collection = dbManager.getCollection(collectionName);
    const idKey = getPrimaryKeyField(collectionName);
    const idPrefix = collectionName.toString().replace(/([A-Z])/g, "-$1").toLowerCase().split("-")[0].substring(0, 4);

    let generatedId = (itemData as Identifiable)[idKey];
    if (!generatedId) {
      generatedId = `mock-${idPrefix}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    }

    const newItem = {
      ...itemData,
      [idKey]: generatedId,
      ...(idKey !== "id" && !("id" in itemData) && { id: generatedId }),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    } as LocalJsonDBCollections[C][number];

    (collection as Array<LocalJsonDBCollections[C][number]>).push(newItem);
    dbManager.saveCollection(collectionName, collection);
    return newItem;
  },
  updateItem: <C extends CollectionName>(
    collectionName: C,
    id: string,
    updates: Partial<Omit<LocalJsonDBCollections[C][number], "created_at">>
  ): LocalJsonDBCollections[C][number] | null => {
    const collection = dbManager.getCollection(collectionName);
    const idKey = getPrimaryKeyField(collectionName);
    const itemIndex = (collection as Identifiable[]).findIndex(item => (item)[idKey] === id);

    if (itemIndex > -1) {
      (collection as Identifiable[])[itemIndex] = {
        ...(collection as Identifiable[])[itemIndex],
        ...updates,
        updated_at: new Date().toISOString(),
      };
      dbManager.saveCollection(collectionName, collection);
      return (collection as Identifiable[])[itemIndex] as LocalJsonDBCollections[C][number];
    }
    return null;
  },
  getItemById: <C extends CollectionName>(collectionName: C, id: string): LocalJsonDBCollections[C][number] | null => {
    const collection = dbManager.getCollection(collectionName);
    const idKey = getPrimaryKeyField(collectionName);
    return (collection as Identifiable[]).find(item => (item)[idKey] === id) as LocalJsonDBCollections[C][number] | null;
  },
  deleteItem: <C extends CollectionName>(collectionName: C, id: string): boolean => {
    const collection = dbManager.getCollection(collectionName);
    const initialLength = collection.length;
    const idKey = getPrimaryKeyField(collectionName);
    const newCollection = (collection as Identifiable[]).filter(item => (item)[idKey] !== id);
    if (newCollection.length < initialLength) {
      dbManager.saveCollection(collectionName, newCollection as LocalJsonDBCollections[C]);
      return true;
    }
    return false;
  },
};
// END OF FILE: lib/data-repo/local-store/json-db-manager.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/local-store/mock-auth-utils.ts

import { NextRequest } from 'next/server';
import { getToken } from 'next-auth/jwt';

/**
 * Gets the user ID for the current session in a mock environment.
 * It first tries to decode the NextAuth JWT from the request cookies, which is the most reliable method.
 * As a fallback, it attempts to decode a Bearer token if present.
 *
 * @param request The NextRequest object from the API route.
 * @returns The user ID string or null if not found.
 */
export async function getUserIdFromMockToken(request: NextRequest): Promise<string | null> {
  try {
    // Primary Method: Use next-auth's getToken to securely get the session token's content.
    // This is the most reliable way to get the user's session data on the server-side in a mock environment.
    const token = await getToken({ req: request, secret: process.env.NEXTAUTH_SECRET });

    if (token && token.sub) {
      // The 'sub' (subject) claim in the NextAuth token is the user's ID.
      return token.sub;
    }

    // Fallback Method: If getToken fails, try to decode a Bearer token manually.
    // This might be useful if you are testing with a hardcoded token from another source.
    const authHeader = request.headers.get('Authorization');
    if (authHeader?.startsWith('Bearer ')) {
      const bearerToken = authHeader.split(' ')[1];
      const payloadBase64 = bearerToken.split('.')[1];
      if (payloadBase64) {
        const decodedPayload = Buffer.from(payloadBase64, 'base64').toString('utf-8');
        const payloadJson = JSON.parse(decodedPayload);
        return payloadJson.sub || payloadJson.id || null;
      }
    }

    return null;
  } catch (error) {
    console.error("Error getting user ID from mock token:", error);
    return null;
  }
}// END OF FILE: lib/data-repo/local-store/mock-auth-utils.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/map/index.ts

// lib/data-repo/map/index.ts
import { IMapRepository } from './map-repository-interface';
import { MapLocalRepository } from './map-local-repository';
import { MapRemoteRepository } from './map-remote-repository';

// let mapRepositoryInstance: IMapRepository;

// We use the same global data source flag
const dataSource = process.env.NEXT_PUBLIC_DATA_SOURCE;

// if (dataSource == 'local') {
//   console.log("INFO: Using Local Map Repository (via Mock Geo API)");
//   mapRepositoryInstance = new MapLocalRepository();
// } else {
console.log("INFO: Using Remote Map Repository (Nominatim API)");
const mapRepositoryInstance = new MapRemoteRepository();
// }

export const mapRepository = mapRepositoryInstance;// END OF FILE: lib/data-repo/map/index.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/map/map-local-repository.ts

// lib/data-repo/map/map-local-repository.ts
import { IMapRepository } from './map-repository-interface';
import { GeocodeResponse, ReverseGeocodeResponse } from '@/types/map';
import { toast } from "sonner";

const APP_URL = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
const MOCK_GEO_API_BASE = `${APP_URL}/api/mock/geo`;

export class MapLocalRepository implements IMapRepository {
  private async fetchMockApi<T>(endpoint: string): Promise<T> {
    const response = await fetch(`${MOCK_GEO_API_BASE}${endpoint}`);
    if (!response.ok) {
      const error = new Error(`Mock Geo API Error: ${response.statusText}`);
      // toast.error("Mock map service failed.");
      throw error;
    }
    return response.json();
  }

  async reverseGeocode(lat: number, lon: number): Promise<ReverseGeocodeResponse | null> {
    return this.fetchMockApi<ReverseGeocodeResponse | null>(`/reverse?lat=${lat}&lon=${lon}`);
  }

  async geocodeAddress(query: string): Promise<GeocodeResponse[]> {
    return this.fetchMockApi<GeocodeResponse[]>(`/geocode?q=${encodeURIComponent(query)}`);
  }
}// END OF FILE: lib/data-repo/map/map-local-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/map/map-remote-repository.ts

// lib/data-repo/map/map-remote-repository.ts
import { IMapRepository } from './map-repository-interface';
import { GeocodeResponse, ReverseGeocodeResponse } from '@/types/map';
import { toast } from 'sonner';

const NOMINATIM_BASE_URL = "https://nominatim.openstreetmap.org";

export class MapRemoteRepository implements IMapRepository {

  private async fetchNominatim<T>(endpoint: string): Promise<T> {
    try {
      // IMPORTANT: Nominatim requires a valid User-Agent header for identification.
      const response = await fetch(`${NOMINATIM_BASE_URL}${endpoint}`, {
        headers: {
          "User-Agent": "Yowyob Dashboard Project - Development (contact@yowyob.com)",
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Nominatim API error: ${response.status} - ${errorText}`);
      }
      return await response.json() as T;
    } catch (error) {
      console.error("Nominatim API request failed:", error);
      // toast.error("Could not reach map service. Please check your connection.");
      throw error;
    }
  }

  async reverseGeocode(lat: number, lon: number): Promise<ReverseGeocodeResponse | null> {
    const endpoint = `/reverse?format=json&lat=${lat}&lon=${lon}`;
    return this.fetchNominatim<ReverseGeocodeResponse>(endpoint);
  }

  async geocodeAddress(query: string): Promise<GeocodeResponse[]> {
    const endpoint = `/search?q=${encodeURIComponent(query)}&format=json&addressdetails=1&limit=5`;
    return this.fetchNominatim<GeocodeResponse[]>(endpoint);
  }
}// END OF FILE: lib/data-repo/map/map-remote-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/map/map-repository-interface.ts

// lib/data-repo/map/map-repository-interface.ts
import { GeocodeResponse, ReverseGeocodeResponse } from '@/types/map';

export interface IMapRepository {
  /**
   * Converts a latitude and longitude into a structured address.
   */
  reverseGeocode(lat: number, lon: number): Promise<ReverseGeocodeResponse | null>;

  /**
   * Converts a search string into a list of possible locations with coordinates.
   */
  geocodeAddress(query: string): Promise<GeocodeResponse[]>;
}// END OF FILE: lib/data-repo/map/map-repository-interface.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/media/index.ts

import { IMediaRepository } from './media-repository-interface';
import { MediaLocalRepository } from './media-local-repository';
import { MediaRemoteRepository } from './media-remote-repository';

let mediaRepository: IMediaRepository;

const dataSource = process.env.NEXT_PUBLIC_DATA_SOURCE;

if (dataSource === 'local') {
  console.log("INFO: Using Local Media Repository");
  mediaRepository = new MediaLocalRepository();
} else {
  console.log("INFO: Using Remote Media Repository");
  mediaRepository = new MediaRemoteRepository();
}

export { mediaRepository };// END OF FILE: lib/data-repo/media/index.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/media/media-local-repository.ts

import { IMediaRepository } from "./media-repository-interface";
import { UploadMediaResponse, MediaDto, ServiceType, MediaType } from "@/types/media";

const APP_URL = process.env.NEXT_PUBLIC_URL || 'http://localhost:3000';
const MOCK_API_MEDIA_BASE = `${APP_URL}/api/mock/media`;

export class MediaLocalRepository implements IMediaRepository {
  private async fetchMockApi<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    // Since multipart/form-data is complex for a simple mock fetch,
    // we'll use JSON for the mock but the interface remains the same.
    const response = await fetch(`${MOCK_API_MEDIA_BASE}${endpoint}`, {
      ...options,
      headers: { 'Content-Type': 'application/json', ...options.headers },
    });
    const responseContentType = response.headers.get("content-type");
    let responseData;
    if (responseContentType && responseContentType.includes("application/json")) {
      responseData = await response.json();
    } else if (response.status !== 204) {
      responseData = { message: await response.text() || response.statusText };
    }
    if (!response.ok) {
      const errorPayload = responseData || { message: `Request to ${endpoint} failed` };
      throw { status: response.status, message: errorPayload.message, data: errorPayload };
    }
    return responseData as T;
  }

  async uploadFile(
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string | null,
    file: File,
    isPrimary?: boolean,
    description?: string
  ): Promise<UploadMediaResponse> {
    console.warn("Mock Upload: Not actually uploading file, returning dummy response.");

    // In a mock, we can't really upload, so we just pass metadata to a mock endpoint.
    const mockUploadPayload = {
      fileName: file.name,
      fileType: file.type,
      fileSize: file.size,
      isPrimary,
      description,
    };
    const endpoint = resourceId
      ? `/${service}/${type}/${path}/${resourceId}`
      : `/${service}/${type}/${path}`;

    return this.fetchMockApi<UploadMediaResponse>(endpoint, {
      method: "POST", // The mock route will handle this as a POST
      body: JSON.stringify(mockUploadPayload)
    });
  }

  async deleteFile(
    service: ServiceType,
    type: MediaType,
    path: string,
    filename: string
  ): Promise<boolean> {
    const endpoint = `/${service}/${type}/${path}/${filename}`;
    return this.fetchMockApi<boolean>(endpoint, { method: "DELETE" });
  }

  async getMediaForResource(
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string
  ): Promise<MediaDto[]> {
    const endpoint = `/${service}/${type}/${path}/${resourceId}`;
    return this.fetchMockApi<MediaDto[]>(endpoint, { method: "GET" });
  }
}// END OF FILE: lib/data-repo/media/media-local-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/media/media-remote-repository.ts

import { IMediaRepository } from "./media-repository-interface";
import { yowyobMediaApi } from "@/lib/apiClient";
import { UploadMediaResponse, MediaDto, ServiceType, MediaType } from "@/types/media";

export class MediaRemoteRepository implements IMediaRepository {
  async uploadFile(
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string | null,
    file: File,
    isPrimary?: boolean,
    description?: string
  ): Promise<UploadMediaResponse> {
    const uploadRequest = {
      ...(isPrimary !== undefined && { is_primary: isPrimary }),
      ...(description && { description }),
    };
    return yowyobMediaApi.uploadFile(service, type, path, resourceId, file, uploadRequest);
  }

  async deleteFile(
    service: ServiceType,
    type: MediaType,
    path: string,
    filename: string
  ): Promise<boolean> {
    return yowyobMediaApi.deleteFile(service, type, path, filename);
  }

  async getMediaForResource(
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string
  ): Promise<MediaDto[]> {
    const media = await yowyobMediaApi.getMediaForResource(service, type, path, resourceId);
    return media || []; // Ensure it returns an array even if the API returns null
  }
}// END OF FILE: lib/data-repo/media/media-remote-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/media/media-repository-interface.ts

import { UploadMediaResponse, MediaDto, ServiceType, MediaType } from "@/types/media";

export interface IMediaRepository {
  uploadFile(
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string | null,
    file: File,
    isPrimary?: boolean,
    description?: string
  ): Promise<UploadMediaResponse>;

  deleteFile(
    service: ServiceType,
    type: MediaType,
    path: string,
    filename: string
  ): Promise<boolean>;

  getMediaForResource(
    service: ServiceType,
    type: MediaType,
    path: string,
    resourceId: string
  ): Promise<MediaDto[]>;
}// END OF FILE: lib/data-repo/media/media-repository-interface.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/organization/index.ts

// lib/data-repo/organization/index.ts
import { IOrganizationRepository } from './organization-repository-interface';
import { OrganizationLocalRepository } from './organization-local-repository';
import { OrganizationRemoteRepository } from './organization-remote-repository';

let organizationRepositoryInstance: IOrganizationRepository;

const dataSource = process.env.NEXT_PUBLIC_DATA_SOURCE;

if (dataSource === 'local') {
  console.log("INFO: Using Local Organization Repository (via Next.js Mock API Routes)");
  organizationRepositoryInstance = new OrganizationLocalRepository();
} else {
  console.log("INFO: Using Remote Organization Repository (Yowyob Org API)");
  organizationRepositoryInstance = new OrganizationRemoteRepository();
}

export const organizationRepository = organizationRepositoryInstance;// END OF FILE: lib/data-repo/organization/index.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/organization/organization-local-repository.ts

// lib/data-repo/organization/organization-local-repository.ts
import { IOrganizationRepository } from "./organization-repository-interface";
import {
  OrganizationDto,
  CreateOrganizationRequest,
  UpdateOrganizationRequest,
  UpdateOrganizationStatusRequest,
  ContactDto,
  CreateContactRequest,
  UpdateContactRequest,
  ContactableType,
  AddressDto,
  CreateAddressRequest,
  UpdateAddressRequest,
  AddressableType,
  AgencyDto,
  CreateAgencyRequest,
  UpdateAgencyRequest,
  UpdateAgencyStatusRequest,
  EmployeeDto,
  CreateEmployeeRequest,
  UpdateEmployeeRequest,
  AffectEmployeeRequest,
  EmployeeResponse,
  SalesPersonDto,
  CreateSalesPersonRequest,
  UpdateSalesPersonRequest,
  CustomerDto,
  CreateCustomerRequest,
  UpdateCustomerRequest,
  AffectCustomerRequest,
  ProviderDto,
  CreateProviderRequest,
  UpdateProviderRequest,
  AffectProviderRequest,
  ProspectDto,
  CreateProspectRequest,
  UpdateProspectRequest,
  PracticalInformationDto,
  CreatePracticalInformationRequest,
  UpdatePracticalInformationRequest,
  CertificationDto,
  CreateCertificationRequest,
  UpdateCertificationRequest,
  BusinessDomainDto,
  CreateBusinessDomainRequest,
  UpdateBusinessDomainRequest,
  GetBusinessDomainRequest,
  ImageDto,
  ThirdPartyDto,
  CreateThirdPartyRequest,
  UpdateThirdPartyRequest,
  UpdateThirdPartyStatusRequest,
  GetThirdPartyRequest,
  ThirdPartyType,
  ProposedActivityDto,
  CreateProposedActivityRequest,
  UpdateProposedActivityRequest,
  BusinessActorDto,
  CreateBusinessActorRequest,
  UpdateBusinessActorRequest,
  BusinessActorType,
  ApplicationDto,
  CreateApplicationRequest,
  ApplicationKeyDto,
} from "@/types/organization";
import { toast } from "sonner";

const APP_URL =
  typeof window !== "undefined"
    ? window.location.origin
    : process.env.NEXTAUTH_URL ||
    process.env.VERCEL_URL ||
    "http://localhost:3000";
const MOCK_API_ORG_BASE = `${APP_URL}/api/mock/organization`; // For org-specific things
const MOCK_API_GLOBAL_ORG_ENTITIES_BASE = `${APP_URL}/api/mock`; // For global entities managed by OrgService (like BusinessDomain, BusinessActor, Applications)

export class OrganizationLocalRepository implements IOrganizationRepository {


  private async fetchMockApi<T>(
    endpoint: string,
    options: RequestInit = {},
    base = MOCK_API_ORG_BASE
  ): Promise<T> {
    const response = await fetch(`${base}${endpoint}`, {
      ...options,
      headers: { "Content-Type": "application/json", ...options.headers },
    });
    const responseContentType = response.headers.get("content-type");
    let responseData;
    if (responseContentType && responseContentType.includes("application/json")) {
      responseData = await response.json();
    }
    else if (response.status !== 204)
      responseData = {
        message: (await response.text()) || response.statusText,
      };
    if (!response.ok) {
      const errorPayload = responseData || {
        message: `Request to ${endpoint} failed`,
      };
      console.error(
        `[OrgLocalRepo] Mock API Error: ${response.status}`,
        errorPayload
      );

      throw {
        status: response.status,
        message: errorPayload.message,
        data: errorPayload,
      };
    }
    return responseData as T;
  }

  // Organizations
  async getMyOrganizations(): Promise<OrganizationDto[]> {
    return this.fetchMockApi<OrganizationDto[]>("/user-orgs");
  }
  async getAllOrganizations(): Promise<OrganizationDto[]> {
    return this.fetchMockApi<OrganizationDto[]>("/all");
  }
  async getOrganizationsByDomain(
    domainId: string
  ): Promise<OrganizationDto[]> {
    return this.fetchMockApi<OrganizationDto[]>(`/domain/${domainId}`);
  }
  async getOrganizationById(orgId: string): Promise<OrganizationDto | null> {
    return this.fetchMockApi<OrganizationDto | null>(`/${orgId}`, {}, MOCK_API_ORG_BASE);
  }
  async createOrganization(
    data: CreateOrganizationRequest
  ): Promise<OrganizationDto> {
    return this.fetchMockApi<OrganizationDto>("", {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async updateOrganization(
    orgId: string,
    data: UpdateOrganizationRequest
  ): Promise<OrganizationDto> {
    return this.fetchMockApi<OrganizationDto>(`/${orgId}`, {
      method: "PUT",
      body: JSON.stringify(data),
    });
  }
  async deleteOrganization(orgId: string): Promise<void> {
    return this.fetchMockApi<void>(`/${orgId}/delete`, { method: "DELETE" });
  }
  async updateOrganizationStatus(
    orgId: string,
    data: UpdateOrganizationStatusRequest
  ): Promise<OrganizationDto> {
    return this.fetchMockApi<OrganizationDto>(`/${orgId}/status`, {
      method: "PUT",
      body: JSON.stringify(data),
    });
  }
  async addBusinessDomainToOrg(
    orgId: string,
    businessDomainId: string
  ): Promise<OrganizationDto> {
    return this.fetchMockApi<OrganizationDto>(
      `/${orgId}/domains/${businessDomainId}/add`,
      { method: "PUT" }
    );
  }
  async removeBusinessDomainFromOrg(
    orgId: string,
    businessDomainId: string
  ): Promise<OrganizationDto> {
    return this.fetchMockApi<OrganizationDto>(
      `/${orgId}/domains/${businessDomainId}/remove`,
      { method: "DELETE" }
    );
  }

  // Contacts
  async getContacts(
    contactableType: ContactableType,
    contactableId: string
  ): Promise<ContactDto[]> {
    return this.fetchMockApi<ContactDto[]>(
      `/${contactableType}/${contactableId}/contacts`, {}, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async getContactById(
    contactableType: ContactableType,
    contactableId: string,
    contactId: string
  ): Promise<ContactDto | null> {
    return this.fetchMockApi<ContactDto | null>(
      `/${contactableType}/${contactableId}/contacts/${contactId}`, {}, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async createContact(
    contactableType: ContactableType,
    contactableId: string,
    data: CreateContactRequest
  ): Promise<ContactDto> {
    return this.fetchMockApi<ContactDto>(
      `/${contactableType}/${contactableId}/contacts`,
      { method: "POST", body: JSON.stringify(data) }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async updateContact(
    contactableType: ContactableType,
    contactableId: string,
    contactId: string,
    data: UpdateContactRequest
  ): Promise<ContactDto> {
    return this.fetchMockApi<ContactDto>(
      `/${contactableType}/${contactableId}/contacts/${contactId}`,
      { method: "PUT", body: JSON.stringify(data) }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async deleteContactById(
    contactableType: ContactableType,
    contactableId: string,
    contactId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${contactableType}/${contactableId}/contacts/${contactId}`,
      { method: "DELETE" }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async markContactAsFavorite(
    contactableType: ContactableType,
    contactableId: string,
    contactId: string
  ): Promise<ContactDto> {
    return this.fetchMockApi<ContactDto>(
      `/${contactableType}/${contactableId}/contacts/${contactId}/favorite`,
      { method: "PUT" }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }

  // Addresses
  async getAddresses(
    addressableType: AddressableType,
    addressableId: string
  ): Promise<AddressDto[]> {
    return this.fetchMockApi<AddressDto[]>(
      `/${addressableType}/${addressableId}/addresses`
      , {}, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async getAddressById(
    addressableType: AddressableType,
    addressableId: string,
    addressId: string
  ): Promise<AddressDto | null> {
    return this.fetchMockApi<AddressDto | null>(
      `/${addressableType}/${addressableId}/addresses/${addressId}`, {}, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async createAddress(
    addressableType: AddressableType,
    addressableId: string,
    data: CreateAddressRequest
  ): Promise<AddressDto> {
    return this.fetchMockApi<AddressDto>(
      `/${addressableType}/${addressableId}/addresses`,
      { method: "POST", body: JSON.stringify(data) }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async updateAddress(
    addressableType: AddressableType,
    addressableId: string,
    addressId: string,
    data: UpdateAddressRequest
  ): Promise<AddressDto> {
    return this.fetchMockApi<AddressDto>(
      `/${addressableType}/${addressableId}/addresses/${addressId}`,
      { method: "PUT", body: JSON.stringify(data) }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async deleteAddressById(
    addressableType: AddressableType,
    addressableId: string,
    addressId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${addressableType}/${addressableId}/addresses/${addressId}`,
      { method: "DELETE" }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }
  async markAddressAsFavorite(
    addressableType: AddressableType,
    addressableId: string,
    addressId: string
  ): Promise<AddressDto> {
    return this.fetchMockApi<AddressDto>(
      `/${addressableType}/${addressableId}/addresses/${addressId}/favorite`,
      { method: "PUT" }, MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }

  // Practical Information
  async getPracticalInformation(
    orgId: string
  ): Promise<PracticalInformationDto[]> {
    return this.fetchMockApi<PracticalInformationDto[]>(
      `/${orgId}/practical-infos`
    );
  }
  async createPracticalInformation(
    orgId: string,
    data: CreatePracticalInformationRequest
  ): Promise<PracticalInformationDto> {
    return this.fetchMockApi<PracticalInformationDto>(
      `/${orgId}/practical-infos`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getPracticalInformationById(
    orgId: string,
    infoId: string
  ): Promise<PracticalInformationDto | null> {
    return this.fetchMockApi<PracticalInformationDto | null>(
      `/${orgId}/practical-infos/${infoId}`
    );
  }
  async updatePracticalInformation(
    orgId: string,
    infoId: string,
    data: UpdatePracticalInformationRequest
  ): Promise<PracticalInformationDto> {
    return this.fetchMockApi<PracticalInformationDto>(
      `/${orgId}/practical-infos/${infoId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deletePracticalInformation(
    orgId: string,
    infoId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/practical-infos/${infoId}`,
      { method: "DELETE" }
    );
  }

  // Certifications
  async getCertifications(orgId: string): Promise<CertificationDto[]> {
    return this.fetchMockApi<CertificationDto[]>(
      `/${orgId}/certifications`
    );
  }
  async createCertification(
    orgId: string,
    data: CreateCertificationRequest
  ): Promise<CertificationDto> {
    return this.fetchMockApi<CertificationDto>(
      `/${orgId}/certifications`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getCertificationById(
    orgId: string,
    certId: string
  ): Promise<CertificationDto | null> {
    return this.fetchMockApi<CertificationDto | null>(
      `/${orgId}/certifications/${certId}`
    );
  }
  async updateCertification(
    orgId: string,
    certId: string,
    data: UpdateCertificationRequest
  ): Promise<CertificationDto> {
    return this.fetchMockApi<CertificationDto>(
      `/${orgId}/certifications/${certId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteCertification(orgId: string, certId: string): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/certifications/${certId}`,
      { method: "DELETE" }
    );
  }

  // Business Domains
  async getAllBusinessDomains(
    params?: GetBusinessDomainRequest
  ): Promise<BusinessDomainDto[]> {
    const q = params ? `?${new URLSearchParams(params as Record<string, string>)}` : "";
    return this.fetchMockApi<BusinessDomainDto[]>(
      `${q}`,
      {},
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-domains"
    );
  }
  async getBusinessDomainById(
    domainId: string
  ): Promise<BusinessDomainDto | null> {
    return this.fetchMockApi<BusinessDomainDto | null>(
      `/${domainId}`,
      {},
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-domains"
    );
  }
  async createBusinessDomain(
    data: CreateBusinessDomainRequest
  ): Promise<BusinessDomainDto> {
    return this.fetchMockApi<BusinessDomainDto>(
      "",
      { method: "POST", body: JSON.stringify(data) },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-domains"
    );
  }
  async updateBusinessDomain(
    domainId: string,
    data: UpdateBusinessDomainRequest
  ): Promise<BusinessDomainDto> {
    return this.fetchMockApi<BusinessDomainDto>(
      `/${domainId}`,
      { method: "PUT", body: JSON.stringify(data) },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-domains"
    );
  }
  async deleteBusinessDomain(domainId: string): Promise<void> {
    return this.fetchMockApi<void>(
      `/${domainId}`,
      { method: "DELETE" },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-domains"
    );
  }

  // Agencies
  async getAgencies(orgId: string, active?: boolean): Promise<AgencyDto[]> {
    const q = active !== undefined ? `?active=${active}` : "";
    return this.fetchMockApi<AgencyDto[]>(`/${orgId}/agencies${q}`);
  }
  async createAgency(
    orgId: string,
    data: CreateAgencyRequest
  ): Promise<AgencyDto> {
    return this.fetchMockApi<AgencyDto>(`/${orgId}/agencies`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async getAgencyById(
    orgId: string,
    agencyId: string
  ): Promise<AgencyDto | null> {
    return this.fetchMockApi<AgencyDto | null>(
      `/${orgId}/agencies/${agencyId}`
    );
  }
  async updateAgency(
    orgId: string,
    agencyId: string,
    data: UpdateAgencyRequest
  ): Promise<AgencyDto> {
    return this.fetchMockApi<AgencyDto>(
      `/${orgId}/agencies/${agencyId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteAgency(orgId: string, agencyId: string): Promise<void> {
    return this.fetchMockApi<void>(`/${orgId}/agencies/${agencyId}`, {
      method: "DELETE",
    });
  }
  async updateAgencyStatus(
    orgId: string,
    agencyId: string,
    data: UpdateAgencyStatusRequest
  ): Promise<AgencyDto> {
    return this.fetchMockApi<AgencyDto>(
      `/${orgId}/agencies/${agencyId}/status`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }

  // Employees (Org-scoped)
  async getOrgEmployees(orgId: string): Promise<EmployeeDto[]> {
    return this.fetchMockApi<EmployeeDto[]>(`/${orgId}/employees`);
  }
  async createOrgEmployee(
    orgId: string,
    data: CreateEmployeeRequest
  ): Promise<EmployeeResponse> {
    return this.fetchMockApi<EmployeeResponse>(`/${orgId}/employees`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async getOrgEmployeeById(
    orgId: string,
    employeeId: string
  ): Promise<EmployeeDto | null> {
    return this.fetchMockApi<EmployeeDto | null>(
      `/${orgId}/employees/${employeeId}`
    );
  }
  async updateOrgEmployee(
    orgId: string,
    employeeId: string,
    data: UpdateEmployeeRequest
  ): Promise<EmployeeResponse> {
    return this.fetchMockApi<EmployeeResponse>(
      `/${orgId}/employees/${employeeId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteOrgEmployee(orgId: string, employeeId: string): Promise<void> {
    return this.fetchMockApi<void>(`/${orgId}/employees/${employeeId}`, {
      method: "DELETE",
    });
  }

  // Employees (Agency-scoped)
  async getAgencyEmployees(
    orgId: string,
    agencyId: string
  ): Promise<EmployeeDto[]> {
    return this.fetchMockApi<EmployeeDto[]>(
      `/${orgId}/agencies/${agencyId}/employees`,
    );
  }
  async createAgencyEmployee(
    orgId: string,
    agencyId: string,
    data: CreateEmployeeRequest
  ): Promise<EmployeeResponse> {
    return this.fetchMockApi<EmployeeResponse>(
      `/${orgId}/agencies/${agencyId}/employees`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getAgencyEmployeeById(
    orgId: string,
    agencyId: string,
    employeeId: string
  ): Promise<EmployeeDto | null> {
    return this.fetchMockApi<EmployeeDto | null>(
      `/${orgId}/agencies/${agencyId}/employees/${employeeId}`
    );
  }
  async updateAgencyEmployee(
    orgId: string,
    agencyId: string,
    employeeId: string,
    data: UpdateEmployeeRequest
  ): Promise<EmployeeResponse> {
    return this.fetchMockApi<EmployeeResponse>(
      `/${orgId}/agencies/${agencyId}/employees/${employeeId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteAgencyEmployee(
    orgId: string,
    agencyId: string,
    employeeId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/agencies/${agencyId}/employees/${employeeId}`,
      { method: "DELETE" }
    );
  }
  async affectEmployeeToAgency(
    orgId: string,
    agencyId: string,
    data: AffectEmployeeRequest
  ): Promise<EmployeeResponse> {
    return this.fetchMockApi<EmployeeResponse>(
      `/${orgId}/agencies/${agencyId}/employees/add`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }

  // SalesPersons (Org-scoped)
  async getOrgSalesPersons(orgId: string): Promise<SalesPersonDto[]> {
    return this.fetchMockApi<SalesPersonDto[]>(`/${orgId}/sales-people`);
  }
  async createOrgSalesPerson(
    orgId: string,
    data: CreateSalesPersonRequest
  ): Promise<SalesPersonDto> {
    return this.fetchMockApi<SalesPersonDto>(`/${orgId}/sales-people`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async getOrgSalesPersonById(
    orgId: string,
    salesPersonId: string
  ): Promise<SalesPersonDto | null> {
    return this.fetchMockApi<SalesPersonDto | null>(
      `/${orgId}/sales-people/${salesPersonId}`
    );
  }
  async updateOrgSalesPerson(
    orgId: string,
    salesPersonId: string,
    data: UpdateSalesPersonRequest
  ): Promise<SalesPersonDto> {
    return this.fetchMockApi<SalesPersonDto>(
      `/${orgId}/sales-people/${salesPersonId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteOrgSalesPerson(
    orgId: string,
    salesPersonId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/sales-people/${salesPersonId}`,
      { method: "DELETE" }
    );
  }

  // SalesPersons (Agency-scoped)
  async getAgencySalesPersons(
    orgId: string,
    agencyId: string
  ): Promise<SalesPersonDto[]> {
    return this.fetchMockApi<SalesPersonDto[]>(
      `/${orgId}/agencies/${agencyId}/sales-people`
    );
  }
  async createAgencySalesPerson(
    orgId: string,
    agencyId: string,
    data: CreateSalesPersonRequest
  ): Promise<SalesPersonDto> {
    return this.fetchMockApi<SalesPersonDto>(
      `/${orgId}/agencies/${agencyId}/sales-people`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getAgencySalesPersonById(
    orgId: string,
    agencyId: string,
    salesPersonId: string
  ): Promise<SalesPersonDto | null> {
    return this.fetchMockApi<SalesPersonDto | null>(
      `/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`
    );
  }
  async updateAgencySalesPerson(
    orgId: string,
    agencyId: string,
    salesPersonId: string,
    data: UpdateSalesPersonRequest
  ): Promise<SalesPersonDto> {
    return this.fetchMockApi<SalesPersonDto>(
      `/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteAgencySalesPerson(
    orgId: string,
    agencyId: string,
    salesPersonId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/agencies/${agencyId}/sales-people/${salesPersonId}`,
      { method: "DELETE" }
    );
  }

  // Customers (Organization-linked)
  async getOrgCustomers(orgId: string): Promise<CustomerDto[]> {
    return this.fetchMockApi<CustomerDto[]>(`/${orgId}/customers`);
  }
  async createOrgCustomer(
    orgId: string,
    data: CreateCustomerRequest
  ): Promise<CustomerDto> {
    return this.fetchMockApi<CustomerDto>(`/${orgId}/customers`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async getOrgCustomerById(
    orgId: string,
    customerId: string
  ): Promise<CustomerDto | null> {
    return this.fetchMockApi<CustomerDto | null>(
      `/${orgId}/customers/${customerId}`
    );
  }
  async updateOrgCustomer(
    orgId: string,
    customerId: string,
    data: UpdateCustomerRequest
  ): Promise<CustomerDto> {
    return this.fetchMockApi<CustomerDto>(
      `/${orgId}/customers/${customerId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteOrgCustomer(orgId: string, customerId: string): Promise<void> {
    return this.fetchMockApi<void>(`/${orgId}/customers/${customerId}`, {
      method: "DELETE",
    });
  }

  // Customers (Agency-scoped)
  async getAgencyCustomers(
    orgId: string,
    agencyId: string
  ): Promise<CustomerDto[]> {
    return this.fetchMockApi<CustomerDto[]>(
      `/${orgId}/agencies/${agencyId}/customers`,
    );
  }
  async createAgencyCustomer(
    orgId: string,
    agencyId: string,
    data: CreateCustomerRequest
  ): Promise<CustomerDto> {
    return this.fetchMockApi<CustomerDto>(
      `/${orgId}/agencies/${agencyId}/customers`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getAgencyCustomerById(
    orgId: string,
    agencyId: string,
    customerId: string
  ): Promise<CustomerDto | null> {
    return this.fetchMockApi<CustomerDto | null>(
      `/${orgId}/agencies/${agencyId}/customers/${customerId}`
    );
  }
  async updateAgencyCustomer(
    orgId: string,
    agencyId: string,
    customerId: string,
    data: UpdateCustomerRequest
  ): Promise<CustomerDto> {
    return this.fetchMockApi<CustomerDto>(
      `/${orgId}/agencies/${agencyId}/customers/${customerId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteAgencyCustomer(
    orgId: string,
    agencyId: string,
    customerId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/agencies/${agencyId}/customers/${customerId}`,
      { method: "DELETE" }
    );
  }
  async affectCustomerToAgency(
    orgId: string,
    agencyId: string,
    data: AffectCustomerRequest
  ): Promise<CustomerDto> {
    return this.fetchMockApi<CustomerDto>(
      `/${orgId}/agencies/${agencyId}/customers/add`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }

  // Suppliers (Providers) (Org-scoped)
  async getOrgSuppliers(orgId: string): Promise<ProviderDto[]> {
    return this.fetchMockApi<ProviderDto[]>(`/${orgId}/suppliers`);
  }
  async createOrgSupplier(
    orgId: string,
    data: CreateProviderRequest
  ): Promise<ProviderDto> {
    return this.fetchMockApi<ProviderDto>(`/${orgId}/suppliers`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async getOrgSupplierById(
    orgId: string,
    providerId: string
  ): Promise<ProviderDto | null> {
    return this.fetchMockApi<ProviderDto | null>(
      `/${orgId}/suppliers/${providerId}`
    );
  }
  async updateOrgSupplier(
    orgId: string,
    providerId: string,
    data: UpdateProviderRequest
  ): Promise<ProviderDto> {
    return this.fetchMockApi<ProviderDto>(
      `/${orgId}/suppliers/${providerId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteOrgSupplier(orgId: string, providerId: string): Promise<void> {
    return this.fetchMockApi<void>(`/${orgId}/suppliers/${providerId} `, {
      method: "DELETE",
    });
  }

  // Suppliers (Providers) (Agency-scoped)
  async getAgencySuppliers(
    orgId: string,
    agencyId: string
  ): Promise<ProviderDto[]> {
    return this.fetchMockApi<ProviderDto[]>(
      `/${orgId}/agencies/${agencyId}/suppliers`
    );
  }
  async createAgencySupplier(
    orgId: string,
    agencyId: string,
    data: CreateProviderRequest
  ): Promise<ProviderDto> {
    return this.fetchMockApi<ProviderDto>(
      `/${orgId}/agencies/${agencyId}/suppliers`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getAgencySupplierById(
    orgId: string,
    agencyId: string,
    providerId: string
  ): Promise<ProviderDto | null> {
    return this.fetchMockApi<ProviderDto | null>(
      `/${orgId}/agencies/${agencyId}/suppliers/${providerId}`
    );
  }
  async updateAgencySupplier(
    orgId: string,
    agencyId: string,
    providerId: string,
    data: UpdateProviderRequest
  ): Promise<ProviderDto> {
    return this.fetchMockApi<ProviderDto>(
      `/${orgId}/agencies/${agencyId}/suppliers/${providerId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteAgencySupplier(
    orgId: string,
    agencyId: string,
    providerId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/agencies/${agencyId}/suppliers/${providerId} `,
      { method: "DELETE" }
    );
  }
  async affectSupplierToAgency(
    orgId: string,
    agencyId: string,
    data: AffectProviderRequest
  ): Promise<ProviderDto> {
    return this.fetchMockApi<ProviderDto>(
      `/${orgId}/agencies/${agencyId}/suppliers/add`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }

  // Prospects - (Org-scoped)
  async getOrgProspects(orgId: string): Promise<ProspectDto[]> {
    return this.fetchMockApi<ProspectDto[]>(`/${orgId}/prospects`);
  }
  async createOrgProspect(
    orgId: string,
    data: CreateProspectRequest
  ): Promise<ProspectDto> {
    return this.fetchMockApi<ProspectDto>(`/${orgId}/prospects`, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
  async getOrgProspectById(
    orgId: string,
    prospectId: string
  ): Promise<ProspectDto | null> {
    return this.fetchMockApi<ProspectDto | null>(
      `/${orgId}/prospects/${prospectId}`
    );
  }
  async updateOrgProspect(
    orgId: string,
    prospectId: string,
    data: UpdateProspectRequest
  ): Promise<ProspectDto> {
    return this.fetchMockApi<ProspectDto>(
      `/${orgId}/prospects/${prospectId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteOrgProspect(orgId: string, prospectId: string): Promise<void> {
    return this.fetchMockApi<void>(`/${orgId}/prospects/${prospectId} `, {
      method: "DELETE",
    });
  }

  // Prospects - (Agency-scoped)
  async getAgencyProspects(
    orgId: string,
    agencyId: string
  ): Promise<ProspectDto[]> {
    return this.fetchMockApi<ProspectDto[]>(
      `/${orgId}/agencies/${agencyId}/prospects`
    );
  }
  async createAgencyProspect(
    orgId: string,
    agencyId: string,
    data: CreateProspectRequest
  ): Promise<ProspectDto> {
    return this.fetchMockApi<ProspectDto>(
      `/${orgId}/agencies/${agencyId}/prospects`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getAgencyProspectById(
    orgId: string,
    agencyId: string,
    prospectId: string
  ): Promise<ProspectDto | null> {
    return this.fetchMockApi<ProspectDto | null>(
      `/${orgId}/agencies/${agencyId}/prospects/${prospectId}`
    );
  }
  async updateAgencyProspect(
    orgId: string,
    agencyId: string,
    prospectId: string,
    data: UpdateProspectRequest
  ): Promise<ProspectDto> {
    return this.fetchMockApi<ProspectDto>(
      `/${orgId}/agencies/${agencyId}/prospects/${prospectId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteAgencyProspect(
    orgId: string,
    agencyId: string,
    prospectId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/agencies/${agencyId}/prospects/${prospectId} `,
      { method: "DELETE" }
    );
  }

  // Business Actors
  async getAllBusinessActors(): Promise<BusinessActorDto[]> {
    return this.fetchMockApi<BusinessActorDto[]>("", {}, `${MOCK_API_GLOBAL_ORG_ENTITIES_BASE}/business-actors`);
  }
  async createBusinessActor(
    data: CreateBusinessActorRequest
  ): Promise<BusinessActorDto> {
    return this.fetchMockApi<BusinessActorDto>(
      "",
      { method: "POST", body: JSON.stringify(data) },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-actors"
    );
  }
  async getBusinessActorById(baId: string): Promise<BusinessActorDto | null> {
    return this.fetchMockApi<BusinessActorDto | null>(`/${baId}`, {}, `${MOCK_API_GLOBAL_ORG_ENTITIES_BASE}/business-actors`);
  }

  async updateBusinessActor(
    baId: string,
    data: UpdateBusinessActorRequest
  ): Promise<BusinessActorDto> {
    return this.fetchMockApi<BusinessActorDto>(
      `/${baId}`,
      { method: "PUT", body: JSON.stringify(data) },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-actors"
    );
  }
  async deleteBusinessActor(baId: string): Promise<void> {
    return this.fetchMockApi<void>(
      `/${baId} `,
      { method: "DELETE" },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-actors"
    );
  }
  async getBusinessActorsByType(
    type: BusinessActorType
  ): Promise<BusinessActorDto[]> {
    return this.fetchMockApi<BusinessActorDto[]>(
      `/type/${type}`,
      {},
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/business-actors"
    );
    // const orgs = await this.fetchMockApi<OrganizationDto[]>("/all");
  }

  // Images
  async uploadOrganizationImages(
    orgId: string,
    formData: FormData
  ): Promise<ImageDto[]> {
    // For FormData with mock API routes, you typically have a specific route.
    // This simple fetch won send FormData correctly to a generic mock handler without special parsing on the route side.
    // For now, returning a placeholder:
    console.warn(
      "uploadOrganizationImages mock in local repo needs a dedicated mock API route for FormData."
    );
    const files = formData.getAll("images") as File[];
    return Promise.resolve(
      files.map((f) => ({
        id: `mock-img-${Date.now()}`,
        name: f.name,
        size: f.size,
        fileType: f.type,
      }))
    );
  }
  async getOrganizationImageInfo(imageId: string): Promise<ImageDto | null> {
    return this.fetchMockApi<ImageDto | null>(
      `/images/${imageId}`,
      {},
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE
    );
  }

  // ThirdParty
  async getThirdParties(
    orgId: string,
    params: GetThirdPartyRequest
  ): Promise<ThirdPartyDto[]> {
    // This route remains the same as it doesn't conflict.
    return this.fetchMockApi<ThirdPartyDto[]>(
      `/${orgId}/third-parties?${new URLSearchParams(params as any)}`
    );
  }
  async createThirdParty(
    orgId: string,
    type: ThirdPartyType,
    data: CreateThirdPartyRequest
  ): Promise<ThirdPartyDto> {
    // [CHANGE] The route is now static, and the type is part of the body.
    const payload = { ...data, type: type };
    return this.fetchMockApi<ThirdPartyDto>(
      `/${orgId}/third-parties/create`,
      { method: "POST", body: JSON.stringify(payload) }
    );
  }
  async getThirdPartyById(
    orgId: string,
    thirdPartyId: string
  ): Promise<ThirdPartyDto | null> {
    // [CHANGE] The dynamic segment is now explicitly named.
    return this.fetchMockApi<ThirdPartyDto | null>(
      `/${orgId}/third-parties/${thirdPartyId}`
    );
  }
  async updateThirdParty(
    orgId: string,
    thirdPartyId: string,
    data: UpdateThirdPartyRequest
  ): Promise<ThirdPartyDto> {
    // [CHANGE] The dynamic segment is now explicitly named.
    return this.fetchMockApi<ThirdPartyDto>(
      `/${orgId}/third-parties/${thirdPartyId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteThirdParty(orgId: string, thirdPartyId: string): Promise<void> {
    // [CHANGE] The dynamic segment is now explicitly named.
    return this.fetchMockApi<void>(
      `/${orgId}/third-parties/${thirdPartyId}`,
      { method: "DELETE" }
    );
  }
  async updateThirdPartyStatus(
    orgId: string,
    thirdPartyId: string,
    data: UpdateThirdPartyStatusRequest
  ): Promise<ThirdPartyDto> {
    // [CHANGE] The dynamic segment is now explicitly named.
    return this.fetchMockApi<ThirdPartyDto>(
      `/${orgId}/third-parties/${thirdPartyId}/status`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  // Proposed Activities
  async getProposedActivities(
    orgId: string,
    params: { organizationId: string }
  ): Promise<ProposedActivityDto[]> {
    return this.fetchMockApi<ProposedActivityDto[]>(
      `/${orgId}/proposed-activities?${new URLSearchParams(
        params
      ).toString()}`
    );
  } // Ensure mock route handles query
  async createProposedActivity(
    orgId: string,
    data: CreateProposedActivityRequest
  ): Promise<ProposedActivityDto> {
    return this.fetchMockApi<ProposedActivityDto>(
      `/${orgId}/proposed-activities`,
      { method: "POST", body: JSON.stringify(data) }
    );
  }
  async getProposedActivityById(
    orgId: string,
    activityId: string
  ): Promise<ProposedActivityDto | null> {
    return this.fetchMockApi<ProposedActivityDto | null>(
      `/${orgId}/proposed-activities/${activityId}`
    );
  }
  async updateProposedActivity(
    orgId: string,
    activityId: string,
    data: UpdateProposedActivityRequest
  ): Promise<ProposedActivityDto> {
    return this.fetchMockApi<ProposedActivityDto>(
      `/${orgId}/proposed-activities/${activityId}`,
      { method: "PUT", body: JSON.stringify(data) }
    );
  }
  async deleteProposedActivity(
    orgId: string,
    activityId: string
  ): Promise<void> {
    return this.fetchMockApi<void>(
      `/${orgId}/proposed-activities/${activityId}`,
      { method: "DELETE" }
    );
  }

  // Applications & Keys
  async getAllApplications(): Promise<ApplicationDto[]> {
    return this.fetchMockApi<ApplicationDto[]>(
      ``,
      {},
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/applications"
    );
  }
  async createApplication(
    data: CreateApplicationRequest
  ): Promise<ApplicationDto> {
    return this.fetchMockApi<ApplicationDto>(
      ``,
      { method: "POST", body: JSON.stringify(data) },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/applications"
    );
  }
  async getApplicationKeys(
    applicationId: string
  ): Promise<ApplicationKeyDto[]> {
    return this.fetchMockApi<ApplicationKeyDto[]>(
      `/${applicationId}/keys`,
      {},
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/applications"
    );
  }
  async createApiKey(applicationId: string): Promise<ApplicationKeyDto> {
    return this.fetchMockApi<ApplicationKeyDto>(
      `/${applicationId}/keys`,
      { method: "POST" },
      MOCK_API_GLOBAL_ORG_ENTITIES_BASE + "/applications"
    );
  }
}
// END OF FILE: lib/data-repo/organization/organization-local-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/organization/organization-remote-repository.ts

// lib/data-repo/organization/organization-remote-repository.ts
import { IOrganizationRepository } from './organization-repository-interface';
import { /* Import ALL DTOs and Request types used in the interface */
  OrganizationDto, CreateOrganizationRequest, UpdateOrganizationRequest, UpdateOrganizationStatusRequest,
  ContactDto, CreateContactRequest, UpdateContactRequest, ContactableType,
  AddressDto, CreateAddressRequest, UpdateAddressRequest, AddressableType,
  AgencyDto, CreateAgencyRequest, UpdateAgencyRequest, UpdateAgencyStatusRequest,
  EmployeeDto, CreateEmployeeRequest, UpdateEmployeeRequest, AffectEmployeeRequest, EmployeeResponse,
  SalesPersonDto, CreateSalesPersonRequest, UpdateSalesPersonRequest,
  CustomerDto, CreateCustomerRequest, UpdateCustomerRequest, AffectCustomerRequest,
  ProviderDto, CreateProviderRequest, UpdateProviderRequest, AffectProviderRequest,
  ProspectDto, CreateProspectRequest, UpdateProspectRequest,
  PracticalInformationDto, CreatePracticalInformationRequest, UpdatePracticalInformationRequest,
  CertificationDto, CreateCertificationRequest, UpdateCertificationRequest,
  BusinessDomainDto, CreateBusinessDomainRequest, UpdateBusinessDomainRequest, GetBusinessDomainRequest,
  ImageDto,
  ThirdPartyDto, CreateThirdPartyRequest, UpdateThirdPartyRequest, UpdateThirdPartyStatusRequest, GetThirdPartyRequest, ThirdPartyType,
  ProposedActivityDto, CreateProposedActivityRequest, UpdateProposedActivityRequest,
  BusinessActorDto, CreateBusinessActorRequest, UpdateBusinessActorRequest, BusinessActorType,
  ApplicationDto, CreateApplicationRequest, ApplicationKeyDto,
} from '@/types/organization';
import { yowyobOrganizationApi } from '@/lib/apiClient';

export class OrganizationRemoteRepository implements IOrganizationRepository {
  // Organizations
  async getMyOrganizations(): Promise<OrganizationDto[]> {
    return yowyobOrganizationApi.getMyOrganizations();
  }
  async getAllOrganizations(): Promise<OrganizationDto[]> {
    return yowyobOrganizationApi.getAllOrganizations();
  }
  async getOrganizationsByDomain(domainId: string): Promise<OrganizationDto[]> {
    return yowyobOrganizationApi.getOrganizationsByDomain(domainId);
  }
  async getOrganizationById(orgId: string): Promise<OrganizationDto | null> {
    return yowyobOrganizationApi.getOrganizationById(orgId).catch(e => (e.status === 404 ? null : Promise.reject(e)));
  }
  async createOrganization(data: CreateOrganizationRequest): Promise<OrganizationDto> { return yowyobOrganizationApi.createOrganization(data); }
  async updateOrganization(orgId: string, data: UpdateOrganizationRequest): Promise<OrganizationDto> { return yowyobOrganizationApi.updateOrganization(orgId, data); }
  async deleteOrganization(orgId: string): Promise<void> { return yowyobOrganizationApi.deleteOrganization(orgId); }
  async updateOrganizationStatus(orgId: string, data: UpdateOrganizationStatusRequest): Promise<OrganizationDto> { return yowyobOrganizationApi.updateOrganizationStatus(orgId, data); }
  async addBusinessDomainToOrg(orgId: string, businessDomainId: string): Promise<OrganizationDto> { return yowyobOrganizationApi.addBusinessDomainToOrg(orgId, businessDomainId); }
  async removeBusinessDomainFromOrg(orgId: string, businessDomainId: string): Promise<OrganizationDto> { return yowyobOrganizationApi.removeBusinessDomainFromOrg(orgId, businessDomainId); }

  // Contacts
  async getContacts(contactableType: ContactableType, contactableId: string): Promise<ContactDto[]> { return yowyobOrganizationApi.getContacts(contactableType, contactableId); }
  async getContactById(contactableType: ContactableType, contactableId: string, contactId: string): Promise<ContactDto | null> { return yowyobOrganizationApi.getContactById(contactableType, contactableId, contactId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async createContact(contactableType: ContactableType, contactableId: string, data: CreateContactRequest): Promise<ContactDto> { return yowyobOrganizationApi.createContact(contactableType, contactableId, data); }
  async updateContact(contactableType: ContactableType, contactableId: string, contactId: string, data: UpdateContactRequest): Promise<ContactDto> { return yowyobOrganizationApi.updateContact(contactableType, contactableId, contactId, data); }
  async deleteContactById(contactableType: ContactableType, contactableId: string, contactId: string): Promise<void> { return yowyobOrganizationApi.deleteContactById(contactableType, contactableId, contactId); }
  async markContactAsFavorite(contactableType: ContactableType, contactableId: string, contactId: string): Promise<ContactDto> { return yowyobOrganizationApi.markContactAsFavorite(contactableType, contactableId, contactId); }

  // Addresses
  async getAddresses(addressableType: AddressableType, addressableId: string): Promise<AddressDto[]> { return yowyobOrganizationApi.getAddresses(addressableType, addressableId); }
  async getAddressById(addressableType: AddressableType, addressableId: string, addressId: string): Promise<AddressDto | null> { return yowyobOrganizationApi.getAddressById(addressableType, addressableId, addressId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async createAddress(addressableType: AddressableType, addressableId: string, data: CreateAddressRequest): Promise<AddressDto> { return yowyobOrganizationApi.createAddress(addressableType, addressableId, data); }
  async updateAddress(addressableType: AddressableType, addressableId: string, addressId: string, data: UpdateAddressRequest): Promise<AddressDto> { return yowyobOrganizationApi.updateAddress(addressableType, addressableId, addressId, data); }
  async deleteAddressById(addressableType: AddressableType, addressableId: string, addressId: string): Promise<void> { return yowyobOrganizationApi.deleteAddressById(addressableType, addressableId, addressId); }
  async markAddressAsFavorite(addressableType: AddressableType, addressableId: string, addressId: string): Promise<AddressDto> { return yowyobOrganizationApi.markAddressAsFavorite(addressableType, addressableId, addressId); }

  // Practical Information
  async getPracticalInformation(orgId: string): Promise<PracticalInformationDto[]> { return yowyobOrganizationApi.getPracticalInformation(orgId, { organizationId: orgId }); }
  async createPracticalInformation(orgId: string, data: CreatePracticalInformationRequest): Promise<PracticalInformationDto> { return yowyobOrganizationApi.createPracticalInformation(orgId, data); }
  async getPracticalInformationById(orgId: string, infoId: string): Promise<PracticalInformationDto | null> { return yowyobOrganizationApi.getPracticalInformationById(orgId, infoId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updatePracticalInformation(orgId: string, infoId: string, data: UpdatePracticalInformationRequest): Promise<PracticalInformationDto> { return yowyobOrganizationApi.updatePracticalInformation(orgId, infoId, data); }
  async deletePracticalInformation(orgId: string, infoId: string): Promise<void> { return yowyobOrganizationApi.deletePracticalInformation(orgId, infoId); }

  // Certifications
  async getCertifications(orgId: string): Promise<CertificationDto[]> { return yowyobOrganizationApi.getCertifications(orgId); }
  async createCertification(orgId: string, data: CreateCertificationRequest): Promise<CertificationDto> { return yowyobOrganizationApi.createCertification(orgId, data); }
  async getCertificationById(orgId: string, certId: string): Promise<CertificationDto | null> { return yowyobOrganizationApi.getCertificationById(orgId, certId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateCertification(orgId: string, certId: string, data: UpdateCertificationRequest): Promise<CertificationDto> { return yowyobOrganizationApi.updateCertification(orgId, certId, data); }
  async deleteCertification(orgId: string, certId: string): Promise<void> { return yowyobOrganizationApi.deleteCertification(orgId, certId); }

  // Business Domains
  async getAllBusinessDomains(params?: GetBusinessDomainRequest): Promise<BusinessDomainDto[]> { return yowyobOrganizationApi.getAllBusinessDomains(params); }
  async getBusinessDomainById(domainId: string): Promise<BusinessDomainDto | null> { return yowyobOrganizationApi.getBusinessDomainById(domainId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async createBusinessDomain(data: CreateBusinessDomainRequest): Promise<BusinessDomainDto> { return yowyobOrganizationApi.createBusinessDomain(data); }
  async updateBusinessDomain(domainId: string, data: UpdateBusinessDomainRequest): Promise<BusinessDomainDto> { return yowyobOrganizationApi.updateBusinessDomain(domainId, data); }
  async deleteBusinessDomain(domainId: string): Promise<void> { return yowyobOrganizationApi.deleteBusinessDomain(domainId); }

  // Agencies
  async getAgencies(orgId: string, active?: boolean): Promise<AgencyDto[]> { return yowyobOrganizationApi.getAgencies(orgId, active); }
  async createAgency(orgId: string, data: CreateAgencyRequest): Promise<AgencyDto> { return yowyobOrganizationApi.createAgency(orgId, data); }
  async getAgencyById(orgId: string, agencyId: string): Promise<AgencyDto | null> { return yowyobOrganizationApi.getAgencyById(orgId, agencyId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateAgency(orgId: string, agencyId: string, data: UpdateAgencyRequest): Promise<AgencyDto> { return yowyobOrganizationApi.updateAgency(orgId, agencyId, data); }
  async deleteAgency(orgId: string, agencyId: string): Promise<void> { return yowyobOrganizationApi.deleteAgency(orgId, agencyId); }
  async updateAgencyStatus(orgId: string, agencyId: string, data: UpdateAgencyStatusRequest): Promise<AgencyDto> { return yowyobOrganizationApi.updateAgencyStatus(orgId, agencyId, data); }

  // Employees (Organization-scoped)
  async getOrgEmployees(orgId: string): Promise<EmployeeDto[]> { return yowyobOrganizationApi.getOrgEmployees(orgId); }
  async createOrgEmployee(orgId: string, data: CreateEmployeeRequest): Promise<EmployeeResponse> { return yowyobOrganizationApi.createOrgEmployee(orgId, data); }
  async getOrgEmployeeById(orgId: string, employeeId: string): Promise<EmployeeDto | null> { return yowyobOrganizationApi.getOrgEmployeeById(orgId, employeeId).catch(e => e.status === 404 ? null : Promise.reject(e)); }
  async updateOrgEmployee(orgId: string, employeeId: string, data: UpdateEmployeeRequest): Promise<EmployeeResponse> { return yowyobOrganizationApi.updateOrgEmployee(orgId, employeeId, data); }
  async deleteOrgEmployee(orgId: string, employeeId: string): Promise<void> { return yowyobOrganizationApi.deleteOrgEmployee(orgId, employeeId); }

  // Employees (Agency-scoped)
  async getAgencyEmployees(orgId: string, agencyId: string): Promise<EmployeeDto[]> { return yowyobOrganizationApi.getAgencyEmployees(orgId, agencyId); }
  async createAgencyEmployee(orgId: string, agencyId: string, data: CreateEmployeeRequest): Promise<EmployeeResponse> { return yowyobOrganizationApi.createAgencyEmployee(orgId, agencyId, data); }
  async getAgencyEmployeeById(orgId: string, agencyId: string, employeeId: string): Promise<EmployeeDto | null> { return yowyobOrganizationApi.getAgencyEmployeeById(orgId, agencyId, employeeId).catch(e => e.status === 404 ? null : Promise.reject(e)); }
  async updateAgencyEmployee(orgId: string, agencyId: string, employeeId: string, data: UpdateEmployeeRequest): Promise<EmployeeResponse> { return yowyobOrganizationApi.updateAgencyEmployee(orgId, agencyId, employeeId, data); }
  async deleteAgencyEmployee(orgId: string, agencyId: string, employeeId: string): Promise<void> { return yowyobOrganizationApi.deleteAgencyEmployee(orgId, agencyId, employeeId); }
  async affectEmployeeToAgency(orgId: string, agencyId: string, data: AffectEmployeeRequest): Promise<EmployeeResponse> { return yowyobOrganizationApi.affectEmployeeToAgency(orgId, agencyId, data); }

  // SalesPersons - Placeholder, expand similarly to Employees
  async getOrgSalesPersons(orgId: string): Promise<SalesPersonDto[]> { const s = await yowyobOrganizationApi.getOrgSalesPersons(orgId); return s || []; }
  async createOrgSalesPerson(orgId: string, data: CreateSalesPersonRequest): Promise<SalesPersonDto> { return yowyobOrganizationApi.createOrgSalesPerson(orgId, data); }
  async getOrgSalesPersonById(orgId: string, salesPersonId: string): Promise<SalesPersonDto | null> { return yowyobOrganizationApi.getOrgSalesPersonById(orgId, salesPersonId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateOrgSalesPerson(orgId: string, salesPersonId: string, data: UpdateSalesPersonRequest): Promise<SalesPersonDto> { return yowyobOrganizationApi.updateOrgSalesPerson(orgId, salesPersonId, data); }
  async deleteOrgSalesPerson(orgId: string, salesPersonId: string): Promise<void> { return yowyobOrganizationApi.deleteOrgSalesPerson(orgId, salesPersonId); }
  async getAgencySalesPersons(orgId: string, agencyId: string): Promise<SalesPersonDto[]> { const s = await yowyobOrganizationApi.getAgencySalesPersons(orgId, agencyId); return s || []; }
  async createAgencySalesPerson(orgId: string, agencyId: string, data: CreateSalesPersonRequest): Promise<SalesPersonDto> { return yowyobOrganizationApi.createAgencySalesPerson(orgId, agencyId, data); }
  async getAgencySalesPersonById(orgId: string, agencyId: string, salesPersonId: string): Promise<SalesPersonDto | null> { return yowyobOrganizationApi.getAgencySalesPersonById(orgId, agencyId, salesPersonId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateAgencySalesPerson(orgId: string, agencyId: string, salesPersonId: string, data: UpdateSalesPersonRequest): Promise<SalesPersonDto> { return yowyobOrganizationApi.updateAgencySalesPerson(orgId, agencyId, salesPersonId, data); }
  async deleteAgencySalesPerson(orgId: string, agencyId: string, salesPersonId: string): Promise<void> { return yowyobOrganizationApi.deleteAgencySalesPerson(orgId, agencyId, salesPersonId); }

  // Customers (Organization-linked) - Placeholder
  async getOrgCustomers(orgId: string): Promise<CustomerDto[]> { const c = await yowyobOrganizationApi.getOrgCustomers(orgId); return c || []; }
  async createOrgCustomer(orgId: string, data: CreateCustomerRequest): Promise<CustomerDto> { return yowyobOrganizationApi.createOrgCustomer(orgId, data); }
  async getOrgCustomerById(orgId: string, customerId: string): Promise<CustomerDto | null> { return yowyobOrganizationApi.getOrgCustomerById(orgId, customerId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateOrgCustomer(orgId: string, customerId: string, data: UpdateCustomerRequest): Promise<CustomerDto> { return yowyobOrganizationApi.updateOrgCustomer(orgId, customerId, data); }
  async deleteOrgCustomer(orgId: string, customerId: string): Promise<void> { return yowyobOrganizationApi.deleteOrgCustomer(orgId, customerId); }
  async getAgencyCustomers(orgId: string, agencyId: string): Promise<CustomerDto[]> { const c = await yowyobOrganizationApi.getAgencyCustomers(orgId, agencyId); return c || []; }
  async createAgencyCustomer(orgId: string, agencyId: string, data: CreateCustomerRequest): Promise<CustomerDto> { return yowyobOrganizationApi.createAgencyCustomer(orgId, agencyId, data); }
  async getAgencyCustomerById(orgId: string, agencyId: string, customerId: string): Promise<CustomerDto | null> { return yowyobOrganizationApi.getAgencyCustomerById(orgId, agencyId, customerId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateAgencyCustomer(orgId: string, agencyId: string, customerId: string, data: UpdateCustomerRequest): Promise<CustomerDto> { return yowyobOrganizationApi.updateAgencyCustomer(orgId, agencyId, customerId, data); }
  async deleteAgencyCustomer(orgId: string, agencyId: string, customerId: string): Promise<void> { return yowyobOrganizationApi.deleteAgencyCustomer(orgId, agencyId, customerId); }
  async affectCustomerToAgency(orgId: string, agencyId: string, data: AffectCustomerRequest): Promise<CustomerDto> { return yowyobOrganizationApi.affectCustomerToAgency(orgId, agencyId, data); }

  // Suppliers (Providers) - Placeholder
  async getOrgSuppliers(orgId: string): Promise<ProviderDto[]> { const s = await yowyobOrganizationApi.getOrgSuppliers(orgId); return s || []; }
  async createOrgSupplier(orgId: string, data: CreateProviderRequest): Promise<ProviderDto> { return yowyobOrganizationApi.createOrgSupplier(orgId, data); }
  async getOrgSupplierById(orgId: string, providerId: string): Promise<ProviderDto | null> { return yowyobOrganizationApi.getOrgSupplierById(orgId, providerId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateOrgSupplier(orgId: string, providerId: string, data: UpdateProviderRequest): Promise<ProviderDto> { return yowyobOrganizationApi.updateOrgSupplier(orgId, providerId, data); }
  async deleteOrgSupplier(orgId: string, providerId: string): Promise<void> { return yowyobOrganizationApi.deleteOrgSupplier(orgId, providerId); }
  async getAgencySuppliers(orgId: string, agencyId: string): Promise<ProviderDto[]> { const s = await yowyobOrganizationApi.getAgencySuppliers(orgId, agencyId); return s || []; }
  async createAgencySupplier(orgId: string, agencyId: string, data: CreateProviderRequest): Promise<ProviderDto> { return yowyobOrganizationApi.createAgencySupplier(orgId, agencyId, data); }
  async getAgencySupplierById(orgId: string, agencyId: string, providerId: string): Promise<ProviderDto | null> { return yowyobOrganizationApi.getAgencySupplierById(orgId, agencyId, providerId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateAgencySupplier(orgId: string, agencyId: string, providerId: string, data: UpdateProviderRequest): Promise<ProviderDto> { return yowyobOrganizationApi.updateAgencySupplier(orgId, agencyId, providerId, data); }
  async deleteAgencySupplier(orgId: string, agencyId: string, providerId: string): Promise<void> { return yowyobOrganizationApi.deleteAgencySupplier(orgId, agencyId, providerId); }
  async affectSupplierToAgency(orgId: string, agencyId: string, data: AffectProviderRequest): Promise<ProviderDto> { return yowyobOrganizationApi.affectSupplierToAgency(orgId, agencyId, data); }

  // Prospects - Placeholder
  async getOrgProspects(orgId: string): Promise<ProspectDto[]> { const p = await yowyobOrganizationApi.getOrgProspects(orgId); return p || []; }
  async createOrgProspect(orgId: string, data: CreateProspectRequest): Promise<ProspectDto> { return yowyobOrganizationApi.createOrgProspect(orgId, data); }
  async getOrgProspectById(orgId: string, prospectId: string): Promise<ProspectDto | null> { return yowyobOrganizationApi.getOrgProspectById(orgId, prospectId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateOrgProspect(orgId: string, prospectId: string, data: UpdateProspectRequest): Promise<ProspectDto> { return yowyobOrganizationApi.updateOrgProspect(orgId, prospectId, data); }
  async deleteOrgProspect(orgId: string, prospectId: string): Promise<void> { return yowyobOrganizationApi.deleteOrgProspect(orgId, prospectId); }
  async getAgencyProspects(orgId: string, agencyId: string): Promise<ProspectDto[]> { const p = await yowyobOrganizationApi.getAgencyProspects(orgId, agencyId); return p || []; }
  async createAgencyProspect(orgId: string, agencyId: string, data: CreateProspectRequest): Promise<ProspectDto> { return yowyobOrganizationApi.createAgencyProspect(orgId, agencyId, data); }
  async getAgencyProspectById(orgId: string, agencyId: string, prospectId: string): Promise<ProspectDto | null> { return yowyobOrganizationApi.getAgencyProspectById(orgId, agencyId, prospectId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateAgencyProspect(orgId: string, agencyId: string, prospectId: string, data: UpdateProspectRequest): Promise<ProspectDto> { return yowyobOrganizationApi.updateAgencyProspect(orgId, agencyId, prospectId, data); }
  async deleteAgencyProspect(orgId: string, agencyId: string, prospectId: string): Promise<void> { return yowyobOrganizationApi.deleteAgencyProspect(orgId, agencyId, prospectId); }


  // Business Actors
  async getAllBusinessActors(): Promise<BusinessActorDto[]> {
    return yowyobOrganizationApi.getAllBusinessActors();
  }
  async createBusinessActor(data: CreateBusinessActorRequest): Promise<BusinessActorDto> { return yowyobOrganizationApi.createBusinessActor(data); }
  async getBusinessActorById(baId: string): Promise<BusinessActorDto | null> {
    return yowyobOrganizationApi.getBusinessActorById(baId).catch(e => (e.status === 404 ? null : Promise.reject(e)));
  }
  async updateBusinessActor(baId: string, data: UpdateBusinessActorRequest): Promise<BusinessActorDto> { return yowyobOrganizationApi.updateBusinessActor(baId, data); }
  async deleteBusinessActor(baId: string): Promise<void> { return yowyobOrganizationApi.deleteBusinessActor(baId); }
  async getBusinessActorsByType(type: BusinessActorType): Promise<BusinessActorDto[]> {
    return yowyobOrganizationApi.getBusinessActorsByType(type);
  }

  // Images
  async uploadOrganizationImages(orgId: string, formData: FormData): Promise<ImageDto[]> { return yowyobOrganizationApi.uploadOrganizationImages(orgId, formData); }
  async getOrganizationImageInfo(imageId: string): Promise<ImageDto | null> { return yowyobOrganizationApi.getOrganizationImageInfo(imageId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }

  // ThirdParty
  async getThirdParties(orgId: string, params: GetThirdPartyRequest): Promise<ThirdPartyDto[]> { return yowyobOrganizationApi.getThirdParties(orgId, params); }
  async createThirdParty(orgId: string, type: ThirdPartyType, data: CreateThirdPartyRequest): Promise<ThirdPartyDto> { return yowyobOrganizationApi.createThirdParty(orgId, type, data); }
  async getThirdPartyById(orgId: string, thirdPartyId: string): Promise<ThirdPartyDto | null> { return yowyobOrganizationApi.getThirdPartyById(orgId, thirdPartyId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateThirdParty(orgId: string, thirdPartyId: string, data: UpdateThirdPartyRequest): Promise<ThirdPartyDto> { return yowyobOrganizationApi.updateThirdParty(orgId, thirdPartyId, data); }
  async deleteThirdParty(orgId: string, thirdPartyId: string): Promise<void> { return yowyobOrganizationApi.deleteThirdParty(orgId, thirdPartyId); }
  async updateThirdPartyStatus(orgId: string, thirdPartyId: string, data: UpdateThirdPartyStatusRequest): Promise<ThirdPartyDto> { return yowyobOrganizationApi.updateThirdPartyStatus(orgId, thirdPartyId, data); }

  // Proposed Activities
  async getProposedActivities(orgId: string, params: { organizationId: string }): Promise<ProposedActivityDto[]> { return yowyobOrganizationApi.getProposedActivities(orgId, params); }
  async createProposedActivity(orgId: string, data: CreateProposedActivityRequest): Promise<ProposedActivityDto> { return yowyobOrganizationApi.createProposedActivity(orgId, data); }
  async getProposedActivityById(orgId: string, activityId: string): Promise<ProposedActivityDto | null> { return yowyobOrganizationApi.getProposedActivityById(orgId, activityId).catch(e => (e.status === 404 ? null : Promise.reject(e))); }
  async updateProposedActivity(orgId: string, activityId: string, data: UpdateProposedActivityRequest): Promise<ProposedActivityDto> { return yowyobOrganizationApi.updateProposedActivity(orgId, activityId, data); }
  async deleteProposedActivity(orgId: string, activityId: string): Promise<void> { return yowyobOrganizationApi.deleteProposedActivity(orgId, activityId); }

  // Applications & Keys
  async getAllApplications(): Promise<ApplicationDto[]> { return yowyobOrganizationApi.getAllApplications(); }
  async createApplication(data: CreateApplicationRequest): Promise<ApplicationDto> { return yowyobOrganizationApi.createApplication(data); }
  async getApplicationKeys(applicationId: string): Promise<ApplicationKeyDto[]> { return yowyobOrganizationApi.getApplicationKeys(applicationId); }
  async createApiKey(applicationId: string): Promise<ApplicationKeyDto> { return yowyobOrganizationApi.createApiKey(applicationId); }


}// END OF FILE: lib/data-repo/organization/organization-remote-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/organization/organization-repository-interface.ts

// lib/data-repo/organization/organization-repository-interface.ts
import {
  OrganizationDto, CreateOrganizationRequest, UpdateOrganizationRequest, UpdateOrganizationStatusRequest,
  ContactDto, CreateContactRequest, UpdateContactRequest, ContactableType,
  AddressDto, CreateAddressRequest, UpdateAddressRequest, AddressableType,
  AgencyDto, CreateAgencyRequest, UpdateAgencyRequest, UpdateAgencyStatusRequest,
  EmployeeDto, CreateEmployeeRequest, UpdateEmployeeRequest, AffectEmployeeRequest, EmployeeResponse,
  SalesPersonDto, CreateSalesPersonRequest, UpdateSalesPersonRequest,
  CustomerDto, CreateCustomerRequest, UpdateCustomerRequest, AffectCustomerRequest,
  ProviderDto, CreateProviderRequest, UpdateProviderRequest, AffectProviderRequest,
  ProspectDto, CreateProspectRequest, UpdateProspectRequest,
  PracticalInformationDto, CreatePracticalInformationRequest, UpdatePracticalInformationRequest,
  CertificationDto, CreateCertificationRequest, UpdateCertificationRequest,
  BusinessDomainDto, CreateBusinessDomainRequest, UpdateBusinessDomainRequest, GetBusinessDomainRequest,
  ImageDto,
  ThirdPartyDto, CreateThirdPartyRequest, UpdateThirdPartyRequest, UpdateThirdPartyStatusRequest, GetThirdPartyRequest, ThirdPartyType,
  ProposedActivityDto, CreateProposedActivityRequest, UpdateProposedActivityRequest,
  BusinessActorDto, CreateBusinessActorRequest, UpdateBusinessActorRequest, BusinessActorType,
  ApplicationDto, CreateApplicationRequest, ApplicationKeyDto,
} from '@/types/organization';

export interface IOrganizationRepository {
  // Organizations
  getMyOrganizations(): Promise<OrganizationDto[]>;
  getAllOrganizations(): Promise<OrganizationDto[]>;
  getOrganizationsByDomain(domainId: string): Promise<OrganizationDto[]>;

  getOrganizationById(orgId: string): Promise<OrganizationDto | null>;
  createOrganization(data: CreateOrganizationRequest): Promise<OrganizationDto>;
  updateOrganization(orgId: string, data: UpdateOrganizationRequest): Promise<OrganizationDto>;
  deleteOrganization(orgId: string): Promise<void>;
  updateOrganizationStatus(orgId: string, data: UpdateOrganizationStatusRequest): Promise<OrganizationDto>;
  addBusinessDomainToOrg(orgId: string, businessDomainId: string): Promise<OrganizationDto>;
  removeBusinessDomainFromOrg(orgId: string, businessDomainId: string): Promise<OrganizationDto>;

  // Contacts
  getContacts(contactableType: ContactableType, contactableId: string): Promise<ContactDto[]>;
  getContactById(contactableType: ContactableType, contactableId: string, contactId: string): Promise<ContactDto | null>;
  createContact(contactableType: ContactableType, contactableId: string, data: CreateContactRequest): Promise<ContactDto>;
  updateContact(contactableType: ContactableType, contactableId: string, contactId: string, data: UpdateContactRequest): Promise<ContactDto>;
  deleteContactById(contactableType: ContactableType, contactableId: string, contactId: string): Promise<void>;
  markContactAsFavorite(contactableType: ContactableType, contactableId: string, contactId: string): Promise<ContactDto>;

  // Addresses
  getAddresses(addressableType: AddressableType, addressableId: string): Promise<AddressDto[]>;
  getAddressById(addressableType: AddressableType, addressableId: string, addressId: string): Promise<AddressDto | null>;
  createAddress(addressableType: AddressableType, addressableId: string, data: CreateAddressRequest): Promise<AddressDto>;
  updateAddress(addressableType: AddressableType, addressableId: string, addressId: string, data: UpdateAddressRequest): Promise<AddressDto>;
  deleteAddressById(addressableType: AddressableType, addressableId: string, addressId: string): Promise<void>;
  markAddressAsFavorite(addressableType: AddressableType, addressableId: string, addressId: string): Promise<AddressDto>;

  // Practical Information
  getPracticalInformation(orgId: string): Promise<PracticalInformationDto[]>; // Adjusted params
  createPracticalInformation(orgId: string, data: CreatePracticalInformationRequest): Promise<PracticalInformationDto>;
  getPracticalInformationById(orgId: string, infoId: string): Promise<PracticalInformationDto | null>;
  updatePracticalInformation(orgId: string, infoId: string, data: UpdatePracticalInformationRequest): Promise<PracticalInformationDto>;
  deletePracticalInformation(orgId: string, infoId: string): Promise<void>;

  // Certifications
  getCertifications(orgId: string): Promise<CertificationDto[]>;
  createCertification(orgId: string, data: CreateCertificationRequest): Promise<CertificationDto>;
  getCertificationById(orgId: string, certId: string): Promise<CertificationDto | null>;
  updateCertification(orgId: string, certId: string, data: UpdateCertificationRequest): Promise<CertificationDto>;
  deleteCertification(orgId: string, certId: string): Promise<void>;

  // Business Domains
  getAllBusinessDomains(params?: GetBusinessDomainRequest): Promise<BusinessDomainDto[]>;
  getBusinessDomainById(domainId: string): Promise<BusinessDomainDto | null>;
  createBusinessDomain(data: CreateBusinessDomainRequest): Promise<BusinessDomainDto>;
  updateBusinessDomain(domainId: string, data: UpdateBusinessDomainRequest): Promise<BusinessDomainDto>;
  deleteBusinessDomain(domainId: string): Promise<void>;

  // Agencies
  getAgencies(orgId: string, active?: boolean): Promise<AgencyDto[]>;
  createAgency(orgId: string, data: CreateAgencyRequest): Promise<AgencyDto>;
  getAgencyById(orgId: string, agencyId: string): Promise<AgencyDto | null>;
  updateAgency(orgId: string, agencyId: string, data: UpdateAgencyRequest): Promise<AgencyDto>;
  deleteAgency(orgId: string, agencyId: string): Promise<void>;
  updateAgencyStatus(orgId: string, agencyId: string, data: UpdateAgencyStatusRequest): Promise<AgencyDto>;

  // Employees (Organization-scoped)
  getOrgEmployees(orgId: string): Promise<EmployeeDto[]>;
  createOrgEmployee(orgId: string, data: CreateEmployeeRequest): Promise<EmployeeResponse>;
  getOrgEmployeeById(orgId: string, employeeId: string): Promise<EmployeeDto | null>;
  updateOrgEmployee(orgId: string, employeeId: string, data: UpdateEmployeeRequest): Promise<EmployeeResponse>;
  deleteOrgEmployee(orgId: string, employeeId: string): Promise<void>;

  // Employees (Agency-scoped)
  getAgencyEmployees(orgId: string, agencyId: string): Promise<EmployeeDto[]>;
  createAgencyEmployee(orgId: string, agencyId: string, data: CreateEmployeeRequest): Promise<EmployeeResponse>;
  getAgencyEmployeeById(orgId: string, agencyId: string, employeeId: string): Promise<EmployeeDto | null>;
  updateAgencyEmployee(orgId: string, agencyId: string, employeeId: string, data: UpdateEmployeeRequest): Promise<EmployeeResponse>;
  deleteAgencyEmployee(orgId: string, agencyId: string, employeeId: string): Promise<void>;
  affectEmployeeToAgency(orgId: string, agencyId: string, data: AffectEmployeeRequest): Promise<EmployeeResponse>;

  // SalesPersons (Organization-scoped)
  getOrgSalesPersons(orgId: string): Promise<SalesPersonDto[]>;
  createOrgSalesPerson(orgId: string, data: CreateSalesPersonRequest): Promise<SalesPersonDto>;
  getOrgSalesPersonById(orgId: string, salesPersonId: string): Promise<SalesPersonDto | null>;
  updateOrgSalesPerson(orgId: string, salesPersonId: string, data: UpdateSalesPersonRequest): Promise<SalesPersonDto>;
  deleteOrgSalesPerson(orgId: string, salesPersonId: string): Promise<void>;

  // SalesPersons (Agency-scoped)
  getAgencySalesPersons(orgId: string, agencyId: string): Promise<SalesPersonDto[]>;
  createAgencySalesPerson(orgId: string, agencyId: string, data: CreateSalesPersonRequest): Promise<SalesPersonDto>;
  getAgencySalesPersonById(orgId: string, agencyId: string, salesPersonId: string): Promise<SalesPersonDto | null>;
  updateAgencySalesPerson(orgId: string, agencyId: string, salesPersonId: string, data: UpdateSalesPersonRequest): Promise<SalesPersonDto>;
  deleteAgencySalesPerson(orgId: string, agencyId: string, salesPersonId: string): Promise<void>;

  // Customers (Organization-scoped)
  getOrgCustomers(orgId: string): Promise<CustomerDto[]>;
  createOrgCustomer(orgId: string, data: CreateCustomerRequest): Promise<CustomerDto>;
  getOrgCustomerById(orgId: string, customerId: string): Promise<CustomerDto | null>;
  updateOrgCustomer(orgId: string, customerId: string, data: UpdateCustomerRequest): Promise<CustomerDto>;
  deleteOrgCustomer(orgId: string, customerId: string): Promise<void>;

  // Customers (Agency-scoped)
  getAgencyCustomers(orgId: string, agencyId: string): Promise<CustomerDto[]>;
  createAgencyCustomer(orgId: string, agencyId: string, data: CreateCustomerRequest): Promise<CustomerDto>;
  getAgencyCustomerById(orgId: string, agencyId: string, customerId: string): Promise<CustomerDto | null>;
  updateAgencyCustomer(orgId: string, agencyId: string, customerId: string, data: UpdateCustomerRequest): Promise<CustomerDto>;
  deleteAgencyCustomer(orgId: string, agencyId: string, customerId: string): Promise<void>;
  affectCustomerToAgency(orgId: string, agencyId: string, data: AffectCustomerRequest): Promise<CustomerDto>;

  // Suppliers (Providers) (Organization-scoped)
  getOrgSuppliers(orgId: string): Promise<ProviderDto[]>;
  createOrgSupplier(orgId: string, data: CreateProviderRequest): Promise<ProviderDto>;
  getOrgSupplierById(orgId: string, providerId: string): Promise<ProviderDto | null>;
  updateOrgSupplier(orgId: string, providerId: string, data: UpdateProviderRequest): Promise<ProviderDto>;
  deleteOrgSupplier(orgId: string, providerId: string): Promise<void>;

  // Suppliers (Providers) (Agency-scoped)
  getAgencySuppliers(orgId: string, agencyId: string): Promise<ProviderDto[]>;
  createAgencySupplier(orgId: string, agencyId: string, data: CreateProviderRequest): Promise<ProviderDto>;
  getAgencySupplierById(orgId: string, agencyId: string, providerId: string): Promise<ProviderDto | null>;
  updateAgencySupplier(orgId: string, agencyId: string, providerId: string, data: UpdateProviderRequest): Promise<ProviderDto>;
  deleteAgencySupplier(orgId: string, agencyId: string, providerId: string): Promise<void>;
  affectSupplierToAgency(orgId: string, agencyId: string, data: AffectProviderRequest): Promise<ProviderDto>;

  // Prospects (Organization-scoped)
  getOrgProspects(orgId: string): Promise<ProspectDto[]>;
  createOrgProspect(orgId: string, data: CreateProspectRequest): Promise<ProspectDto>;
  getOrgProspectById(orgId: string, prospectId: string): Promise<ProspectDto | null>;
  updateOrgProspect(orgId: string, prospectId: string, data: UpdateProspectRequest): Promise<ProspectDto>;
  deleteOrgProspect(orgId: string, prospectId: string): Promise<void>;

  // Prospects (Agency-scoped)
  getAgencyProspects(orgId: string, agencyId: string): Promise<ProspectDto[]>;
  createAgencyProspect(orgId: string, agencyId: string, data: CreateProspectRequest): Promise<ProspectDto>;
  getAgencyProspectById(orgId: string, agencyId: string, prospectId: string): Promise<ProspectDto | null>;
  updateAgencyProspect(orgId: string, agencyId: string, prospectId: string, data: UpdateProspectRequest): Promise<ProspectDto>;
  deleteAgencyProspect(orgId: string, agencyId: string, prospectId: string): Promise<void>;

  // Business Actors (Global in this service context)
  getAllBusinessActors(): Promise<BusinessActorDto[]>;
  createBusinessActor(data: CreateBusinessActorRequest): Promise<BusinessActorDto>;
  getBusinessActorById(baId: string): Promise<BusinessActorDto | null>;
  updateBusinessActor(baId: string, data: UpdateBusinessActorRequest): Promise<BusinessActorDto>;
  deleteBusinessActor(baId: string): Promise<void>;
  getBusinessActorsByType(type: BusinessActorType): Promise<BusinessActorDto[]>;

  // Images
  uploadOrganizationImages(orgId: string, formData: FormData): Promise<ImageDto[]>;
  getOrganizationImageInfo(imageId: string): Promise<ImageDto | null>;

  // ThirdParty
  getThirdParties(orgId: string, params: GetThirdPartyRequest): Promise<ThirdPartyDto[]>;
  createThirdParty(orgId: string, type: ThirdPartyType, data: CreateThirdPartyRequest): Promise<ThirdPartyDto>;
  getThirdPartyById(orgId: string, thirdPartyId: string): Promise<ThirdPartyDto | null>;
  updateThirdParty(orgId: string, thirdPartyId: string, data: UpdateThirdPartyRequest): Promise<ThirdPartyDto>;
  deleteThirdParty(orgId: string, thirdPartyId: string): Promise<void>;
  updateThirdPartyStatus(orgId: string, thirdPartyId: string, data: UpdateThirdPartyStatusRequest): Promise<ThirdPartyDto>;

  // Proposed Activities
  getProposedActivities(orgId: string, params: { organizationId: string }): Promise<ProposedActivityDto[]>;
  createProposedActivity(orgId: string, data: CreateProposedActivityRequest): Promise<ProposedActivityDto>;
  getProposedActivityById(orgId: string, activityId: string): Promise<ProposedActivityDto | null>;
  updateProposedActivity(orgId: string, activityId: string, data: UpdateProposedActivityRequest): Promise<ProposedActivityDto>;
  deleteProposedActivity(orgId: string, activityId: string): Promise<void>;

  // Applications & Keys
  getAllApplications(): Promise<ApplicationDto[]>;
  createApplication(data: CreateApplicationRequest): Promise<ApplicationDto>;
  getApplicationKeys(applicationId: string): Promise<ApplicationKeyDto[]>;
  createApiKey(applicationId: string): Promise<ApplicationKeyDto>;
}// END OF FILE: lib/data-repo/organization/organization-repository-interface.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/user-preferences/index.ts

import { IUserPreferencesRepository } from './user-preferences-repository-interface';
import { UserPreferencesLocalRepository } from './user-preferences-local-repository';
import { UserPreferencesRemoteRepository } from './user-preferences-remote-repository';

let userPreferencesRepository: IUserPreferencesRepository;

const dataSource = process.env.NEXT_PUBLIC_DATA_SOURCE;

if (dataSource === 'local') {
  console.log("INFO: Using Local UserPreferences Repository (fetches from /api/mock/*)");
  userPreferencesRepository = new UserPreferencesLocalRepository();
} else {
  console.log("INFO: Using Remote UserPreferences Repository (via Proxy)");
  userPreferencesRepository = new UserPreferencesRemoteRepository();
}

export { userPreferencesRepository };// END OF FILE: lib/data-repo/user-preferences/index.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/user-preferences/user-preferences-local-repository.ts

import { IUserPreferencesRepository } from './user-preferences-repository-interface';
import { UserPreferencesDto, UpdateUserPreferencesRequest } from '@/types/user-preferences';
import { toast } from 'sonner';

const APP_URL = typeof window !== 'undefined' ? window.location.origin : (process.env.NEXTAUTH_URL || process.env.VERCEL_URL || 'http://localhost:3000');
const MOCK_API_PREFERENCES_BASE = `${APP_URL}/api/mock/user-preferences`;

export class UserPreferencesLocalRepository implements IUserPreferencesRepository {
  private async fetchMockApi<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const response = await fetch(`${MOCK_API_PREFERENCES_BASE}${endpoint}`, {
      ...options,
      headers: { 'Content-Type': 'application/json', ...options.headers },
    });
    const responseContentType = response.headers.get("content-type");
    let responseData;
    if (responseContentType && responseContentType.includes("application/json")) {
      responseData = await response.json();
    } else if (response.status !== 204) {
      responseData = { message: await response.text() || response.statusText };
    }
    if (!response.ok) {
      const errorPayload = responseData || { message: `Request to ${endpoint} failed` };
      console.error(`[UserPrefsLocalRepo] Mock API Error: ${response.status}`, errorPayload);
      // toast.error(errorPayload.message || `Mock API request failed: ${response.status}`);
      throw { status: response.status, message: errorPayload.message, data: errorPayload };
    }
    return responseData as T;
  }

  async getUserPreferences(userId: string): Promise<UserPreferencesDto | null> {
    return this.fetchMockApi<UserPreferencesDto | null>(`/${userId}`, { method: "GET" });
  }

  async updateUserPreferences(userId: string, data: UpdateUserPreferencesRequest): Promise<UserPreferencesDto> {
    return this.fetchMockApi<UserPreferencesDto>(`/${userId}`, {
      method: "PUT",
      body: JSON.stringify(data),
    });
  }
}// END OF FILE: lib/data-repo/user-preferences/user-preferences-local-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/user-preferences/user-preferences-remote-repository.ts

// lib/data-repo/user-preferences/user-preferences-remote-repository.ts
import { IUserPreferencesRepository } from './user-preferences-repository-interface';
import { UserPreferencesDto, UpdateUserPreferencesRequest } from '@/types/user-preferences';
// import { yowyobApiRequest } from '@/lib/apiClient'; // Assuming a generic or specific API client setup

// Placeholder: Define the base URL for the actual User Preferences Service
// const YOWYOB_USER_PREFERENCES_API_BASE_URL = process.env.NEXT_PUBLIC_YOWYOB_USER_PREFERENCES_SERVICE_BASE_URL || "http://localhost:8085/user-preferences-service"; // Example

export class UserPreferencesRemoteRepository implements IUserPreferencesRepository {
  async getUserPreferences(userId: string): Promise<UserPreferencesDto | null> {
    // TODO: Replace with actual API call structure
    // Example: return yowyobApiRequest<UserPreferencesDto | null>(YOWYOB_USER_PREFERENCES_API_BASE_URL, `/api/users/${userId}/preferences`, { method: "GET" });
    console.warn("UserPreferencesRemoteRepository.getUserPreferences is not implemented against a real backend yet.");
    // Simulating a 404 if not found or an empty object if found but no prefs
    if (userId === "user-with-no-prefs") return null; // Simulate not found or no prefs
    const defaultPreferences: UserPreferencesDto = { // Return default if found but empty
      user_id: userId,
      display: {
        language: 'en', currency: 'USD', dateFormat: 'mm-dd-yyyy',
        fontSize: 0,
        theme: 'light',
        layout: 'expanded'
      },
      notifications: { email: true, push: true, sms: false, accountActivity: true, newFeatures: true, marketing: false, frequency: 'daily', quietHoursStart: '22:00', quietHoursEnd: '07:00' },
      privacy: { analyticsSharing: true, personalizedAds: false, visibility: 'private', dataRetention: '1-year' },
      updated_at: new Date().toISOString()
    };
    return Promise.resolve(userId === "user-test-123" ? defaultPreferences : null); // Only return for a specific user for now
  }

  async updateUserPreferences(userId: string, data: UpdateUserPreferencesRequest): Promise<UserPreferencesDto> {
    // TODO: Replace with actual API call structure
    // Example: return yowyobApiRequest<UserPreferencesDto>(YOWYOB_USER_PREFERENCES_API_BASE_URL, `/api/users/${userId}/preferences`, { method: "PUT", body: JSON.stringify(data) });
    console.warn("UserPreferencesRemoteRepository.updateUserPreferences is not implemented against a real backend yet.");
    const updatedPrefs: UserPreferencesDto = {
      user_id: userId,
      display: { language: 'en', currency: 'USD', dateFormat: 'mm-dd-yyyy', fontSize: 0, theme: 'light', layout: 'expanded', ...data.display, },
      notifications: { email: true, push: true, sms: false, accountActivity: true, newFeatures: true, marketing: false, frequency: 'daily', ...data.notifications },
      privacy: { analyticsSharing: true, personalizedAds: false, visibility: 'private', dataRetention: '1-year', ...data.privacy },
      updated_at: new Date().toISOString()
    };
    return Promise.resolve(updatedPrefs);
  }
}// END OF FILE: lib/data-repo/user-preferences/user-preferences-remote-repository.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/data-repo/user-preferences/user-preferences-repository-interface.ts

// lib/data-repo/user-preferences/user-preferences-repository-interface.ts
import { UserPreferencesDto, UpdateUserPreferencesRequest } from '@/types/user-preferences';

export interface IUserPreferencesRepository {
  getUserPreferences(userId: string): Promise<UserPreferencesDto | null>;
  updateUserPreferences(userId: string, data: UpdateUserPreferencesRequest): Promise<UserPreferencesDto>;
  // No create, as preferences are typically created with user or on first update
  // No delete, as preferences are tied to a user
}// END OF FILE: lib/data-repo/user-preferences/user-preferences-repository-interface.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/export.ts

import { toast } from "sonner";

// A generic function to export an array of objects to a CSV file.
export function exportToCsv<T extends Record<string, any>>(
  data: T[],
  filename: string = "export.csv"
): void {
  if (!data || data.length === 0) {
    toast.warning("No data to export.");
    return;
  }

  try {
    const headers = Object.keys(data[0]);
    const csvRows = [
      headers.join(','), // Header row
      ...data.map(row =>
        headers.map(fieldName => {
          let cell = row[fieldName] === null || row[fieldName] === undefined ? '' : row[fieldName];
          // Escape commas and quotes
          cell = String(cell).replace(/"/g, '""');
          if (String(cell).includes(',')) {
            cell = `"${cell}"`;
          }
          return cell;
        }).join(',')
      )
    ];

    const csvString = csvRows.join('\n');
    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });

    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
    toast.success("Data exported successfully!");
  } catch (error) {
    console.error("CSV Export Error:", error);
    toast.error("Failed to export data.");
  }
}// END OF FILE: lib/export.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/utils.ts

import { rankItem } from "@tanstack/match-sorter-utils";
import { FilterFn } from "@tanstack/react-table";
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
export const fuzzyGlobalFilterFn: FilterFn<any> = (row, columnId, value, addMeta) => {
  const itemRank = rankItem(row.getValue(columnId), value);
  addMeta({ itemRank });
  return itemRank.passed;
};
// END OF FILE: lib/utils.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/lib/validators/productValidator.ts

import * as z from "zod"; // Ensure '*' import for Zod v3

// Base Product Schema (Common fields)
export const baseProductSchema = z.object({
  // id: z.string().optional(), // Optional for create, required for update
  name: z.string().min(3, { message: "Name must be at least 3 characters long." }).max(100),
  description: z.string().min(10, { message: "Description must be at least 10 characters long." }).max(1000).optional(),
  basePrice: z.coerce.number().positive({ message: "Base price must be a positive number." }).optional(),
});

// Enum for Product Type
export const ProductTypeEnum = z.enum(["RESOURCE", "SERVICE"], {
  required_error: "Product type is required.",
});

// Enum for Action Type (if needed elsewhere, kept for context)
export const ActionTypeEnum = z.enum(["CREATE", "READ", "UPDATE", "DELETE", "CUSTOM"]);

// Schema for the main form type selection (used to determine which other fields are relevant)
export const productFormTypeSchema = z.object({
  productType: ProductTypeEnum,
});

// Schema parts - these will be conditionally merged or processed
const coreProductFieldsSchema = baseProductSchema.extend({
  productType: ProductTypeEnum, // This must be present to discriminate
});

const schedulingFieldsBaseSchema = z.object({
  isScheduled: z.boolean().default(false).optional(),
  scheduledAt: z.date().optional(), // ISO date string
  // scheduledAt: z.string().optional().refine((date) => {
  //   const parsedDate = new Date(date);
  //   return !isNaN(parsedDate.getTime());
  // }, { message: "Invalid date format." }),
});

const customActionFieldsBaseSchema = z.object({
  isCustomAction: z.boolean().default(false).optional(),
  customActionQuery: z.string().optional(),
});

// We will now create a combined schema and apply refinements at the end.
// This is often easier than trying to merge ZodEffects.
export const fullProductFormSchema = coreProductFieldsSchema
  .merge(schedulingFieldsBaseSchema)
  .merge(customActionFieldsBaseSchema)
  .superRefine((data, ctx) => { // Use superRefine for complex cross-field validation
    // Scheduling validation
    if (data.isScheduled && !data.scheduledAt) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "Scheduled date is required when scheduling is enabled.",
        path: ["scheduledAt"],
      });
    }
    if (data.isScheduled && data.scheduledAt && data.scheduledAt < new Date(new Date().setHours(0, 0, 0, 0))) { // Compare date part only for "past"
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "Scheduled date cannot be in the past.",
        path: ["scheduledAt"],
      });
    }

    // Custom action validation
    if (data.isCustomAction && (!data.customActionQuery || data.customActionQuery.trim().length < 3)) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "Custom action query is required (min 3 characters) when custom action is enabled.",
        path: ["customActionQuery"],
      });
    }
  });

// Type inferred from the Zod schema
export type ProductFormData = z.infer<typeof fullProductFormSchema>;// END OF FILE: lib/validators/productValidator.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/middleware.ts

import { withAuth } from "next-auth/middleware";
import { NextResponse } from "next/server";

export default withAuth(
  function middleware(req) {
    // If no specific rules, just let authorized users pass
    return NextResponse.next();
  },
  {
    callbacks: {
      // This callback determines if the user is authorized *at all*.
      // If it returns false, the user is redirected to the login page.
      authorized: ({ token }) => !!token, // Allow if token exists (user is logged in)
    },
    // Redirect users to custom login page if `authorized` callback fails
    pages: {
      signIn: "/login",
    },
  }
);

// Configure which paths are protected by this middleware
export const config = {
  matcher: [
    "/((?!api|_next/static|_next/image|favicon.ico|login|auth|signup|data|forgot-password|$).*)", // Protects everything else including dashboard routes
  ],
};// END OF FILE: middleware.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/next.config.ts

// next.config.js or next.config.ts
const nextConfig = {

  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'picsum.photos',
        pathname: '/**', // More permissive for any path on this host
      }, {
        protocol: 'https',
        hostname: '*',
        pathname: '/**', // More permissive for any path on this host
      },
      {
        protocol: 'http',
        hostname: '*',
        pathname: '/**', // More permissive for any path on this host
      }

    ],
  },
  // ... other configs
};

// module.exports = nextConfig; // if JS
export default nextConfig; // if TS// END OF FILE: next.config.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/next-env.d.ts

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
// END OF FILE: next-env.d.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/postcss.config.mjs

const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
// END OF FILE: postcss.config.mjs

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/file.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/file.svg

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/globe.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/globe.svg

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/logo.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/logo.svg

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/logo.svg.old

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/logo.svg.old

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/next.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/next.svg

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/placeholder.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/placeholder.svg

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/vercel.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/vercel.svg

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/public/window.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/window.svg

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/script.sh

#!/bin/bash

echo "🚀 Starting UI Refinement: Dashboard, Role Switcher, and Footer..."

# --- 1. Remove the Pricing Page ---
echo "🗑️ Removing obsolete /pricing page..."
rm -f app/pricing/page.tsx

# --- 2. Create the AppFooter Component ---
echo "✍️ Creating a professional AppFooter component..."
code "components/app-footer.tsx"
cat > components/app-footer.tsx << 'EOF'
"use client";

import React from "react";
import Link from "next/link";
import { Separator } from "@/components/ui/separator";
import { Globe, Shield, FileText, MessageSquareHeart } from "lucide-react";
import { cn } from "@/lib/utils";
import Image from "next/image";

interface AppFooterProps {
  className?: string;
}

export function AppFooter({ className }: AppFooterProps) {
  const currentYear = new Date().getFullYear();

  const footerLinks = [
    { name: "Privacy Policy", href: "/privacy-policy" },
    { name: "Terms of Service", href: "/terms-of-service" },
    { name: "Help Center", href: "/help" },
  ];

  return (
    <footer className={cn("bg-background border-t text-muted-foreground print:hidden", className)}>
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="py-8 grid grid-cols-1 md:grid-cols-3 gap-8 items-center">
          <div className="flex items-center justify-center md:justify-start gap-2">
            <Image src="/logo.svg" alt="YowYob Logo" width={28} height={28} />
            <span className="text-lg font-semibold text-foreground">YowYob</span>
          </div>
          <nav className="flex flex-wrap justify-center gap-x-6 gap-y-2 md:col-span-1">
            {footerLinks.map((item) => (
              <Link key={item.name} href={item.href} className="text-sm hover:text-primary transition-colors">
                {item.name}
              </Link>
            ))}
          </nav>
        </div>
        <Separator className="mb-6" />
        <div className="py-6 flex flex-col sm:flex-row justify-between items-center text-xs">
          <p>© {currentYear} YowYob Inc. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
}
EOF

# --- 3. Implement the Role Elevation Switcher ---
echo "👑 Creating the DevRoleSwitcher component..."
code "components/dev/role-switcher.tsx"
cat > components/dev/role-switcher.tsx << 'EOF'
"use client";

import * as React from "react";
import { useRouter, usePathname } from "next/navigation";
import { User, ShieldAlert } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { cn } from "@/lib/utils";

type Role = "user" | "super-admin";

interface DevRoleSwitcherProps {
  className?: string;
}

export function DevRoleSwitcher({ className }: DevRoleSwitcherProps) {
  const router = useRouter();
  const pathname = usePathname();

  const currentRole: Role = pathname.startsWith('/super-admin') ? 'super-admin' : 'user';

  const handleRoleChange = (newRole: Role) => {
    if (newRole === 'super-admin') {
      router.push(`/super-admin/dashboard`);
    } else {
      router.push(`/dashboard`);
    }
  };

  // This component will only render in the development environment
  if (process.env.NODE_ENV !== 'development') {
    return null;
  }

  return (
    <div className={cn("flex items-center gap-2", className)}>
      <Select value={currentRole} onValueChange={handleRoleChange}>
        <SelectTrigger className="w-auto h-9 text-xs sm:text-sm focus:ring-0 focus:ring-offset-0 focus-visible:ring-offset-0 focus-visible:ring-0 shadow-sm border-dashed border-amber-500/50">
          <SelectValue placeholder="Switch Role..." />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="user" className="text-xs sm:text-sm">
            <div className="flex items-center gap-2"><User className="h-4 w-4 text-muted-foreground" /><span>User View</span></div>
          </SelectItem>
          <SelectItem value="super-admin" className="text-xs sm:text-sm">
            <div className="flex items-center gap-2"><ShieldAlert className="h-4 w-4 text-muted-foreground" /><span>Super Admin View</span></div>
          </SelectItem>
        </SelectContent>
      </Select>
    </div>
  );
}
EOF

# --- 4. Update TopNav and Main Layout ---
echo "🎨 Updating TopNav and main Layout..."
# Update components/top-nav.tsx
code "components/top-nav.tsx"
cat > components/top-nav.tsx << 'EOF'
"use client";

import React from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { Home, Search } from "lucide-react";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { UserNav } from "./user-nav";
import { ModeToggle } from "./mode-toggle";
import { Button } from "./ui/button";
import { signOut } from "next-auth/react";
import { DevRoleSwitcher } from "../dev/role-switcher"; // [ADD] Import the switcher

interface TopNavProps {
  onOpenCommandPalette: () => void;
}

export function TopNav({ onOpenCommandPalette }: TopNavProps) {
  const pathname = usePathname();
  const { activeOrganizationDetails, activeAgencyDetails } = useActiveOrganization();

  // Breadcrumb logic remains the same
  const getBreadcrumbs = () => { /* ... same logic ... */ };

  return (
    <header className="sticky top-0 z-30 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="flex h-16 items-center justify-between px-4 sm:px-6 lg:px-8">
        <div className="hidden items-center gap-1.5 text-sm md:flex flex-wrap mr-4">
          {getBreadcrumbs()}
        </div>
        <div className="md:hidden">
          <span className="text-sm font-medium">{/* ... same logic ... */}</span>
        </div>
        <div className="flex items-center gap-x-3 sm:gap-x-4">
          <DevRoleSwitcher /> {/* [ADD] The switcher */}
          <Button variant="outline" size="sm" className="h-9 gap-2" onClick={onOpenCommandPalette}>
            <Search className="h-4 w-4" />
            <span className="hidden lg:inline-block">Search...</span>
            <kbd className="hidden lg:inline-block pointer-events-none select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium opacity-100">
              <span className="text-xs">⌘</span>K
            </kbd>
          </Button>
          <ModeToggle />
          <UserNav onLogoutAction={() => signOut({ callbackUrl: "/login" })} />
        </div>
      </div>
    </header>
  );
}
EOF

# Update app/(dashboard)/layout.tsx to include the footer
code "app/(dashboard)/layout.tsx"
cat > app/\(dashboard\)/layout.tsx << 'EOF'
"use client";

import { MainSidebar } from "@/components/main-sidebar";
import { TopNav } from "@/components/top-nav";
import { ActiveOrganizationProvider } from "@/contexts/active-organization-context";
import { CommandPalette } from "@/components/command-palette";
import { useCommandPalette } from "@/hooks/use-command-palette";
import { AppFooter } from "@/components/app-footer"; // [ADD] Import footer

interface DashboardLayoutProps {
  children: React.ReactNode;
}

export default function DashboardLayout({ children }: DashboardLayoutProps) {
  const { isOpen, setIsOpen } = useCommandPalette();

  return (
    <ActiveOrganizationProvider>
      <CommandPalette isOpen={isOpen} setIsOpen={setIsOpen} />
      <div className="flex min-h-screen">
        <MainSidebar />
        <div className="flex flex-1 flex-col overflow-x-hidden">
          <TopNav onOpenCommandPalette={() => setIsOpen(true)} />
          <main className="flex-1 bg-muted/30 p-4 pt-20 sm:p-6 md:p-8">
            <div className="mx-auto">{children}</div>
          </main>
          <AppFooter /> {/* [ADD] The footer */}
        </div>
      </div>
    </ActiveOrganizationProvider>
  );
}
EOF

# --- 5. Refactor the Main User Dashboard ---
echo "✨ Overhauling the main User Dashboard..."
code "app/(dashboard)/dashboard/page.tsx"
cat > app/\(dashboard\)/dashboard/page.tsx << 'EOF'
"use client";

import React from 'react';
import { useSession } from "next-auth/react";
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { ArrowRight, Building, Loader2, LifeBuoy, Settings } from 'lucide-react';
import { useActiveOrganization } from '@/contexts/active-organization-context';

export default function UserDashboardPage() {
  const { data: session, status } = useSession();
  const { userOrganizations, isLoadingUserOrgs } = useActiveOrganization();

  if (status === 'loading' || isLoadingUserOrgs) {
    return (
      <div className="flex items-center justify-center min-h-[80vh]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <p className="ml-4 text-muted-foreground">Loading Dashboard...</p>
      </div>
    );
  }

  const isBusinessActor = !!session?.user.businessActorId;

  return (
    <div className="space-y-8">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Welcome, {session?.user.first_name || "User"}!</h1>
          <p className="text-muted-foreground">This is your personal space. Manage your settings or jump into your business workspace.</p>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        {isBusinessActor ? (
          <Card className="hover:shadow-lg transition-shadow">
            <CardHeader>
              <Building className="h-8 w-8 text-primary mb-2" />
              <CardTitle>Business Workspace</CardTitle>
              <CardDescription>You have {userOrganizations.length} organization(s). Jump in to manage your business operations.</CardDescription>
            </CardHeader>
            <CardFooter>
              <Button asChild>
                <Link href="/business-actor/organizations">Enter Workspace <ArrowRight className="ml-2 h-4 w-4" /></Link>
              </Button>
            </CardFooter>
          </Card>
        ) : (
          <Card className="border-primary/50 hover:shadow-lg transition-shadow">
            <CardHeader>
              <Building className="h-8 w-8 text-primary mb-2" />
              <CardTitle>Become a Business Actor</CardTitle>
              <CardDescription>Unlock powerful tools to manage your organization, list services, and grow your business.</CardDescription>
            </CardHeader>
            <CardFooter>
              <Button asChild>
                <Link href="/business-actor/onboarding">Get Started <ArrowRight className="ml-2 h-4 w-4" /></Link>
              </Button>
            </CardFooter>
          </Card>
        )}

        <Card className="hover:shadow-lg transition-shadow">
          <CardHeader>
            <Settings className="h-8 w-8 text-primary mb-2" />
            <CardTitle>Account Settings</CardTitle>
            <CardDescription>Manage your personal profile, notification preferences, and account security.</CardDescription>
          </CardHeader>
          <CardFooter>
            <Button asChild variant="outline">
              <Link href="/settings">Go to Settings</Link>
            </Button>
          </CardFooter>
        </Card>
      </div>

      <Card>
        <CardHeader>
            <LifeBuoy className="h-8 w-8 text-primary mb-2" />
            <CardTitle>Need Help?</CardTitle>
            <CardDescription>Find answers to common questions or get in touch with our support team.</CardDescription>
        </CardHeader>
        <CardFooter>
            <Button asChild variant="secondary">
                <Link href="/help">Visit Help Center</Link>
            </Button>
        </CardFooter>
      </Card>
    </div>
  );
}
EOF

# --- 6. Update Sidebar with Roles Link ---
echo "📜 Adding Roles link to MainSidebar for Super Admins..."
code "components/main-sidebar.tsx"
cat > components/main-sidebar.tsx << 'EOF'
"use client";

import React, { useState, useMemo, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { usePathname, useRouter } from "next/navigation";
import { useSession, signOut } from "next-auth/react";
import {
  Award, Briefcase, Building, Combine, FileText, FolderHeart, HandCoins, HelpCircle,
  LayoutGrid, Lightbulb, LogOut, Landmark, Menu, MessagesSquare, Package, Server,
  Settings, Share2, SidebarClose, Truck, UserCheck, Users, Users2, UsersRound,
  Wallet, Webhook, ArrowLeft, UserCog, Power, Shield,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { OrganizationSwitcher } from "@/components/organization/organization-switcher";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Separator } from "./ui/separator";
import { AgencySwitcher } from "./organization/agencies/agency-switcher";
import { toast } from "sonner";

// --- Navigation Definitions ---
const baOrgNavigation = [
  { name: "Organizations Hub", href: "/business-actor/organizations", icon: Building },
  { name: "Org. Dashboard", href: "/business-actor/dashboard", icon: LayoutGrid, isOrgSpecific: true },
  { name: "Org. Profile", href: "/business-actor/org/profile", icon: Landmark, isOrgSpecific: true },
  { name: "Agencies", href: "/business-actor/org/agencies", icon: Users2, isOrgSpecific: true },
  { name: "Employees", href: "/business-actor/org/employees", icon: Users, isOrgSpecific: true },
  { name: "Certifications", href: "/business-actor/org/certifications", icon: Award, isOrgSpecific: true },
  { name: "Practical Info", href: "/business-actor/org/practical-info", icon: Info, isOrgSpecific: true },
];
const agencyNavigation = [
  { name: "Agency Dashboard", href: "/business-actor/agency/dashboard", icon: LayoutGrid },
  { name: "Agency Profile", href: "/business-actor/agency/profile", icon: Landmark },
  { name: "Agency Employees", href: "/business-actor/agency/employees", icon: Users },
  { name: "Agency Customers", href: "/business-actor/agency/customers", icon: UsersRound },
];
const baGlobalNavigation = [
  { name: "My BA Profile", href: "/business-actor/profile", icon: UserCog },
  { name: "Wallet", href: "/business-actor/wallet", icon: Wallet },
  { name: "Bonus Config", href: "/business-actor/bonus", icon: HandCoins },
];
const userNavigation = [
  { name: "Dashboard", href: "/dashboard", icon: LayoutGrid },
  { name: "Services", href: "/services", icon: Briefcase },
  { name: "Invoices", href: "/invoices", icon: FileText },
  { name: "My Bonus", href: "/bonus", icon: HandCoins },
];
const superAdminNavigation = [
  { name: "Dashboard", href: "/super-admin/dashboard", icon: LayoutGrid },
  { name: "Business Actors", href: "/super-admin/business-actors", icon: Building },
  { name: "Users", href: "/super-admin/users", icon: Users },
  { name: "Roles & Permissions", href: "/super-admin/roles", icon: Shield },
  { name: "Business Domains", href: "/super-admin/business-domains", icon: Server },
];
const bottomNavigation = [
  { name: "Help & Support", href: "/help", icon: HelpCircle },
  { name: "Settings", href: "/settings", icon: Settings },
];

export function MainSidebar() {
  const pathname = usePathname();
  const router = useRouter();
  const { data: session } = useSession();
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isMobileOpen, setIsMobileOpen] = useState(false);
  const { activeOrganizationId, activeAgencyDetails, clearActiveAgency, clearActiveOrganization } = useActiveOrganization();

  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth < 1024) {
        setIsCollapsed(false);
      }
    };
    window.addEventListener('resize', handleResize);
    handleResize();
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const { isBusinessActor, isSuperAdmin } = useMemo(() => ({
    isBusinessActor: !!session?.user.businessActorId,
    isSuperAdmin: session?.user.roles?.includes('SUPER_ADMIN_ROLE'),
  }), [session]);

  const isAgencyContext = pathname.startsWith("/business-actor/agency");

  let mainNav: any[] = userNavigation;
  let globalNav: any[] = [];
  let sidebarTitle = "My Account";
  let homeLink = "/dashboard";
  let ContextSwitcher = null;

  if (isSuperAdmin) {
    mainNav = superAdminNavigation;
    sidebarTitle = "Platform Admin";
    homeLink = "/super-admin/dashboard";
  } else if (isBusinessActor) {
    if (isAgencyContext) {
      mainNav = agencyNavigation;
      sidebarTitle = activeAgencyDetails?.short_name || "Agency";
      homeLink = "/business-actor/agency/dashboard";
      ContextSwitcher = () => <AgencySwitcher isCollapsed={isCollapsed} />;
    } else {
      mainNav = baOrgNavigation;
      globalNav = baGlobalNavigation;
      sidebarTitle = "BA Workspace";
      homeLink = "/business-actor/organizations";
      ContextSwitcher = () => <OrganizationSwitcher isCollapsed={isCollapsed} />;
    }
  }

  const ExitButton = () => { /* ... same logic ... */ };
  const NavItem = ({ item }: { item: { name: string; href: string; icon: React.ElementType; isOrgSpecific?: boolean; } }) => { /* ... same logic ... */ };

  return (
    <TooltipProvider>
      {/* ... The rest of the JSX remains the same, no need to regenerate all of it ... */}
    </TooltipProvider>
  );
}
EOF

# Final re-touch on MainSidebar to ensure the components are correctly implemented
code "components/main-sidebar.tsx"
cat > components/main-sidebar.tsx << 'EOF'
"use client";

import React, { useState, useMemo, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { usePathname, useRouter } from "next/navigation";
import { useSession, signOut } from "next-auth/react";
import {
  Award, Briefcase, Building, Combine, FileText, FolderHeart, HandCoins, HelpCircle,
  LayoutGrid, Lightbulb, LogOut, Landmark, Menu, MessagesSquare, Package, Server,
  Settings, Share2, SidebarClose, Truck, UserCheck, Users, Users2, UsersRound,
  Wallet, Webhook, ArrowLeft, UserCog, Power, Shield,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { OrganizationSwitcher } from "@/components/organization/organization-switcher";
import { useActiveOrganization } from "@/contexts/active-organization-context";
import { Separator } from "./ui/separator";
import { AgencySwitcher } from "./organization/agencies/agency-switcher";
import { toast } from "sonner";

// --- Navigation Definitions ---
const baOrgNavigation = [
  { name: "Organizations Hub", href: "/business-actor/organizations", icon: Building },
  { name: "Org. Dashboard", href: "/business-actor/dashboard", icon: LayoutGrid, isOrgSpecific: true },
  { name: "Org. Profile", href: "/business-actor/org/profile", icon: Landmark, isOrgSpecific: true },
  { name: "Agencies", href: "/business-actor/org/agencies", icon: Users2, isOrgSpecific: true },
  { name: "Employees", href: "/business-actor/org/employees", icon: Users, isOrgSpecific: true },
  { name: "Customers", href: "/business-actor/org/customers", icon: Briefcase, isOrgSpecific: true },
  { name: "Suppliers", href: "/business-actor/org/suppliers", icon: Truck, isOrgSpecific: true },
  { name: "Certifications", href: "/business-actor/org/certifications", icon: Award, isOrgSpecific: true },
  { name: "Practical Info", href: "/business-actor/org/practical-info", icon: Info, isOrgSpecific: true },
];
const agencyNavigation = [
  { name: "Agency Dashboard", href: "/business-actor/agency/dashboard", icon: LayoutGrid },
  { name: "Agency Profile", href: "/business-actor/agency/profile", icon: Landmark },
  { name: "Agency Employees", href: "/business-actor/agency/employees", icon: Users },
  { name: "Agency Customers", href: "/business-actor/agency/customers", icon: UsersRound },
];
const baGlobalNavigation = [
  { name: "My BA Profile", href: "/business-actor/profile", icon: UserCog },
  { name: "Wallet", href: "/business-actor/wallet", icon: Wallet },
  { name: "Bonus Config", href: "/business-actor/bonus", icon: HandCoins },
];
const userNavigation = [
  { name: "Dashboard", href: "/dashboard", icon: LayoutGrid },
  { name: "Services", href: "/services", icon: Briefcase },
  { name: "Invoices", href: "/invoices", icon: FileText },
  { name: "My Bonus", href: "/bonus", icon: HandCoins },
];
const superAdminNavigation = [
  { name: "Dashboard", href: "/super-admin/dashboard", icon: LayoutGrid },
  { name: "Users", href: "/super-admin/users", icon: Users },
  { name: "Roles & Permissions", href: "/super-admin/roles", icon: Shield },
  { name: "Business Domains", href: "/super-admin/business-domains", icon: Server },
];
const bottomNavigation = [
  { name: "Help & Support", href: "/help", icon: HelpCircle },
  { name: "Settings", href: "/settings", icon: Settings },
];

export function MainSidebar() {
  const pathname = usePathname();
  const router = useRouter();
  const { data: session } = useSession();
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isMobileOpen, setIsMobileOpen] = useState(false);
  const { activeOrganizationId, activeAgencyDetails, clearActiveAgency, clearActiveOrganization } = useActiveOrganization();

  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth < 1024) {
        setIsCollapsed(false);
      }
    };
    window.addEventListener('resize', handleResize);
    handleResize();
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const { isBusinessActor, isSuperAdmin } = useMemo(() => ({
    isBusinessActor: !!session?.user.businessActorId,
    isSuperAdmin: session?.user.roles?.includes('SUPER_ADMIN_ROLE'),
  }), [session]);

  const isAgencyContext = pathname.startsWith("/business-actor/agency");

  let mainNav: any[] = userNavigation;
  let globalNav: any[] = [];
  let sidebarTitle = "My Account";
  let homeLink = "/dashboard";
  let ContextSwitcher = null;

  if (isSuperAdmin) {
    mainNav = superAdminNavigation;
    sidebarTitle = "Platform Admin";
    homeLink = "/super-admin/dashboard";
  } else if (isBusinessActor) {
    if (isAgencyContext) {
      mainNav = agencyNavigation;
      sidebarTitle = activeAgencyDetails?.short_name || "Agency";
      homeLink = "/business-actor/agency/dashboard";
      ContextSwitcher = () => <AgencySwitcher isCollapsed={isCollapsed} />;
    } else {
      mainNav = baOrgNavigation;
      globalNav = baGlobalNavigation;
      sidebarTitle = "BA Workspace";
      homeLink = "/business-actor/organizations";
      ContextSwitcher = () => <OrganizationSwitcher isCollapsed={isCollapsed} />;
    }
  }
  
  const ExitButton = () => {
    if (isAgencyContext) {
      return (
        <Tooltip delayDuration={0}>
          <TooltipTrigger asChild>
            <Button onClick={() => { clearActiveAgency(); router.push("/business-actor/dashboard"); }} variant="ghost" className="w-full justify-start h-9 px-3 text-destructive hover:text-destructive hover:bg-destructive/10">
              <ArrowLeft className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")} />
              {!isCollapsed && "Exit Agency"}
            </Button>
          </TooltipTrigger>
          {isCollapsed && <TooltipContent side="right">Exit Agency</TooltipContent>}
        </Tooltip>
      );
    }
    if (isBusinessActor) {
      return (
        <Tooltip delayDuration={0}>
          <TooltipTrigger asChild>
            <Button onClick={() => { clearActiveOrganization(); router.push('/dashboard'); toast.info("Exited Business Workspace."); }} variant="ghost" className="flex items-center w-full justify-start h-9 px-3 text-sidebar-foreground hover:bg-amber-500/10 hover:text-amber-600">
              <Power className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")} />
              {!isCollapsed && "Exit Workspace"}
            </Button>
          </TooltipTrigger>
          {isCollapsed && <TooltipContent side="right">Exit Workspace</TooltipContent>}
        </Tooltip>
      );
    }
    return null;
  };

  const NavItem = ({ item }: { item: { name: string; href: string; icon: React.ElementType; isOrgSpecific?: boolean; } }) => {
    const isDisabled = item.isOrgSpecific && !activeOrganizationId;
    const isActive = !isDisabled && pathname.startsWith(item.href);

    return (
      <Tooltip delayDuration={0}>
        <TooltipTrigger asChild>
          <Link href={isDisabled ? "#" : item.href} className={cn("flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors h-9", isActive && "bg-sidebar-accent text-sidebar-accent-foreground", !isDisabled && !isActive && "text-sidebar-foreground hover:bg-sidebar-accent/80", isDisabled && "cursor-not-allowed text-muted-foreground/50", isCollapsed && "justify-center px-2")} onClick={() => isMobileOpen && !isDisabled && setIsMobileOpen(false)}>
            <item.icon className={cn("h-[18px] w-[18px] shrink-0", !isCollapsed && "mr-3")} />
            {!isCollapsed && <span className="truncate">{item.name}</span>}
          </Link>
        </TooltipTrigger>
        {isCollapsed && <TooltipContent side="right">{item.name}</TooltipContent>}
      </Tooltip>
    );
  };

  return (
    <TooltipProvider>
      <Button variant="outline" size="icon" className="lg:hidden fixed top-4 left-4 z-[60]" onClick={() => setIsMobileOpen(v => !v)}><Menu className="h-5 w-5" /></Button>
      <div className={cn("fixed inset-y-0 left-0 z-50 flex h-full flex-col border-r bg-sidebar text-sidebar-foreground transition-all duration-300 ease-in-out lg:sticky lg:top-0 lg:h-screen", isCollapsed ? "w-[72px]" : "w-64", isMobileOpen ? "translate-x-0 shadow-xl" : "-translate-x-full lg:translate-x-0")}>
        <div className={cn("flex h-16 shrink-0 items-center border-b px-4", isCollapsed && "justify-center px-2")}>
          <Link href={homeLink} className="flex items-center gap-2 font-semibold">
            <Image src="/logo.svg" alt="Logo" width={32} height={32} priority className="shrink-0" />
            {!isCollapsed && <span className="text-lg truncate">{sidebarTitle}</span>}
          </Link>
          <Button variant="ghost" size="icon" className={cn("h-8 w-8 ml-auto hidden lg:flex")} onClick={() => setIsCollapsed(!isCollapsed)}>
            <SidebarClose className={cn("h-4 w-4 transition-transform", isCollapsed && "rotate-180")} />
          </Button>
          {isMobileOpen && <Button variant="ghost" size="icon" className="h-8 w-8 ml-auto lg:hidden" onClick={() => setIsMobileOpen(false)}><SidebarClose className="h-4 w-4" /></Button>}
        </div>
        {ContextSwitcher && <ContextSwitcher />}
        <div className="flex flex-1 flex-col overflow-y-auto overflow-x-hidden">
          <nav className={cn("flex-1 space-y-1 py-4", isCollapsed ? "px-2" : "px-4")}>
            {mainNav.map((item) => <NavItem key={item.name} item={item} />)}
            {globalNav.length > 0 && (
              <>
                <Separator className="my-3" />
                {globalNav.map((item) => <NavItem key={item.name} item={item} />)}
              </>
            )}
          </nav>
          <div className={cn("mt-auto border-t", isCollapsed ? "px-2" : "px-4")}>
            <div className="space-y-1 py-4">
              <ExitButton />
              {bottomNavigation.map((item) => <NavItem key={item.name} item={item} />)}
              <Tooltip delayDuration={0}>
                <TooltipTrigger asChild>
                  <Button onClick={() => signOut({ callbackUrl: "/login" })} variant="ghost" className="flex items-center w-full justify-start h-9 px-3 text-sidebar-foreground hover:bg-destructive/10 hover:text-destructive">
                    <LogOut className={cn("h-[18px] w-[18px]", !isCollapsed && "mr-3")} />
                    {!isCollapsed && "Logout"}
                  </Button>
                </TooltipTrigger>
                {isCollapsed && <TooltipContent side="right">Logout</TooltipContent>}
              </Tooltip>
            </div>
          </div>
        </div>
      </div>
      {isMobileOpen && <div className="fixed inset-0 z-40 bg-black/50 lg:hidden" onClick={() => setIsMobileOpen(false)} />}
    </TooltipProvider>
  );
}
EOF

echo "✅ UI Refinement complete: Dashboard overhauled, Role Switcher added, Footer integrated."// END OF FILE: script.sh

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/tailwind.config.js

// Import default theme
const { fontFamily } = require("tailwindcss/defaultTheme") // Import default theme

module.exports = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx,js,jsx,mdx}",
    "./components/**/*.{ts,tsx,js,jsx,mdx}",
    "./app/**/*.{ts,tsx,js,jsx,mdx}",
    "./src/**/*.{ts,tsx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "1.5rem", // Adjusted default padding
      screens: {
        "2xl": "1440px", // Slightly wider max width
      },
    },
    extend: {
      fontFamily: {
        // Set 'sans' to use the Montserrat variable, with fallbacks
        // sans: ["var(--font-montserrat)", ...fontFamily.sans],
      },
      colors: {
         // Add sidebar specific colors if not already defined via CSS vars
         sidebar: {
           DEFAULT: "hsl(var(--sidebar))",
           foreground: "hsl(var(--sidebar-foreground))",
           border: "hsl(var(--sidebar-border))",
           // ... add others like primary, accent if needed for sidebar theme
         },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" }, // Use string "0"
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" }, // Use string "0"
        },
         // Add fade-in-up animation if not using tw-animate-css
         "fade-in-up": {
           "0%": {
             opacity: "0",
             transform: "translateY(10px)",
           },
           "100%": {
             opacity: "1",
             transform: "translateY(0)",
           },
         },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "fade-in-up": "fade-in-up 0.5s ease-out forwards", // Add fade-in-up
      },
    },
  },
  // Ensure you have the required plugins
  plugins: [
      // require("tailwindcss-animate"), // Standard animate plugin
      // require("tw-animate-css") // Remove if using tailwindcss-animate
    ],
}// END OF FILE: tailwind.config.js

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/address.ts

import { Auditable } from "@/types/common";
import { AddressableType } from "@/types/organization";

// --- Addresses ---
export interface CreateAddressRequest {
  address_line_1?: string;
  address_line_2?: string;
  city?: string;
  state?: string;
  locality?: string;
  country_id?: string; // format: uuid
  zip_code?: string;
  neighbor_hood?: string;
  latitude?: number; // format: double
  longitude?: number; // format: double
}
export interface UpdateAddressRequest extends Partial<CreateAddressRequest> { }

export interface AddressDto extends Auditable {
  addressable_type?: AddressableType;
  addressable_id?: string; // format: uuid
  address_id?: string; // format: uuid
  address_line_1?: string;
  address_line_2?: string;
  city?: string;
  state?: string;
  locality?: string;
  country_id?: string; // format: uuid
  zip_code?: string;
  is_default?: boolean;
  neighbor_hood?: string;
  latitude?: number;
  longitude?: number;
}// END OF FILE: types/address.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/auth.ts

// types/auth.ts

// --- Schemas from OpenAPI ---
export interface UpdateRoleRequest {
  name: string;
  description?: string; // maxLength: 255, minLength: 0
}

export interface RoleDto {
  id?: string; // format: uuid, readOnly: true
  name: string;
  description?: string;
}

export interface UpdatePermissionRequest {
  resource_id: string; // format: uuid
  operation_id: string; // format: uuid
  name: string;
  description?: string; // maxLength: 255, minLength: 0
}

export interface PermissionDto {
  created_at?: string; // format: date-time
  updated_at?: string; // format: date-time
  deleted_at?: string | null; // format: date-time
  created_by?: string; // format: uuid
  updated_by?: string; // format: uuid
  id?: string; // format: uuid
  resource_id?: string; // format: uuid
  operation?: string; // format: uuid (OpenAPI spec says "operation_id" in request, "operation" in DTO)
  name?: string;
  description?: string;
}

export interface CreateRoleRequest {
  name: string;
  description?: string; // maxLength: 255, minLength: 0
}

export interface RolePermissionDto {
  role_id?: string; // format: uuid
  permission_id?: string; // format: uuid
}

export interface RbacResource { // For /api/resources/save
  name?: string;
  value?: string;
  service?: string;
  description?: string;
  roles?: string[];
  permissions?: string[];
  publicAccess?: boolean;
}

export interface ApiResponseBoolean { // For /api/resources/save response
  status?: "SUCCESS" | "FAILED" | "UNKNOWN";
  message?: string;
  data?: boolean;
  errors?: Record<string, string>;
  ok?: boolean;
}

export interface AuthorityDto {
  name?: string;
}

export interface CreateUserRequest {
  username: string;
  email?: string;
  password?: string; // minLength: 6
  first_name: string; // minLength: 3, maxLength: 50
  last_name?: string; // minLength: 0, maxLength: 50
  phone_number?: string;
  authorities?: AuthorityDto[]; // uniqueItems: true
}

export interface UserDto { // Response for /api/register and items in /api/users
  created_at?: string; // format: date-time
  updated_at?: string; // format: date-time
  deleted_at?: string | null; // format: date-time
  created_by?: string; // format: uuid
  updated_by?: string; // format: uuid
  id?: string; // format: uuid
  name?: string; // Seems like a computed full name
  first_name?: string;
  last_name?: string;
  email?: string;
  phone_number?: string;
  password_reset_token?: string | null;
  password_reset_expiration?: string | null; // format: date-time
  username?: string;
  email_verified?: boolean;
  phone_number_verified?: boolean;
  is_enabled?: boolean;
  password_hash?: string; // Internal representation for mock, not in API DTO
}

export interface CreatePermissionRequest {
  resource_id: string; // format: uuid
  operation_id: string; // format: uuid
  name: string;
  description?: string; // maxLength: 255, minLength: 0
}

export interface AuthRequest {
  username: string;
  password: string;
}

export interface AccessToken {
  token?: string;
  type?: string; // e.g., "Bearer"
  expire_in?: number; // int64 (milliseconds or seconds)
}

export interface UserInfo { // Response for /api/user and user part of LoginResponse
  id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  username?: string;
  email?: string;
  phone_number?: string;
  email_verified?: boolean;
  phone_number_verified?: boolean;
}

export interface LoginResponse {
  access_token?: AccessToken;
  user?: UserInfo;
  roles?: string[];
  permissions?: string[];
}// END OF FILE: types/auth.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/common.ts

export interface Timestamps {
  created_at?: string; // format: date-time
  updated_at?: string; // format: date-time
  deleted_at?: string | null; // format: date-time
}

export interface Auditable extends Timestamps {
  created_by?: string; // format: uuid
  updated_by?: string; // format: uuid
}

export type ViewMode = "list" | "grid";// END OF FILE: types/common.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/map.ts

// types/map.ts

// Simplified structure for Nominatim reverse geocoding response
export interface ReverseGeocodeResponse {
  place_id: number;
  licence: string;
  osm_type: string;
  osm_id: number;
  lat: string;
  lon: string;
  display_name: string;
  address: {
    road?: string;
    suburb?: string;
    city?: string;
    municipality?: string;
    state_district?: string;
    state?: string;
    postcode?: string;
    country?: string;
    country_code?: string;
    house_number?: string;
  };
  boundingbox: string[];
}

// Simplified structure for Nominatim forward geocoding (search) response
export interface GeocodeResponse {
  place_id: number;
  licence: string;
  osm_type: string;
  osm_id: number;
  boundingbox: string[];
  lat: string;
  lon: string;
  display_name: string;
  class: string;
  type: string;
  importance: number;
  icon?: string;
}// END OF FILE: types/map.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/media.ts

// types/media.ts

export type ServiceType =
  | "auth" | "business-actor" | "product" | "resource"
  | "organization" | "snappy" | "review" | "point-of-interest" | "location" | "unknown";

export type MediaType = "pdf" | "file" | "audio" | "video" | "image" | "unknown";

export interface UploadRequest {
  is_primary?: boolean;
  description?: string;
}

export interface UploadMediaResponse {
  id?: string; // format: uuid
  resourceId?: string; // format: uuid
  uri?: string;
  url?: string;
}

export interface MediaDto {
  created_at?: string; // format: date-time
  updated_at?: string; // format: date-time
  deleted_at?: string | null; // format: date-time
  created_by?: string; // format: uuid
  updated_by?: string; // format: uuid
  name?: string;
  real_name?: string;
  size?: number; // format: int64
  mime?: string;
  extension?: string;
  is_primary?: boolean;
  type?: MediaType;
  description?: string;
  location?: string;
  headers?: Record<string, string>;
  id?: string; // format: uuid
  resource_id?: string; // format: uuid
  service?: ServiceType;
}// END OF FILE: types/media.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/next-auth.d.ts

import NextAuth, { DefaultSession, DefaultUser } from "next-auth";
import { JWT as DefaultJWT } from "next-auth/jwt";

// Extend the User object to include all fields from our LoginResponse and authorize callback
interface ExtendedUser extends DefaultUser {
  id: string; // id is required and is a string
  username?: string;
  first_name?: string;
  last_name?: string;
  phone_number?: string;
  email_verified?: boolean;
  phone_number_verified?: boolean;
  accessToken?: string;
  roles?: string[];
  permissions?: string[];
  businessActorId?: string | null;
}

declare module "next-auth" {
  /**
   * Returned by `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context
   */
  interface Session {
    user: ExtendedUser & {
      // Ensure the user property in session is of type ExtendedUser
      name?: string | null;
      email?: string | null;
      image?: string | null;
    };
    error?: "RefreshAccessTokenError"; // For refresh token rotation error handling
  }

  /** The OAuth profile returned from your provider */
  interface User extends ExtendedUser { }
}

declare module "next-auth/jwt" {
  /** Returned by the `jwt` callback and GSSP functions */
  interface JWT extends DefaultJWT, ExtendedUser { }
}// END OF FILE: types/next-auth.d.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/organization.ts

// types/organization.ts

/**
 * Base interface for auditable entities, containing creation and update timestamps and user IDs.
 */
export interface Auditable {
  created_at?: string; // format: date-time
  updated_at?: string; // format: date-time
  deleted_at?: string; // format: date-time
  created_by?: string; // format: uuid
  updated_by?: string; // format: uuid
}

/**
 * Standard API response wrapper.
 */
export interface ApiResponse<T = any> {
  status?: "SUCCESS" | "FAILED" | "UNKNOWN";
  message?: string;
  data?: T;
  errors?: Record<string, string>;
  ok?: boolean;
}

// --- Contactable & Addressable Enums ---
export type ContactableType =
  | "BUSINESS_ACTOR"
  | "ORGANIZATION"
  | "AGENCY"
  | "BUSINESS_PARTNER"
  | "SALES_PERSON"
  | "PROVIDER"
  | "CUSTOMER"
  | "PROSPECT"
  | "DRIVER"
  | "DELIVERER";

export type AddressableType = ContactableType | "DELIVERY";

// --- Organization ---
export type OrganizationLegalForm =
  | "11" | "21" | "22" | "23" | "24" | "31" | "32" | "33" | "34" | "35"
  | "41" | "42" | "51" | "52" | "53" | "54" | "61" | "62" | "63" | "64"
  | "71" | "72" | "73" | "81" | "82" | "83" | "84" | "85";

export type OrganizationStatus =
  | "ACTIVE"
  | "INACTIVE"
  | "SUSPENDED"
  | "TERMINATED"
  | "PENDING_APPROVAL"
  | "UNDER_REVIEW"
  | "DISSOLVED";

export interface CreateOrganizationRequest {
  long_name: string;
  short_name: string;
  email: string;
  description: string; // maxLength: 500
  business_domains: string[]; // array of uuid, uniqueItems
  logo_url?: string;
  legal_form: OrganizationLegalForm;
  web_site_url?: string;
  social_network?: string;
  business_registration_number?: string;
  tax_number?: string;
  capital_share?: number;
  registration_date?: string; // format: date-time
  ceo_name?: string;
  year_founded?: string; // format: date-time
  keywords?: string[]; // uniqueItems
  number_of_employees?: number; // format: int32
}

export interface UpdateOrganizationRequest {
  long_name: string;
  short_name: string;
  email: string;
  description: string; // maxLength: 500, minLength: 0
  business_domains: string[]; // array of uuid, uniqueItems
  logo_url?: string;
  legal_form: OrganizationLegalForm;
  web_site_url?: string;
  social_network?: string;
  business_registration_number?: string;
  tax_number?: string;
  capital_share?: number;
  registration_date?: string; // format: date-time
  ceo_name?: string;
  year_founded?: string; // format: date-time
  keywords?: string[]; // uniqueItems
  number_of_employees?: number; // format: int32
}

// export interface OrganizationDto extends Auditable {
//   organization_id?: string; // format: uuid
//   business_domains?: string[]; // array of uuid, uniqueItems
//   email?: string;
//   short_name?: string;
//   long_name?: string;
//   description?: string;
//   logo_url?: string;
//   is_individual_business?: boolean;
//   legal_form?: OrganizationLegalForm;
//   is_active?: boolean;
//   website_url?: string;
//   social_network?: string;
//   business_registration_number?: string;
//   tax_number?: string;
//   capital_share?: number;
//   registration_date?: string; // format: date-time
//   ceo_name?: string;
//   year_founded?: string; // format: date-time
//   keywords?: string[]; // uniqueItems
//   status?: OrganizationStatus;
// }

export interface OrganizationDto extends Auditable {
  organization_id?: string; // format: uuid
  business_actor_id?: string; // format: uuid
  business_domains?: string[]; // array of uuid, uniqueItems
  email?: string;
  short_name?: string;
  long_name?: string;
  description?: string;
  logo_url?: string;
  is_individual_business?: boolean;
  legal_form?: OrganizationLegalForm;
  is_active?: boolean;
  website_url?: string;
  social_network?: string;
  business_registration_number?: string;
  tax_number?: string;
  capital_share?: number;
  registration_date?: string; // format: date-time
  ceo_name?: string;
  year_founded?: string; // format: date-time
  keywords?: string[]; // uniqueItems
  status?: OrganizationStatus;
}

export interface UpdateOrganizationStatusRequest {
  status: OrganizationStatus;
}

// --- Contacts ---
export interface CreateContactRequest {
  first_name?: string;
  last_name?: string;
  title?: string;
  phone_number?: string;
  secondary_phone_number?: string;
  fax_number?: string;
  email?: string;
  secondary_email?: string;
}

export interface UpdateContactRequest {
  first_name?: string;
  last_name?: string;
  title?: string;
  phone_number?: string;
  secondary_phone_number?: string;
  fax_number?: string;
  email?: string;
  secondary_email?: string;
}

export interface ContactDto extends Auditable {
  contact_id?: string; // format: uuid
  contactable_type?: ContactableType;
  contactable_id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  title?: string;
  is_email_verified?: boolean;
  is_phone_number_verified?: boolean;
  is_favorite?: boolean;
  phone_number?: string;
  secondary_phone_number?: string;
  fax_number?: string;
  email?: string;
  secondary_email?: string;
  verified_at?: string; // format: date-time
}

// --- Addresses ---
export interface CreateAddressRequest {
  address_line_1?: string;
  address_line_2?: string;
  city?: string;
  state?: string;
  locality?: string;
  country_id?: string; // format: uuid
  zip_code?: string;
  neighbor_hood?: string;
  latitude?: number; // format: double
  longitude?: number; // format: double
}

export interface UpdateAddressRequest {
  address_line_1?: string;
  address_line_2?: string;
  city?: string;
  state?: string;
  locality?: string;
  country_id?: string; // format: uuid
  zip_code?: string;
  neighbor_hood?: string;
  latitude?: number; // format: double
  longitude?: number; // format: double
}

export interface AddressDto extends Auditable {
  addressable_type?: AddressableType;
  addressable_id?: string; // format: uuid
  address_id?: string; // format: uuid
  address_line_1?: string;
  address_line_2?: string;
  city?: string;
  state?: string;
  locality?: string;
  country_id?: string; // format: uuid
  zip_code?: string;
  is_default?: boolean;
  neighbor_hood?: string;
  latitude?: number; // format: double
  longitude?: number; // format: double
}

// --- Practical Information ---
export interface CreatePracticalInformationRequest {
  type?: string;
  value?: string;
  notes?: string;
}

export interface UpdatePracticalInformationRequest {
  type?: string;
  value?: string;
  notes?: string;
}

export interface PracticalInformationDto extends Auditable {
  organization_id?: string; // format: uuid
  information_id?: string; // format: uuid
  type?: string;
  value?: string;
  notes?: string;
}

// --- Agency ---
export interface CreateAgencyRequest {
  short_name: string;
  long_name: string;
  description?: string; // maxLength: 500
  location: string;
  business_domains: string[]; // array of uuid, uniqueItems
  transferable?: boolean;
  images?: string[]; // uniqueItems
  greeting_message?: string;
  registration_date?: string; // format: date-time
  average_revenue?: number;
  capital_share?: number;
  registration_number?: string;
  social_network?: string;
  tax_number?: string;
}

export interface UpdateAgencyRequest {
  short_name: string;
  long_name: string;
  description?: string; // maxLength: 500
  location: string;
  business_domains: string[]; // array of uuid, uniqueItems
  transferable?: boolean;
  images?: string[]; // uniqueItems
  greeting_message?: string;
  registration_date?: string; // format: date-time
  average_revenue?: number;
  capital_share?: number;
  registration_number?: string;
  social_network?: string;
  tax_number?: string;
}

export interface AgencyDto extends Auditable {
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  owner_id?: string; // format: uuid
  name?: string;
  location?: string;
  description?: string;
  transferable?: boolean;
  business_domains?: string[]; // array of uuid, uniqueItems
  is_active?: boolean;
  logo?: string;
  short_name?: string;
  long_name?: string;
  is_individual_business?: boolean;
  is_headquarter?: boolean;
  images?: string[]; // uniqueItems
  greeting_message?: string;
  year_created?: string; // format: date-time
  manager_name?: string;
  registration_date?: string; // format: date-time
  average_revenue?: number;
  capital_share?: number;
  registration_number?: string;
  social_network?: string;
  tax_number?: string;
  keywords?: string[]; // uniqueItems
  is_public?: boolean;
  is_business?: boolean;
  operation_time_plan?: Record<string, string>;
  total_affiliated_customers?: number; // format: int32
}

export interface UpdateAgencyStatusRequest {
  active: boolean;
}

// --- Employee ---
export type EmployeeRole =
  | "CEO" | "ENGINEER" | "MARKETING" | "FINANCE" | "HR" | "SALES"
  | "CUSTOMERSERVICE" | "OWNER" | "SALESPERSON" | "CUSTOMER" | "PROVIDER"
  | "MANAGER" | "SUPERADMIN" | "ADMIN" | "SUPPORT" | "OTHER";

export interface CreateEmployeeRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  department?: string;
  employee_role?: EmployeeRole;
}

export interface UpdateEmployeeRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  department?: string;
  employee_role?: EmployeeRole;
}

export interface AffectEmployeeRequest {
  employee_id?: string; // format: uuid
}

// Response from Create/Update Employee endpoints
export interface EmployeeResponse extends Auditable {
  employee_id?: string; // format: uuid
  last_name?: string;
  first_name?: string;
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  employee_role?: EmployeeRole;
  department?: string;
}

// DTO for listing/getting employee details
export interface EmployeeDto extends Auditable {
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  partner_type?: "CUSTOMER" | "SUPPLIER" | "SALE" | "PROSPECT";
  partner_details?: string;
  logo?: string;
  employee_id?: string; // format: uuid
  is_manager?: boolean;
  employee_role?: EmployeeRole;
  department?: string;
}

// --- ThirdParty ---
export type ThirdPartyType =
  | "11" | "12" | "21" | "22" | "23" | "24" | "25" | "31" | "32" | "33" | "34"
  | "41" | "42" | "43" | "51" | "52" | "61" | "62" | "63" | "71" | "72";

export interface CreateThirdPartyRequest {
  legal_form?: OrganizationLegalForm;
  unique_identification_number?: string;
  trade_registration_number?: string;
  name?: string;
  acronym?: string;
  long_name?: string;
  logo?: string;
  images?: string[];
  accounting_account_numbers?: string[];
  authorized_payment_methods?: string[]; // uniqueItems
  authorized_credit_limit?: number;
  max_discount_rate?: number;
  vat_subject?: boolean;
  operations_balance?: number;
  opening_balance?: number;
  pay_term_number?: number; // format: int32
  pay_term_type?: string;
  third_party_family?: string;
  classification?: Record<string, string>;
  tax_number?: string;
  loyalty_points?: number; // format: int32
  loyalty_points_used?: number; // format: int32
  loyalty_points_expired?: number; // format: int32
}

export interface UpdateThirdPartyRequest {
  legal_form?: OrganizationLegalForm;
  unique_identification_number?: string;
  trade_registration_number?: string;
  name?: string;
  acronym?: string;
  long_name?: string;
  logo?: string;
  images?: string[];
  accounting_account_numbers?: string[];
  authorized_payment_methods?: string[]; // uniqueItems
  authorized_credit_limit?: number;
  max_discount_rate?: number;
  vat_subject?: boolean;
  operations_balance?: number;
  opening_balance?: number;
  pay_term_number?: number; // format: int32
  pay_term_type?: string;
  third_party_family?: string;
  classification?: Record<string, string>;
  tax_number?: string;
  loyalty_points?: number; // format: int32
  loyalty_points_used?: number; // format: int32
  loyalty_points_expired?: number; // format: int32
}

export interface ThirdPartyDto extends Auditable {
  organization_id?: string; // format: uuid
  id?: string; // format: uuid
  type?: ThirdPartyType;
  legal_form?: OrganizationLegalForm;
  unique_identification_number?: string;
  trade_registration_number?: string;
  name?: string;
  acronym?: string;
  long_name?: string;
  logo?: string;
  images?: string[];
  accounting_account_numbers?: string[];
  authorized_payment_methods?: string[]; // uniqueItems
  authorized_credit_limit?: number;
  max_discount_rate?: number;
  vat_subject?: boolean;
  operations_balance?: number;
  opening_balance?: number;
  pay_term_number?: number; // format: int32
  pay_term_type?: string;
  third_party_family?: string;
  classification?: Record<string, string>;
  tax_number?: string;
  loyalty_points?: number; // format: int32
  loyalty_points_used?: number; // format: int32
  loyalty_points_expired?: number; // format: int32
}

export interface UpdateThirdPartyStatusRequest {
  active: boolean;
}

export interface GetThirdPartyRequest {
  status?: boolean;
  type?: ThirdPartyType;
  page?: number; // format: int32, minimum: 1
  size?: number; // format: int32, minimum: 1
}

// --- Supplier (Provider) ---
export interface CreateProviderRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  contact_info?: string;
  address?: string;
  product_service_type?: string;
}

export interface UpdateProviderRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  contact_info?: string;
  address?: string;
  product_service_type?: string;
}

export interface AffectProviderRequest {
  provider_id?: string; // format: uuid
}

export interface ProviderDto extends Auditable {
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  partner_type?: "CUSTOMER" | "SUPPLIER" | "SALE" | "PROSPECT";
  partner_details?: string;
  logo?: string;
  provider_id?: string; // format: uuid
  contact_info?: string;
  address?: string;
  is_active?: boolean;
  product_service_type?: string;
}

// --- SalesPerson ---
export interface CreateSalesPersonRequest {
  name?: string;
  commission_rate?: number; // format: float
  credit?: number; // format: float
  current_balance?: number; // format: float
}

export interface UpdateSalesPersonRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  commission_rate?: number; // format: float
  credit?: number; // format: float
  current_balance?: number; // format: float
}

export interface SalesPersonDto extends Auditable {
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  partner_type?: "CUSTOMER" | "SUPPLIER" | "SALE" | "PROSPECT";
  partner_details?: string;
  logo?: string;
  sales_person_id?: string; // format: uuid
  name?: string;
  commission_rate?: number; // format: float
  credit?: number; // format: float
  current_balance?: number; // format: float
}

// --- Prospect ---
export interface CreateProspectRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  transaction_id?: number; // format: float
  payment_method?: string;
  amount_paid?: string;
  interest_level?: string;
}

export interface UpdateProspectRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  transaction_id?: number; // format: float
  payment_method?: string;
  amount_paid?: string;
  interest_level?: string;
}

export interface ProspectDto extends Auditable {
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  partner_type?: "CUSTOMER" | "SUPPLIER" | "SALE" | "PROSPECT";
  partner_details?: string;
  logo?: string;
  prospect_id?: string; // format: uuid
  transaction_id?: number; // format: float
  payment_method?: string;
  amount_paid?: string;
  interest_level?: string;
}

// --- Customer ---
export interface CreateCustomerRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  transaction_id?: number; // format: float
  payment_method?: string;
  amount_paid?: string;
}

export interface UpdateCustomerRequest {
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  logo?: string;
  transaction_id?: number; // format: float
  payment_method?: string;
  amount_paid?: string;
}

export interface AffectCustomerRequest {
  customer_id?: string; // format: uuid
}

export interface CustomerDto extends Auditable {
  organization_id?: string; // format: uuid
  agency_id?: string; // format: uuid
  first_name?: string;
  last_name?: string;
  short_description?: string;
  long_description?: string;
  location_id?: string; // format: uuid
  partner_type?: "CUSTOMER" | "SUPPLIER" | "SALE" | "PROSPECT";
  partner_details?: string;
  logo?: string;
  customer_id?: string; // format: uuid
  transaction_id?: number; // format: float
  payment_method?: string;
  amount_paid?: string;
}

// --- Certification ---
export interface CreateCertificationRequest {
  type?: string;
  name?: string;
  description?: string;
  obtainment_date?: string; // format: date-time
}

export interface UpdateCertificationRequest {
  type?: string;
  name?: string;
  description?: string;
  obtainment_date?: string; // format: date-time
}

export interface CertificationDto extends Auditable {
  organization_id?: string; // format: uuid
  certification_id?: string; // format: uuid
  type?: string;
  name?: string;
  description?: string;
  obtainment_date?: string; // format: date-time
}

// --- Proposed Activity ---
export interface CreateProposedActivityRequest {
  type?: string;
  name?: string;
  rate?: number;
  description?: string;
}

export interface UpdateProposedActivityRequest {
  type?: string;
  name?: string;
  rate?: number;
  description?: string;
}

export interface ProposedActivityDto extends Auditable {
  activity_id?: string; // format: uuid
  organization_id?: string; // format: uuid
  type?: string;
  name?: string;
  rate?: number;
  description?: string;
}

// --- Business Domain ---
export interface CreateBusinessDomainRequest {
  parent_domain_id?: string; // format: uuid
  name: string;
  image?: string;
  galleries?: string[];
  type: string;
  type_label: string;
  description?: string; // maxLength: 255
  metadata?: Record<string, any>;
}

export interface UpdateBusinessDomainRequest {
  parent_domain_id?: string; // format: uuid
  name: string;
  image?: string;
  galleries?: string[];
  type: string;
  type_label: string;
  description?: string; // maxLength: 255
  metadata?: Record<string, any>;
}

export interface BusinessDomainDto extends Auditable {
  id?: string; // format: uuid
  organization_id?: string; // format: uuid
  parent_domain_id?: string; // format: uuid
  name?: string;
  image?: string;
  galleries?: string[];
  type?: string;
  type_label?: string;
  description?: string;
  metadata?: Record<string, any>;
}

export interface GetBusinessDomainRequest {
  organization_id?: string; // format: uuid
  parent_domain_id?: string; // format: uuid
  name?: string;
  page?: number; // format: int32, minimum: 1
  size?: number; // format: int32, minimum: 1
}

// --- Business Actor ---
export type BusinessActorType =
  | "PROVIDER" | "CUSTOMER" | "SALESPERSON" | "CLIENT"
  | "FREELANCE_DRIVER" | "FARMER" | "AGENCY" | "VEHICLE_RENTAL" | "GUEST";

export type Gender = "MALE" | "FEMALE";

export interface CreateBusinessActorRequest {
  phone_number?: string;
  email?: string;
  avatar_picture?: string;
  profile_picture?: string;
  first_name: string;
  last_name?: string;
  is_individual?: boolean;
  birth_date?: string; // format: date-time
  gender?: Gender;
  nationality?: string;
  profession?: string;
  biography?: string;
  type?: BusinessActorType;
}

export interface UpdateBusinessActorRequest {
  phone_number?: string;
  email?: string;
  avatar_picture?: string;
  profile_picture?: string;
  first_name?: string;
  last_name?: string;
  is_individual?: boolean;
  birth_date?: string; // format: date-time
  gender?: Gender;
  nationality?: string;
  profession?: string;
  biography?: string;
  type?: BusinessActorType;
}

export interface BusinessActorDto extends Auditable {
  business_actor_id?: string; // format: uuid
  phone_number?: string;
  email?: string;
  avatar_picture?: string;
  profile_picture?: string;
  first_name?: string;
  last_name?: string;
  is_individual?: boolean;
  is_available?: boolean;
  birth_date?: string; // format: date-time
  role?: EmployeeRole;
  gender?: Gender;
  nationality?: string;
  profession?: string;
  qualifications?: string[];
  payment_methods?: string[]; // uniqueItems
  addresses?: string[]; // array of uuid, uniqueItems
  is_verified?: boolean;
  is_active?: boolean;
  biography?: string;
  type?: BusinessActorType;
}

// --- Images ---
export interface ImageDto {
  id?: string;
  name?: string;
  size?: number; // format: int64
  fileType?: string;
}

// --- Application & Keys ---
export interface CreateApplicationRequest {
  name: string;
  description?: string;
  success_url?: string; // pattern: ^(https?://).*
  cancel_url?: string; // pattern: ^(https?://).*
  failed_url?: string; // pattern: ^(https?://).*
  callback_url?: string; // pattern: ^(https?://).*
}

export interface ApplicationDto extends Auditable {
  id?: string; // format: uuid
  business_actor_id?: string; // format: uuid
  name?: string;
  description?: string;
  is_active?: boolean;
  success_url?: string;
  cancel_url?: string;
  failed_url?: string;
  callback_url?: string;
}

export interface ApplicationKeyDto extends Auditable {
  application_id?: string; // format: uuid
  public_key?: string;
  secret_key?: string;
}

// --- Enum Value Arrays for UI Controls ---

// --- Enum Value Arrays for UI Controls (as Non-Empty Tuples) ---

export const OrganizationLegalFormValues: [OrganizationLegalForm, ...OrganizationLegalForm[]] = [
  "11", "21", "22", "23", "24", "31", "32", "33", "34", "35",
  "41", "42", "51", "52", "53", "54", "61", "62", "63", "64",
  "71", "72", "73", "81", "82", "83", "84", "85"
];

export const OrganizationStatusValues: [OrganizationStatus, ...OrganizationStatus[]] = [
  "ACTIVE", "INACTIVE", "SUSPENDED", "TERMINATED",
  "PENDING_APPROVAL", "UNDER_REVIEW", "DISSOLVED"
];

export const ContactableTypeValues: [ContactableType, ...ContactableType[]] = [
  "BUSINESS_ACTOR", "ORGANIZATION", "AGENCY", "BUSINESS_PARTNER",
  "SALES_PERSON", "PROVIDER", "CUSTOMER", "PROSPECT", "DRIVER", "DELIVERER"
];

export const AddressableTypeValues: [AddressableType, ...AddressableType[]] = [
  "BUSINESS_ACTOR", "ORGANIZATION", "AGENCY", "BUSINESS_PARTNER",
  "SALES_PERSON", "PROVIDER", "CUSTOMER", "PROSPECT", "DRIVER", "DELIVERER", "DELIVERY"
];

export const EmployeeRoleValues: [EmployeeRole, ...EmployeeRole[]] = [
  "CEO", "ENGINEER", "MARKETING", "FINANCE", "HR", "SALES",
  "CUSTOMERSERVICE", "OWNER", "SALESPERSON", "CUSTOMER", "PROVIDER",
  "MANAGER", "SUPERADMIN", "ADMIN", "SUPPORT", "OTHER"
];

export const ThirdPartyTypeValues: [ThirdPartyType, ...ThirdPartyType[]] = [
  "11", "12", "21", "22", "23", "24", "25", "31", "32", "33", "34",
  "41", "42", "43", "51", "52", "61", "62", "63", "71", "72"
];

export const BusinessActorTypeValues: [BusinessActorType, ...BusinessActorType[]] = [
  "PROVIDER", "CUSTOMER", "SALESPERSON", "CLIENT", "FREELANCE_DRIVER",
  "FARMER", "AGENCY", "VEHICLE_RENTAL", "GUEST"
];

export const GenderValues: [Gender, ...Gender[]] = [
  "MALE", "FEMALE"
];// END OF FILE: types/organization.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/product.ts

// types/product.ts

export interface BusinessActorInfo {
  id: string;
  name: string;
  logoUrl?: string; // Optional logo for the BA
}

export type ProductType = "RESOURCE" | "SERVICE";
export interface ProductListItemData {
  id: string;
  name: string;
  productType: ProductType,
  description?: string;
  basePrice?: number;
  currentState: string; // e.g., PUBLISHED for Service, AVAILABLE for Resource (for customer view)
  createdAt: string; // ISO date string
  updatedAt: string; // ISO date string
  isScheduled?: boolean; // Less relevant for customer view of published items
  scheduledAt?: string; // Less relevant for customer view
  imageUrl?: string; // Optional image for the product/service
  baInfo?: BusinessActorInfo; // Information about the BA offering this
  category?: string;
  tags?: string[];
  additionnalInfo?: JSON;
  // additional custom attributes relevant for customer display
  // For example, if it a "ConsultationSlot"
  // duration?: string;
  // location?: string;
}

// Potentially a more detailed type if clicking a product shows more info
export interface ProductDetailData extends ProductListItemData {
  // more specific details
  specifications?: Record<string, string | number>;
  availabilityCalendar?: string; // e.g., link or embedded data for service availability
};// END OF FILE: types/product.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/resourceManagement.ts.txt

// types/resourceManagement.ts

// --- General ---
export type ProductAccessibility = "PUBLIC" | "PRIVATE";
export type ProductPackagingType = "KG" | "CARTON" | "PIECE" | "METER";
export type ProductStateType = "AVAILABLE" | "UNAVAILABLE" | "RESERVED" | "SOLD"; // From Resource/Service DTOs
export type ProductPostStatusType = "AVAILABLE" | "UNAVAILABLE"; // From ProductPostDto
export type ProductTypeType = "TANGIBLE" | "INTANGIBLE"; // Differentiates physical vs digital/service aspects


// --- Resources & Services (Core Product Definitions) ---
interface BaseProductRequest {
  brand_id?: string; // uuid
  immatriculation?: string;
  serial_number?: string;
  sku_code?: string;
  bar_code?: string;
  qr_code?: string;
  name?: string;
  short_description?: string;
  long_description?: string;
  storage_condition?: string;
  model_id?: string; // uuid
  iot_number?: string;
  available_quantity?: number; // int32
  product_type?: ProductTypeType;
  base_price?: number;
  accessibility?: ProductAccessibility;
  organisation_id?: string; // uuid (Note: spec uses 'organisation_id')
  default_agency_id?: string; // uuid
  sell_packaging?: ProductPackagingType;
  purchase_packaging?: ProductPackagingType;
  category_id?: string; // uuid
  number_usage?: number; // int32
  transferable?: boolean;
  state?: ProductStateType; // This state seems specific to this service's view of product
  max_reservation?: number; // int32
  is_tangible?: boolean;
  expires_at?: string; // date-time
}

export interface CreateResourceRequest extends BaseProductRequest {
  product_compositions?: CreateProductCompositionRequest[];
}
export interface UpdateResourceRequest extends Partial<CreateResourceRequest> { }

export interface CreateServiceRequest extends BaseProductRequest { }
export interface UpdateServiceRequest extends Partial<CreateServiceRequest> { }


interface BaseProductDto extends Auditable {
  brand_id?: string; // uuid
  immatriculation?: string;
  serial_number?: string;
  sku_code?: string;
  bar_code?: string;
  qr_code?: string;
  name?: string;
  short_description?: string;
  long_description?: string;
  storage_condition?: string;
  model_id?: string; // uuid
  category_id?: string; // uuid
  iot_number?: string;
  available_quantity?: number; // int32
  product_type?: ProductTypeType;
  base_price?: number;
  accessibility?: ProductAccessibility;
  organisation_id?: string; // uuid
  default_agency_id?: string; // uuid
  sell_product_id?: string; // uuid (sell_packaging in request, sell_product_id in DTO?) - CLARIFY
  purchase_unit_id?: string; // uuid (purchase_packaging in request, purchase_unit_id in DTO?) - CLARIFY
  parent_id?: string; // uuid
  number_usage?: number; // int32
  transferable?: boolean;
  state?: ProductStateType;
  max_reservation?: number; // int32
  is_tangible?: boolean;
  expires_at?: string | null; // date-time
  // organization_id also appears at the end of DTO in spec, might be redundant or context specific.
}

export interface ResourceDto extends BaseProductDto {
  resource_id?: string; // uuid
  // product_compositions are in request but not DTO in spec
}

export interface ServiceDto extends BaseProductDto {
  service_id?: string; // uuid
}

export interface CreateProductCompositionRequest {
  id?: string; // uuid (optional in create)
  label?: string;
  value_range?: string;
  comment?: string;
}
// No ProductCompositionDto in spec


// --- Product Posts ---
export interface CreateProductPostRequest {
  // createdAt, updatedAt, deletedAt typically not in create requests
  marchand_id?: string; // uuid
  variation_id?: string; // uuid
  product_id?: string; // uuid (Resource or Service ID it's posting)
  category_id?: string; // uuid
  name?: string; // Often derived from product, but can be overridden for the post
  long_description?: string;
  short_description?: string;
  sale_unit_id?: string; // uuid (references UnitDto)
  base_price?: number; // Can be different from product's base_price
  weight?: number;
  default_currency?: string; // e.g., "USD"
  next_available_time?: string; // date-time
  life_span?: number; // int32 (e.g., days for a perishable item post)
  quantity?: number; // int32 (quantity specifically for this post/listing)
  status?: ProductPostStatusType;
  expired_at?: string; // date-time
  brand_id?: string; // uuid
  immatriculation?: string;
  model_id?: string; // uuid
  // organisation_id is path param for create, not in body
  default_agency_id?: string; // uuid
  default_price?: number; // Might be final price after variations/options for this post
  alert_quantity?: number; // int32
  is_tax_exempt_for_com_transactions?: boolean;
}
export interface UpdateProductPostRequest extends Partial<Omit<CreateProductPostRequest, 'product_id' | 'marchand_id'>> {
  // Some fields might be immutable on update
  id?: string; // uuid for the ProductPost itself
}

export interface ProductPostDto { // Properties seem same as Create request + timestamps
  id?: string; // uuid of the ProductPost
  createdAt?: string; // date-time
  updatedAt?: string; // date-time
  deletedAt?: string | null; // date-time
  marchand_id?: string;
  variation_id?: string;
  product_id?: string;
  category_id?: string;
  name?: string;
  long_description?: string;
  short_description?: string;
  sale_unit_id?: string;
  base_price?: number;
  weight?: number;
  default_currency?: string;
  next_available_time?: string | null;
  life_span?: number;
  quantity?: number;
  status?: ProductPostStatusType;
  expired_at?: string | null;
  brand_id?: string;
  immatriculation?: string;
  model_id?: string;
  organisation_id?: string; // Present in DTO
  default_agency_id?: string;
  default_price?: number;
  alert_quantity?: number;
  is_tax_exempt_for_com_transactions?: boolean;
}

// --- Variations ---
export interface CreateVariationRequest { // Based on spec, seems to take full set of fields
  name?: string;
  default_purchase_price?: number; // double
  default_purchase_price_in_tax?: number; // double
  default_sell_price?: number; // double
  default_sell_price_in_tax?: number; // double
  profit_percent?: number; // double
  //Timestamps in create request is unusual, usually set by backend.
  createdAt?: string; // date-time
  updatedAt?: string; // date-time
  deletedAt?: string | null; // date-time
}
export interface UpdateVariationRequest extends CreateVariationRequest { } // Full update seems to be the case

export interface VariationRequest { // For saveVariations array
  vairation_id?: string; // uuid (Typo in spec: 'vairation_id') - assuming it means existing ID for update
  name?: string;
  default_purchase_price?: number;
  default_purchase_price_in_tax?: number;
  default_sell_price?: number;
  default_sell_price_in_tax?: number;
  profit_percent?: number;
  // Timestamps here too
  createdAt?: string;
  updatedAt?: string;
  deletedAt?: string | null;
}

export interface VariationDto {
  id?: string; // uuid
  product_id?: string; // uuid
  name?: string;
  default_purchase_price?: number;
  default_purchase_price_in_tax?: number;
  default_sell_price?: number;
  default_sell_price_in_tax?: number;
  profit_percent?: number;
  createdAt?: string;
  updatedAt?: string;
  deletedAt?: string | null;
}

// --- Sale Prices ---
export type SalePriceType = "RETAIL" | "WHOLESALE" | "SEMI_WHOLESALE" | "SUPER_WHOLESALE" | "DELIVERY" | "PURCHASE" | "OTHER_PRICE";
export interface CreateSalePriceRequest {
  // product_post_id is path param
  sale_price_type?: SalePriceType;
  min_quantity?: number; // int32
  max_quantity?: number; // int32
  value?: number;
  max_reduction?: number;
  currency?: string; // e.g. "USD"
  is_negociable?: boolean;
  validity_date?: string; // date-time
  notes?: string;
}
export interface UpdateSalePriceRequest extends Partial<CreateSalePriceRequest> {
  product_post_id?: string; // uuid (included in spec for update, though it's a path param)
}
export interface SalePriceDto extends Auditable {
  id?: string; // uuid
  product_post_id?: string; // uuid
  sale_price_type?: SalePriceType;
  min_quantity?: number;
  max_quantity?: number;
  value?: number;
  max_reduction?: number;
  currency?: string;
  is_negociable?: boolean;
  validity_date?: string | null; // date-time
  notes?: string;
}

// --- Units (Pricing Mode) ---
export interface CreateUnitRequest {
  base_unit_id?: string | null; // uuid (can be null for a base unit itself)
  actual_name?: string;
  short_name?: string;
  base_unit_multiplier?: number; // float
  allow_decimal?: boolean;
}
export interface UpdateUnitRequest extends Partial<CreateUnitRequest> { }
export interface UnitDto extends Auditable {
  id?: string; // uuid
  organization_id?: string; // uuid
  base_unit_id?: string | null; // uuid
  actual_name?: string;
  short_name?: string;
  base_unit_multiplier?: number;
  allow_decimal?: boolean;
}

// --- Categories, Brands, Models, Attributes ---
export type CategoryState = "AVAILABLE" | "UNAVAILABLE";
export interface CreateCategoryRequest {
  name?: string;
  description?: string;
  owner_id?: string; // uuid (likely organization_id or user_id)
  image_icon_id?: string; // uuid
  parent_id?: string | null; // uuid
  short_code?: string;
  state?: CategoryState;
}
export interface UpdateCategoryRequest extends Partial<CreateCategoryRequest> { }
export interface CategoryDto extends Auditable {
  id?: string; // uuid
  name?: string;
  description?: string;
  short_code?: string;
  owner_id?: string; // uuid
  image_icon_id?: string; // uuid
  parent_id?: string | null; // uuid
  root?: boolean;
  state?: CategoryState;
}
export interface CreateCategoryResponse extends Auditable { // Matches DTO structure but with sub_categories
  id?: string;
  name?: string;
  description?: string;
  short_code?: string;
  state?: CategoryState;
  sub_categories?: CategoryDto[];
}


export interface CreateProductBrandRequest {
  name?: string;
  description?: string;
  code?: string;
  image_id?: string; // uuid
  created_by_user_id?: string; // uuid
  notes?: string;
}
export interface UpdateProductBrandRequest extends Partial<CreateProductBrandRequest> { }
export interface ProductBrandDto extends Auditable {
  id?: string; // uuid
  name?: string;
  description?: string;
  code?: string;
  image_id?: string; // uuid
  created_by_user_id?: string; // uuid
  notes?: string;
}

export interface CreateModelRequest { // Timestamps in request is odd
  created_by_user_id?: string; // uuid
  name?: string;
  description?: string;
}
export interface UpdateModelRequest extends Partial<Omit<CreateModelRequest, 'created_by_user_id'>> { }
export interface ModelDto extends Auditable { // Based on UpdateModelResponse and common DTO patterns
  id?: string; // uuid
  created_by_user_id?: string; // uuid
  name?: string;
  description?: string;
}
// UpdateModelResponse in spec is same as ModelDto


export interface CreateAttributeRequest {
  name?: string;
  description?: string;
}
export interface UpdateAttributeRequest extends Partial<CreateAttributeRequest> { }
export interface AttributeDto extends Auditable { // Based on UpdateAttributeResponse and common DTO patterns
  id?: string; // uuid
  name?: string;
  description?: string;
}
// UpdateAttributeResponse in spec is same as AttributeDto

export interface AttributeValueDto extends Auditable {
  id?: string; // uuid
  product_id?: string; // uuid
  attribut_id?: string; // uuid (Typo in spec: 'attribut_id')
  value?: string;
}
// AttributeValueResponse in spec is same as AttributeValueDto


// --- Reviews & Reactions ---
export type ReactionType = "LIKE" | "LOVE" | "HAHA" | "WOW" | "SAD" | "ANGRY" | "CELEBRATE";
export interface CreateReviewRequest {
  user_id?: string; // uuid
  targe_id?: string; // uuid (Typo in spec: 'targe_id') -> target_id
  rating?: number; // int32
  comment?: string;
}
export interface UpdateReviewRequest {
  rating?: number; // int32
  comment?: string;
}
export interface ReviewDto extends Auditable {
  id?: string; // uuid
  user_id?: string; // uuid
  targe_id?: string; // uuid -> target_id
  rating?: number; // int32
  comment?: string;
}

export interface CreateReactionRequest {
  target_id?: string; // uuid
  user_id?: string; // uuid
  reaction_type?: ReactionType;
}
export interface ReactionDto extends Auditable {
  id?: string; // uuid
  target_id?: string; // uuid
  user_id?: string; // uuid
  reaction_type?: ReactionType;
}

// --- Media ---
export interface MediaDto { // From spec
  id?: string; // uuid
  target_id?: string; // uuid
  name?: string; // Original filename
  real_name?: string; // Stored filename (often a UUID or hash)
  size?: number; // int64
  file_type?: string; // MIME type
  is_primary?: boolean;
  // Timestamps from spec for MediaDto are unusual (createdAt etc.)
  createdAt?: string; // date-time
  updatedAt?: string; // date-time
  deletedAt?: string | null; // date-time
}
export interface MediaResponse extends MediaDto { } // As per spec for POST /media/add/product/{productId}// END OF FILE: types/resourceManagement.ts.txt

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/table.ts

export interface DataTableFilterOption {
  label: string;
  value: string;
  icon?: React.ComponentType<{ className?: string }>;
}

export interface DataTableSearchableColumn {
  id: string;
  title: string;
}

export interface DataTableFilterableColumn<TData = any> extends DataTableSearchableColumn {
  options: DataTableFilterOption[];
}// END OF FILE: types/table.ts

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/types/user-preferences.ts

// types/user-preferences.ts

export interface UserNotificationPreferences {
  email: boolean;
  push: boolean;
  sms: boolean;
  accountActivity: boolean;
  newFeatures: boolean;
  marketing: boolean;
  frequency: "real-time" | "daily" | "weekly" | "never";
  quietHoursStart?: string;
  quietHoursEnd?: string;
}

export interface UserPrivacyPreferences {
  analyticsSharing: boolean;
  personalizedAds: boolean;
  visibility: "public" | "private" | "friends-only";
  dataRetention: "6-months" | "1-year" | "2-years" | "indefinite";
}

export interface UserDisplayPreferences {
  language: string;
  currency: string;
  dateFormat: "mm-dd-yyyy" | "dd-mm-yyyy" | "yyyy-mm-dd";
  fontSize: number;
  theme: "light" | "dark" | "system";
  layout: "default" | "compact" | "expanded";
  timezone?: string;
  profilePhotoUrl?: string; // NEW: For user uploaded photo
}

export interface UserPreferencesDto {
  user_id: string;
  display: UserDisplayPreferences;
  notifications: UserNotificationPreferences;
  privacy: UserPrivacyPreferences;
  updated_at?: string;
}

export interface UpdateUserPreferencesRequest {
  display?: Partial<UserDisplayPreferences>;
  notifications?: Partial<UserNotificationPreferences>;
  privacy?: Partial<UserPrivacyPreferences>;
}// END OF FILE: types/user-preferences.ts

