Project Context From: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/practical-info
Generated On: Fri Jun 20 01:01:34 PM WAT 2025
===============================================
Ignored Directory Patterns: .* node_modules vendor build dist target __pycache__ .next cache target venv svgs fontawesome scss fonts webfonts images storage
Ignored File Patterns: *.log *.jar *.pdf *.png *.jpg *.class *.sqlite *.csv project_context.txt package-lock.json yarn.lock *.json composer.lock *.ico pnpm-lock.yaml
===============================================

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/practical-info/columns.tsx

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { PracticalInformationDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, FileText } from "lucide-react"; // Using FileText as a generic icon for info type
import { format, parseISO, isValid } from "date-fns";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

export interface PracticalInfoRowActionsProps {
  item: PracticalInformationDto;
  onEditAction: (item: PracticalInformationDto) => void;
  onDeleteAction: (item: PracticalInformationDto) => void;
  // No onViewDetails for this simple DTO, edit serves that purpose
}

const PracticalInfoRowActions: React.FC<PracticalInfoRowActionsProps> = ({
  item,
  onEditAction,
  onDeleteAction,
}) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className="h-8 w-8 p-0 data-[state=open]:bg-muted"
        >
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[160px]">
        <DropdownMenuLabel>Actions</DropdownMenuLabel>
        <DropdownMenuItem onClick={() => onEditAction(item)}>
          <Edit3 className="mr-2 h-4 w-4" /> Edit
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          onClick={() => onDeleteAction(item)}
          className="text-destructive focus:text-destructive"
        >
          <Trash2 className="mr-2 h-4 w-4" /> Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const getPracticalInfoColumns = (
  actionHandlers: Omit<PracticalInfoRowActionsProps, "item">
): ColumnDef<PracticalInformationDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all rows"
        className="translate-y-[2px]"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
        className="translate-y-[2px]"
      />
    ),
    enableSorting: false,
    enableHiding: false,
    size: 40,
  },
  {
    accessorKey: "type",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Type" />
    ),
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        <FileText className="h-4 w-4 text-muted-foreground flex-shrink-0" />
        <span className="font-medium truncate max-w-xs">
          {row.getValue("type")}
        </span>
      </div>
    ),
    size: 250,
    filterFn: (row, id, value) => value.includes(row.getValue(id)), // For faceted filter
  },
  {
    accessorKey: "value",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Value" />
    ),
    cell: ({ row }) => (
      <div className="truncate max-w-md text-sm text-muted-foreground">
        {row.getValue("value")}
      </div>
    ),
    size: 400,
  },
  {
    accessorKey: "notes",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Notes" />
    ),
    cell: ({ row }) => (
      <div className="text-xs text-muted-foreground/80 truncate max-w-sm">
        {row.getValue("notes") || ""}
      </div>
    ),
  },
  {
    accessorKey: "updated_at",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Last Updated" />
    ),
    cell: ({ row }) => {
      const date = row.getValue("updated_at") as string;
      return (
        <div className="text-xs text-muted-foreground whitespace-nowrap">
          {isValid(parseISO(date)) ? format(parseISO(date), "PPp") : "-"}
        </div>
      );
    },
    size: 170,
  },
  {
    id: "actions",
    cell: ({ row }) => (
      <div className="text-right">
        <PracticalInfoRowActions
          item={row.original}
          onEditAction={actionHandlers.onEditAction}
          onDeleteAction={actionHandlers.onDeleteAction}
        />
      </div>
    ),
    size: 80,
  },
];
// END OF FILE: columns.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/practical-info/data-table-toolbar.tsx

"use client";

import { useMemo } from "react";
import { Table } from "@tanstack/react-table";
import { SlidersHorizontal, X, Search } from "lucide-react";

import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { PracticalInformationDto } from "@/types/organization";
import { DataTableFilterOption } from "@/types/table";

/**
 * Derives a sorted list of unique "type" options for the faceted filter.
 * @param items - The full list of practical information items.
 * @returns An array of options for the DataTableFacetedFilter.
 */
const getPracticalInfoTypeOptions = (items: PracticalInformationDto[]): DataTableFilterOption[] => {
  // Use a Set to get unique, non-empty types, then map and sort.
  const uniqueTypes = [...new Set(items.map(item => item.type).filter(Boolean as any))];

  return uniqueTypes
    .map(type => ({
      label: type,
      value: type,
    }))
    .sort((a, b) => a.label.localeCompare(b.label));
};

/**
 * Formats a column ID (e.g., "lastModifiedAt" or "info_type") into a human-readable string ("Last Modified At").
 */
const formatColumnIdForDisplay = (id: string) => {
  return id
    .replace(/_/g, " ") // Replace underscores with spaces
    .replace(/([a-z])([A-Z])/g, "$1 $2") // Add space before uppercase letters
    .replace(/\b\w/g, (char) => char.toUpperCase()); // Capitalize the first letter of each word
};

interface PracticalInfoTableToolbarProps<TData extends PracticalInformationDto> {
  table: Table<TData>;
  /** The current global filter value. */
  globalFilter: string;
  /** Callback to update the global filter value. */
  setGlobalFilterAction: (value: string) => void;
  /** The complete dataset, used to generate filter options dynamically. */
  allItemsForFilterOptions: TData[];
}

/**
 * A toolbar for the Practical Information data table, providing search,
 * filtering, and column visibility controls.
 */
export function PracticalInfoTableToolbar<TData extends PracticalInformationDto>({
  table,
  globalFilter,
  setGlobalFilterAction,
  allItemsForFilterOptions,
}: PracticalInfoTableToolbarProps<TData>) {
  const isFiltered = table.getState().columnFilters.length > 0 || !!globalFilter;
  
  // Memoize the derived options to prevent recalculating on every render.
  const derivedTypeOptions = useMemo(
    () => getPracticalInfoTypeOptions(allItemsForFilterOptions),
    [allItemsForFilterOptions]
  );

  return (
    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
      {/* Left Side: Search and Filters */}
      <div className="flex flex-col sm:flex-row flex-1 items-center gap-2">
        <div className="relative w-full sm:w-auto">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search all fields..."
            value={globalFilter ?? ""}
            onChange={(event) => setGlobalFilterAction(event.target.value)}
            className="h-10 w-full sm:w-[200px] lg:w-[280px] pl-10"
          />
        </div>
        {table.getColumn("type") && derivedTypeOptions.length > 0 && (
          <DataTableFacetedFilter
            column={table.getColumn("type")}
            title="Type"
            options={derivedTypeOptions}
          />
        )}
      </div>

      {/* Right Side: Actions */}
      <div className="flex items-center gap-2">
        {isFiltered && (
          <Button
            variant="ghost"
            onClick={() => {
              table.resetColumnFilters();
              setGlobalFilterAction("");
            }}
            className="h-10 px-3"
          >
            Reset
            <X className="ml-2 h-4 w-4" />
          </Button>
        )}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" size="sm" className="h-10 w-full sm:w-auto">
              <SlidersHorizontal className="mr-2 h-4 w-4" />
              Columns
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-[180px]">
            <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>
            <DropdownMenuSeparator />
            {table
              .getAllColumns()
              .filter(
                (col) => typeof col.accessorFn !== "undefined" && col.getCanHide()
              )
              .map((column) => {
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) => column.toggleVisibility(!!value)}
                  >
                    {formatColumnIdForDisplay(column.id)}
                  </DropdownMenuCheckboxItem>
                );
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </div>
  );
}
// END OF FILE: data-table-toolbar.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/practical-info/practical-info-card.tsx

"use client";

import React from "react";
import { PracticalInformationDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  Info as InfoIcon,
  StickyNote,
} from "lucide-react"; // Use specific icon
import { format, parseISO, isValid } from "date-fns";
import { cn } from "@/lib/utils";

interface PracticalInfoCardProps {
  item: PracticalInformationDto;
  onEditAction: (item: PracticalInformationDto) => void;
  onDeleteAction: (item: PracticalInformationDto) => void;
  className?: string;
}

export function PracticalInfoCard({
  item,
  onEditAction,
  onDeleteAction,
  className,
}: PracticalInfoCardProps) {
  return (
    <Card
      className={cn(
        "flex flex-col h-full shadow-sm hover:shadow-lg transition-shadow duration-200 ease-in-out group",
        className
      )}
    >
      <CardHeader>
        <div className="flex justify-between items-start gap-2">
          <CardTitle className="text-base sm:text-md font-semibold leading-tight line-clamp-2 flex items-center">
            <StickyNote className="h-4 w-4 mr-2 text-primary opacity-80 flex-shrink-0" />
            <span className="truncate" title={item.type}>
              {item.type || "Untitled Information"}
            </span>
          </CardTitle>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-7 w-7 flex-shrink-0 opacity-70 group-hover:opacity-100"
              >
                <MoreHorizontal className="h-4 w-4" />{" "}
                <span className="sr-only">Actions</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-[160px]">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => onEditAction(item)}>
                <Edit3 className="mr-2 h-4 w-4" /> Edit
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => onDeleteAction(item)}
                className="text-destructive focus:text-destructive"
              >
                <Trash2 className="mr-2 h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent className="flex-grow space-y-1.5 text-sm py-2">
        <p className="text-foreground whitespace-pre-wrap break-words line-clamp-3 min-h-[4.5em]">
          {item.value || (
            <span className="italic text-muted-foreground">
              No value provided.
            </span>
          )}
        </p>
        {item.notes && (
          <p className="text-xs text-muted-foreground pt-1 line-clamp-2">
            <strong>Notes:</strong> {item.notes}
          </p>
        )}
      </CardContent>
      <CardFooter className="pt-2 pb-3 text-xs text-muted-foreground justify-end">
        Updated:{" "}
        {isValid(parseISO(item.updated_at!))
          ? format(parseISO(item.updated_at!), "PP")
          : "-"}
      </CardFooter>
    </Card>
  );
}
// END OF FILE: practical-info-card.tsx

//---> PATH: /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/components/organization/practical-info/practical-info-form.tsx

"use client";

import React, { useState, useEffect } from "react"; // Added useEffect
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  CreatePracticalInformationRequest,
  UpdatePracticalInformationRequest,
  PracticalInformationDto,
} from "@/types/organization";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { toast } from "sonner";
import { Loader2 } from "lucide-react";

const practicalInfoFormSchema = z.object({
  type: z
    .string()
    .min(3, "Type must be at least 3 characters long.")
    .max(100, "Type is too long."),
  value: z
    .string()
    .min(1, "Value cannot be empty.")
    .max(1000, "Value is too long."),
  notes: z
    .string()
    .max(500, "Notes are too long.")
    .optional()
    .or(z.literal("")),
});

type PracticalInfoFormData = z.infer<typeof practicalInfoFormSchema>;

interface PracticalInfoFormProps {
  organizationId: string; // To associate with the correct organization
  initialData?: Partial<PracticalInformationDto>; // For editing
  mode: "create" | "edit";
  // Parent handles actual API call and refreshes data
  onSubmitAttempt: (
    data: CreatePracticalInformationRequest | UpdatePracticalInformationRequest,
    infoId?: string
  ) => Promise<boolean>;
  onCancel: () => void;
}

export function PracticalInfoForm({
  organizationId,
  initialData,
  mode,
  onSubmitAttempt,
  onCancel,
}: PracticalInfoFormProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<PracticalInfoFormData>({
    resolver: zodResolver(practicalInfoFormSchema),
    defaultValues: {
      type: initialData?.type || "",
      value: initialData?.value || "",
      notes: initialData?.notes || "",
    },
  });

  useEffect(() => {
    // Ensure form resets if initialData changes (e.g. opening modal for different item)
    form.reset({
      type: initialData?.type || "",
      value: initialData?.value || "",
      notes: initialData?.notes || "",
    });
  }, [initialData, form.reset]);

  const processSubmit = async (data: PracticalInfoFormData) => {
    setIsSubmitting(true);
    const payload = data as CreatePracticalInformationRequest; // Types are compatible

    const success = await onSubmitAttempt(payload, initialData?.information_id);
    if (success) {
      form.reset(); // Reset form on success
    }
    setIsSubmitting(false);
  };

  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit(processSubmit)}
        className="space-y-6 p-1"
      >
        <FormField
          control={form.control}
          name="type"
          render={({ field }) => (
            <FormItem>
              <FormLabel>
                Information Type <span className="text-destructive">*</span>
              </FormLabel>
              <FormControl>
                <Input
                  placeholder="e.g., Opening Hours, WiFi Password, Emergency Contact"
                  {...field}
                />
              </FormControl>
              <FormDescription>
                A clear category for this piece of information.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="value"
          render={({ field }) => (
            <FormItem>
              <FormLabel>
                Value / Content <span className="text-destructive">*</span>
              </FormLabel>
              <FormControl>
                <Textarea
                  placeholder="Enter the detailed information here..."
                  {...field}
                  rows={5}
                />
              </FormControl>
              <FormDescription>
                The actual piece of information (e.g., Mon-Fri: 9 AM - 5 PM).
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="notes"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Additional Notes (Optional)</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="Any relevant context or extra details..."
                  {...field}
                  rows={3}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <div className="flex justify-end gap-2 pt-4">
          <Button
            type="button"
            variant="outline"
            onClick={onCancel}
            disabled={isSubmitting}
          >
            Cancel
          </Button>
          <Button type="submit" disabled={isSubmitting}>
            {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {mode === "create" ? "Add Information" : "Save Changes"}
          </Button>
        </div>
      </form>
    </Form>
  );
}
// END OF FILE: practical-info-form.tsx

