# Project Context Generated by Prompter
**Project Path:** /home/sih/Documents/GI/l4_s2/networks/projects/dashboard-template/app/(dashboard)/super-admin
**Project Type:** generic
**Generated On:** Mon Jul 14 06:12:53 PM WAT 2025

## Configuration
- **Use .gitignore:** false
- **Structure only:** false

## Project Structure
```
agencies/agencies-client.tsx
agencies/columns.tsx
agencies/page.tsx
bonus/page.tsx
business-actors/business-actor-card.tsx
business-actors/business-actors-client.tsx
business-actors/columns.tsx
business-actors/page.tsx
business-domains/business-domains-client.tsx
business-domains/page.tsx
certifications/certifications-client.tsx
certifications/columns.tsx
certifications/page.tsx
chat/page.tsx
customers/columns.tsx
customers/customers-client.tsx
customers/page.tsx
dashboard/dashboard-client.tsx
dashboard/page.tsx
organizations/columns.tsx
organizations/organization-card.tsx
organizations/organizations-client.tsx
organizations/page.tsx
platforms/page.tsx
profile/page.tsx
roles/page.tsx
roles/roles-client.tsx
suppliers/columns.tsx
suppliers/page.tsx
suppliers/suppliers-client.tsx
users/columns.tsx
users/page.tsx
users/user-card.tsx
users/users-client.tsx
webhooks/page.tsx
```

## File Contents

### agencies/agencies-client.tsx

```
"use client";

import React, { useState, useMemo } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { AgencyDto, OrganizationDto } from "@/types/organization";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { getSuperAdminAgencyColumns } from "./columns";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { Building, Search } from "lucide-react";

interface AgenciesClientProps {
  allAgencies: AgencyDto[];
  allOrganizations: OrganizationDto[];
}

export function AgenciesClient({
  allAgencies,
  allOrganizations,
}: AgenciesClientProps) {
  const orgOptions = useMemo(
    () =>
      allOrganizations.map((org) => ({
        label: org.long_name || org.organization_id!,
        value: org.organization_id!,
      })),
    [allOrganizations]
  );

  const columns = useMemo<ColumnDef<AgencyDto>[]>(
    () => getSuperAdminAgencyColumns(),
    []
  );

  return (
    <ResourceDataTable
      data={allAgencies}
      columns={columns}
      isLoading={false}
      error={null}
      onRefreshAction={() => window.location.reload()}
      searchPlaceholder="Search by agency name or location..."
      onDeleteItemsAction={() => {}}
      viewModeStorageKey="sa-agencies-view-mode"
      exportFileName="all_agencies.csv"
      pageHeader={
        <PageHeader
          title="Global Agency Overview"
          description="View and filter all agencies across the platform."
        />
      }
      filterControls={(table) => (
        <DataTableFacetedFilter
          column={table.getColumn("organization_id")}
          title="Organization"
          options={orgOptions}
        />
      )}
      renderGridItemAction={(agency) => (
        <div className="p-4 border rounded-md">{agency.long_name}</div>
      )} // Placeholder card
      emptyState={
        <FeedbackCard
          icon={Building}
          title="No Agencies Found"
          description="There are no agencies created on the platform yet."
        />
      }
      filteredEmptyState={
        <FeedbackCard
          icon={Search}
          title="No Agencies Found"
          description="Your filter criteria did not match any agencies."
        />
      }
    />
  );
}
```

### agencies/columns.tsx

```
"use client";

import { ColumnDef } from "@tanstack/react-table";
import { AgencyDto } from "@/types/organization";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { CheckCircle, XCircle } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

export const getSuperAdminAgencyColumns = (): ColumnDef<AgencyDto>[] => [
  {
    accessorKey: "long_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Agency" />
    ),
    cell: ({ row }) => {
      const agency = row.original;
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-9 w-9 border">
            <AvatarImage src={agency.logo} />
            <AvatarFallback>{agency.short_name?.charAt(0)}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{agency.long_name}</div>
            <div className="text-xs text-muted-foreground">
              {agency.location}
            </div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "organization_id",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Organization" />
    ),
    cell: ({ row }) => (
      <div className="text-sm text-muted-foreground">
        {row.original.organization_id}
      </div>
    ),
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "is_active",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Status" />
    ),
    cell: ({ row }) => {
      const isActive = row.getValue("is_active");
      return (
        <Badge
          variant={isActive ? "default" : "destructive"}
          className={isActive ? "bg-green-100 text-green-800" : ""}
        >
          {isActive ? "Active" : "Inactive"}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(String(row.getValue(id))),
  },
  {
    accessorKey: "total_affiliated_customers",
    header: ({ column }) => (
      <DataTableColumnHeader
        column={column}
        title="Customers"
        className="justify-end"
      />
    ),
    cell: ({ row }) => (
      <div className="text-right font-medium">
        {row.getValue("total_affiliated_customers") || 0}
      </div>
    ),
  },
];
```

### agencies/page.tsx

```
import { Metadata } from "next";
import { organizationRepository } from "@/lib/data-repo/organization";
import { AgenciesClient } from "./agencies-client";

export const metadata: Metadata = {
  title: "Global Agency Overview",
  description: "View and filter all agencies across all organizations.",
};

export default async function SuperAdminAgenciesPage() {
  const [agencies, organizations] = await Promise.all([
    // A new repository method would be ideal here, but we can simulate by fetching all orgs then all their agencies
    // For simplicity, we'll assume a flat list can be fetched or constructed.
    // This mock will be a placeholder for a real `getAllAgencies` endpoint.
    organizationRepository
      .getAllOrganizations()
      .then((orgs) =>
        Promise.all(
          orgs.map((org) =>
            organizationRepository.getAgencies(org.organization_id!)
          )
        )
      )
      .then((agencyArrays) => agencyArrays.flat()),
    organizationRepository.getAllOrganizations(),
  ]);

  return (
    <AgenciesClient allAgencies={agencies} allOrganizations={organizations} />
  );
}
```

### bonus/page.tsx

```
import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function SuperAdminBonusPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Bonus System Overview</h1>
        <Tabs defaultValue="overview" className="space-y-4">
            <TabsList>
                <TabsTrigger value="overview">Points Overview</TabsTrigger>
                <TabsTrigger value="point_value">Monetary Value</TabsTrigger>
                 <TabsTrigger value="config">Global Config</TabsTrigger>
                {/* Add more tabs if needed */}
            </TabsList>
             <TabsContent value="overview">
                <Card>
                    <CardHeader><CardTitle>Total Points Issued/Redeemed</CardTitle></CardHeader>
                    <CardContent>
                        <p>Platform-wide statistics on bonus points.</p>
                        {/* TODO: Implement Bonus system stats and charts */}
                    </CardContent>
                </Card>
             </TabsContent>
            <TabsContent value="point_value">
                <Card>
                    <CardHeader><CardTitle>Point Monetary Value Setting</CardTitle></CardHeader>
                    <CardContent>
                        <p>View or set the global monetary value per bonus point.</p>
                        {/* TODO: Display/Edit global point value */}
                    </CardContent>
                </Card>
            </TabsContent>
             <TabsContent value="config">
                <Card>
                    <CardHeader><CardTitle>Global Bonus Configuration</CardTitle></CardHeader>
                    <CardContent>
                        <p>Manage default rules or settings for the bonus system.</p>
                         {/* TODO: Implement global bonus settings */}
                    </CardContent>
                </Card>
            </TabsContent>
        </Tabs>
    </div>
  );
}```

### business-actors/business-actor-card.tsx

```
"use client";

import { BusinessActorDto } from "@/types/organization";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  CheckCircle,
  XCircle,
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface BusinessActorCardProps {
  actor: BusinessActorDto;
  onEditAction: (actor: BusinessActorDto) => void;
  onDeleteAction: (actor: BusinessActorDto) => void;
}

export function BusinessActorCard({
  actor,
  onEditAction,
  onDeleteAction,
}: BusinessActorCardProps) {
  const name = `${actor.first_name || ""} ${actor.last_name || ""}`.trim();
  return (
    <Card className="flex flex-col h-full">
      <CardHeader>
        <div className="flex justify-between items-start">
          <div className="flex items-center gap-3">
            <Avatar className="h-12 w-12">
              <AvatarImage src={actor.avatar_picture} />
              <AvatarFallback>{name.charAt(0)}</AvatarFallback>
            </Avatar>
            <div>
              <CardTitle className="text-base line-clamp-1">{name}</CardTitle>
              <CardDescription className="text-xs line-clamp-1">
                {actor.profession || "No profession listed"}
              </CardDescription>
            </div>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" className="h-8 w-8">
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onEditAction(actor)}>
                <Edit3 className="mr-2 h-4 w-4" /> Edit
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => onDeleteAction(actor)}
                className="text-destructive focus:text-destructive"
              >
                <Trash2 className="mr-2 h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent className="flex-grow">
        <Badge variant="secondary">{actor.type || "UNKNOWN"}</Badge>
      </CardContent>
      <CardFooter className="flex justify-between items-center text-xs text-muted-foreground">
        <div className="flex items-center gap-1">
          {actor.is_active ? (
            <CheckCircle className="h-4 w-4 text-green-500" />
          ) : (
            <XCircle className="h-4 w-4" />
          )}{" "}
          {actor.is_active ? "Active" : "Inactive"}
        </div>
        <div className="flex items-center gap-1">
          {actor.is_verified ? (
            <CheckCircle className="h-4 w-4 text-sky-500" />
          ) : (
            <XCircle className="h-4 w-4" />
          )}{" "}
          {actor.is_verified ? "Verified" : "Not Verified"}
        </div>
      </CardFooter>
    </Card>
  );
}
```

### business-actors/business-actors-client.tsx

```
"use client";

import React, { useState, useMemo, useCallback } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { BusinessActorDto } from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { Button } from "@/components/ui/button";
import { PlusCircle, UserPlus, Search as SearchIcon } from "lucide-react";
import { getBusinessActorColumns } from "./columns";
import { BusinessActorCard } from "./business-actor-card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { BusinessActorForm } from "@/components/business-actor/business-actor-form";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";

const statusOptions = [
  { value: "true", label: "Active" },
  { value: "false", label: "Inactive" },
];
const verifiedOptions = [
  { value: "true", label: "Verified" },
  { value: "false", label: "Not Verified" },
];

interface BusinessActorsClientProps {
  initialActors: BusinessActorDto[];
}

export function BusinessActorsClient({
  initialActors,
}: BusinessActorsClientProps) {
  const [actors, setActors] = useState<BusinessActorDto[]>(initialActors);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingActor, setEditingActor] = useState<
    BusinessActorDto | undefined
  >();

  const refreshData = useCallback(async () => {
    const updatedActors = await organizationRepository.getAllBusinessActors();
    setActors(updatedActors);
  }, []);

  const handleOpenDialog = (actor?: BusinessActorDto) => {
    setEditingActor(actor);
    setIsFormOpen(true);
  };

  const handleFormSuccess = () => {
    refreshData();
    setIsFormOpen(false);
    setEditingActor(undefined);
  };

  const handleDelete = (actorsToDelete: BusinessActorDto[]) => {
    toast.error(
      `Deletion of ${actorsToDelete.length} actor(s) is not implemented.`
    );
  };

  const columns = useMemo<ColumnDef<BusinessActorDto>[]>(
    () =>
      getBusinessActorColumns({
        onEditAction: handleOpenDialog,
        onDeleteAction: (actor) => handleDelete([actor]),
      }),
    []
  );

  return (
    <>
      <ResourceDataTable
        data={actors}
        columns={columns}
        isLoading={false}
        error={null}
        onRefreshAction={refreshData}
        searchPlaceholder="Search by name, email..."
        onDeleteItemsAction={handleDelete}
        viewModeStorageKey="sa-ba-view-mode"
        exportFileName="business_actors.csv"
        pageHeader={
          <PageHeader
            title="Business Actors"
            description="Manage all business actor profiles on the platform."
            action={
              <Button onClick={() => handleOpenDialog()}>
                <UserPlus className="mr-2 h-4 w-4" /> Create Profile
              </Button>
            }
          />
        }
        filterControls={(table) => (
          <>
            <DataTableFacetedFilter
              column={table.getColumn("is_active")}
              title="Status"
              options={statusOptions}
            />
            <DataTableFacetedFilter
              column={table.getColumn("is_verified")}
              title="Verification"
              options={verifiedOptions}
            />
          </>
        )}
        renderGridItemAction={(actor) => (
          <BusinessActorCard
            actor={actor}
            onEditAction={handleOpenDialog}
            onDeleteAction={() => handleDelete([actor])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={UserPlus}
            title="No Business Actors"
            description="There are no business actor profiles created yet. Create one to get started."
            actionButton={
              <Button onClick={() => handleOpenDialog()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Create Profile
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Actors Found"
            description="Your search or filter criteria did not match any business actors."
          />
        }
      />

      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
        <DialogContent className="sm:max-w-4xl">
          <DialogHeader>
            <DialogTitle>
              {editingActor
                ? "Edit Business Actor Profile"
                : "Create New Business Actor Profile"}
            </DialogTitle>
            <DialogDescription>
              {editingActor
                ? `Editing profile for ${editingActor.first_name}`
                : "Create a new, independent business profile."}
            </DialogDescription>
          </DialogHeader>
          <div className="py-4 max-h-[80vh] overflow-y-auto pr-2">
            <BusinessActorForm
              mode={editingActor ? "edit" : "create"}
              initialData={editingActor}
              onSuccessAction={handleFormSuccess}
              onCancelAction={() => setIsFormOpen(false)}
            />
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
```

### business-actors/columns.tsx

```
"use client";

import { ColumnDef } from "@tanstack/react-table";
import { BusinessActorDto } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit3, Trash2, CheckCircle, XCircle } from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface BusinessActorRowActionsProps {
  actor: BusinessActorDto;
  onEditAction: (actor: BusinessActorDto) => void;
  onDeleteAction: (actor: BusinessActorDto) => void;
}

const RowActions: React.FC<BusinessActorRowActionsProps> = ({ actor, onEditAction, onDeleteAction }) => (
  <DropdownMenu>
    <DropdownMenuTrigger asChild><Button variant="ghost" className="h-8 w-8 p-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
    <DropdownMenuContent align="end">
      <DropdownMenuItem onClick={() => onEditAction(actor)}><Edit3 className="mr-2 h-4 w-4" /> Edit</DropdownMenuItem>
      <DropdownMenuItem onClick={() => onDeleteAction(actor)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
    </DropdownMenuContent>
  </DropdownMenu>
);

export const getBusinessActorColumns = (actions: Omit<BusinessActorRowActionsProps, "actor">): ColumnDef<BusinessActorDto>[] => [
  { id: "select", header: ({ table }) => <Checkbox checked={table.getIsAllPageRowsSelected()} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} />, cell: ({ row }) => <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} />, enableSorting: false, enableHiding: false },
  { accessorKey: "first_name", header: ({ column }) => <DataTableColumnHeader column={column} title="Name" />, cell: ({ row }) => {
    const actor = row.original;
    const name = `${actor.first_name || ''} ${actor.last_name || ''}`.trim();
    return (
      <div className="flex items-center gap-3">
        <Avatar className="h-9 w-9"><AvatarImage src={actor.avatar_picture} /><AvatarFallback>{name.charAt(0)}</AvatarFallback></Avatar>
        <div>
          <div className="font-medium">{name}</div>
          <div className="text-xs text-muted-foreground">{actor.email}</div>
        </div>
      </div>
    );
  }},
  { accessorKey: "type", header: ({ column }) => <DataTableColumnHeader column={column} title="Type" />, cell: ({ row }) => <Badge variant="outline">{row.getValue("type")}</Badge>, filterFn: (row, id, value) => value.includes(row.getValue(id)) },
  { accessorKey: "is_active", header: ({ column }) => <DataTableColumnHeader column={column} title="Status" />, cell: ({ row }) => {
    const isActive = row.getValue("is_active");
    return <Badge variant={isActive ? "default" : "secondary"} className={isActive ? "bg-green-100 text-green-800" : ""}>{isActive ? "Active" : "Inactive"}</Badge>;
  }, filterFn: (row, id, value) => value.includes(String(row.getValue(id))) },
  { accessorKey: "is_verified", header: ({ column }) => <DataTableColumnHeader column={column} title="Verified" />, cell: ({ row }) => {
    const isVerified = row.getValue("is_verified");
    return isVerified ? <CheckCircle className="h-5 w-5 text-sky-500" /> : <XCircle className="h-5 w-5 text-muted-foreground" />;
  }, filterFn: (row, id, value) => value.includes(String(row.getValue(id))) },
  { id: "actions", cell: ({ row }) => <RowActions actor={row.original} {...actions} /> },
];```

### business-actors/page.tsx

```
import { Metadata } from "next";
import { organizationRepository } from "@/lib/data-repo/organization";
import { BusinessActorsClient } from "./business-actors-client";

export const metadata: Metadata = {
  title: "Business Actors Management",
  description:
    "Create, view, and manage all Business Actor profiles on the platform.",
};

export default async function SuperAdminBusinessActorsPage() {
  // Fetch only the business actors. No user list is needed.
  const actors = await organizationRepository.getAllBusinessActors();
  return <BusinessActorsClient initialActors={actors} />;
}
```

### business-domains/business-domains-client.tsx

```
"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import { organizationRepository } from "@/lib/data-repo/organization";
import {
  BusinessDomainDto,
  CreateBusinessDomainRequest,
  UpdateBusinessDomainRequest,
} from "@/types/organization";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { PlusCircle, Tag, Search as SearchIcon } from "lucide-react";
import { getBusinessDomainColumns } from "@/components/admin/business-domains/columns";
import { BusinessDomainCard } from "@/components/admin/business-domains/business-domain-card";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { PageHeader } from "@/components/ui/page-header";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import {
  BusinessDomainForm,
  BusinessDomainFormData,
} from "@/components/admin/business-domains/business-domain-form";

export function BusinessDomainsClientPage() {
  const [domains, setDomains] = useState<BusinessDomainDto[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [itemsToDelete, setItemsToDelete] = useState<BusinessDomainDto[]>([]);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<BusinessDomainDto | undefined>(
    undefined
  );

  const refreshData = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const data = await organizationRepository.getAllBusinessDomains();
      setDomains(data || []);
    } catch (err: any) {
      setError(err.message || "Could not load business domains.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  const handleOpenFormModal = (item?: BusinessDomainDto) => {
    setEditingItem(item);
    setIsFormModalOpen(true);
  };

  const handleDeleteConfirmation = (items: BusinessDomainDto[]) => {
    if (items.length === 0) return;
    setItemsToDelete(items);
    setIsDeleteDialogOpen(true);
  };

  const executeDelete = async () => {
    if (itemsToDelete.length === 0) return;
    const originalItems = [...domains];
    const idsToDelete = itemsToDelete.map((item) => item.id!);
    setDomains((prev) =>
      prev.filter((item) => !idsToDelete.includes(item.id!))
    );
    setIsDeleteDialogOpen(false);

    const promise = Promise.all(
      itemsToDelete.map((item) =>
        organizationRepository.deleteBusinessDomain(item.id!)
      )
    );
    toast.promise(promise, {
      loading: `Deleting ${itemsToDelete.length} domain(s)...`,
      success: () => {
        refreshData();
        setItemsToDelete([]);
        return "Domain(s) deleted.";
      },
      error: (err) => {
        setDomains(originalItems);
        setItemsToDelete([]);
        return `Failed to delete: ${err.message}`;
      },
    });
  };

  const handleFormSubmit = async (
    data: BusinessDomainFormData
  ): Promise<boolean> => {
    try {
      const promise = editingItem?.id
        ? organizationRepository.updateBusinessDomain(
            editingItem.id,
            data as UpdateBusinessDomainRequest
          )
        : organizationRepository.createBusinessDomain(
            data as CreateBusinessDomainRequest
          );

      await toast.promise(promise, {
        loading: `${editingItem ? "Updating" : "Creating"} domain...`,
        success: `Domain ${editingItem ? "updated" : "created"} successfully!`,
        error: (err) => err.message,
      });

      refreshData();
      setIsFormModalOpen(false);
      return true;
    } catch (error) {
      return false;
    }
  };

  const columns = useMemo<ColumnDef<BusinessDomainDto>[]>(
    () =>
      getBusinessDomainColumns({
        onEditAction: handleOpenFormModal,
        onDeleteAction: (item) => handleDeleteConfirmation([item]),
      }),
    []
  );

  return (
    <>
      <ResourceDataTable
        data={domains}
        columns={columns}
        isLoading={isLoading}
        error={error}
        onRefreshAction={refreshData}
        searchPlaceholder="Search domains..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="admin-domains-view-mode"
        exportFileName="business_domains.csv"
        pageHeader={
          <PageHeader
            title="Business Domains"
            description="Manage the global list of business domains available on the platform."
            action={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Create Domain
              </Button>
            }
          />
        }
        renderGridItemAction={(item) => (
          <BusinessDomainCard
            domain={item}
            onEditAction={handleOpenFormModal}
            onDeleteAction={(item) => handleDeleteConfirmation([item])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Tag}
            title="No Business Domains"
            description="Create the first business domain to categorize organizations."
            actionButton={
              <Button onClick={() => handleOpenFormModal()}>
                <PlusCircle className="mr-2 h-4 w-4" /> Create Domain
              </Button>
            }
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Domains Found"
            description="Your search did not match any business domains."
          />
        }
      />
      <Dialog open={isFormModalOpen} onOpenChange={setIsFormModalOpen}>
        <DialogContent>
          <DialogTitle className="sr-only">
            {editingItem ? "Edit Domain" : "Create New Domain"}
          </DialogTitle>
          <BusinessDomainForm
            mode={editingItem ? "edit" : "create"}
            initialData={editingItem}
            onSubmitAction={handleFormSubmit}
          />
        </DialogContent>
      </Dialog>
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete{" "}
              <strong>{itemsToDelete.length} domain(s)</strong>. Organizations
              using this domain will need to be updated.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeDelete}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
```

### business-domains/page.tsx

```
import { Metadata } from "next";
import { BusinessDomainsClientPage } from "./business-domains-client";

export const metadata: Metadata = {
  title: "Manage Business Domains",
  description: "Administer the global list of business domains for all organizations.",
};

export default async function BusinessDomainsPage() {
  return <BusinessDomainsClientPage />;
}```

### certifications/certifications-client.tsx

```
"use client";

import React, { useMemo } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { CertificationDto, OrganizationDto } from "@/types/organization";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { getSuperAdminCertificationColumns } from "./columns";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { Award, Search } from "lucide-react";

interface CertificationsClientProps {
  allCertifications: CertificationDto[];
  allOrganizations: OrganizationDto[];
}

export function CertificationsClient({
  allCertifications,
  allOrganizations,
}: CertificationsClientProps) {
  const orgOptions = useMemo(
    () =>
      allOrganizations.map((org) => ({
        label: org.long_name || org.organization_id!,
        value: org.organization_id!,
      })),
    [allOrganizations]
  );

  const columns = useMemo<ColumnDef<CertificationDto>[]>(
    () => getSuperAdminCertificationColumns(),
    []
  );

  return (
    <ResourceDataTable
      data={allCertifications}
      columns={columns}
      isLoading={false}
      error={null}
      onRefreshAction={() => window.location.reload()}
      searchPlaceholder="Search by certification name or type..."
      onDeleteItemsAction={() => {}}
      viewModeStorageKey="sa-certs-view-mode"
      exportFileName="all_certifications.csv"
      pageHeader={
        <PageHeader
          title="Global Certification Overview"
          description="View and filter all certifications across the platform."
        />
      }
      filterControls={(table) => (
        <DataTableFacetedFilter
          column={table.getColumn("organization_id")}
          title="Organization"
          options={orgOptions}
        />
      )}
      renderGridItemAction={(cert) => (
        <div className="p-4 border rounded-md">{cert.name}</div>
      )}
      emptyState={
        <FeedbackCard
          icon={Award}
          title="No Certifications Found"
          description="No organizations have added certifications yet."
        />
      }
      filteredEmptyState={
        <FeedbackCard
          icon={Search}
          title="No Certifications Found"
          description="Your filter criteria did not match any certifications."
        />
      }
    />
  );
}
```

### certifications/columns.tsx

```
"use client";

import { ColumnDef } from "@tanstack/react-table";
import { CertificationDto } from "@/types/organization";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { format, parseISO, isValid } from "date-fns";
import { Award } from "lucide-react";

export const getSuperAdminCertificationColumns =
  (): ColumnDef<CertificationDto>[] => [
    {
      accessorKey: "name",
      header: ({ column }) => (
        <DataTableColumnHeader column={column} title="Certification" />
      ),
      cell: ({ row }) => (
        <div className="flex items-center gap-2">
          <Award className="h-4 w-4 text-muted-foreground" />
          <span className="font-medium">{row.getValue("name")}</span>
        </div>
      ),
    },
    {
      accessorKey: "organization_id",
      header: ({ column }) => (
        <DataTableColumnHeader column={column} title="Organization" />
      ),
      filterFn: (row, id, value) => value.includes(row.getValue(id)),
    },
    {
      accessorKey: "type",
      header: ({ column }) => (
        <DataTableColumnHeader column={column} title="Type" />
      ),
    },
    {
      accessorKey: "obtainment_date",
      header: ({ column }) => (
        <DataTableColumnHeader column={column} title="Obtained" />
      ),
      cell: ({ row }) => {
        const date = row.getValue("obtainment_date") as string;
        return (
          <div>
            {isValid(parseISO(date)) ? format(parseISO(date), "PP") : "-"}
          </div>
        );
      },
    },
  ];
```

### certifications/page.tsx

```
import { Metadata } from "next";
import { organizationRepository } from "@/lib/data-repo/organization";
import { CertificationsClient } from "./certifications-client";

export const metadata: Metadata = {
  title: "Global Certification Overview",
  description: "View and filter all certifications across all organizations.",
};

export default async function SuperAdminCertificationsPage() {
  const [certifications, organizations] = await Promise.all([
    organizationRepository
      .getAllOrganizations()
      .then((orgs) =>
        Promise.all(
          orgs.map((org) =>
            organizationRepository.getCertifications(org.organization_id!)
          )
        )
      )
      .then((arrays) => arrays.flat()),
    organizationRepository.getAllOrganizations(),
  ]);

  return (
    <CertificationsClient
      allCertifications={certifications}
      allOrganizations={organizations}
    />
  );
}
```

### chat/page.tsx

```

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function SuperAdminChatPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Admin Chat & Support</h1>
       <Card>
        <CardHeader>
          <CardTitle>Admin Communication</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Interface for Super Admin communication or monitoring support channels.</p>
          {/* TODO: Implement Admin Chat/Support Monitoring component */}
           <div className="mt-4 h-96 border rounded-md flex items-center justify-center text-muted-foreground">
             Admin Chat Interface Placeholder
           </div>
        </CardContent>
      </Card>
       {/* Add sections for Reviews Stats, Rate App overview, Notification Info */}
        <Card className="mt-4">
            <CardHeader><CardTitle>Reviews Statistics</CardTitle></CardHeader>
            <CardContent><p>Overall statistics on customer reviews.</p></CardContent>{/* TODO */}
        </Card>
        <Card className="mt-4">
            <CardHeader><CardTitle>App Rating Overview</CardTitle></CardHeader>
            <CardContent><p>Platform-wide app rating data.</p></CardContent>{/* TODO */}
        </Card>
         <Card className="mt-4">
            <CardHeader><CardTitle>Notification Info / System Alerts</CardTitle></CardHeader>
            <CardContent><p>View or manage system-wide notifications.</p></CardContent>{/* TODO */}
        </Card>
    </div>
  );
}```

### customers/columns.tsx

```
"use client";

import { ColumnDef } from "@tanstack/react-table";
import { CustomerDto } from "@/types/organization";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

export const getSuperAdminCustomerColumns = (): ColumnDef<CustomerDto>[] => [
  {
    accessorKey: "first_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Customer" />
    ),
    cell: ({ row }) => {
      const customer = row.original;
      const name = `${customer.first_name || ""} ${
        customer.last_name || ""
      }`.trim();
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-9 w-9">
            <AvatarImage src={customer.logo} />
            <AvatarFallback>{name.charAt(0)}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{name}</div>
            <div className="text-xs text-muted-foreground">
              {customer.short_description}
            </div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "organization_id",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Organization" />
    ),
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "agency_id",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Agency" />
    ),
  },
  {
    accessorKey: "payment_method",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Last Payment" />
    ),
  },
];
```

### customers/customers-client.tsx

```
"use client";

import React, { useMemo } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { CustomerDto, OrganizationDto } from "@/types/organization";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { getSuperAdminCustomerColumns } from "./columns";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { Users, Search } from "lucide-react";

interface CustomersClientProps {
  allCustomers: CustomerDto[];
  allOrganizations: OrganizationDto[];
}

export function CustomersClient({
  allCustomers,
  allOrganizations,
}: CustomersClientProps) {
  const orgOptions = useMemo(
    () =>
      allOrganizations.map((org) => ({
        label: org.long_name || org.organization_id!,
        value: org.organization_id!,
      })),
    [allOrganizations]
  );

  const columns = useMemo<ColumnDef<CustomerDto>[]>(
    () => getSuperAdminCustomerColumns(),
    []
  );

  return (
    <ResourceDataTable
      data={allCustomers}
      columns={columns}
      isLoading={false}
      error={null}
      onRefreshAction={() => window.location.reload()}
      searchPlaceholder="Search by customer name..."
      onDeleteItemsAction={() => {}}
      viewModeStorageKey="sa-customers-view-mode"
      exportFileName="all_customers.csv"
      pageHeader={
        <PageHeader
          title="Global Customer Overview"
          description="View and filter all customers across the platform."
        />
      }
      filterControls={(table) => (
        <DataTableFacetedFilter
          column={table.getColumn("organization_id")}
          title="Organization"
          options={orgOptions}
        />
      )}
      renderGridItemAction={(customer) => (
        <div className="p-4 border rounded-md">{customer.first_name}</div>
      )}
      emptyState={
        <FeedbackCard
          icon={Users}
          title="No Customers Found"
          description="There are no customers registered on the platform yet."
        />
      }
      filteredEmptyState={
        <FeedbackCard
          icon={Search}
          title="No Customers Found"
          description="Your filter criteria did not match any customers."
        />
      }
    />
  );
}
```

### customers/page.tsx

```
import { Metadata } from "next";
import { organizationRepository } from "@/lib/data-repo/organization";
import { CustomersClient } from "./customers-client";

export const metadata: Metadata = {
  title: "Global Customer Overview",
  description: "View and filter all customers across all organizations.",
};

export default async function SuperAdminCustomersPage() {
  const [customers, organizations] = await Promise.all([
    organizationRepository
      .getAllOrganizations()
      .then((orgs) =>
        Promise.all(
          orgs.map((org) =>
            organizationRepository.getOrgCustomers(org.organization_id!)
          )
        )
      )
      .then((arrays) => arrays.flat()),
    organizationRepository.getAllOrganizations(),
  ]);

  return (
    <CustomersClient
      allCustomers={customers}
      allOrganizations={organizations}
    />
  );
}
```

### dashboard/dashboard-client.tsx

```
"use client";

import React from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { PageHeader } from "@/components/ui/page-header";
import {
  Bar,
  BarChart,
  ResponsiveContainer,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  Pie,
  PieChart,
  Cell,
} from "recharts";
import { Users, Building, Briefcase, FileText, UserPlus } from "lucide-react";
import { OrganizationDto, BusinessActorDto } from "@/types/organization";
import { UserDto } from "@/types/auth";
import { format } from "date-fns";

export interface DashboardData {
  stats: {
    totalUsers: number;
    totalOrgs: number;
    totalBAs: number;
  };
  charts: {
    orgStatusCounts: Record<string, number>;
    baTypeCounts: Record<string, number>;
  };
  recentActivity: {
    users: UserDto[];
    organizations: OrganizationDto[];
  };
}

interface SuperAdminDashboardClientProps {
  initialData: DashboardData;
}

const COLORS = [
  "#0088FE",
  "#00C49F",
  "#FFBB28",
  "#FF8042",
  "#8884d8",
  "#82ca9d",
];

export function SuperAdminDashboardClient({
  initialData,
}: SuperAdminDashboardClientProps) {
  const { stats, charts, recentActivity } = initialData;

  const orgStatusData = Object.entries(charts.orgStatusCounts).map(
    ([name, value]) => ({ name, value })
  );
  const baTypeData = Object.entries(charts.baTypeCounts).map(
    ([name, value]) => ({ name, value })
  );

  return (
    <div className="space-y-6">
      <PageHeader
        title="Platform Dashboard"
        description="A high-level overview of all activity across the YowYob platform."
      />

      {/* Stat Cards */}
      <div className="grid gap-4 md:grid-cols-3">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Users</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalUsers}</div>
            <p className="text-xs text-muted-foreground">
              All registered user accounts.
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Total Organizations
            </CardTitle>
            <Building className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalOrgs}</div>
            <p className="text-xs text-muted-foreground">Across all users.</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Total Business Actors
            </CardTitle>
            <Briefcase className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalBAs}</div>
            <p className="text-xs text-muted-foreground">
              Users with business profiles.
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Charts */}
      <div className="grid gap-4 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Organizations by Status</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={orgStatusData}
                  dataKey="value"
                  nameKey="name"
                  cx="50%"
                  cy="50%"
                  outerRadius={100}
                  label
                >
                  {orgStatusData.map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={COLORS[index % COLORS.length]}
                    />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Business Actors by Type</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={baTypeData}>
                <XAxis
                  dataKey="name"
                  stroke="#888888"
                  fontSize={12}
                  tickLine={false}
                  axisLine={false}
                />
                <YAxis
                  stroke="#888888"
                  fontSize={12}
                  tickLine={false}
                  axisLine={false}
                />
                <Tooltip />
                <Bar dataKey="value" fill="#8884d8" radius={[4, 4, 0, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Recent Activity Feeds */}
      <div className="grid gap-4 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Recently Created Organizations</CardTitle>
            <CardDescription>
              The 5 most recently created organizations.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {recentActivity.organizations.map((org) => (
                <div key={org.organization_id} className="flex items-center">
                  <FileText className="h-5 w-5 text-muted-foreground" />
                  <div className="ml-4 space-y-1">
                    <p className="text-sm font-medium leading-none">
                      {org.long_name}
                    </p>
                    <p className="text-sm text-muted-foreground">{org.email}</p>
                  </div>
                  <div className="ml-auto text-xs text-muted-foreground">
                    {format(new Date(org.created_at!), "PP")}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Recently Joined Users</CardTitle>
            <CardDescription>
              The 5 most recently registered users.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {recentActivity.users.map((user) => (
                <div key={user.id} className="flex items-center">
                  <UserPlus className="h-5 w-5 text-muted-foreground" />
                  <div className="ml-4 space-y-1">
                    <p className="text-sm font-medium leading-none">
                      {user.first_name} {user.last_name}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      {user.username}
                    </p>
                  </div>
                  <div className="ml-auto text-xs text-muted-foreground">
                    {format(new Date(user.created_at!), "PP")}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
```

### dashboard/page.tsx

```
import { Metadata } from "next";
import { authRepository } from "@/lib/data-repo/auth";
import { organizationRepository } from "@/lib/data-repo/organization";
import { DashboardData, SuperAdminDashboardClient } from "./dashboard-client";

export const metadata: Metadata = {
  title: "Super Admin Dashboard",
  description: "Platform-wide overview of users, organizations, and activity.",
};

// Change return type to: DashboardData | null
async function getDashboardStats(): Promise<DashboardData | null> {
  try {
    const [users, organizations, businessActors] = await Promise.all([
      authRepository.getAllUsers(),
      organizationRepository.getAllOrganizations(),
      organizationRepository.getAllBusinessActors(),
    ]);

    const totalUsers = users.length;
    const totalOrgs = organizations.length;
    const totalBAs = businessActors.length;

    const orgStatusCounts = organizations.reduce((acc, org) => {
      const status = org.status || "UNKNOWN";
      acc[status] = (acc[status] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const baTypeCounts = businessActors.reduce((acc, ba) => {
      const type = ba.type || "UNKNOWN";
      acc[type] = (acc[type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    return {
      stats: { totalUsers, totalOrgs, totalBAs },
      charts: { orgStatusCounts, baTypeCounts },
      recentActivity: {
        users: users.slice(0, 5),
        organizations: organizations.slice(0, 5),
      },
    };
  } catch (error) {
    console.error("Failed to fetch dashboard stats:", error);
    return null;
  }
}

export default async function SuperAdminDashboardPage() {
  const dashboardData = await getDashboardStats();

  if (!dashboardData) {
    return <div>Error: Could not load platform statistics.</div>;
  }

  return <SuperAdminDashboardClient initialData={dashboardData} />;
}
```

### organizations/columns.tsx

```
"use client";

import { ColumnDef } from "@tanstack/react-table";
import { OrganizationDto, OrganizationStatus } from "@/types/organization";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  Edit,
  Trash2,
  Eye,
  CheckCircle,
  XCircle,
  Clock,
  ShieldQuestion,
} from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";
import { cn } from "@/lib/utils";

const getStatusInfo = (status: OrganizationDto["status"]) => {
  switch (status) {
    case "ACTIVE":
      return { icon: CheckCircle, color: "text-green-600", label: "Active" };
    case "INACTIVE":
      return { icon: XCircle, color: "text-slate-500", label: "Inactive" };
    case "PENDING_APPROVAL":
      return { icon: Clock, color: "text-amber-600", label: "Pending" };
    case "SUSPENDED":
      return {
        icon: ShieldQuestion,
        color: "text-red-600",
        label: "Suspended",
      };
    default:
      return {
        icon: XCircle,
        color: "text-destructive",
        label: status || "Unknown",
      };
  }
};

interface RowActionsProps {
  organization: OrganizationDto;
  onStatusChangeAction: (
    organization: OrganizationDto,
    status: OrganizationStatus
  ) => void;
  onDeleteAction: (organization: OrganizationDto) => void;
}

const RowActions: React.FC<RowActionsProps> = ({
  organization,
  onStatusChangeAction,
  onDeleteAction,
}) => (
  <DropdownMenu>
    <DropdownMenuTrigger asChild>
      <Button variant="ghost" className="h-8 w-8 p-0">
        <MoreHorizontal className="h-4 w-4" />
      </Button>
    </DropdownMenuTrigger>
    <DropdownMenuContent align="end">
      <DropdownMenuItem
        onClick={() => onStatusChangeAction(organization, "ACTIVE")}
      >
        <CheckCircle className="mr-2 h-4 w-4 text-green-500" /> Approve/Activate
      </DropdownMenuItem>
      <DropdownMenuItem
        onClick={() => onStatusChangeAction(organization, "SUSPENDED")}
      >
        <ShieldQuestion className="mr-2 h-4 w-4 text-red-500" /> Suspend
      </DropdownMenuItem>
      <DropdownMenuSeparator />
      <DropdownMenuItem
        onClick={() => onDeleteAction(organization)}
        className="text-destructive focus:text-destructive"
      >
        <Trash2 className="mr-2 h-4 w-4" /> Delete
      </DropdownMenuItem>
    </DropdownMenuContent>
  </DropdownMenu>
);

export const getSuperAdminOrganizationColumns = (
  actions: Omit<RowActionsProps, "organization">
): ColumnDef<OrganizationDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={table.getIsAllPageRowsSelected()}
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "long_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Organization" />
    ),
    cell: ({ row }) => {
      const org = row.original;
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10 border">
            <AvatarImage src={org.logo_url} />
            <AvatarFallback>{org.short_name?.charAt(0)}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{org.long_name}</div>
            <div className="text-xs text-muted-foreground">{org.email}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "status",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Status" />
    ),
    cell: ({ row }) => {
      const statusInfo = getStatusInfo(row.getValue("status"));
      return (
        <Badge variant="outline" className={cn("capitalize", statusInfo.color)}>
          <statusInfo.icon className="mr-1.5 h-3.5 w-3.5" />
          {statusInfo.label}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "business_actor_id",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Owner ID" />
    ),
    cell: ({ row }) => (
      <div className="text-xs text-muted-foreground truncate">
        {row.getValue("business_actor_id")}
      </div>
    ),
  },
  {
    id: "actions",
    cell: ({ row }) => <RowActions organization={row.original} {...actions} />,
  },
];
```

### organizations/organization-card.tsx

```
"use client";

import { OrganizationDto, OrganizationStatus } from "@/types/organization";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2, Building, CheckCircle, XCircle, Clock, ShieldQuestion } from "lucide-react";
import { cn } from "@/lib/utils";
import Image from "next/image";

const getStatusInfo = (status: OrganizationDto['status']) => {
  switch (status) {
    case "ACTIVE": return { icon: CheckCircle, color: "text-green-600", label: "Active" };
    case "INACTIVE": return { icon: XCircle, color: "text-slate-500", label: "Inactive" };
    case "PENDING_APPROVAL": return { icon: Clock, color: "text-amber-600", label: "Pending" };
    case "SUSPENDED": return { icon: ShieldQuestion, color: "text-red-600", label: "Suspended" };
    default: return { icon: XCircle, color: "text-destructive", label: status || "Unknown" };
  }
};

interface AdminOrganizationCardProps {
  organization: OrganizationDto;
  onStatusChangeAction: (organization: OrganizationDto, status: OrganizationStatus) => void;
  onDeleteAction: (organization: OrganizationDto) => void;
}

export function AdminOrganizationCard({ organization, onStatusChangeAction, onDeleteAction }: AdminOrganizationCardProps) {
  const statusInfo = getStatusInfo(organization.status);

  return (
    <Card className="flex flex-col h-full shadow-md hover:shadow-xl transition-all duration-300 ease-in-out group">
      <CardHeader>
        <div className="flex justify-between items-start gap-3">
          <div className="flex items-center gap-4">
            <Image src={organization.logo_url || '/placeholder.svg'} alt={organization.long_name || ""} width={48} height={48} className="h-12 w-12 rounded-lg object-cover border" />
            <div>
              <CardTitle className="text-md font-bold leading-tight line-clamp-2">{organization.long_name}</CardTitle>
              <CardDescription className="text-xs">{organization.short_name}</CardDescription>
            </div>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild><Button variant="ghost" size="icon" className="h-8 w-8 flex-shrink-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onStatusChangeAction(organization, 'ACTIVE')}><CheckCircle className="mr-2 h-4 w-4 text-green-500" /> Approve/Activate</DropdownMenuItem>
              <DropdownMenuItem onClick={() => onStatusChangeAction(organization, 'SUSPENDED')}><ShieldQuestion className="mr-2 h-4 w-4 text-red-500" /> Suspend</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={() => onDeleteAction(organization)} className="text-destructive focus:text-destructive"><Trash2 className="mr-2 h-4 w-4" /> Delete</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent className="flex-grow">
        <p className="text-muted-foreground line-clamp-3 text-sm leading-relaxed min-h-[60px]">
          {organization.description || "No description provided."}
        </p>
      </CardContent>
      <CardFooter>
        <Badge variant="outline" className={cn("capitalize text-xs items-center font-normal", statusInfo.color)}>
          <statusInfo.icon className="mr-1.5 h-3.5 w-3.5" />
          {statusInfo.label}
        </Badge>
      </CardFooter>
    </Card>
  );
}```

### organizations/organizations-client.tsx

```
"use client";

import React, { useState, useMemo, useCallback } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import {
  OrganizationDto,
  OrganizationStatus,
  OrganizationStatusValues,
} from "@/types/organization";
import { organizationRepository } from "@/lib/data-repo/organization";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { Button } from "@/components/ui/button";
import { Building, Search as SearchIcon } from "lucide-react";
import { getSuperAdminOrganizationColumns } from "./columns";
import { AdminOrganizationCard } from "./organization-card";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";

const statusOptions = OrganizationStatusValues.map((s) => ({
  value: s,
  label: s.replace(/_/g, " "),
}));

interface OrganizationsClientProps {
  initialOrganizations: OrganizationDto[];
}

export function OrganizationsClient({
  initialOrganizations,
}: OrganizationsClientProps) {
  const [organizations, setOrganizations] =
    useState<OrganizationDto[]>(initialOrganizations);
  const [isLoading, setIsLoading] = useState(false);
  const [dialogState, setDialogState] = useState<{
    open: boolean;
    items: OrganizationDto[];
    newStatus?: OrganizationStatus;
    type?: "status" | "delete";
  }>({ open: false, items: [] });

  const refreshData = useCallback(async () => {
    setIsLoading(true);
    try {
      const data = await organizationRepository.getAllOrganizations();
      setOrganizations(data);
    } catch (error) {
      toast.error("Failed to refresh organization data.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  const handleStatusChangeConfirmation = (
    org: OrganizationDto,
    newStatus: OrganizationStatus
  ) => {
    setDialogState({ open: true, items: [org], newStatus, type: "status" });
  };

  const handleDeleteConfirmation = (orgs: OrganizationDto[]) => {
    if (orgs.length === 0) return;
    setDialogState({ open: true, items: orgs, type: "delete" });
  };

  const executeAction = async () => {
    const { items, newStatus, type } = dialogState;
    if (items.length === 0) return;

    const actionPromise: Promise<void> =
      type === "status" && newStatus
        ? organizationRepository
            .updateOrganizationStatus(items[0].organization_id!, {
              status: newStatus,
            })
            .then(() => {})
        : Promise.all(
            items.map((org) =>
              organizationRepository.deleteOrganization(org.organization_id!)
            )
          ).then(() => {});

    toast.promise(actionPromise, {
      loading: `Processing action...`,
      success: () => {
        refreshData();
        setDialogState({ open: false, items: [] });
        return `Action completed successfully.`;
      },
      error: (err) => `An error occurred: ${err.message}`,
    });
  };

  const columns = useMemo<ColumnDef<OrganizationDto>[]>(
    () =>
      getSuperAdminOrganizationColumns({
        onStatusChangeAction: handleStatusChangeConfirmation,
        onDeleteAction: (org) => handleDeleteConfirmation([org]),
      }),
    []
  );

  return (
    <>
      <ResourceDataTable
        data={organizations}
        columns={columns}
        isLoading={isLoading}
        error={null}
        onRefreshAction={refreshData}
        searchPlaceholder="Search by name, email..."
        onDeleteItemsAction={handleDeleteConfirmation}
        viewModeStorageKey="sa-orgs-view-mode"
        exportFileName="organizations_export.csv"
        pageHeader={
          <PageHeader
            title="Organization Management"
            description="Monitor, approve, and manage all organizations on the platform."
          />
        }
        filterControls={(table) => (
          <DataTableFacetedFilter
            column={table.getColumn("status")}
            title="Status"
            options={statusOptions}
          />
        )}
        renderGridItemAction={(org) => (
          <AdminOrganizationCard
            organization={org}
            onStatusChangeAction={handleStatusChangeConfirmation}
            onDeleteAction={() => handleDeleteConfirmation([org])}
          />
        )}
        emptyState={
          <FeedbackCard
            icon={Building}
            title="No Organizations Found"
            description="There are currently no organizations registered on the platform."
          />
        }
        filteredEmptyState={
          <FeedbackCard
            icon={SearchIcon}
            title="No Organizations Found"
            description="Your search or filter criteria did not match any organizations."
          />
        }
      />

      <AlertDialog
        open={dialogState.open}
        onOpenChange={(open) => setDialogState((prev) => ({ ...prev, open }))}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
            <AlertDialogDescription>
              {dialogState.type === "delete"
                ? `This will permanently delete ${dialogState.items.length} organization(s). This action cannot be undone.`
                : `This will change the status of "${dialogState.items[0]?.long_name}" to ${dialogState.newStatus}.`}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={executeAction}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
```

### organizations/page.tsx

```
import { Metadata } from "next";
import { organizationRepository } from "@/lib/data-repo/organization";
import { OrganizationsClient } from "./organizations-client";

export const metadata: Metadata = {
  title: "Organization Management",
  description:
    "Approve, monitor, and manage all organizations on the platform.",
};

export default async function SuperAdminOrganizationsPage() {
  const organizations = await organizationRepository.getAllOrganizations();
  return <OrganizationsClient initialOrganizations={organizations} />;
}
```

### platforms/page.tsx

```
import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';

export default function SuperAdminPlatformsPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Platform Management</h1>
       <Tabs defaultValue="stats" className="space-y-4">
            <TabsList>
                <TabsTrigger value="stats">Stats & Analytics</TabsTrigger>
                <TabsTrigger value="activities">Activities</TabsTrigger>
                <TabsTrigger value="subscribers">Subscribers</TabsTrigger>
                {/* Add more tabs if needed, e.g., Configuration */}
            </TabsList>
             <TabsContent value="stats">
                <Card>
                    <CardHeader><CardTitle>Platform Statistics</CardTitle></CardHeader>
                    <CardContent>
                        <p>Detailed statistics for each managed platform.</p>
                        {/* TODO: Implement platform stats display (table/charts) */}
                    </CardContent>
                </Card>
            </TabsContent>
            <TabsContent value="activities">
                <Card>
                    <CardHeader><CardTitle>Platform Activities</CardTitle></CardHeader>
                    <CardContent>
                        <p>Logs of significant activities occurring on the platforms.</p>
                        {/* TODO: Implement platform activity log viewer */}
                    </CardContent>
                </Card>
            </TabsContent>
             <TabsContent value="subscribers">
                <Card>
                    <CardHeader><CardTitle>Platform Subscribers</CardTitle></CardHeader>
                    <CardContent>
                        <p>Overview of subscribers (BAs, Customers) per platform.</p>
                        {/* TODO: Implement subscriber overview */}
                    </CardContent>
                </Card>
            </TabsContent>
       </Tabs>
    </div>
  );
}```

### profile/page.tsx

```
// import React from 'react';
import { redirect } from 'next/navigation';

export default function SuperAdminProfilePage() {
  // Adjust the target tab if needed (e.g., using query params if implemented)
  redirect('/super-admin/settings');

  // Or, if you want a dedicated page, keep simple content:
  /*
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Admin Profile</h1>
      <p>This page displays admin profile details. Consider consolidating with Settings.</p>
      {}
    </div>
  );
  */
}
// END OF FILE: app/(dashboard)/super-admin/profile/page.tsx```

### roles/page.tsx

```
import { Metadata } from "next";
import { authRepository } from "@/lib/data-repo/auth";
import { RoleAssignmentClient } from "./roles-client";

export const metadata: Metadata = {
  title: "Roles & Permissions",
  description: "Configure Role-Based Access Control (RBAC) for the platform.",
};

export default async function SuperAdminRolesPage() {
  const [roles, permissions] = await Promise.all([
    authRepository.getRoles(),
    authRepository.getAllPermissions(),
  ]);

  return (
    <RoleAssignmentClient initialRoles={roles} allPermissions={permissions} />
  );
}
```

### roles/roles-client.tsx

```
"use client";

import React, { useState, useEffect, useMemo } from "react";
import { toast } from "sonner";
import { RoleDto, PermissionDto } from "@/types/auth";
import { authRepository } from "@/lib/data-repo/auth";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { PageHeader } from "@/components/ui/page-header";
import { Separator } from "@/components/ui/separator";
import { Loader2, Save } from "lucide-react";
import { cn } from "@/lib/utils";

interface RoleAssignmentClientProps {
  initialRoles: RoleDto[];
  allPermissions: PermissionDto[];
}

export function RoleAssignmentClient({ initialRoles, allPermissions }: RoleAssignmentClientProps) {
  const [roles, setRoles] = useState<RoleDto[]>(initialRoles);
  const [selectedRole, setSelectedRole] = useState<RoleDto | null>(null);
  const [rolePermissions, setRolePermissions] = useState<Set<string>>(new Set());
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (roles.length > 0 && !selectedRole) {
      setSelectedRole(roles[0]);
    }
  }, [roles, selectedRole]);

  useEffect(() => {
    if (selectedRole?.id) {
      setIsLoading(true);
      // In a real app, you'd fetch permissions for the selected role.
      // Here, we'll just simulate it.
      // For mock, we can assume some roles have some permissions.
      const mockPerms = new Set<string>();
      if (selectedRole.name === 'ADMIN_ROLE') {
        allPermissions.slice(0, 5).forEach(p => mockPerms.add(p.id!));
      }
      setRolePermissions(mockPerms);
      setIsLoading(false);
    }
  }, [selectedRole, allPermissions]);

  const handlePermissionToggle = (permissionId: string, checked: boolean) => {
    setRolePermissions(prev => {
      const newSet = new Set(prev);
      if (checked) {
        newSet.add(permissionId);
      } else {
        newSet.delete(permissionId);
      }
      return newSet;
    });
  };

  const handleSaveChanges = async () => {
    if (!selectedRole?.id) return;
    setIsLoading(true);
    try {
      // This logic would need to be more sophisticated in a real app,
      // calculating which permissions to add and which to remove.
      await authRepository.assignPermissionsToRole(selectedRole.id, Array.from(rolePermissions));
      toast.success(`Permissions for role "${selectedRole.name}" updated.`);
    } catch (error: any) {
      toast.error(`Failed to save permissions: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <PageHeader
        title="Role & Permission Management"
        description="Assign permissions to roles to control user access across the platform."
        action={<Button onClick={handleSaveChanges} disabled={isLoading}>{isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />} Save Changes</Button>}
      />
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="md:col-span-1">
          <CardHeader><CardTitle>Roles</CardTitle></CardHeader>
          <CardContent>
            <ScrollArea className="h-[60vh]">
              <div className="space-y-1 pr-4">
                {roles.map(role => (
                  <Button
                    key={role.id}
                    variant="ghost"
                    className={cn("w-full justify-start", selectedRole?.id === role.id && "bg-accent text-accent-foreground")}
                    onClick={() => setSelectedRole(role)}
                  >
                    {role.name}
                  </Button>
                ))}
              </div>
            </ScrollArea>
          </CardContent>
        </Card>
        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle>Permissions for: {selectedRole?.name || '...'}</CardTitle>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <div className="flex justify-center items-center h-[60vh]"><Loader2 className="h-8 w-8 animate-spin" /></div>
            ) : (
              <ScrollArea className="h-[60vh]">
                <div className="space-y-4 pr-4">
                  {allPermissions.map(permission => (
                    <div key={permission.id} className="flex items-center space-x-3 rounded-md border p-3">
                      <Checkbox
                        id={`perm-${permission.id}`}
                        checked={rolePermissions.has(permission.id!)}
                        onCheckedChange={(checked) => handlePermissionToggle(permission.id!, !!checked)}
                      />
                      <Label htmlFor={`perm-${permission.id}`} className="font-medium leading-none cursor-pointer">
                        {permission.name}
                        <p className="text-xs text-muted-foreground font-normal">{permission.description}</p>
                      </Label>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}```

### suppliers/columns.tsx

```
"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ProviderDto } from "@/types/organization";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

export const getSuperAdminSupplierColumns = (): ColumnDef<ProviderDto>[] => [
  {
    accessorKey: "first_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Supplier" />
    ),
    cell: ({ row }) => {
      const supplier = row.original;
      const name = `${supplier.first_name || ""} ${
        supplier.last_name || ""
      }`.trim();
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-9 w-9">
            <AvatarImage src={supplier.logo} />
            <AvatarFallback>{name.charAt(0)}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{name}</div>
            <div className="text-xs text-muted-foreground">
              {supplier.product_service_type}
            </div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "organization_id",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Organization" />
    ),
    filterFn: (row, id, value) => value.includes(row.getValue(id)),
  },
  {
    accessorKey: "contact_info",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Contact" />
    ),
  },
];
```

### suppliers/page.tsx

```
import { Metadata } from "next";
import { organizationRepository } from "@/lib/data-repo/organization";
import { SuppliersClient } from "./suppliers-client";

export const metadata: Metadata = {
  title: "Global Supplier Overview",
  description: "View and filter all suppliers across all organizations.",
};

export default async function SuperAdminSuppliersPage() {
  const [suppliers, organizations] = await Promise.all([
    organizationRepository.getAllOrganizations().then(orgs => 
      Promise.all(orgs.map(org => organizationRepository.getOrgSuppliers(org.organization_id!)))
    ).then(arrays => arrays.flat()),
    organizationRepository.getAllOrganizations(),
  ]);

  return <SuppliersClient allSuppliers={suppliers} allOrganizations={organizations} />;
}```

### suppliers/suppliers-client.tsx

```
"use client";

import React, { useMemo } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { ProviderDto, OrganizationDto } from "@/types/organization";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { getSuperAdminSupplierColumns } from "./columns";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { Truck, Search } from "lucide-react";

interface SuppliersClientProps {
  allSuppliers: ProviderDto[];
  allOrganizations: OrganizationDto[];
}

export function SuppliersClient({
  allSuppliers,
  allOrganizations,
}: SuppliersClientProps) {
  const orgOptions = useMemo(
    () =>
      allOrganizations.map((org) => ({
        label: org.long_name || org.organization_id!,
        value: org.organization_id!,
      })),
    [allOrganizations]
  );

  const columns = useMemo<ColumnDef<ProviderDto>[]>(
    () => getSuperAdminSupplierColumns(),
    []
  );

  return (
    <ResourceDataTable
      data={allSuppliers}
      columns={columns}
      isLoading={false}
      error={null}
      onRefreshAction={() => window.location.reload()}
      searchPlaceholder="Search by supplier name..."
      onDeleteItemsAction={() => {}}
      viewModeStorageKey="sa-suppliers-view-mode"
      exportFileName="all_suppliers.csv"
      pageHeader={
        <PageHeader
          title="Global Supplier Overview"
          description="View and filter all suppliers across the platform."
        />
      }
      filterControls={(table) => (
        <DataTableFacetedFilter
          column={table.getColumn("organization_id")}
          title="Organization"
          options={orgOptions}
        />
      )}
      renderGridItemAction={(supplier) => (
        <div className="p-4 border rounded-md">{supplier.first_name}</div>
      )}
      emptyState={
        <FeedbackCard
          icon={Truck}
          title="No Suppliers Found"
          description="There are no suppliers registered on the platform yet."
        />
      }
      filteredEmptyState={
        <FeedbackCard
          icon={Search}
          title="No Suppliers Found"
          description="Your filter criteria did not match any suppliers."
        />
      }
    />
  );
}
```

### users/columns.tsx

```
"use client";

import { ColumnDef } from "@tanstack/react-table";
import { UserDto } from "@/types/auth";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  CheckCircle,
  XCircle,
  ShieldCheck,
  Phone,
  Mail,
} from "lucide-react";
import { DataTableColumnHeader } from "@/components/ui/data-table-column-header";

interface UserRowActionsProps {
  user: UserDto;
  onStatusToggleAction: (user: UserDto) => void;
  onVerifyAction: (user: UserDto, type: "email" | "phone") => void;
}

const RowActions: React.FC<UserRowActionsProps> = ({
  user,
  onStatusToggleAction,
  onVerifyAction,
}) => (
  <DropdownMenu>
    <DropdownMenuTrigger asChild>
      <Button variant="ghost" className="h-8 w-8 p-0">
        <MoreHorizontal className="h-4 w-4" />
      </Button>
    </DropdownMenuTrigger>
    <DropdownMenuContent align="end">
      <DropdownMenuItem onClick={() => onStatusToggleAction(user)}>
        {user.is_enabled ? (
          <XCircle className="mr-2 h-4 w-4 text-destructive" />
        ) : (
          <CheckCircle className="mr-2 h-4 w-4 text-green-500" />
        )}
        {user.is_enabled ? "Disable" : "Enable"}
      </DropdownMenuItem>
      {!user.email_verified && (
        <DropdownMenuItem onClick={() => onVerifyAction(user, "email")}>
          <Mail className="mr-2 h-4 w-4" /> Verify Email
        </DropdownMenuItem>
      )}
      {!user.phone_number_verified && (
        <DropdownMenuItem onClick={() => onVerifyAction(user, "phone")}>
          <Phone className="mr-2 h-4 w-4" /> Verify Phone
        </DropdownMenuItem>
      )}
    </DropdownMenuContent>
  </DropdownMenu>
);

export const getUserColumns = (
  actions: Omit<UserRowActionsProps, "user">
): ColumnDef<UserDto>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={table.getIsAllPageRowsSelected()}
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "first_name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="User" />
    ),
    cell: ({ row }) => {
      const user = row.original;
      const name = `${user.first_name || ""} ${user.last_name || ""}`.trim();
      return (
        <div className="flex items-center gap-3">
          <Avatar className="h-9 w-9">
            <AvatarFallback>{name.charAt(0)}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{name}</div>
            <div className="text-xs text-muted-foreground">
              @{user.username}
            </div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "email",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Email" />
    ),
  },
  {
    accessorKey: "is_enabled",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Status" />
    ),
    cell: ({ row }) => {
      const isEnabled = row.getValue("is_enabled");
      return (
        <Badge
          variant={isEnabled ? "default" : "destructive"}
          className={isEnabled ? "bg-green-100 text-green-800" : ""}
        >
          {isEnabled ? "Enabled" : "Disabled"}
        </Badge>
      );
    },
    filterFn: (row, id, value) => value.includes(String(row.getValue(id))),
  },
  {
    accessorKey: "email_verified",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Verification" />
    ),
    cell: ({ row }) => (
      <div className="flex items-center gap-2">
        {row.original.email_verified && (
          <ShieldCheck className="h-4 w-4 text-sky-500" />
        )}
        {row.original.phone_number_verified && (
          <Phone className="h-4 w-4 text-sky-500" />
        )}
      </div>
    ),
    filterFn: (row, id, value) => value.includes(String(row.getValue(id))),
  },
  {
    id: "actions",
    cell: ({ row }) => <RowActions user={row.original} {...actions} />,
  },
];
```

### users/page.tsx

```
import { Metadata } from "next";
import { authRepository } from "@/lib/data-repo/auth";
import { UsersClient } from "./users-client";

export const metadata: Metadata = {
  title: "User Management",
  description: "View, manage, and moderate all user accounts on the platform.",
};

export default async function SuperAdminUsersPage() {
  const users = await authRepository.getAllUsers();
  return <UsersClient initialUsers={users} />;
}
```

### users/user-card.tsx

```
"use client";

import { UserDto } from "@/types/auth";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  MoreHorizontal,
  Edit3,
  Trash2,
  CheckCircle,
  XCircle,
  ShieldCheck,
  Phone,
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface UserCardProps {
  user: UserDto;
  onStatusToggleAction: (user: UserDto) => void;
  onVerifyAction: (user: UserDto, type: "email" | "phone") => void;
}

export function UserCard({
  user,
  onStatusToggleAction,
  onVerifyAction,
}: UserCardProps) {
  const name = `${user.first_name || ""} ${user.last_name || ""}`.trim();
  return (
    <Card className="flex flex-col h-full">
      <CardHeader>
        <div className="flex justify-between items-start">
          <div className="flex items-center gap-3">
            <Avatar className="h-12 w-12">
              <AvatarFallback>{name.charAt(0)}</AvatarFallback>
            </Avatar>
            <div>
              <CardTitle className="text-base line-clamp-1">{name}</CardTitle>
              <CardDescription className="text-xs line-clamp-1">
                @{user.username}
              </CardDescription>
            </div>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" className="h-8 w-8">
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onStatusToggleAction(user)}>
                {user.is_enabled ? "Disable" : "Enable"}
              </DropdownMenuItem>
              {!user.email_verified && (
                <DropdownMenuItem onClick={() => onVerifyAction(user, "email")}>
                  Verify Email
                </DropdownMenuItem>
              )}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent className="flex-grow">
        <p className="text-sm text-muted-foreground">{user.email}</p>
      </CardContent>
      <CardFooter className="flex justify-between items-center text-xs">
        <Badge
          variant={user.is_enabled ? "default" : "destructive"}
          className={user.is_enabled ? "bg-green-100 text-green-800" : ""}
        >
          {user.is_enabled ? "Enabled" : "Disabled"}
        </Badge>
        <div className="flex items-center gap-2 text-muted-foreground">
          {user.email_verified && (
            <ShieldCheck
              className="h-4 w-4 text-sky-500"
              // title="Email Verified"
            />
          )}
          {user.phone_number_verified && (
            <Phone className="h-4 w-4 text-sky-500" />
          )}
        </div>
      </CardFooter>
    </Card>
  );
}
```

### users/users-client.tsx

```
"use client";

import React, { useState, useMemo, useCallback } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { toast } from "sonner";
import { UserDto } from "@/types/auth";
import { authRepository } from "@/lib/data-repo/auth";
import { ResourceDataTable } from "@/components/resource-management/resource-data-table";
import { PageHeader } from "@/components/ui/page-header";
import { Button } from "@/components/ui/button";
import { Users, Search as SearchIcon } from "lucide-react";
import { getUserColumns } from "./columns";
import { UserCard } from "./user-card";
import { FeedbackCard } from "@/components/ui/feedback-card";
import { DataTableFacetedFilter } from "@/components/ui/data-table-faceted-filter";

const statusOptions = [
  { value: "true", label: "Enabled" },
  { value: "false", label: "Disabled" },
];

interface UsersClientProps {
  initialUsers: UserDto[];
}

export function UsersClient({ initialUsers }: UsersClientProps) {
  const [users, setUsers] = useState<UserDto[]>(initialUsers);
  const [isLoading, setIsLoading] = useState(false);

  const refreshData = useCallback(async () => {
    setIsLoading(true);
    try {
      const data = await authRepository.getAllUsers();
      setUsers(data);
    } catch (error) {
      toast.error("Failed to refresh user data.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  const handleStatusToggle = (user: UserDto) => {
    toast.info(`Toggling status for ${user.username}... (Not Implemented in backend)`);
    // In a real app: call an API to update user status, then refreshData()
  };

  const handleVerify = (user: UserDto, type: "email" | "phone") => {
    toast.info(`Verifying ${type} for ${user.username}... (Not Implemented in backend)`);
    // In a real app: call an API to verify, then refreshData()
  };

  const columns = useMemo<ColumnDef<UserDto>[]>(
    () =>
      getUserColumns({
        onStatusToggleAction: handleStatusToggle,
        onVerifyAction: handleVerify,
      }),
    []
  );

  return (
    <ResourceDataTable
      data={users}
      columns={columns}
      isLoading={isLoading}
      error={null}
      onRefreshAction={refreshData}
      searchPlaceholder="Search by name, username, email..."
      onDeleteItemsAction={(items) =>
        toast.error(`Deletion of ${items.length} users is not implemented in backend.`)
      }
      viewModeStorageKey="sa-users-view-mode"
      exportFileName="users_export.csv"
      pageHeader={
        <PageHeader
          title="User Management"
          description="View, manage, and moderate all user accounts."
        />
      }
      filterControls={(table) => (
        <DataTableFacetedFilter
          column={table.getColumn("is_enabled")}
          title="Status"
          options={statusOptions}
        />
      )}
      renderGridItemAction={(user) => (
        <UserCard
          user={user}
          onStatusToggleAction={handleStatusToggle}
          onVerifyAction={handleVerify}
        />
      )}
      emptyState={
        <FeedbackCard
          icon={Users}
          title="No Users Found"
          description="There are no users registered on the platform yet."
        />
      }
      filteredEmptyState={
        <FeedbackCard
          icon={SearchIcon}
          title="No Users Found"
          description="Your search or filter criteria did not match any users."
        />
      }
    />
  );
}
```

### webhooks/page.tsx

```
import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

export default function SuperAdminWebhooksPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Webhooks Configuration</h1>
      <Card>
        <CardHeader>
          <CardTitle>Platform Webhooks</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Configure global or platform-wide webhook settings and monitor deliveries.</p>
          {/* TODO: Implement Super Admin webhook configuration interface and logs */}
        </CardContent>
      </Card>
    </div>
  );
}```

## Summary
- **Files processed:** 35
- **Errors encountered:** 0
- **Total ignore patterns:** 39
- **Total accept patterns:** 0

---
*This context file is optimized for AI code generation and understanding.*
